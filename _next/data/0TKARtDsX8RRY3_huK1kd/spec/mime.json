{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina MIME Library\n\n_Owners_: @shafreenAnfar @TharmiganK @chamil321  \n_Reviewers_: \n_Created_: 2022/06/07  \n_Updated_: 2022/06/17   \n_Edition_: Swan Lake\n\n## Introduction\nThis is the specification for the MIME standard library of [Ballerina language](https://ballerina.io/), which provides \na set of APIs to work with messages, which follow the Multipurpose Internet Mail Extensions (MIME) specification as \nspecified in the [RFC 2045](https://datatracker.ietf.org/doc/html/rfc2045) standard.  \n\n```\nEntity refers to the header fields and the content of a message or a part of the body in a multipart entity. \n```\n\nThe released versions of the specification can be found under the relevant GitHub tag. \n\nIf you have any feedback or suggestions about the library, start a discussion via a \n[GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the\n[Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and \nimplementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the \nspecification is stored under `/docs/proposals`. Proposals under discussion can be found with the label \n`type/proposal` in GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation \nfrom the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Components](#2-components)\n    * 2.1. [Entity](#21-entity)\n    * 2.2. [MediaType](#22-mediatype)\n    * 2.3. [ContentDisposition](#23-contentdisposition)\n3. [Supported media types](#3-supported-multipart-types)\n4. [Modify and retrieve the data in an entity](#4-modify-and-retrieve-the-data-in-an-entity)\n5. [Handle large files](#5-handle-large-files)\n6. [base64 Encode/Decode functions](#6-base64-encodedecode-functions)\n7. [Error handling ](#7-error-handling)\n\n## 1. Overview\nBallerina language provides support for writing network-oriented programs. The standard libraries such as\nHTTP, Email uses the messages or entities to transfer data between endpoints. MIME is the standard way to organize the\nmessage according to the universal specifications.\n\nThe MIME standard library is designed to work independently as a support package to handle the entity. It includes \nhigh-level abstractions such as `mime:Entity`, `mime:ContentDisposition`, and `mime:MediaType` which allow users \nto handle the exchanging message.\n\n## 2. Components\n### 2.1. Entity\nThe MIME Entity represents the headers and body of a message as defined in \n[RFC 2045](https://datatracker.ietf.org/doc/html/rfc2045#section-2.4). This can be used to represent both the entity \nof a top level message, and an entity(body part) inside of a multipart entity.\n```ballerina\nmime:Entity entity = new;\n```\n\n#### 2.1.1 Usage in HTTP package\nBoth http:Request and http:Response has setEntity and getEntity methods to work with mime:Entity.\n```ballerina\n    http:Request request = new;\n    mime:Entity|ClientError value = request.getEntity();\n    \n    mime:Entity entity = new;\n    request.setEntity(entity);\n```\n\n - In the current implementation, the entity body is set through, setJsonPayload(json jsonContent), \nsetXmlPayload(xml xmlContent) etc. methods where the input is always read from the memory.\n - If a user call getEntity() on a newly created request or a response that will result in an empty entity.\n\n#### 2.1.1 Usage in Email package\nWhen sending emails with SMTP, one of the options to specify the email attachments in the email:Message is an \narray of the mime:Entity type \n\n```ballerina\nmime:Entity imageAttachment = new;\nmime:ContentDisposition disposition = new;\ndisposition.fileName = \"profilePic.jpg\";\ndisposition.disposition = \"attachment\";\ndisposition.name = \"profilePic\";\nimageAttachment.setContentDisposition(disposition);\nimageAttachment.setContentId(\"ImageAttachment\");\nimageAttachment.setFileAsEntityBody(\"path/to/profilePic.jpg\", mime:IMAGE_JPEG);\n\nemail:Message email = {\n    // Other fields\n    attachments: imageAttachment\n};\n```\n\n### 2.2. MediaType\nThe Media type describes the nature of the data in the body of a MIME entity as defined in \n[RFC 2046](https://www.ietf.org/rfc/rfc2046.txt).\n\nAs per the Requirement in spec :  [[RFC 2616](https://datatracker.ietf.org/doc/html/rfc2616#section-14.17), \n[RFC 2045](https://datatracker.ietf.org/doc/html/rfc2045#section-5)]\n - RFC 2616  media-type     = type \"/\" subtype *( \";\" parameter )\n - RFC 2045  content := \"Content-Type\" \":\" type \"/\" subtype \n   *(\";\" parameter)\n   ; Matching of media type and subtype \n   ; is ALWAYS case-insensitive.]\n   \n```ballerina\nmime:MediaType mediaType = new;\n```\n\n### 2.3. ContentDisposition\n\nThe ContentDisposition represents values in Content-Disposition header as defined in \n[RFC 2183](https://datatracker.ietf.org/doc/html/rfc2183).\n```ballerina\nmime:ContentDisposition disposition = new;\n```\n\n## 3. Supported multipart types\nThe module supports multipart/form-data, multipart/mixed, multipart/alternative, multipart/related, and \nmultipart/parallel as multipart content types.\n\n```ballerina\nresource function get encode_out_response(http:Caller caller, http:Request request) returns error? {\n\n    //Create a body part with json content.\n    mime:Entity bodyPart1 = new;\n    bodyPart1.setJson({\"bodyPart\":\"jsonPart\"});\n\n    //Create another body part with a xml file.\n    mime:Entity bodyPart2 = new;\n    bodyPart2.setFileAsEntityBody(\"tests/datafiles/file.xml\", mime:TEXT_XML);\n\n    //Create a text body part.\n    mime:Entity bodyPart3 = new;\n    bodyPart3.setText(\"Ballerina text body part\");\n\n    //Create another body part with a text file.\n    mime:Entity bodyPart4 = new;\n    bodyPart4.setFileAsEntityBody(\"tests/datafiles/test.tmp\");\n\n    //Create an array to hold all the body parts.\n    mime:Entity[] bodyParts = [bodyPart1, bodyPart2, bodyPart3, bodyPart4];\n\n    //Set the body parts to outbound response.\n    http:Response outResponse = new;\n    string contentType = mime:MULTIPART_MIXED + \"; boundary=e3a0b9ad7b4e7cdb\";\n    outResponse.setBodyParts(bodyParts, contentType);\n\n    check caller->respond(outResponse);\n}\n```\n\n## 4. Modify and retrieve the data in an entity\nThis module provides functions to set and get an entity body from different kinds of message types such as \nXML, text, JSON, byte[], and body parts. \n\n```ballerina\nmime:Entity entity = new;\n\n// handling Json\nentity.setJson({ \"Hello\": \"World\" });\njson|mime:ParserError result = entity.getJson();\n\n// handling bodypart\nentity.setBodyParts(bodyParts, contentType); \n```\n\nHeaders can be modified through functions such as addHeader(), \nsetHeader(), removeHeader(), etc.\n\n```ballerina\nstring[]|mime:HeaderNotFoundError headerNames = entity.getHeaders(mime:CONTENT_TYPE);\nentity.setHeader(\"custom-header\", \"header-value\");\n```\n\n## 5. Handle large files\nThe entity object method setFileAsEntityBody() can be used to set large files as the entity body and is able to \nread it as a stream using the getByteStream() function.\n\n```ballerina\nmime:Entity entity = new;\nentity.setFileAsEntityBody(\"<file path>\");\n```\n - Sets the entity body with a given file. This method overrides any existing content-type headers with the default \ncontent-type, which is application/octet-stream. This default value can be overridden by passing the content type \nas an optional parameter.\n\n```ballerina\nstream<byte[], io:Error?>|mime:ParserError str = entity.getByteStream();\n```\n - Gets the entity body as a stream of byte[] from a given entity.\n\n## 6. base64 Encode/Decode functions\nDecodes a given input with MIME specific Base64 encoding scheme.\n\n```ballerina\nstring content = \"ballerina\";\nbyte[] bytes = content.toBytes();\n// Decodes a given input with MIME specific Base64 encoding scheme.\nbyte[] decodedBytes = base64Decode(bytes);\n\n// Decodes a given byte[] using the Base64 encoding scheme.\nbyte[] res = base64DecodeBlob(bytes);\n\n// Encodes a given input with MIME specific Base64 encoding scheme.\nbyte[] res = base64Encode(bytes);\n\n// Encodes a given byte[] using the Base64 encoding scheme.\nbyte[] res = base64EncodeBlob(bytes);\n```\n\n## 7. Error handling \nThe errors mainly focuses on the Entity body and the Entity header\n\n- Error - Defines the common error type for the module.\n- GenericMimeError - Represents a GenericMimeError with the message and the cause.\n- HeaderNotFoundError - Represents a HeaderNotFoundError error with the message and the cause.\n- HeaderUnavailableError - Represents a HeaderUnavailableError with the message and the cause.\n- IdleTimeoutTriggeredError - Represents an IdleTimeoutTriggeredError with the message and the cause.\n- InvalidContentLengthError - Represents a InvalidContentLengthError error with the message and the cause.\n- InvalidContentTypeError - Represents an InvalidContentTypeError with the message and the cause.\n- InvalidHeaderOperationError - Represents a InvalidHeaderOperationError error with the message and the cause.\n- InvalidHeaderParamError - Represents a InvalidHeaderParamError error with the message and the cause.\n- InvalidHeaderValueError - Represents a InvalidHeaderValueError error with the message and the cause.\n- NoContentError - Represents a NoContentError with the message and the cause.\n- ParserError - Represents a ParserError with the message and the cause.\n- SerializationError - Represents a SerializationError error with the message and the cause.\n- SetHeaderError - Represents a SetHeaderError with the message and the cause.\n- DecodeError - Represents a DecodeError with the message and the cause.\n- EncodeError - Represents an EncodeError with the message and the cause.\n","codeSnippets":"[[1793863076,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity entity </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span></code></pre>\"],[-520018179,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Request request </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity</span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">ClientError value </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> request.</span><span style=\\\"color: #8250DF\\\">getEntity</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity entity </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">request.</span><span style=\\\"color: #8250DF\\\">setEntity</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">entity</span><span style=\\\"color: #24292F\\\">);</span></span></code></pre>\"],[1683455954,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity imageAttachment </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ContentDisposition disposition </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">disposition.fileName </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;profilePic.jpg&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">disposition.disposition </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;attachment&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">disposition.name </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;profilePic&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">imageAttachment.</span><span style=\\\"color: #8250DF\\\">setContentDisposition</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">disposition</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">imageAttachment.</span><span style=\\\"color: #8250DF\\\">setContentId</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;ImageAttachment&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">imageAttachment.</span><span style=\\\"color: #8250DF\\\">setFileAsEntityBody</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;path/to/profilePic.jpg&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">IMAGE_JPEG);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">email</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Message email </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Other fields</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    attachments</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> imageAttachment</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">};</span></span></code></pre>\"],[898851720,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">MediaType mediaType </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span></code></pre>\"],[552811555,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ContentDisposition disposition </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span></code></pre>\"],[1136820680,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">encode_out_response</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Caller caller, </span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Request request) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error?</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">//Create a body part with json content.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity bodyPart1 </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    bodyPart1.</span><span style=\\\"color: #8250DF\\\">setJson</span><span style=\\\"color: #24292F\\\">({</span><span style=\\\"color: #0A3069\\\">&quot;bodyPart&quot;</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #0A3069\\\">&quot;jsonPart&quot;</span><span style=\\\"color: #24292F\\\">});</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">//Create another body part with a xml file.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity bodyPart2 </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    bodyPart2.</span><span style=\\\"color: #8250DF\\\">setFileAsEntityBody</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;tests/datafiles/file.xml&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">TEXT_XML);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">//Create a text body part.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity bodyPart3 </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    bodyPart3.</span><span style=\\\"color: #8250DF\\\">setText</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Ballerina text body part&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">//Create another body part with a text file.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity bodyPart4 </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    bodyPart4.</span><span style=\\\"color: #8250DF\\\">setFileAsEntityBody</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;tests/datafiles/test.tmp&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">//Create an array to hold all the body parts.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity[] bodyParts </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> [bodyPart1, bodyPart2, bodyPart3, bodyPart4];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">//Set the body parts to outbound response.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response outResponse </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> contentType </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">MULTIPART_MIXED + </span><span style=\\\"color: #0A3069\\\">&quot;; boundary=e3a0b9ad7b4e7cdb&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    outResponse.</span><span style=\\\"color: #8250DF\\\">setBodyParts</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">bodyParts</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">contentType</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> caller</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">respond</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">outResponse</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-607283474,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity entity </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// handling Json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">entity.</span><span style=\\\"color: #8250DF\\\">setJson</span><span style=\\\"color: #24292F\\\">({ </span><span style=\\\"color: #0A3069\\\">&quot;Hello&quot;</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;World&quot;</span><span style=\\\"color: #24292F\\\"> });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #CF222E\\\">|mime:</span><span style=\\\"color: #24292F\\\">ParserError result </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> entity.</span><span style=\\\"color: #8250DF\\\">getJson</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// handling bodypart</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">entity.</span><span style=\\\"color: #8250DF\\\">setBodyParts</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">bodyParts</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">contentType</span><span style=\\\"color: #24292F\\\">);</span></span></code></pre>\"],[-1036116444,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\">[]</span><span style=\\\"color: #CF222E\\\">|mime:</span><span style=\\\"color: #24292F\\\">HeaderNotFoundError headerNames </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> entity.</span><span style=\\\"color: #8250DF\\\">getHeaders</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">CONTENT_TYPE);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">entity.</span><span style=\\\"color: #8250DF\\\">setHeader</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;custom-header&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">&quot;header-value&quot;</span><span style=\\\"color: #24292F\\\">);</span></span></code></pre>\"],[-87339187,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">mime</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Entity entity </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">entity.</span><span style=\\\"color: #8250DF\\\">setFileAsEntityBody</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;&lt;file path&gt;&quot;</span><span style=\\\"color: #24292F\\\">);</span></span></code></pre>\"],[-1124919609,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">stream&lt;</span><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[], io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Error?</span><span style=\\\"color: #CF222E\\\">&gt;|mime:</span><span style=\\\"color: #24292F\\\">ParserError str </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> entity.</span><span style=\\\"color: #8250DF\\\">getByteStream</span><span style=\\\"color: #24292F\\\">();</span></span></code></pre>\"],[-659966542,\"<pre class=\\\"shiki\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> content </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;ballerina&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] bytes </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> content.</span><span style=\\\"color: #8250DF\\\">toBytes</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Decodes a given input with MIME specific Base64 encoding scheme.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] decodedBytes </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">base64Decode</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">bytes</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Decodes a given byte[] using the Base64 encoding scheme.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] res </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">base64DecodeBlob</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">bytes</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Encodes a given input with MIME specific Base64 encoding scheme.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] res </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">base64Encode</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">bytes</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Encodes a given byte[] using the Base64 encoding scheme.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] res </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">base64EncodeBlob</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">bytes</span><span style=\\\"color: #24292F\\\">);</span></span></code></pre>\"]]"},"__N_SSG":true}