{"pageProps":{"frontmatter":{"title":"Observe metrics","description":"See how Ballerina supports observing metrics of Ballerina programs.","keywords":"ballerina, observability, metrics, prometheus, grafana","permalink":"/learn/observe-metrics/","active":"observe-metrics","intro":"Metrics help to monitor the runtime behavior of a service. Therefore, metrics are a vital part of monitoring Ballerina services."},"content":"\nHowever, metrics are not the same as analytics. For example, it should not be used to perform\nper-request billing or similar use cases. Metrics are used to measure what a Ballerina service does at runtime to make\nbetter decisions using the numbers. The code generates business value when it continuously runs in production.\nTherefore, it is imperative to continuously measure the code in production.\n\nTo support Prometheus as the metrics reporter, an HTTP endpoint starts with the context\nof `/metrics` in default port 9797 when starting the Ballerina service.\n\n### Configure advanced metrics \nThis section focuses on the Ballerina configurations that are available for metrics monitoring with Prometheus,\nand the sample configuration is provided below.\n\n```toml\n[ballerina.observe]\nmetricsEnabled=true\nmetricsReporter=\"prometheus\"\n\n[ballerinax.prometheus]\nport=9797\nhost=\"0.0.0.0\"\n```\n\nThe descriptions of each configuration option are provided below with possible values.\n\nConfiguration key | Description | Default value | Possible values \n--- | --- | --- | --- \nballerina.observe. metricsEnabled | Whether metrics monitoring is enabled (true) or disabled (false) | false | true or false\nballerina.observe. metricsReporter | Reporter name that reports the collected Metrics to the remote metrics server. This is only required to be modified if a custom reporter is implemented and needs to be used. | choreo | prometheus or if any custom implementation, the name of the reporter.\nballerinax.prometheus. port | The value of the port to which the '/metrics' service will bind to. This service will be used by Prometheus to scrape the information of the Ballerina service. | 9797 | Any suitable value for port 0 - 0 - 65535. However, within that range, ports 0 - 1023 are generally reserved for specific purposes, therefore it is advisable to select a port without that range. \nballerinax.prometheus. host | The name of the host to which the '/metrics' service will bind to. This service will be used by Prometheus to scrape the information of the Ballerina service. | 0.0.0.0 | IP or Hostname or 0.0.0.0 of the node in which the Ballerina service is running.\n\n### Set up the external systems for metrics\nThere are mainly two systems involved in collecting and visualizing the metrics. Prometheus is used to collect the\nmetrics from the Ballerina service while Grafana can be used to connect to Prometheus and visualize the metrics on the dashboard.\n\n#### Set up Prometheus\nPrometheus is used as the monitoring system, which pulls out the metrics collected from the Ballerina `/metrics` service. This section focuses on the quick installation of Prometheus with Docker and the configuration required to \ncollect metrics from the Ballerina service with the default configurations. Follow the steps below to configure \nPrometheus. \n\n>**Tip:** There are many other ways to install Prometheus and you can find possible options from the <a href=\"https://prometheus.io/docs/prometheus/latest/installation/\" target=\"_blank\">installation guide</a>.\n> The easiest option is to use precompiled binaries listed in <a href=\"https://prometheus.io/download/\" target=\"_blank\">Downloads</a>.\n\n1. Create a `prometheus.yml` file in a directory.\n\n2. Add the following content to the `prometheus.yml` file.\n\n    ```yaml\n    global:\n      scrape_interval:     15s\n      evaluation_interval: 15s\n    \n    scrape_configs:\n      - job_name: 'prometheus'\n        static_configs:\n          - targets: ['a.b.c.d:9797']\n    ```\n\n    Here, the `'a.b.c.d:9797'` targets should contain the host and port of the `/metrics` service that is exposed from \n    Ballerina for metrics collection. Add the IP of the host in which the Ballerina service is running as `a.b.c.d` and its\n    port (default `9797`).\n    If you need more information, go to the <a href=\"https://prometheus.io/docs/introduction/first_steps/\" target=\"_blank\">Prometheus documentation</a>.\n    \n    If your Ballerina service is running on localhost and Prometheus in a Docker container,\n    add the target as `host.docker.internal:9797` to access the localhost from Docker.\n\n3.  Start the Prometheus server in a Docker container with the command below.\n\n    ```\n    $ docker run -p 19090:9090 -v <path_to_prometheus.yml>:/etc/prometheus/prometheus.yml prom/prometheus\n    ```\n    \n4.  Go to <http://localhost:19090/> and check whether you can see the Prometheus graph.\nBallerina metrics should appear in Prometheus graph's metrics list when the Ballerina service is started. You can also use the following command to get the metrics.\n\n    ```\n    $ curl http://localhost:9797/metrics\n    ```\n\n#### Set up Grafana\nLetâ€™s use Grafana to visualize metrics in a dashboard. For this, we need to install Grafana and configure\nPrometheus as a data source. Follow the steps below to configure Grafana.\n\n1. Start Grafana as a Docker container with the command below.\n\n    ```\n    $ docker run -d --name=grafana -p 3000:3000 grafana/grafana\n    ```\n    For more information, go to <a href=\"https://hub.docker.com/r/grafana/grafana/\" target=\"_blank\">Grafana in Docker Hub</a>.\n\n2. Go to <http://localhost:3000/> to access the Grafana dashboard running on Docker.\n\n3. Login to the dashboard with the default user, username: `admin` and password: `admin`\n\n4. Add Prometheus as a data source with `Browser` access configuration as provided below.\n\n    ![Grafana Prometheus datasource](/learn/images/grafana-prometheus-datasource.png \"Grafana Prometheus Datasource\")\n\n5. Import the Grafana dashboard designed to visualize Ballerina metrics from <a href=\"https://grafana.com/dashboards/5841\" target=\"_blank\">https://grafana.com/dashboards/5841</a> as shown below.\n    ![Import dashboard for Ballerina](/learn/images/grafana-import-dashboard.png \"Import Dashboard For Ballerina\")\n\nThis dashboard consists of service and client invocation level metrics in near real-time view. \n\nThe Ballerina HTTP Service Metrics Dashboard Panel will be as shown below.\n\n![Ballerina Service Metrics](/learn/images/grafana-ballerina-metrics-1.png \"Ballerina Sample Service Metrics Dashboard\")\n","id":"observe-metrics","sub":"observability","third":"","slug":"observability/observe-metrics","codes":"[[-397928631,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #6F42C1\\\">ballerina</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">observe</span><span style=\\\"color: #24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">metricsEnabled=</span><span style=\\\"color: #005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">metricsReporter=</span><span style=\\\"color: #032F62\\\">&quot;prometheus&quot;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #6F42C1\\\">ballerinax</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">prometheus</span><span style=\\\"color: #24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">port=</span><span style=\\\"color: #005CC5\\\">9797</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">host=</span><span style=\\\"color: #032F62\\\">&quot;0.0.0.0&quot;</span></span></code></pre>\"],[-2008389372,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #22863A\\\">global</span><span style=\\\"color: #24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">  </span><span style=\\\"color: #22863A\\\">scrape_interval</span><span style=\\\"color: #24292E\\\">:     </span><span style=\\\"color: #032F62\\\">15s</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">  </span><span style=\\\"color: #22863A\\\">evaluation_interval</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">15s</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #22863A\\\">scrape_configs</span><span style=\\\"color: #24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">  - </span><span style=\\\"color: #22863A\\\">job_name</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">&#39;prometheus&#39;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #22863A\\\">static_configs</span><span style=\\\"color: #24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">      - </span><span style=\\\"color: #22863A\\\">targets</span><span style=\\\"color: #24292E\\\">: [</span><span style=\\\"color: #032F62\\\">&#39;a.b.c.d:9797&#39;</span><span style=\\\"color: #24292E\\\">]</span></span></code></pre>\"]]"},"__N_SSG":true}