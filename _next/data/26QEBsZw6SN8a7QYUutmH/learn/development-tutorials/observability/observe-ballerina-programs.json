{"pageProps":{"frontmatter":{"title":"Observe Ballerina programs","description":"See how Ballerina supports observability by exposing itself via metrics, tracing, and logs to external systems.","keywords":"ballerina, observability, metrics, tracing, logs, prometheus, grafana, jaeger, elastic","permalink":"/learn/observe-ballerina-programs/","active":"observe-ballerina-programs","intro":"Observability is a measure of how well the internal states of a system can be inferred from the knowledge of its external outputs."},"content":"\nIt consists of the three major pillars below.\n\n- **Metrics:** numeric values that are collected and aggregated over a period of time.\n- **Tracing:** the activities that occur when a request/transaction occurs in the system from the point of entry to exit.\n- **Logging:** text records of activities that occurred with relevant information along with the timestamp.\n\n## Provide observability in Ballerina\n\nMetrics, distributed tracing, and logging are key methods that reveal the internal state of the system to provide observability. Ballerina becomes fully observable by exposing itself via these three methods to various external systems allowing metrics such as request count and response time statistics to be monitored, perform distributed tracing, and analyze logs.\n\nBallerina services and any client connectors are observable by default. HTTP/HTTPS and SQL client\nconnectors use semantic tags to make tracing and metrics monitoring more informative.\n\nThis guide focuses on enabling Ballerina service observability with some of its supported systems.\n\n<a href=\"https://prometheus.io/\" target=\"_blank\">Prometheus</a> and <a href=\"https://grafana.com/\" target=\"_blank\">Grafana</a> are used for metrics monitoring, and <a href=\"https://www.jaegertracing.io/\" target=\"_blank\">Jaeger</a> is used for distributed tracing. \n\nBallerina logs can be fed to any external log monitoring system like the \n<a href=\"https://www.elastic.co/\" target=\"_blank\">Elastic Stack</a> to perform log monitoring and analysis.\n\n## Observe a Ballerina service\n\nFollow the steps below to observe a sample Ballerina service.\n\n### Step 1 - create a `Hello World` Ballerina service\n \nCreate a service as shown below and save it as `hello_world_service.bal`.\n\n```ballerina\nimport ballerina/http;\nimport ballerina/log;\nimport ballerinax/prometheus as _;\nimport ballerinax/jaeger as _;\n\nservice /hello on new http:Listener(9090) {\n    \n    resource function get sayHello(http:Caller caller, http:Request req) returns error? {\n        log:printInfo(\"This is a test Info log\");\n        log:printError(\"This is a test Error log\");\n        http:Response res = new;\n        res.setPayload(\"Hello, World!\");\n        check caller->respond(res);\n    }\n    \n}\n```\n\n### Step 2 - observe the `Hello World` Ballerina service\n\nBy default, observability is not included in the executable created by Ballerina. It can be added\nby using the `--observability-included` build flag or by adding the following section to the `Ballerina.toml` file.\n\n```toml\n[build-options]\nobservabilityIncluded=true\n```\n\n>**Note:** the above configuration is included by default in the `Ballerina.toml` file generated when initiating a new \npackage using the `bal new` command.\n\nTo include the Prometheus and Jaeger extensions into the executable, the\n`ballerinax/prometheus` and `ballerinax/jaeger` modules need to be imported into your Ballerina code.\n\n```ballerina\nimport ballerinax/prometheus as _;\nimport ballerinax/jaeger as _;\n```\n\nObservability is disabled by default at runtime as well and it can be enabled selectively for metrics and tracing by adding\nthe following runtime configurations to the `Config.toml` file.\n\n```toml\n[ballerina.observe]\nmetricsEnabled=true\nmetricsReporter=\"prometheus\"\ntracingEnabled=true\ntracingProvider=\"jaeger\"\n```\n\nThe created configuration file can be passed to the Ballerina program with the `BAL_CONFIG_FILES` environment variable along with\nthe path of the configuration file. This is not necessary if the `Config.toml` file is present in the current working directory.\n\n```\n$ BAL_CONFIG_FILES=<path-to-conf>/Config.toml bal run --observability-included hello_world_service.bal\n\nballerina: started Prometheus HTTP listener 0.0.0.0:9797\nballerina: started publishing traces to Jaeger on localhost:55680\n```\n\nWhen Ballerina observability is enabled, the Ballerina runtime exposes internal metrics via an HTTP endpoint (/metrics) for\nmetrics monitoring and traces will be published to Jaeger. Prometheus should be configured to scrape metrics from\nthe metrics HTTP endpoint in Ballerina.\n\nBallerina logs are logged on the console. Therefore, the logs need to be redirected to a file, which can then be\npushed to [Elastic Stack](#distributed-logging) to perform the log analysis.\n\nTherefore, redirect the standard output to a file if you want to monitor logs.\n\n```\n$ BAL_CONFIG_FILES=<path-to-conf>/Config.toml nohup bal run --observability-included hello_world_service.bal > ballerina.log &\n```\n\n### Step 3 - send requests\n \nSend requests to <http://localhost:9090/hello/sayHello>.\n\nExample cURL command:\n\n```\n$ curl http://localhost:9090/hello/sayHello\n```\n\n### Step 4 - observe metrics, traces & logs\n\nA ballerina service can be observed as follows. \n\n1. [Observe metrics using Prometheus](/learn/observe-metrics)\n\n2. [Observe tracing using Jaeger](/learn/observe-tracing)\n\n3. [Observe logs with Elastic Stack](/learn/observe-logs)\n","id":"observe-ballerina-programs","sub":"observability","third":"","slug":"observability/observe-ballerina-programs","codes":"[[1771331516,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerinax/prometheus </span><span style=\\\"color: #D73A49\\\">as</span><span style=\\\"color: #24292E\\\"> _;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerinax/jaeger </span><span style=\\\"color: #D73A49\\\">as</span><span style=\\\"color: #24292E\\\"> _;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">service</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">/hello</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">on</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> http:Listener(</span><span style=\\\"color: #005CC5\\\">9090</span><span style=\\\"color: #24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">resource</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">get</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">sayHello</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">http</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Caller caller, </span><span style=\\\"color: #E36209\\\">http</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Request req) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        log</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">printInfo</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;This is a test Info log&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        log</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">printError</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;This is a test Error log&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        http</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Response res </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        res.</span><span style=\\\"color: #6F42C1\\\">setPayload</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;Hello, World!&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> caller</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">respond</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">res</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1426150847,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #6F42C1\\\">build-options</span><span style=\\\"color: #24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">observabilityIncluded=</span><span style=\\\"color: #005CC5\\\">true</span></span></code></pre>\"],[718680358,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerinax/prometheus </span><span style=\\\"color: #D73A49\\\">as</span><span style=\\\"color: #24292E\\\"> _;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerinax/jaeger </span><span style=\\\"color: #D73A49\\\">as</span><span style=\\\"color: #24292E\\\"> _;</span></span></code></pre>\"],[-409619856,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #6F42C1\\\">ballerina</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">observe</span><span style=\\\"color: #24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">metricsEnabled=</span><span style=\\\"color: #005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">metricsReporter=</span><span style=\\\"color: #032F62\\\">&quot;prometheus&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">tracingEnabled=</span><span style=\\\"color: #005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">tracingProvider=</span><span style=\\\"color: #032F62\\\">&quot;jaeger&quot;</span></span></code></pre>\"]]"},"__N_SSG":true}