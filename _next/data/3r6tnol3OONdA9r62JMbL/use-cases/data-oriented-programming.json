{"pageProps":{"samples":{"data-immutability":{"frontmatter":{"title":"Data immutability","description":"Immutable data is a key aspect that ensures data integrity, simplifies code reasoning, and minimizes the risk of unexpected side effects. <br><br>In Ballerina, immutability is emphasized by default, offering deep immutability for data. This approach promotes a safer programming environment, where data remains unchanged once created, enhancing code reliability and predictability.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/immutability/ballerina/main.bal","image":""},"content":"```\ntype Student record {|\n    int grade;\n    string name;\n    map<int> marks;\n|};\n\npublic function main() {\n    Student & readonly student = {\n        grade: 12,\n        name: \"John\",\n        // The applicable contextually-expected type for marks now is `map<int> & readonly`.\n        // Thus, the value for marks will be constructed as an immutable map.\n        marks: {\n            \"Maths\": 75,\n            \"English\": 90\n        }\n    };\n\n    // student.grade = 11; // Compile time error\n\n    // student.marks[\"Maths\"] = 80; // Compile time error\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"type Student record {|\n    int grade;\n    string name;\n    map<int> marks;\n|};\n\npublic function main() {\n    Student &#x26; readonly student = {\n        grade: 12,\n        name: &#x22;John&#x22;,\n        // The applicable contextually-expected type for marks now is &#x60;map<int> &#x26; readonly&#x60;.\n        // Thus, the value for marks will be constructed as an immutable map.\n        marks: {\n            &#x22;Maths&#x22;: 75,\n            &#x22;English&#x22;: 90\n        }\n    };\n\n    // student.grade = 11; // Compile time error\n\n    // student.marks[&#x22;Maths&#x22;] = 80; // Compile time error\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Student</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> grade;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">int</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> marks;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Student </span><span style=\"color:#D73A49\">&#x26;</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#24292E\"> student </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        grade</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 12</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // The applicable contextually-expected type for marks now is `map&#x3C;int> &#x26; readonly`.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Thus, the value for marks will be constructed as an immutable map.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        marks</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            \"Maths\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 75</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            \"English\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 90</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // student.grade = 11; // Compile time error</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // student.marks[\"Maths\"] = 80; // Compile time error</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"expressive-query":{"frontmatter":{"title":"Declarative data processing","description":"Ballerina's query language is a powerful feature that enhances data-oriented programming by providing a concise and expressive way to transform and manipulate data. It allows developers to perform complex data operations such as filtering, mapping, aggregating, and sorting with ease. The query language in Ballerina is specifically designed to work seamlessly with structured data types like records, making it well-suited for data-oriented programming tasks.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/declarative-data-processing/main.bal","image":""},"content":"```\nimport ballerina/http;\nimport ballerina/io;\n\ntype Country record {\n    string country;\n    int population;\n    string continent;\n    int cases;\n    int deaths;\n};\n\n// Prints the top 10 countries having the highest case-fatality ratio grouped by continent.\npublic function main() returns error? {\n    http:Client diseaseEp = check new (\"https://disease.sh/v3\");\n    Country[] countries = check diseaseEp->/covid\\-19/countries;\n\n    json summary =\n        from var {country, continent, population, cases, deaths} in countries\n            where population >= 100000 && deaths >= 100\n            let decimal caseFatalityRatio = (<decimal>deaths / <decimal>cases * 100).round(4)\n            let json countryInfo = {country, population, caseFatalityRatio}\n            order by caseFatalityRatio descending\n            limit 10\n            group by continent\n            order by avg(caseFatalityRatio)\n            select {continent, countries: [countryInfo]};\n    io:println(summary);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/http;\nimport ballerina/io;\n\ntype Country record {\n    string country;\n    int population;\n    string continent;\n    int cases;\n    int deaths;\n};\n\n// Prints the top 10 countries having the highest case-fatality ratio grouped by continent.\npublic function main() returns error? {\n    http:Client diseaseEp = check new (&#x22;https://disease.sh/v3&#x22;);\n    Country[] countries = check diseaseEp->/covid\\-19/countries;\n\n    json summary =\n        from var {country, continent, population, cases, deaths} in countries\n            where population >= 100000 &#x26;&#x26; deaths >= 100\n            let decimal caseFatalityRatio = (<decimal>deaths / <decimal>cases * 100).round(4)\n            let json countryInfo = {country, population, caseFatalityRatio}\n            order by caseFatalityRatio descending\n            limit 10\n            group by continent\n            order by avg(caseFatalityRatio)\n            select {continent, countries: [countryInfo]};\n    io:println(summary);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Country</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> country;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> population;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> continent;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> cases;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> deaths;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Prints the top 10 countries having the highest case-fatality ratio grouped by continent.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client diseaseEp </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#032F62\">\"https://disease.sh/v3\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Country[] countries </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> diseaseEp</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">covid\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#005CC5\">19</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">countries;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> summary </span><span style=\"color:#D73A49\">=</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        from</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> {country, continent, population, cases, deaths} </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> countries</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            where</span><span style=\"color:#24292E\"> population </span><span style=\"color:#D73A49\">>=</span><span style=\"color:#005CC5\"> 100000</span><span style=\"color:#D73A49\"> &#x26;&#x26;</span><span style=\"color:#24292E\"> deaths </span><span style=\"color:#D73A49\">>=</span><span style=\"color:#005CC5\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            let</span><span style=\"color:#005CC5\"> decimal</span><span style=\"color:#24292E\"> caseFatalityRatio </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#005CC5\">decimal</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\">deaths</span><span style=\"color:#D73A49\"> /</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">decimal</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\">cases</span><span style=\"color:#D73A49\"> *</span><span style=\"color:#005CC5\"> 100</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">round</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">4</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            let</span><span style=\"color:#005CC5\"> json</span><span style=\"color:#24292E\"> countryInfo </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {country, population, caseFatalityRatio}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            order</span><span style=\"color:#D73A49\"> by</span><span style=\"color:#24292E\"> caseFatalityRatio </span><span style=\"color:#D73A49\">descending</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            limit</span><span style=\"color:#005CC5\"> 10</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            group</span><span style=\"color:#D73A49\"> by</span><span style=\"color:#24292E\"> continent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            order</span><span style=\"color:#D73A49\"> by</span><span style=\"color:#6F42C1\"> avg</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">caseFatalityRatio</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            select</span><span style=\"color:#24292E\"> {continent, countries</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [countryInfo]};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">summary</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"flexible-typing":{"frontmatter":{"title":"Be conservative in what you send, be liberal in what you accept","description":"Ballerina employs \"be conservative in what you send, be liberal in what you accept\" by using structural types that support openness. <br><br>These types serve a dual purpose, enhancing static typing within programs and describing service interfaces accurately. While outgoing messages are tightly controlled to ensure protocol adherence, incoming data is handled with a degree of flexibility. The result is a balance of strictness and tolerance that enhances interoperability and resilience. This makes Ballerina a robust and adaptable choice for constructing cloud-native applications.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/model-constrained-flexible-data/ballerina/main.bal","image":""},"content":"```\nimport ballerina/io;\n\n// closed record\ntype PersonalDetails record {|\n    string name;\n    int age;\n|};\n\n// open record\ntype EmployeeDetails record {\n    string designation;\n    float salary;\n};\n\npublic function main() {\n    // Create a new employee record with closed fields\n    PersonalDetails personalDetails = {name: \"John Doe\", age: 30};\n\n    // Access and modify closed record fields using dot notation\n    personalDetails.name = \"Jane Smith\";\n    personalDetails.age = personalDetails.age + 1;\n\n    // Create a new employee record with open and closed fields\n    EmployeeDetails employeeInfo = {designation: \"n/a\", salary: 3000.0, ...personalDetails};\n\n    // Access and modify open record fields using dot notation\n    employeeInfo.designation = \"Software Engineer\";\n    employeeInfo.salary = 5000.0;\n\n    // Access and modify record fields using bracket notation\n    employeeInfo[\"name\"] = \"John Smith\";\n\n    // Add a new field to the employee record\n    employeeInfo[\"address\"] = \"123 Main St\";\n\n    // Print the updated employee information\n    io:println(personalDetails);\n    io:println(employeeInfo);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\n// closed record\ntype PersonalDetails record {|\n    string name;\n    int age;\n|};\n\n// open record\ntype EmployeeDetails record {\n    string designation;\n    float salary;\n};\n\npublic function main() {\n    // Create a new employee record with closed fields\n    PersonalDetails personalDetails = {name: &#x22;John Doe&#x22;, age: 30};\n\n    // Access and modify closed record fields using dot notation\n    personalDetails.name = &#x22;Jane Smith&#x22;;\n    personalDetails.age = personalDetails.age + 1;\n\n    // Create a new employee record with open and closed fields\n    EmployeeDetails employeeInfo = {designation: &#x22;n/a&#x22;, salary: 3000.0, ...personalDetails};\n\n    // Access and modify open record fields using dot notation\n    employeeInfo.designation = &#x22;Software Engineer&#x22;;\n    employeeInfo.salary = 5000.0;\n\n    // Access and modify record fields using bracket notation\n    employeeInfo[&#x22;name&#x22;] = &#x22;John Smith&#x22;;\n\n    // Add a new field to the employee record\n    employeeInfo[&#x22;address&#x22;] = &#x22;123 Main St&#x22;;\n\n    // Print the updated employee information\n    io:println(personalDetails);\n    io:println(employeeInfo);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// closed record</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> PersonalDetails</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// open record</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> EmployeeDetails</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> designation;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> salary;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Create a new employee record with closed fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    PersonalDetails personalDetails </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">, age</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 30</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Access and modify closed record fields using dot notation</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    personalDetails.name </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"Jane Smith\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    personalDetails.age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> personalDetails.age </span><span style=\"color:#D73A49\">+</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Create a new employee record with open and closed fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    EmployeeDetails employeeInfo </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {designation</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"n/a\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3000.0</span><span style=\"color:#24292E\">, </span><span style=\"color:#D73A49\">...</span><span style=\"color:#24292E\">personalDetails};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Access and modify open record fields using dot notation</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeInfo.designation </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"Software Engineer\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeInfo.salary </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> 5000.0</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Access and modify record fields using bracket notation</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeInfo[</span><span style=\"color:#032F62\">\"name\"</span><span style=\"color:#24292E\">] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"John Smith\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Add a new field to the employee record</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeInfo[</span><span style=\"color:#032F62\">\"address\"</span><span style=\"color:#24292E\">] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"123 Main St\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Print the updated employee information</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">personalDetails</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">employeeInfo</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"json-support":{"frontmatter":{"title":"JSON support","description":"Ballerina offers native support for JSON, enabling effortless integration with JSON-based systems and APIs. This support ensures smooth handling and manipulation of JSON data within data-oriented programming, enhancing interoperability and facilitating seamless communication with JSON-based systems.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/working_with_json/ballerina/main.bal","image":""},"content":"```\nimport ballerina/io;\n\ntype InvoiceItem record {\n    string id;\n    decimal price;\n    boolean taxable;\n};\n\ntype Customer record {\n    string id;\n    string name;\n};\n\ntype Invoice record {\n    string id;\n    Customer customer;\n    InvoiceItem[] items;\n};\n\npublic function main() returns error?{\n    json invoiceData = check io:fileReadJson(\"./invoice.json\");\n\n    // Enjoy lax static typing here!\n    // Fails at runtime if the key is not present or the value is not a string.\n    string id = check invoiceData.id;\n    io:println(\"Invoice id: \", id);\n\n    // Fails at runtime if the key is not present.\n    json items = check invoiceData.items;\n    io:println(\"Invoice items: \", items);\n\n    // Fails at runtime if the convertion is not possible.\n    json[] itemArr = check items.cloneWithType();\n\n    // Results in a nil value if the accessed field is not present.\n    decimal? discountAmount = check itemArr[1]?.discount?.amount;\n    io:println(\"Discount amount: \", discountAmount);\n\n    // Converts to the domain type.\n    // Fails at runtime if the json value does not match the type.\n    Invoice invoice = check invoiceData.fromJsonWithType();\n\n    // Enjoy type-safe handling of json values.\n    id = invoice.id;\n    InvoiceItem[] invoiceItems = invoice.items;\n    io:println(\"Invoice items: \", invoiceItems);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\ntype InvoiceItem record {\n    string id;\n    decimal price;\n    boolean taxable;\n};\n\ntype Customer record {\n    string id;\n    string name;\n};\n\ntype Invoice record {\n    string id;\n    Customer customer;\n    InvoiceItem[] items;\n};\n\npublic function main() returns error?{\n    json invoiceData = check io:fileReadJson(&#x22;./invoice.json&#x22;);\n\n    // Enjoy lax static typing here!\n    // Fails at runtime if the key is not present or the value is not a string.\n    string id = check invoiceData.id;\n    io:println(&#x22;Invoice id: &#x22;, id);\n\n    // Fails at runtime if the key is not present.\n    json items = check invoiceData.items;\n    io:println(&#x22;Invoice items: &#x22;, items);\n\n    // Fails at runtime if the convertion is not possible.\n    json[] itemArr = check items.cloneWithType();\n\n    // Results in a nil value if the accessed field is not present.\n    decimal? discountAmount = check itemArr[1]?.discount?.amount;\n    io:println(&#x22;Discount amount: &#x22;, discountAmount);\n\n    // Converts to the domain type.\n    // Fails at runtime if the json value does not match the type.\n    Invoice invoice = check invoiceData.fromJsonWithType();\n\n    // Enjoy type-safe handling of json values.\n    id = invoice.id;\n    InvoiceItem[] invoiceItems = invoice.items;\n    io:println(&#x22;Invoice items: &#x22;, invoiceItems);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> InvoiceItem</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    boolean</span><span style=\"color:#24292E\"> taxable;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Customer</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Invoice</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Customer customer;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    InvoiceItem[] items;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> invoiceData </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadJson</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"./invoice.json\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Enjoy lax static typing here!</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the key is not present or the value is not a string.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.id;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice id: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">id</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the key is not present.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> items </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.items;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice items: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">items</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the convertion is not possible.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\">[] itemArr </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> items.</span><span style=\"color:#6F42C1\">cloneWithType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Results in a nil value if the accessed field is not present.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\">? discountAmount </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> itemArr[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">]?.discount?.amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Discount amount: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">discountAmount</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Converts to the domain type.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the json value does not match the type.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Invoice invoice </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.</span><span style=\"color:#6F42C1\">fromJsonWithType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Enjoy type-safe handling of json values.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> invoice.id;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    InvoiceItem[] invoiceItems </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> invoice.items;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice items: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">invoiceItems</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"optional-types":{"frontmatter":{"title":"Model optionality","description":"In data-oriented programming, where data takes precedence, modeling optionality is crucial for expressing the presence or absence of data in a concise and type-safe manner. <br><br>Optional typing enables the indication of nullable or absent values, while optional fields offer flexibility in representing different data states.<br><br>Ballerina has built-in support for optional types and fields, eliminating the risk of null pointer exceptions and related bugs, ensuring more robust code.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/model-optionality/ballerina/main.bal","image":""},"content":"```\nimport ballerina/io;\n\ntype Person record {|\n    int id;\n    string name;\n    // optional typed field\n    int? age;\n    // optional field\n    string email?;\n|};\n\npublic function main() returns error? {\n    json jsonInput = {\n        id: 1,\n        \"name\": \"John Doe\",\n        \"age\": null\n    };\n\n    Person person = check jsonInput.fromJsonWithType();\n\n    io:println(person.age.toBalString()); // output: ()\n\n    // optional type access\n    int age = person.age ?: -1;\n    io:println(age); // output: -1\n\n    // optional field access\n    io:println(person.hasKey(\"email\")); // output: false\n    string email = person.email ?: \"Email is not provided\";\n    io:println(email); // output: Email is not provided\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\ntype Person record {|\n    int id;\n    string name;\n    // optional typed field\n    int? age;\n    // optional field\n    string email?;\n|};\n\npublic function main() returns error? {\n    json jsonInput = {\n        id: 1,\n        &#x22;name&#x22;: &#x22;John Doe&#x22;,\n        &#x22;age&#x22;: null\n    };\n\n    Person person = check jsonInput.fromJsonWithType();\n\n    io:println(person.age.toBalString()); // output: ()\n\n    // optional type access\n    int age = person.age ?: -1;\n    io:println(age); // output: -1\n\n    // optional field access\n    io:println(person.hasKey(&#x22;email&#x22;)); // output: false\n    string email = person.email ?: &#x22;Email is not provided&#x22;;\n    io:println(email); // output: Email is not provided\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Person</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // optional typed field</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\">? age;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // optional field</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> email?;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> jsonInput </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"name\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"age\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#D73A49\"> null</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Person person </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> jsonInput.</span><span style=\"color:#6F42C1\">fromJsonWithType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(person.age.</span><span style=\"color:#6F42C1\">toBalString</span><span style=\"color:#24292E\">()); </span><span style=\"color:#6A737D\">// output: ()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // optional type access</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> person.age </span><span style=\"color:#D73A49\">?:</span><span style=\"color:#D73A49\"> -</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">age</span><span style=\"color:#24292E\">); </span><span style=\"color:#6A737D\">// output: -1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // optional field access</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(person.</span><span style=\"color:#6F42C1\">hasKey</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"email\"</span><span style=\"color:#24292E\">)); </span><span style=\"color:#6A737D\">// output: false</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> email </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> person.email </span><span style=\"color:#D73A49\">?:</span><span style=\"color:#032F62\"> \"Email is not provided\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">email</span><span style=\"color:#24292E\">); </span><span style=\"color:#6A737D\">// output: Email is not provided</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"pattern-matching":{"frontmatter":{"title":"Pattern matching","description":"Pattern matching is a powerful tool in data-oriented programming that allows developers to extract relevant data from complex patterns and perform specific operations based on the structure and content of the data. <br><br>Ballerina provides concise and expressive pattern matching techniques to handle intricate data structures efficiently.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/pattern-matching/ballerina/main.bal","image":""},"content":"```\nimport ballerina/io;\n\nconst switchStatus = \"ON\";\n\nfunction matchValue(anydata value, boolean isObstructed,\n                float powerPercentage) returns string {\n    // The value of the `val` variable is matched against the given value match patterns.\n    match value {\n        1 if !isObstructed => {\n            // This block will execute if `value` is 1 and `isObstructed` is false.\n            return \"Move forward\";\n        }\n        // `|` is used to match more than one value.\n        2|3 => {\n            // This block will execute if `value` is either 2 or 3.\n            return \"Turn\";\n        }\n        4 if 25.0 < powerPercentage => {\n            // This block will execute if `value` is 4 and `25.0 < powerPercentage` is true.\n            return \"Increase speed\";\n        }\n        \"STOP\" => {\n            // This block will execute if `value` is \"STOP\".\n            return \"STOP\";\n        }\n        switchStatus => {\n            // This block will execute if `value` is equal \n            // to the value of the `switchStatus` constant.\n            return \"Switch ON\";\n        }\n        // Destructuring a tuple with type checking\n        [var x, var y] if x is decimal && y is decimal => {\n            return string `Maneuvering to x: ${x.toString()} and y: ${y.toString()\n                            } coordinates`;\n        }\n        // Destructuring a map and recursively matching with optional argument\n        {x: var a, y: var b, ...var rest} => {\n            string optionalArg = matchValue(rest, isObstructed, powerPercentage);\n            return string `Maneuvering to x: ${a.toString()} and y: ${b.toString()\n                            } coordinates with ${optionalArg}`;\n        }\n        _ => {\n            // This block will execute for any other unmatched value.\n            return \"Invalid instruction\";\n        }\n    }\n}\n\npublic function main() {\n    string output = matchValue([-2.516d, 51.409d], false, 0.0);\n    io:println(output);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\nconst switchStatus = &#x22;ON&#x22;;\n\nfunction matchValue(anydata value, boolean isObstructed,\n                float powerPercentage) returns string {\n    // The value of the &#x60;val&#x60; variable is matched against the given value match patterns.\n    match value {\n        1 if !isObstructed => {\n            // This block will execute if &#x60;value&#x60; is 1 and &#x60;isObstructed&#x60; is false.\n            return &#x22;Move forward&#x22;;\n        }\n        // &#x60;|&#x60; is used to match more than one value.\n        2|3 => {\n            // This block will execute if &#x60;value&#x60; is either 2 or 3.\n            return &#x22;Turn&#x22;;\n        }\n        4 if 25.0 < powerPercentage => {\n            // This block will execute if &#x60;value&#x60; is 4 and &#x60;25.0 < powerPercentage&#x60; is true.\n            return &#x22;Increase speed&#x22;;\n        }\n        &#x22;STOP&#x22; => {\n            // This block will execute if &#x60;value&#x60; is &#x22;STOP&#x22;.\n            return &#x22;STOP&#x22;;\n        }\n        switchStatus => {\n            // This block will execute if &#x60;value&#x60; is equal \n            // to the value of the &#x60;switchStatus&#x60; constant.\n            return &#x22;Switch ON&#x22;;\n        }\n        // Destructuring a tuple with type checking\n        [var x, var y] if x is decimal &#x26;&#x26; y is decimal => {\n            return string &#x60;Maneuvering to x: ${x.toString()} and y: ${y.toString()\n                            } coordinates&#x60;;\n        }\n        // Destructuring a map and recursively matching with optional argument\n        {x: var a, y: var b, ...var rest} => {\n            string optionalArg = matchValue(rest, isObstructed, powerPercentage);\n            return string &#x60;Maneuvering to x: ${a.toString()} and y: ${b.toString()\n                            } coordinates with ${optionalArg}&#x60;;\n        }\n        _ => {\n            // This block will execute for any other unmatched value.\n            return &#x22;Invalid instruction&#x22;;\n        }\n    }\n}\n\npublic function main() {\n    string output = matchValue([-2.516d, 51.409d], false, 0.0);\n    io:println(output);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">const </span><span style=\"color:#005CC5\">switchStatus</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"ON\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> matchValue</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">anydata</span><span style=\"color:#E36209\"> value</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">boolean</span><span style=\"color:#E36209\"> isObstructed</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">                float</span><span style=\"color:#E36209\"> powerPercentage</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // The value of the `val` variable is matched against the given value match patterns.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    match</span><span style=\"color:#24292E\"> value {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        1</span><span style=\"color:#D73A49\"> if</span><span style=\"color:#D73A49\"> !</span><span style=\"color:#24292E\">isObstructed </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is 1 and `isObstructed` is false.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Move forward\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // `|` is used to match more than one value.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        2</span><span style=\"color:#D73A49\">|</span><span style=\"color:#005CC5\">3</span><span style=\"color:#D73A49\"> =></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is either 2 or 3.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Turn\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        4</span><span style=\"color:#D73A49\"> if</span><span style=\"color:#005CC5\"> 25.0</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#24292E\"> powerPercentage </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is 4 and `25.0 &#x3C; powerPercentage` is true.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Increase speed\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"STOP\"</span><span style=\"color:#D73A49\"> =></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is \"STOP\".</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"STOP\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        switchStatus </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is equal </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // to the value of the `switchStatus` constant.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Switch ON\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Destructuring a tuple with type checking</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        [</span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> x, </span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> y] </span><span style=\"color:#D73A49\">if</span><span style=\"color:#24292E\"> x </span><span style=\"color:#D73A49\">is</span><span style=\"color:#005CC5\"> decimal</span><span style=\"color:#D73A49\"> &#x26;&#x26;</span><span style=\"color:#24292E\"> y </span><span style=\"color:#D73A49\">is</span><span style=\"color:#005CC5\"> decimal</span><span style=\"color:#D73A49\"> =></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `Maneuvering to x: ${</span><span style=\"color:#24292E\">x</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span><span style=\"color:#032F62\">} and y: ${</span><span style=\"color:#24292E\">y</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                            } coordinates`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Destructuring a map and recursively matching with optional argument</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        {x</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> a, y</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> b, </span><span style=\"color:#D73A49\">...</span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> rest} </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> optionalArg </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> matchValue</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">rest</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">isObstructed</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">powerPercentage</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `Maneuvering to x: ${</span><span style=\"color:#24292E\">a</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span><span style=\"color:#032F62\">} and y: ${</span><span style=\"color:#24292E\">b</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                            } coordinates with ${</span><span style=\"color:#24292E\">optionalArg</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        _ </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute for any other unmatched value.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Invalid instruction\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> output </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> matchValue</span><span style=\"color:#24292E\">([</span><span style=\"color:#D73A49\">-</span><span style=\"color:#005CC5\">2.516</span><span style=\"color:#24292E\">d, </span><span style=\"color:#005CC5\">51.409</span><span style=\"color:#24292E\">d], </span><span style=\"color:#005CC5\">false</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">0.0</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">output</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"record-type":{"frontmatter":{"title":"Model data as data","description":"Data-oriented programming promotes the idea of representing data in its purest form. Ballerina's records simplify this approach, enabling concise and effective data representation.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/model-data-as-data/ballerina/main.bal","image":""},"content":" \n```\nimport ballerina/io;\n\nenum UserType {\n    ADMIN,\n    GUEST,\n    MEMBER\n};\n\ntype User record {|\n    int id;\n    string name;\n    UserType userType = GUEST;\n|};\n\npublic function main() {\n    User user = {id: 1, name: \"John Doe\"};\n    io:println(string `User '${user.name}' with id '${user.id}' as '${user.userType\n                        }' created successfully`);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\nenum UserType {\n    ADMIN,\n    GUEST,\n    MEMBER\n};\n\ntype User record {|\n    int id;\n    string name;\n    UserType userType = GUEST;\n|};\n\npublic function main() {\n    User user = {id: 1, name: &#x22;John Doe&#x22;};\n    io:println(string &#x60;User &#x27;${user.name}&#x27; with id &#x27;${user.id}&#x27; as &#x27;${user.userType\n                        }&#x27; created successfully&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">enum</span><span style=\"color:#6F42C1\"> UserType</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    ADMIN</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    GUEST</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    MEMBER</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> User</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    UserType userType </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> GUEST;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    User user </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `User '${</span><span style=\"color:#24292E\">user</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">name</span><span style=\"color:#032F62\">}' with id '${</span><span style=\"color:#24292E\">user</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">id</span><span style=\"color:#032F62\">}' as '${</span><span style=\"color:#24292E\">user</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">userType</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                        }' created successfully`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"stream-type":{"frontmatter":{"title":"Model data streams","description":"In data-oriented programming, efficient handling and processing of large amounts of data is vital. Ballerina's built-in stream type enables developers to process data on-demand, apply transformations, filters, and aggregations, and facilitates seamless integration with other data processing operations.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/model-data-streams/main.bal","image":""},"content":"```\nimport ballerina/io;\n\ntype SensorData record {|\n    string sensorName;\n    string timestamp;\n    float temperature;\n    float humidity;\n|};\n\npublic function main(string filePath = \"sensor_data.csv\") returns error? {\n    // Read file as a stream which will be lazily evaluated\n    stream<SensorData, error?> sensorDataStrm = check io:fileReadCsvAsStream(filePath);\n    map<float> ecoSenseAvg = check map from var {sensorName, temperature} in sensorDataStrm\n        // if sensor reading is faulty; stops processing the file \n        let float tempInCelcius = check convertTemperatureToCelcius(sensorName, temperature)\n        group by sensorName\n        select [sensorName, avg(tempInCelcius)];\n    io:println(ecoSenseAvg);\n}\n\nfunction convertTemperatureToCelcius(string sensorName, float temperature) returns float|error {\n    if temperature < 0.0 || temperature > 10000.0 {\n        return error(string `Invalid kelvin temperature value in sensor: ${sensorName}`);\n    }\n    return temperature - 273.15;\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\ntype SensorData record {|\n    string sensorName;\n    string timestamp;\n    float temperature;\n    float humidity;\n|};\n\npublic function main(string filePath = &#x22;sensor_data.csv&#x22;) returns error? {\n    // Read file as a stream which will be lazily evaluated\n    stream<SensorData, error?> sensorDataStrm = check io:fileReadCsvAsStream(filePath);\n    map<float> ecoSenseAvg = check map from var {sensorName, temperature} in sensorDataStrm\n        // if sensor reading is faulty; stops processing the file \n        let float tempInCelcius = check convertTemperatureToCelcius(sensorName, temperature)\n        group by sensorName\n        select [sensorName, avg(tempInCelcius)];\n    io:println(ecoSenseAvg);\n}\n\nfunction convertTemperatureToCelcius(string sensorName, float temperature) returns float|error {\n    if temperature < 0.0 || temperature > 10000.0 {\n        return error(string &#x60;Invalid kelvin temperature value in sensor: ${sensorName}&#x60;);\n    }\n    return temperature - 273.15;\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> SensorData</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> sensorName;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> timestamp;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> temperature;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> humidity;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> filePath</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"sensor_data.csv\"</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Read file as a stream which will be lazily evaluated</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    stream&#x3C;</span><span style=\"color:#24292E\">SensorData, </span><span style=\"color:#D73A49\">error?></span><span style=\"color:#24292E\"> sensorDataStrm </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadCsvAsStream</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">filePath</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">float</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> ecoSenseAvg </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> map</span><span style=\"color:#D73A49\"> from</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> {sensorName, temperature} </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> sensorDataStrm</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // if sensor reading is faulty; stops processing the file </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        let</span><span style=\"color:#005CC5\"> float</span><span style=\"color:#24292E\"> tempInCelcius </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> convertTemperatureToCelcius</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">sensorName</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">temperature</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        group</span><span style=\"color:#D73A49\"> by</span><span style=\"color:#24292E\"> sensorName</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        select</span><span style=\"color:#24292E\"> [sensorName, </span><span style=\"color:#6F42C1\">avg</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">tempInCelcius</span><span style=\"color:#24292E\">)];</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">ecoSenseAvg</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> convertTemperatureToCelcius</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> sensorName</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">float</span><span style=\"color:#E36209\"> temperature</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> float</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> temperature </span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#005CC5\"> 0.0</span><span style=\"color:#D73A49\"> ||</span><span style=\"color:#24292E\"> temperature </span><span style=\"color:#D73A49\">></span><span style=\"color:#005CC5\"> 10000.0</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Invalid kelvin temperature value in sensor: ${</span><span style=\"color:#24292E\">sensorName</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    return</span><span style=\"color:#24292E\"> temperature </span><span style=\"color:#D73A49\">-</span><span style=\"color:#005CC5\"> 273.15</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"table-type":{"frontmatter":{"title":"Model tabular data","description":"Tabular data modeling empowers developers to effectively organize, process, and manipulate structured data, leading to more modular, maintainable, and efficient data-oriented programs.<br><br>Ballerina, with its built-in `table` data type, provides native support for modeling and manipulating tabular data, allowing you to define records as values and associate them with unique keys.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/model-tabular-data/main.bal","image":""},"content":"```\nimport ballerina/io;\n\n// Define a type for tabular data\ntype Employee record {|\n    readonly int id;\n    string name;\n    readonly string department;\n    int salary;\n|};\n\n// Create an in-memory table with compound keys\ntable<Employee> key(id, department) employeeTable = table [\n    {id: 1, name: \"John Doe\", department: \"Engineering\", salary: 5000},\n    {id: 2, name: \"Jane Smith\", department: \"Sales\", salary: 4000}\n];\n\npublic function main() {\n    // Add an employee to the table\n    employeeTable.add({id: 3, name: \"William Smith\", department: \"Engineering\", salary: 4500});\n\n    // Adding duplicate record, throws KeyAlreadyExist error\n    // employeeTable.add({id: 2, name: \"Jane Smith\", department: \"Sales\", salary: 5000});\n\n    // Putting duplicate record, overrides the existing value\n    employeeTable.put({id: 2, name: \"Jane Smith\", department: \"Sales\", salary: 5000});\n\n    // Retrieve an employee using the compound key\n    Employee? employee = employeeTable[1, \"Engineering\"];\n    if (employee is Employee) {\n        io:println(\"Employee Found: \" + employee.name);\n    } else {\n        io:println(\"Employee Not Found\");\n    }\n\n    // Calculate the total salary in the Engineering department\n    int totalSalary = from var {department, salary} in employeeTable\n        where department == \"Engineering\"\n        collect int:sum(salary);\n    io:println(string `Total Salary in Engineering Department: ${totalSalary}`);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\n// Define a type for tabular data\ntype Employee record {|\n    readonly int id;\n    string name;\n    readonly string department;\n    int salary;\n|};\n\n// Create an in-memory table with compound keys\ntable<Employee> key(id, department) employeeTable = table [\n    {id: 1, name: &#x22;John Doe&#x22;, department: &#x22;Engineering&#x22;, salary: 5000},\n    {id: 2, name: &#x22;Jane Smith&#x22;, department: &#x22;Sales&#x22;, salary: 4000}\n];\n\npublic function main() {\n    // Add an employee to the table\n    employeeTable.add({id: 3, name: &#x22;William Smith&#x22;, department: &#x22;Engineering&#x22;, salary: 4500});\n\n    // Adding duplicate record, throws KeyAlreadyExist error\n    // employeeTable.add({id: 2, name: &#x22;Jane Smith&#x22;, department: &#x22;Sales&#x22;, salary: 5000});\n\n    // Putting duplicate record, overrides the existing value\n    employeeTable.put({id: 2, name: &#x22;Jane Smith&#x22;, department: &#x22;Sales&#x22;, salary: 5000});\n\n    // Retrieve an employee using the compound key\n    Employee? employee = employeeTable[1, &#x22;Engineering&#x22;];\n    if (employee is Employee) {\n        io:println(&#x22;Employee Found: &#x22; + employee.name);\n    } else {\n        io:println(&#x22;Employee Not Found&#x22;);\n    }\n\n    // Calculate the total salary in the Engineering department\n    int totalSalary = from var {department, salary} in employeeTable\n        where department == &#x22;Engineering&#x22;\n        collect int:sum(salary);\n    io:println(string &#x60;Total Salary in Engineering Department: ${totalSalary}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Define a type for tabular data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Employee</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    readonly</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    readonly</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> department;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> salary;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Create an in-memory table with compound keys</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">table&#x3C;</span><span style=\"color:#24292E\">Employee</span><span style=\"color:#D73A49\">></span><span style=\"color:#D73A49\"> key</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">department</span><span style=\"color:#24292E\">) employeeTable </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> table</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    {id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">, department</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Engineering\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 5000</span><span style=\"color:#24292E\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    {id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Jane Smith\"</span><span style=\"color:#24292E\">, department</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Sales\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 4000</span><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Add an employee to the table</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeTable.</span><span style=\"color:#6F42C1\">add</span><span style=\"color:#24292E\">({id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"William Smith\"</span><span style=\"color:#24292E\">, department</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Engineering\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 4500</span><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Adding duplicate record, throws KeyAlreadyExist error</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // employeeTable.add({id: 2, name: \"Jane Smith\", department: \"Sales\", salary: 5000});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Putting duplicate record, overrides the existing value</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeTable.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">({id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Jane Smith\"</span><span style=\"color:#24292E\">, department</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Sales\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 5000</span><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Retrieve an employee using the compound key</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Employee</span><span style=\"color:#D73A49\">?</span><span style=\"color:#24292E\"> employee </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> employeeTable[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"Engineering\"</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> (employee </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> Employee) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Employee Found: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> employee.name);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    } </span><span style=\"color:#D73A49\">else</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Employee Not Found\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Calculate the total salary in the Engineering department</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> totalSalary </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> from</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> {department, salary} </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> employeeTable</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        where</span><span style=\"color:#24292E\"> department </span><span style=\"color:#D73A49\">==</span><span style=\"color:#032F62\"> \"Engineering\"</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        collect</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">sum</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">salary</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Total Salary in Engineering Department: ${</span><span style=\"color:#24292E\">totalSalary</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"type-constraints":{"frontmatter":{"title":"Data validation at the boundary","description":"Boundary data validation is a critical aspect of data-oriented programming as it ensures that only valid and reliable data is allowed into the system enhancing data integrity, downstream processing, and security. <br><br>Ballerina, with its built-in language features, handles the validation process automatically, ensuring that only valid data is accepted.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/data-validation/ballerina/main.bal","image":""},"content":"```\nimport ballerina/constraint;\nimport ballerina/http;\nimport ballerina/io;\n\ntype User record {\n    @constraint:String {\n        minLength: 1,\n        maxLength: 8\n    }\n    string username;\n    @constraint:String {\n        pattern: re `^[\\S]{4,}$`\n    }\n    string password;\n};\n\nservice / on new http:Listener(9090) {\n    resource function post user(User user) returns http:Created {\n        io:println(string `User ${user.username} signed up successfully`);\n        return http:CREATED;\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/constraint;\nimport ballerina/http;\nimport ballerina/io;\n\ntype User record {\n    @constraint:String {\n        minLength: 1,\n        maxLength: 8\n    }\n    string username;\n    @constraint:String {\n        pattern: re &#x60;^[\\S]{4,}$&#x60;\n    }\n    string password;\n};\n\nservice / on new http:Listener(9090) {\n    resource function post user(User user) returns http:Created {\n        io:println(string &#x60;User ${user.username} signed up successfully&#x60;);\n        return http:CREATED;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/constraint;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> User</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @</span><span style=\"color:#005CC5\">constraint</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">String</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        minLength</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        maxLength</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> username;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @</span><span style=\"color:#005CC5\">constraint</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">String</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        pattern</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> re</span><span style=\"color:#24292E\"> `</span><span style=\"color:#D73A49\">^</span><span style=\"color:#005CC5\">[</span><span style=\"color:#D73A49\">\\S</span><span style=\"color:#005CC5\">]</span><span style=\"color:#D73A49\">{4,}$</span><span style=\"color:#24292E\">`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> password;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">9090</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> user</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">User</span><span style=\"color:#E36209\"> user</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Created {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `User ${</span><span style=\"color:#24292E\">user</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">username</span><span style=\"color:#032F62\">} signed up successfully`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CREATED;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"union-types":{"frontmatter":{"title":"Model choices as discriminate unions","description":"In data-oriented programming, modeling choices is essential for achieving code-data separation. This approach results in modular, maintainable, and extensible code that can handle different data variants in a unified and type-safe manner. Ballerina offers built-in mechanisms to model choices as discriminate unions, using a concise and seamlessly integrated syntax.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/model-choices/ballerina/main.bal","image":""},"content":"```\nimport ballerina/io;\n\ntype Circle record {|\n   float radius;\n|};\n\ntype Rectangle record {|\n   float width;\n   float height;\n|};\n\ntype Shape Circle|Rectangle;\n\nfunction calculateArea (Shape shape) returns float {\n   if shape is Circle {\n       return float:PI * shape.radius * shape.radius;\n   }\n   return shape.width * shape.height;\n};\n\npublic function main() {\n   io:println(calculateArea({radius: 10}));\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\ntype Circle record {|\n   float radius;\n|};\n\ntype Rectangle record {|\n   float width;\n   float height;\n|};\n\ntype Shape Circle|Rectangle;\n\nfunction calculateArea (Shape shape) returns float {\n   if shape is Circle {\n       return float:PI * shape.radius * shape.radius;\n   }\n   return shape.width * shape.height;\n};\n\npublic function main() {\n   io:println(calculateArea({radius: 10}));\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Circle</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">   float</span><span style=\"color:#24292E\"> radius;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Rectangle</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">   float</span><span style=\"color:#24292E\"> width;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">   float</span><span style=\"color:#24292E\"> height;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Shape</span><span style=\"color:#D73A49\"> Circle|Rectangle</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> calculateArea</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">Shape</span><span style=\"color:#E36209\"> shape</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> float</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">   if</span><span style=\"color:#24292E\"> shape </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> Circle {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">       return</span><span style=\"color:#005CC5\"> float</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">PI * shape.radius * shape.radius;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">   }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">   return</span><span style=\"color:#24292E\"> shape.width </span><span style=\"color:#D73A49\">*</span><span style=\"color:#24292E\"> shape.height;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">   io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">calculateArea</span><span style=\"color:#24292E\">({radius</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 10</span><span style=\"color:#24292E\">}));</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"xml-support":{"frontmatter":{"title":"XML support","description":"XML, as a structured markup language, provides a flexible and extensible means of representing data. Ballerina's native support for XML enables smooth parsing, generation, and manipulation of XML data. This support greatly facilitates integration with XML-based systems and protocols within data-oriented programming, enhancing interoperability and data exchange capabilities.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/xml-support/ballerina/main.bal","image":""},"content":"```\nimport ballerina/io;\nimport ballerina/xmldata;\n\n// Define a SOAP payload\nxml soapPayload =\n    xml `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n            <soapenv:Body>\n                <person>\n                    <name>John Doe</name>\n                    <age>30</age>\n                    <address>\n                        <city>New York</city>\n                        <country>USA</country>\n                    </address>\n                </person>\n            </soapenv:Body>\n        </soapenv:Envelope>`;\n\nxmlns \"http://schemas.xmlsoap.org/soap/envelope/\" as ns;\n\ntype address record {|\n    string city;\n    string country;\n|};\n\npublic function main() returns error? {\n    // Extract the SOAP payload\n    xml xmlPayload = soapPayload/**/<ns:Body>;\n    io:println(xmlPayload);\n\n    // Navigate to the subcontext and extract the data\n    xml person = xmlPayload/<person>;\n\n    string name = (person/<name>).data();\n    string age = (person/<age>).data();\n    string city = (person/**/<city>).data();\n\n    // Extract the sub-xml and convert it to a record\n    address address = check xmldata:fromXml(person/<address>);\n    string country = address.country;\n\n    io:println(string `Name: ${name}, Age: ${age}, City: ${city}, Country: ${country}`);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\nimport ballerina/xmldata;\n\n// Define a SOAP payload\nxml soapPayload =\n    xml &#x60;<soapenv:Envelope xmlns:soapenv=&#x22;http://schemas.xmlsoap.org/soap/envelope/&#x22;>\n            <soapenv:Body>\n                <person>\n                    <name>John Doe</name>\n                    <age>30</age>\n                    <address>\n                        <city>New York</city>\n                        <country>USA</country>\n                    </address>\n                </person>\n            </soapenv:Body>\n        </soapenv:Envelope>&#x60;;\n\nxmlns &#x22;http://schemas.xmlsoap.org/soap/envelope/&#x22; as ns;\n\ntype address record {|\n    string city;\n    string country;\n|};\n\npublic function main() returns error? {\n    // Extract the SOAP payload\n    xml xmlPayload = soapPayload/**/<ns:Body>;\n    io:println(xmlPayload);\n\n    // Navigate to the subcontext and extract the data\n    xml person = xmlPayload/<person>;\n\n    string name = (person/<name>).data();\n    string age = (person/<age>).data();\n    string city = (person/**/<city>).data();\n\n    // Extract the sub-xml and convert it to a record\n    address address = check xmldata:fromXml(person/<address>);\n    string country = address.country;\n\n    io:println(string &#x60;Name: ${name}, Age: ${age}, City: ${city}, Country: ${country}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/xmldata;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Define a SOAP payload</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">xml</span><span style=\"color:#24292E\"> soapPayload </span><span style=\"color:#D73A49\">=</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    xml</span><span style=\"color:#032F62\"> `&#x3C;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            &#x3C;soapenv:Body></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                &#x3C;person></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    &#x3C;name>John Doe&#x3C;/name></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    &#x3C;age>30&#x3C;/age></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    &#x3C;address></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                        &#x3C;city>New York&#x3C;/city></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                        &#x3C;country>USA&#x3C;/country></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    &#x3C;/address></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                &#x3C;/person></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            &#x3C;/soapenv:Body></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        &#x3C;/soapenv:Envelope>`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">xmlns</span><span style=\"color:#032F62\"> \"http://schemas.xmlsoap.org/soap/envelope/\"</span><span style=\"color:#D73A49\"> as</span><span style=\"color:#24292E\"> ns;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> address</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> city;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> country;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Extract the SOAP payload</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    xml</span><span style=\"color:#24292E\"> xmlPayload </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> soapPayload</span><span style=\"color:#D73A49\">/**/&#x3C;</span><span style=\"color:#24292E\">ns</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Body</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">xmlPayload</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Navigate to the subcontext and extract the data</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    xml</span><span style=\"color:#24292E\"> person </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> xmlPayload</span><span style=\"color:#D73A49\">/&#x3C;</span><span style=\"color:#24292E\">person</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">person</span><span style=\"color:#D73A49\">/&#x3C;</span><span style=\"color:#E36209\">name</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">data</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">person</span><span style=\"color:#D73A49\">/&#x3C;</span><span style=\"color:#E36209\">age</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">data</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> city </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">person</span><span style=\"color:#D73A49\">/**/&#x3C;</span><span style=\"color:#E36209\">city</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">data</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Extract the sub-xml and convert it to a record</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    address address </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> xmldata</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fromXml</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">person</span><span style=\"color:#D73A49\">/&#x3C;</span><span style=\"color:#E36209\">address</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> country </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> address.country;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Name: ${</span><span style=\"color:#24292E\">name</span><span style=\"color:#032F62\">}, Age: ${</span><span style=\"color:#24292E\">age</span><span style=\"color:#032F62\">}, City: ${</span><span style=\"color:#24292E\">city</span><span style=\"color:#032F62\">}, Country: ${</span><span style=\"color:#24292E\">country</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"}}},"__N_SSG":true}