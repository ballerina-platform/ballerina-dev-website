{"pageProps":{"frontmatter":{"layout":"ballerina-cloud-left-nav-pages-swanlake","title":"Code to Cloud deployment","description":"Ballerina Code to Cloud is designed to allow developers to write code without thinking about the deployment platform.","keywords":"ballerina, programming language, services, cloud, kubernetes, docker","permalink":"/learn/run-ballerina-programs-in-the-cloud/code-to-cloud-deployment/","active":"code-to-cloud-deployment","intro":"Ballerina Code to Cloud is designed to allow developers to write code without thinking about the deployment platform.","redirect_from":["/learn/deployment/code-to-cloud","/swan-lake/learn/deployment/code-to-cloud/","/swan-lake/learn/deployment/code-to-cloud","/learn/deployment/code-to-cloud/","/learn/deployment/code-to-cloud","/learn/deployment/docker/","/learn/deployment/docker","/learn/user-guide/deployment/code-to-cloud","/learn/user-guide/deployment/","/learn/user-guide/deployment","/learn/user-guide/deployment/docker/","/learn/user-guide/deployment/docker","/learn/user-guide/deployment/code-to-cloud/","/learn/running-ballerina-programs-in-the-cloud/code-to-cloud","/learn/running-ballerina-programs-in-the-cloud/code-to-cloud/","/learn/running-ballerina-programs-in-the-cloud/","/learn/running-ballerina-programs-in-the-cloud","/learn/running-ballerina-programs-in-the-cloud/code-to-cloud/code-to-cloud-deployment","/learn/running-ballerina-programs-in-the-cloud/code-to-cloud/code-to-cloud-deployment/","/learn/running-ballerina-programs-in-the-cloud/code-to-cloud-deployment/","/learn/running-ballerina-programs-in-the-cloud/code-to-cloud-deployment","/learn/run-ballerina-programs-in-the-cloud/code-to-cloud-deployment","/learn/run-ballerina-programs-in-the-cloud/","/learn/run-ballerina-programs-in-the-cloud","/learn/guides/running-ballerina-programs-in-the-cloud/code-to-cloud/code-to-cloud-deployment/","/learn/guides/running-ballerina-programs-in-the-cloud/code-to-cloud/code-to-cloud-deployment"]},"content":"\nThis greatly simplifies the experience of developing and deploying Ballerina code in the cloud. It also enables using cloud-native technologies easily without in-depth knowledge.\n\nAs of now, Ballerina Code to Cloud supports generating the deployment artifacts of the platforms below.\n\n1. Docker\n2. Kubernetes\n\n## Set up the prerequisites\n\nTo complete this tutorial, you need:\n1. <a href=\"https://www.docker.com/\" target=\"_blank\">Docker</a> installed and configured in your machine\n2. <a href=\"https://kubernetes.io/docs/tasks/tools/\" target=\"_blank\">Kubectl</a> installed and configured in a <a href=\"https://minikube.sigs.k8s.io/docs/start/\" target=\"_blank\">Kubernetes cluster</a>\n\n## How Code to Cloud works\n\nCode to cloud builds the containers and required artifacts by deriving the required values from the code. This process happens when the package is being compiled. To override the default values given by the compiler, the `Cloud.toml` file needs to be created in the package directory. \n\n## Package layout\n\nBallerina encourages having one microservice per package. To adhere to that rule, Code to Cloud generates only one container per package. These artifacts can be found in the `target` directory of the package. A complete representation of the package layout is as follows.\n\n```\n├── Cloud.toml                               \n├── Ballerina.lock\n├── Ballerina.toml\n├── Config.toml\n├── entry.bal                          \n└── target\n    ├── bala\n    │   └── module-0.0.1.bala\n    ├── bin\n    │   └── <module>.jar\n    ├── docker\n    │       └── Dockerfile                        \n    └── kubernetes\n            └── <module>-0.0.1.yaml \n```\n\n***Cloud.toml***\n\nThe configuration file is used to override the default values generated by Code to Cloud.\n\n>**Note:** The `Cloud.toml` file is completely optional and you only have to specify the values you need to override. If the value is not specified for a certain field, the compiler will take the default value. All the supported properties can be found in the <a href=\"https://github.com/ballerina-platform/ballerina-spec/blob/master/c2c/code-to-cloud-spec.md\" target=\"_blank\">Code to Cloud specification</a>.\n\n***Ballerina.toml***\n\nContains metadata about the Ballerina package. This file is used to fetch defaults for deployment artifacts generation.\n>**Note:** The `Ballerina.toml` file can be used to specify the build option.\n```toml\n[build-options]\n# cloud = \"docker\"\ncloud = \"k8s\" \n```\n\n***Config.toml***\n\nContains the values, which need to be passed into the configurable variables. To learn more about this, see [Configure a sample Ballerina service](https://ballerina.io/learn/configure-ballerina-programs/configure-a-sample-ballerina-service/). When you are using the cloud-related features in Ballerina, the `Config.toml` file is not being packed with the container image as it can contain sensitive information. You need to explicitly provide this file in the runtime. \n\n***entry.bal***\n\nRepresents any `.bal` file that has an entry point. The compiler will be using this file to retrieve service-related information for the deployment artifacts.\n\n***target/docker/***\n\nContains the Docker artifacts generated by Code to Cloud. These artifacts will be required to build the Docker image.\n\n***target/kubernetes/***\n\nContains the Kubernetes artifacts generated by Code to Cloud. These artifacts will be required to deploy the Ballerina application in Kubernetes.\n\n## Docker deployment\n\n### Create the Ballerina package\n\n1. Execute the `bal new hello_docker` command to create a new package named `hello_docker`.\n\n2. Replace the content of the `./hello_docker/main.bal` file with the content below.\n\n    >**Note:** The source is completely focused on the business logic. \n\n    ***main.bal***\n\n    ```ballerina\n    import ballerina/http;\n\n    listener http:Listener helloEP = new(9090);\n\n    configurable string name = ?;\n\n    service /helloWorld on helloEP {\n        resource function get sayHello() returns string {   \n            return string `Hello, ${name}!`;\n        }\n    }\n    ```\n3. Add `cloud = \"docker\"` under the `[build-options]` table into the `Ballerina.toml` file in the package.\n\n    ***Ballerina.toml***\n\n    ```toml\n    [build-options]\n    cloud = \"docker\"\n    ```\n\n4. Create a file named `Cloud.toml` in the package directory and add the content below.\n\n    ***Cloud.toml***\n\n    ```toml\n    [container.image]\n    repository=\"wso2inc\" # Docker hub name\n    name=\"hello\" # container name\n    tag=\"v0.1.0\"\n\n    [settings]\n    buildImage=true # you can make this false if you don't want to build the image and you just need the Dockerfile\n    ```\n5. Create the `Config.toml` file in the package directory or anywhere else and paste the following content. \n    \n    ***Config.toml***\n\n    ```toml\n    name = \"Docker\"\n    ```\n\n### Generate the artifacts\n\nExecute the `bal build` command to build the Ballerina package and view the output below. If you haven't added the cloud option to `Ballerina.toml` file, you can execute `bal build --cloud=docker` to generate the artifacts and build the package by providing the build option inline. \n\n```\n$> bal build\nCompiling source\n        wso2/hello_docker:0.1.0\n\nGenerating executable\n\nGenerating artifacts...\n\n        @kubernetes:Docker                       - complete 2/2 \n\n        Execute the below command to run the generated docker image: \n        docker run -d -p 9090:9090 wso2inc/hello:v0.1.0\n\n        target/bin/hello_docker.jar\n```\n\nBefore invoking the container, let’s observe the Dockerfile below that has been generated. This is a Dockerfile created by the compiler extension from your code to run your HTTP service in the Docker environment easily.\n\n***target/docker/hello/Dockerfile***\n\n```\n# Auto Generated Dockerfile\nFROM ballerina/jvm-runtime:1.0\n\nLABEL maintainer=\"dev@ballerina.io\"\n\nCOPY ballerina-http-2.2.0.jar /home/ballerina/jars/ \nCOPY ballerina-io-1.2.0.jar /home/ballerina/jars/ \nCOPY wso2-hello_docker-0.1.0.jar /home/ballerina/jars/ \n...\n\nRUN addgroup troupe \\\n    && adduser -S -s /bin/bash -g 'ballerina' -G troupe -D ballerina \\\n    && apk add --update --no-cache bash \\\n    && chown -R ballerina:troupe /usr/bin/java \\\n    && rm -rf /var/cache/apk/*\n\nWORKDIR /home/ballerina\nCOPY wso2-hello_docker-0.1.0.jar /home/ballerina\n\nEXPOSE  9090\nUSER ballerina\n\nCMD java -Xdiag -cp \"anjana-http2_test-0.1.0.jar:jars/*\" 'anjana/http2_test/0/$_init'\n```\n\n### Execute the Docker image\n\nFollow the steps below to execute the Docker image separately.\n\n1. Execute the `docker images` command to verify if the Docker image is generated.\n\n    ```\n    $> docker images\n    REPOSITORY                    TAG                 IMAGE ID            CREATED              SIZE\n    wso2inc/hello                 v0.1.0              60d95f0928b2        About a minute ago   228MB\n    ```\n\n2. Execute the `docker run -d -v <path/to/config>/Config.toml:/home/ballerina/Config.toml -p 9090:9090 wso2inc/hello:v0.1.0` command to run the generated Docker image. \n\n>**Info:** Make sure to set the correct path of the created `Config.toml`. Using volume mount is one way of providing the `Config.toml` file into the runtime. For other ways of providing configurable values, see the [Ballerina specification](https://github.com/ballerina-platform/ballerina-spec/blob/master/configurable/spec.md#locating-toml-files).\n\n    ```\n    $> docker run -d -v /home/wso2/c2c-guide/hello_docker/Config.toml:/home/ballerina/Config.toml -p 9090:9090 wso2inc/hello:v0.1.0\n    c04194eb0b4d0d78cbc8ca55e0527d381d8ab4a1a68f8ea5dd3770a0845d5fbb\n    ```\n\n3. Execute the `curl http://localhost:9090/helloWorld/sayHello` command to access the service.\n\n    ```\n    $> curl http://localhost:9090/helloWorld/sayHello\n    Hello, Docker!\n    ```\n\n## Kubernetes deployment\n\n### Create the Ballerina package\nBelow sample describes a Ballerina application that reads a greeting string from a config map and greets the user upon HTTP request. By following the steps below, you can make a Kubernetes deployment that has container resource limits, horizontal pod autoscaling, config maps and liveness, readiness probes with the help of Code to Cloud.\n\n1. Execute the `bal new hello_k8s` command to create a new package named `hello_k8s` and go inside that directory.\n\n2. Replace the content of the `main.bal` file with the content below.\n\n    ***main.bal***\n\n    ```ballerina\n    import ballerina/http;\n\n    listener http:Listener helloEP = new (9090);\n\n    configurable string greeting = ?;\n\n    service /helloWorld on helloEP {\n        resource function get sayHello() returns string|error? {\n            return greeting + \", Kubernetes!\";\n        }\n    }\n    ```\n2. Create `probes.bal` with the following contents.\n\n    ***probes.bal***\n\n    ```ballerina\n    import ballerina/http;\n\n    listener http:Listener probeEP = new (9091);\n    service /probes on probeEP {\n        resource function get healthz() returns boolean {\n            return true;\n        }\n        resource function get readyz() returns boolean {\n            return true;\n        }\n    }\n    ```\n3. Create the `Config.toml` file in the package directory and paste the following content into it.\n\n    ***Config.toml***\n    ```toml\n    greeting = \"Hello\"\n    ```\n    \n4. Add `cloud = \"k8s\"` under the `[build-options]` table into the `Ballerina.toml` file in the package.\n\n    ***Ballerina.toml***\n\n    ```toml\n    [build-options]\n    cloud = \"k8s\"\n    ```\n\n5. Create a file named `Cloud.toml` in the package directory and add the content below. You can use some properties from the docker sample here since `cloud=\"k8s\"` option builds both Docker image and Kubernetes. You can see a brief description of the properties in the comments.\n\n    ***Cloud.toml***\n\n    ```toml\n    [container.image]\n    repository=\"wso2inc\" # Ex - Docker hub repository name.\n    name=\"hello-k8s\" # Container name\n    tag=\"v0.1.0\"\n\n    [cloud.deployment]\n    min_memory=\"100Mi\" # Minimum memory required for the container.\n    max_memory=\"256Mi\" # Maximum memory a single container can take.\n    min_cpu=\"500m\"  # Minimum CPU required for the container.\n    max_cpu=\"500m\" # Maximum CPU a single container can take.\n\n    [cloud.deployment.autoscaling]\n    min_replicas=2 # Minimum number of container instances ran at a given time\n    max_replicas=5 # Maximum number of replicas of the container can scale up to\n    cpu=60 # Average CPU utilization of pods\n\n    [[cloud.config.files]] # Mounts the `Config.toml` file as a config map in Kubernetes.\n    file=\"./Config.toml\"\n\n    [cloud.deployment.probes.liveness]\n    port=9091\n    path=\"/probes/healthz\"\n\n    [cloud.deployment.probes.readiness]\n    port=9091\n    path=\"/probes/readyz\"\n    ```\n\n### Generate the artifacts\n\nOnce you build the Ballerina package, the compiler extension will generate the artifacts required for k8s deployment.\n\n>**Tip:** If you are using Minikube, execute the `eval $(minikube docker-env)` command before building the image if you don't want to push the container to the Docker registry.\n\n>**Tip:** If you don't have the cloud=\"k8s\" entry on the `Ballerina.toml` you can execute `bal build --cloud=k8s` command to provide the build option inline.\n\n```\n$ bal build\nCompiling source\n        wso2/hello_k8s:0.1.0\n\nGenerating executable\n\nGenerating artifacts...\n\n        @kubernetes:Service                      - complete 1/2\n        @kubernetes:Service                      - complete 2/2\n        @kubernetes:ConfigMap                    - complete 1/1\n        @kubernetes:Deployment                   - complete 1/1\n        @kubernetes:HPA                          - complete 1/1\n        @kubernetes:Docker                       - complete 2/2 \n\n        Execute the below command to deploy the Kubernetes artifacts: \n        kubectl apply -f /home/wso2/c2c-guide/hello_k8s/target/kubernetes/hello_k8s\n\n        Execute the below command to access service via NodePort: \n        kubectl expose deployment hello-k8s-deployment --type=NodePort --name=hello-k8s-svc-local\n\n        target/bin/hello_k8s.jar\n```\n\n>**Note:** Before invoking the Kubernetes service, observe the Kubernetes yamls that have been generated. You should be able to find services for ports that have been exposed, `HorizontalPodAutoscaler` for scaling and Deployment, and Config maps.\n\n***target/kubernetes/hello_k8s***\n\n```yaml\n---\n---\napiVersion: \"v1\"\nkind: \"Service\"\nmetadata:\n  labels:\n    app: \"hello_k8s\"\n  name: \"hello-k8s-svc\"\nspec:\n  ports:\n  - name: \"port-1-hello-k8\"\n    port: 9090\n    protocol: \"TCP\"\n    targetPort: 9090\n  - name: \"port-2-hello-k8\"\n    port: 9091\n    protocol: \"TCP\"\n    targetPort: 9091\n  selector:\n    app: \"hello_k8s\"\n  type: \"ClusterIP\"\n---\napiVersion: \"v1\"\nkind: \"ConfigMap\"\nmetadata:\n  name: \"config-config-map\"\ndata:\n  Config.toml: \"greeting = \\\"Hello\\\"\\n\"\n---\napiVersion: \"apps/v1\"\nkind: \"Deployment\"\nmetadata:\n  labels:\n    app: \"hello_k8s\"\n  name: \"hello-k8s-deployment\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: \"hello_k8s\"\n  template:\n    metadata:\n      labels:\n        app: \"hello_k8s\"\n    spec:\n      containers:\n      - env:\n        - name: \"BAL_CONFIG_FILES\"\n          value: \"/home/ballerina/conf/Config.toml:\"\n        image: \"wso2inc/hello-k8s:v0.1.0\"\n        lifecycle:\n          preStop:\n            exec:\n              command:\n              - \"sleep\"\n              - \"15\"\n        livenessProbe:\n          httpGet:\n            path: \"/probes/healthz\"\n            port: 9091\n          initialDelaySeconds: 30\n        name: \"hello-k8s-deployment\"\n        ports:\n        - containerPort: 9090\n          name: \"port-1-hello-k8\"\n          protocol: \"TCP\"\n        - containerPort: 9091\n          name: \"port-2-hello-k8\"\n          protocol: \"TCP\"\n        readinessProbe:\n          httpGet:\n            path: \"/probes/readyz\"\n            port: 9091\n          initialDelaySeconds: 30\n        resources:\n          limits:\n            memory: \"256Mi\"\n            cpu: \"500m\"\n          requests:\n            memory: \"100Mi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - mountPath: \"/home/ballerina/conf/\"\n          name: \"config-config-map-volume\"\n          readOnly: false\n      nodeSelector: {}\n      volumes:\n      - configMap:\n          name: \"config-config-map\"\n        name: \"config-config-map-volume\"\n---\napiVersion: \"autoscaling/v1\"\nkind: \"HorizontalPodAutoscaler\"\nmetadata:\n  labels:\n    app: \"hello_k8s\"\n  name: \"hello-k8s-hpa\"\nspec:\n  maxReplicas: 5\n  minReplicas: 2\n  scaleTargetRef:\n    apiVersion: \"apps/v1\"\n    kind: \"Deployment\"\n    name: \"hello-k8s-deployment\"\n  targetCPUUtilizationPercentage: 60\n```\n\n### Execute the Kubernetes service\n\nFollow the steps below to execute the Kubernetes service.\n1. Execute `docker push <repository>/<name>:<tag>` to push the container to docker hub. You can skip this step if you executed `eval $(minikube docker-env)` before building the container.\n    ```\n    $ docker push wso2inc/hello-k8s:v0.1.0\n    ```\n\n2. Execute the `kubectl apply -f target/kubernetes/hello_k8s` command to execute the service.\n\n    ```\n    $ kubectl apply -f target/kubernetes/hello_k8s\n    service/hello-k8s-svc created\n    configmap/hello-k8s-config-json created\n    deployment.apps/hello-k8s-deployment created\n    horizontalpodautoscaler.autoscaling/hello-k8s-hpa created\n    ```\n\n3. Execute the `kubectl get pods` command to verify the Kubernetes pods.\n\n    ```\n    $ kubectl get pods\n    NAME                                        READY   STATUS    RESTARTS   AGE\n    hello-k8s-deployment-577d8dbf8-p8zg5   1/1     Running   0          37s\n    hello-k8s-deployment-577d8dbf8-p8zg5   1/1     Running   0          57s\n    ```\n\n4. Execute the `kubectl expose deployment hello-k8s-deployment --type=NodePort --name=hello-k8s-svc-local` command to expose the service via NodePort to test in the development environment.\n\n    ```\n    $ kubectl expose deployment hello-k8s-deployment --type=NodePort --name=hello-k8s-svc-local\n    service/hello-k8s-svc-local exposed\n    ```\n\n5. Execute the `kubectl get svc` command to get the EXTERNAL-IP and port of the Kubernetes service.\n\n    ```\n    $ kubectl get svc\n    NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\n    hello-k8s-svc         ClusterIP   10.96.173.207   <none>        9090/TCP,9091/TCP               5m11s\n    hello-k8s-svc-local   NodePort    10.99.245.41    <none>        9090:30342/TCP,9091:30515/TCP   66s\n    kubernetes            ClusterIP   10.96.0.1       <none>        443/TCP                         130m\n    ```\n\n    >**Tip:** If you are using Minikube, execute the `minikube ip` command to get the IP address.\n\n    ```\n    $ minikube ip\n    192.168.49.2\n    ```\n\n6. Execute the `curl http://192.168.49.2:30342/helloWorld/sayHello` command to access the deployed service via cURL.\n\n    ```\n    $ curl http://192.168.49.2:30342/helloWorld/sayHello\n    Hello, Kubernetes!\n    ```\n\n>**Note:** You can visit the <a href=\"https://github.com/ballerina-platform/ballerina-spec/blob/master/c2c/code-to-cloud-spec.md\" target=\"_blank\">Code to Cloud specification</a> for detailed information about all the supported features. As mentioned in the beginning, Code to Cloud is a tool created to make the development process easier. It does not cover the operational properties in Kubernetes. If you want to have these additional features in your deployment, or you need to change the generated Kubernetes artifacts, you can use <a href=\"https://kustomize.io\" target=\"_blank\">Kustomize</a> for modifying the generated YAML.\n","id":"code-to-cloud-deployment","sub":"run-in-the-cloud","third":"code-to-cloud","slug":"run-in-the-cloud/code-to-cloud/code-to-cloud-deployment","codes":"[[570818786,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">build-options</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># cloud = &quot;docker&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">cloud = </span><span style=\\\"color: #0A3069\\\">&quot;k8s&quot;</span></span></code></pre>\"],[66401851,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">listener</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Listener helloEP </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">9090</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> name </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">/helloWorld</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> helloEP {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">sayHello</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> {   </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">`Hello, ${</span><span style=\\\"color: #24292F\\\">name</span><span style=\\\"color: #0A3069\\\">}!`</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-235926273,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">build-options</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">cloud = </span><span style=\\\"color: #0A3069\\\">&quot;docker&quot;</span></span></code></pre>\"],[-1605246216,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">container</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">image</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">repository=</span><span style=\\\"color: #0A3069\\\">&quot;wso2inc&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Docker hub name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">name=</span><span style=\\\"color: #0A3069\\\">&quot;hello&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># container name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">tag=</span><span style=\\\"color: #0A3069\\\">&quot;v0.1.0&quot;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">settings</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">buildImage=</span><span style=\\\"color: #0550AE\\\">true</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># you can make this false if you don&#39;t want to build the image and you just need the Dockerfile</span></span></code></pre>\"],[-1091297096,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">name = </span><span style=\\\"color: #0A3069\\\">&quot;Docker&quot;</span></span></code></pre>\"],[-1965229756,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">listener</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Listener helloEP </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0550AE\\\">9090</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> greeting </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">/helloWorld</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> helloEP {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">sayHello</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">|error?</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> greeting </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;, Kubernetes!&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-818028256,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">listener</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Listener probeEP </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0550AE\\\">9091</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">/probes</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> probeEP {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">healthz</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">boolean</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">true</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">readyz</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">boolean</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">true</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[937380936,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">greeting = </span><span style=\\\"color: #0A3069\\\">&quot;Hello&quot;</span></span></code></pre>\"],[1431467551,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">build-options</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">cloud = </span><span style=\\\"color: #0A3069\\\">&quot;k8s&quot;</span></span></code></pre>\"],[-239496856,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">container</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">image</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">repository=</span><span style=\\\"color: #0A3069\\\">&quot;wso2inc&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Ex - Docker hub repository name.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">name=</span><span style=\\\"color: #0A3069\\\">&quot;hello-k8s&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Container name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">tag=</span><span style=\\\"color: #0A3069\\\">&quot;v0.1.0&quot;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">cloud</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">deployment</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">min_memory=</span><span style=\\\"color: #0A3069\\\">&quot;100Mi&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Minimum memory required for the container.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">max_memory=</span><span style=\\\"color: #0A3069\\\">&quot;256Mi&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Maximum memory a single container can take.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">min_cpu=</span><span style=\\\"color: #0A3069\\\">&quot;500m&quot;</span><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #6E7781\\\"># Minimum CPU required for the container.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">max_cpu=</span><span style=\\\"color: #0A3069\\\">&quot;500m&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Maximum CPU a single container can take.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">cloud</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">deployment</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">autoscaling</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">min_replicas=</span><span style=\\\"color: #0550AE\\\">2</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Minimum number of container instances ran at a given time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">max_replicas=</span><span style=\\\"color: #0550AE\\\">5</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Maximum number of replicas of the container can scale up to</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">cpu=</span><span style=\\\"color: #0550AE\\\">60</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #6E7781\\\"># Average CPU utilization of pods</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[[</span><span style=\\\"color: #953800\\\">cloud</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">config</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">files</span><span style=\\\"color: #24292F\\\">]] </span><span style=\\\"color: #6E7781\\\"># Mounts the `Config.toml` file as a config map in Kubernetes.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">file=</span><span style=\\\"color: #0A3069\\\">&quot;./Config.toml&quot;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">cloud</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">deployment</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">probes</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">liveness</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">port=</span><span style=\\\"color: #0550AE\\\">9091</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">path=</span><span style=\\\"color: #0A3069\\\">&quot;/probes/healthz&quot;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[</span><span style=\\\"color: #953800\\\">cloud</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">deployment</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">probes</span><span style=\\\"color: #24292F\\\">.</span><span style=\\\"color: #953800\\\">readiness</span><span style=\\\"color: #24292F\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">port=</span><span style=\\\"color: #0550AE\\\">9091</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">path=</span><span style=\\\"color: #0A3069\\\">&quot;/probes/readyz&quot;</span></span></code></pre>\"],[1572447630,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">apiVersion</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;v1&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">kind</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;Service&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">metadata</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">labels</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">app</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello_k8s&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello-k8s-svc&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">spec</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">ports</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  - </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;port-1-hello-k8&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">port</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">9090</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">protocol</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;TCP&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">targetPort</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">9090</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  - </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;port-2-hello-k8&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">port</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">9091</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">protocol</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;TCP&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">targetPort</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">9091</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">selector</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">app</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello_k8s&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">type</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;ClusterIP&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">apiVersion</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;v1&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">kind</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;ConfigMap&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">metadata</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;config-config-map&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">data</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">Config.toml</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;greeting = </span><span style=\\\"color: #0550AE\\\">\\\\&quot;</span><span style=\\\"color: #0A3069\\\">Hello</span><span style=\\\"color: #0550AE\\\">\\\\&quot;\\\\n</span><span style=\\\"color: #0A3069\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">apiVersion</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;apps/v1&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">kind</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;Deployment&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">metadata</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">labels</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">app</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello_k8s&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello-k8s-deployment&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">spec</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">replicas</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">selector</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">matchLabels</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">      </span><span style=\\\"color: #116329\\\">app</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello_k8s&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">template</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">metadata</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">      </span><span style=\\\"color: #116329\\\">labels</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">app</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello_k8s&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">spec</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">      </span><span style=\\\"color: #116329\\\">containers</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">      - </span><span style=\\\"color: #116329\\\">env</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        - </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;BAL_CONFIG_FILES&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">value</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;/home/ballerina/conf/Config.toml:&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">image</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;wso2inc/hello-k8s:v0.1.0&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">lifecycle</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">preStop</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">exec</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">              </span><span style=\\\"color: #116329\\\">command</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">              - </span><span style=\\\"color: #0A3069\\\">&quot;sleep&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">              - </span><span style=\\\"color: #0A3069\\\">&quot;15&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">livenessProbe</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">httpGet</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">path</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;/probes/healthz&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">port</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">9091</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">initialDelaySeconds</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">30</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello-k8s-deployment&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">ports</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        - </span><span style=\\\"color: #116329\\\">containerPort</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">9090</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;port-1-hello-k8&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">protocol</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;TCP&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        - </span><span style=\\\"color: #116329\\\">containerPort</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">9091</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;port-2-hello-k8&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">protocol</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;TCP&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">readinessProbe</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">httpGet</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">path</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;/probes/readyz&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">port</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">9091</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">initialDelaySeconds</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">30</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">resources</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">limits</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">memory</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;256Mi&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">cpu</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;500m&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">requests</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">memory</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;100Mi&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #116329\\\">cpu</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;500m&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">volumeMounts</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        - </span><span style=\\\"color: #116329\\\">mountPath</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;/home/ballerina/conf/&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;config-config-map-volume&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">readOnly</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">      </span><span style=\\\"color: #116329\\\">nodeSelector</span><span style=\\\"color: #24292F\\\">: {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">      </span><span style=\\\"color: #116329\\\">volumes</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">      - </span><span style=\\\"color: #116329\\\">configMap</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">          </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;config-config-map&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;config-config-map-volume&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">apiVersion</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;autoscaling/v1&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">kind</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;HorizontalPodAutoscaler&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">metadata</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">labels</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">app</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello_k8s&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello-k8s-hpa&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #116329\\\">spec</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">maxReplicas</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">5</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">minReplicas</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">scaleTargetRef</span><span style=\\\"color: #24292F\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">apiVersion</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;apps/v1&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">kind</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;Deployment&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #116329\\\">name</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0A3069\\\">&quot;hello-k8s-deployment&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #116329\\\">targetCPUUtilizationPercentage</span><span style=\\\"color: #24292F\\\">: </span><span style=\\\"color: #0550AE\\\">60</span></span></code></pre>\"]]"},"__N_SSG":true}