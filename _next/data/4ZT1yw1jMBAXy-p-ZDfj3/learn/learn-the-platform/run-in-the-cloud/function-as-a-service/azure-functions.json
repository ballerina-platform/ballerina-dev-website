{"pageProps":{"frontmatter":{"layout":"ballerina-cloud-left-nav-pages-swanlake","title":"Azure Functions","description":"Learn how to write and deploy Azure Functions using ballerina","keywords":"ballerina, programming language, serverless, cloud, azure, functions, cloud native","permalink":"/learn/run-ballerina-programs-in-the-cloud/function-as-a-service-with-ballerina/azure-functions/","active":"azure-functions","intro":"The Azure Functions extension provides the functionality to expose a Ballerina function as a serverless function in the Azure Functions platform.","redirect_from":["/learn/deployment/azure-functions","/swan-lake/learn/deployment/azure-functions/","/swan-lake/learn/deployment/azure-functions","/learn/deployment/azure-functions/","/learn/deployment/azure-functions","/learn/user-guide/deployment/azure-functions","/learn/user-guide/deployment/azure-functions/","/learn/running-ballerina-programs-in-the-cloud/function-as-a-service-with-ballerina/azure-functions","/learn/running-ballerina-programs-in-the-cloud/function-as-a-service-with-ballerina/azure-functions/","/learn/run-ballerina-programs-in-the-cloud/function-as-a-service-with-ballerina/azure-functions","/learn/guides/running-ballerina-programs-in-the-cloud/function-as-a-service-with-ballerina/azure-functions/","/learn/guides/running-ballerina-programs-in-the-cloud/function-as-a-service-with-ballerina/azure-functions"]},"content":"\n## Prerequisites\n* Install the latest Ballerina distribution.\n* Install the <a href=\"https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest\" target=\"_blank\">Azure CLI</a>.\n* Login to the Azure CLI by executing the `az login` command.\n* Create an <a href=\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-function-app-portal\" target=\"_blank\">Azure Function app</a> with the given resource group with following requirements.\n\n>**Note:** Make sure to remember the function application name and storage account name as they will be required in the code samples.\n   - Runtime stack - `Java 11`\n   - Hosting operating system - `Windows` (By default, Linux is not supported in Azure for custom handlers at the moment.)\n\n## Triggers and bindings\n\nAn Azure Function consists of a trigger and optional bindings. A trigger defines how a function is invoked. A binding is an approach in which you can declaratively connect other resources to the function. There are *input* and *output* bindings. An input binding is a source of data into the function. An output binding allows outputting data from the function to an external resource. For more information, go to <a href=\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings\" target=\"_blank\">Azure Functions triggers and bindings concepts</a>.\n\nThe following Azure Functions triggers and bindings are currently supported in Ballerina:\n- HTTP <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#HttpTrigger\" target=\"_blank\">trigger</a> and <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#HttpOutput\" target=\"_blank\">ouput</a> binding\n- Queue <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#QueueTrigger\" target=\"_blank\">trigger</a> and <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#QueueOutput\" target=\"_blank\">ouput</a> binding\n- Blob <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#BlobTrigger\" target=\"_blank\">trigger</a>, <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#BlobInput\" target=\"_blank\">input</a> binding, and <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#BlobOutput\" target=\"_blank\">output</a> binding\n- Twilio SMS <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#TwilioSmsOutput\" target=\"_blank\">output</a> binding\n- CosmosDB <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#CosmosDBTrigger\" target=\"_blank\">trigger</a>, <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#CosmosDBInput\" target=\"_blank\">input</a> binding, and <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#CosmosDBOutput\" target=\"_blank\">output</a> binding\n- Timer <a href=\"https://docs.central.ballerina.io/ballerinax/azure_functions/latest/annotations#TimerTrigger\" target=\"_blank\">trigger</a>\n\n## Write the function\n\nThe following Ballerina code gives an example of using an HTTP trigger to invoke the function, and an HTTP output binding to respond to the caller with a message based on the query parameter sent from the request. \n\nCreate a Ballerina package.\n```\n$ bal new azure_functions_deployment\n```\nReplace the contents of the generated BAL file with the following content.\n\n```ballerina\nimport ballerinax/azure_functions as af;\n\nservice / on new af:HttpListener() {\n    resource function get hello(string name) returns string {\n        return \"Hello, \" + name + \"!\";\n    }\n}\n\n```\nIn Ballerina, `triggers` are represented by `listeners`. When the `af:HttpListener` gets attached to the service, it implies that the function is an HTTP Trigger. The resource method behaves exactly the same as a service written from `ballerina/http`. It supports `http:Payload, http:Header` annotations for parameters. Input binding annotations can be used to annotate parameters to make use of external services in Azure. If no annotations are specified for a parameter, it is identified as a query parameter.\n\nOutput bindings are defined in the return type definition. For services with the `HttpListener` attachment, `HttpOutput` is the default output binding. You can override the default behavior by specifying them explicitly in the return type. For example, see [HTTP Trigger -> Queue Output](#http-trigger---queue-output).\n\nIn the code sample shown above, it has an empty service path and resource path named `hello`. The accessor is `get`. It expects a request with a query parameter for the field `name`. The required artifact generation and data binding will be handled by the `ballerinax/azure_functions` package automatically.\n\n### Build the function\n\nThe Azure Functions functionality is implemented as a compiler extension. Thus, artifact generation happens automatically when you build a Ballerina module. Let's see how this works by building the above code. \n\n```\n$ bal build\nCompiling source\n        wso2/azure_functions_deployment:0.1.0\n\nGenerating executable\n        @azure_functions:Function: get-hello\n\n        Execute the command below to deploy the function locally.\n        func start --script-root target/azure_functions --java\n\n        Execute the command below to deploy Ballerina Azure Functions.\n        func azure functionapp publish <function_app_name> --script-root target/azure_functions \n\n        target/bin/azure_functions_deployment.jar\n```\n\n### Deploy the function\n\nThe created function app name should be provided to the placeholders shown in the above-generated usage instructions from the compiler. \n\nA sample execution to deploy the functions to Azure Functions is shown below. \n\n```bash\n$ func azure functionapp publish <function_app_name> --script-root target/azure_functions \nGetting site publishing info...\nCreating archive for current directory...\nUploading 28.64 MB [##############################################################################]\nUpload completed successfully.\nDeployment completed successfully.\nSyncing triggers...\nFunctions in bal-learn-1:\n    get-hello - [httpTrigger]\n        Invoke url: https://bal-learn-1.azurewebsites.net/hello\n```\n\n### Invoke the function\n\nThe deployed Azure Function can be tested by invoking it using an HTTP client such as cURL:\n\n```\n$ curl https://<function_app_name>.azurewebsites.net/hello\\?name\\=Jack\nHello, Jack!\n```\n\n## More samples\n\nThis section uses different types of triggers and bindings to build Azure functions to integrate with different Azure services using concepts explained in the above sections.\n\n### HTTP Trigger -> queue output\n\nThe following Ballerina code gives an example of using an HTTP trigger to invoke the function and a queue output binding to write an entry to a queue.\n\nFirst, create a queue to hold the outputs of the function by accessing the storage account that was created alongside the function app in the prerequisites. Select **Queues** in the sidebar in the storage accounts. Click the **Add queue** button, and enter the same value as the value of the `queueName` property in the below `QueueOutput` annotation.\n\n```ballerina\nimport ballerina/http;\nimport ballerinax/azure_functions as af;\n\npublic type Person record {\n    string name;\n    int age;\n};\n\nservice / on new af:HttpListener() {\n    resource function post queue(@http:Payload Person person) returns @af:QueueOutput {queueName: \"people\"} string {\n        return person.name + \" is \" + person.age.toString() + \" years old.\";\n    }\n}\n```\n\nExecute the `bal build` command on the package directory to build the package. Then, execute the `func azure functionapp publish <function_app_name> --script-root target/azure_functions ` command shown in the Ballerina build output to deploy it.\n\nNow, the deployed Azure Function can be tested by invoking it using an HTTP client such as cURL. \n\n```bash\n$ curl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"name\":\"Jack\",\"age\":21}' \\   \n  https://<function_app_name>.azurewebsites.net/queue\n```\n\nRefresh the queue page in the portal and view the added entry.\n\n### Cosmos DB trigger -> queue output\n\nThe following Ballerina code gives an example of using a Cosmos DB trigger to invoke the function and a queue output binding to write an entry to a queue.\n\nBefore writing and deploying the code, create a Cosmos DB and a queue to make use of those services later.\n1. You can reuse the queue you created in the above <a href=\"/learn/run-in-the-cloud/function-as-a-service/azure-functions/#http-trigger---queue-output\" target=\"_blank\">`HTTP trigger` -> `Queue output`</a> sample.\n2. Create an <a href=\"https://portal.azure.com/#create/Microsoft.DocumentDB\" target=\"_blank\">Azure Cosmos DB account</a> and select Cosmos DB Core.\n3. Once the database is created, go to the **Data Explorer**, and select **Create Container**.\n4. Enter `db1` as Database ID and `c1` as the collection ID, and click **Ok**.\n\n**Note:** If you want to change these values, make sure to change them in the code as well.\n5. Go to the **Keys** tab of the Cosmos DB page.\n6. Copy the value of the `PRIMARY CONNECTION STRING`.\n7. Click the **Configuration** tab on the Function app page.\n8. Select **New Application Setting**, and paste the data you copied above as the value. For the key, use the value of the `connectionStringSetting` key and save.\n\nExample application setting is as follows.\n```\nName - `CosmosDBConnection`\nValue - `AccountEndpoint=https://db-cosmos.documents.azure.com:443/;AccountKey=12345asda;`\n```\n\nNow, as all the infrastructure required are up and running and configured, start building and deploying the Azure function.\n\n```ballerina\nimport ballerina/log;\nimport ballerinax/azure_functions as af;\n\npublic type DBEntry record {\n    string id;\n    string name;\n};\n\n@af:CosmosDBTrigger {connectionStringSetting: \"CosmosDBConnection\", databaseName: \"db1\", collectionName: \"c1\"}\nlistener af:CosmosDBListener cosmosEp = new ();\n\nservice \"cosmos\" on cosmosEp {\n    remote function onUpdated(DBEntry[] entries) returns @af:QueueOutput {queueName: \"people\"} string {\n        string name = entries[0].name;\n        log:printInfo(entries.toJsonString());\n        return \"Hello, \" + name;\n    }\n}\n\n```\n\nExecute the `bal build` command on the package directory to build the package. Then, execute the `func azure functionapp publish <function_app_name> --script-root target/azure_functions ` command shown in the Ballerina build output to deploy it.\n\nOnce the function is deployed, add an item to the collection.\n1. Navigate to the collection created in the **Data Explorer**.\n2. Click **New Item** to add a new item to the collection.\n3. Go to the queue page and observe the added new entry.\n\n**Info:** Additionally, for debugging purposes, view the logs under the **Logs stream** in the function app.\n\n>**Note:** For a full sample with all the supported Azure Functions triggers and bindings in Ballerina, see the [Azure Functions deployment example](/learn/by-example/azure-functions-deployment).\n\n<style> #tree-expand-all , #tree-collapse-all, .cTocElements {display:none;} .cGitButtonContainer {padding-left: 40px;} </style>\n","id":"azure-functions","sub":"run-in-the-cloud","third":"function-as-a-service","slug":"run-in-the-cloud/function-as-a-service/azure-functions","codes":"[[1325067264,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerinax/azure_functions </span><span style=\\\"color: #CF222E\\\">as</span><span style=\\\"color: #24292F\\\"> af;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> / </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> af:HttpListener() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">hello</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">name</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Hello, &quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> name </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;!&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[1030196967,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #953800\\\">$</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">func</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">azure</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">functionapp</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">publish</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&lt;</span><span style=\\\"color: #0A3069\\\">function_app_nam</span><span style=\\\"color: #24292F\\\">e</span><span style=\\\"color: #CF222E\\\">&gt;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">--script-root</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">target/azure_functions</span><span style=\\\"color: #24292F\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #953800\\\">Getting</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">site</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">publishing</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">info...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #953800\\\">Creating</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">archive</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">for</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">current</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">directory...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #953800\\\">Uploading</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">28.64</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">MB</span><span style=\\\"color: #24292F\\\"> [##############################################################################]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #953800\\\">Upload</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">completed</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">successfully.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #953800\\\">Deployment</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">completed</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">successfully.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #953800\\\">Syncing</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">triggers...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #953800\\\">Functions</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">in</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">bal-learn-</span><span style=\\\"color: #0550AE\\\">1</span><span style=\\\"color: #0A3069\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #953800\\\">get-hello</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">-</span><span style=\\\"color: #24292F\\\"> [httpTrigger]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #953800\\\">Invoke</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">url:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">https://bal-learn-1.azurewebsites.net/hello</span></span></code></pre>\"],[387299381,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerinax/azure_functions </span><span style=\\\"color: #CF222E\\\">as</span><span style=\\\"color: #24292F\\\"> af;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">type</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">Person</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">record</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> / </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> af:HttpListener() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">post</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">queue</span><span style=\\\"color: #24292F\\\">(@</span><span style=\\\"color: #0550AE\\\">http</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Payload</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">Person</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">person</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> @af</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">QueueOutput {queueName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;people&quot;</span><span style=\\\"color: #24292F\\\">} </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> person.name </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot; is &quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> person.age.</span><span style=\\\"color: #8250DF\\\">toString</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot; years old.&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-982074282,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #953800\\\">$</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">curl</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">--header</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Content-Type: application/json&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">\\\\</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #0550AE\\\">--request</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">POST</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">\\\\</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #0550AE\\\">--data</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&#39;{&quot;name&quot;:&quot;Jack&quot;,&quot;age&quot;:21}&#39;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">\\\\ </span><span style=\\\"color: #24292F\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">  </span><span style=\\\"color: #953800\\\">https://&lt;function_app_name&gt;.azurewebsites.net/queue</span></span></code></pre>\"],[-1020530732,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerinax/azure_functions </span><span style=\\\"color: #CF222E\\\">as</span><span style=\\\"color: #24292F\\\"> af;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">type</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">DBEntry</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">record</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">af</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">CosmosDBTrigger</span><span style=\\\"color: #24292F\\\"> {connectionStringSetting</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;CosmosDBConnection&quot;</span><span style=\\\"color: #24292F\\\">, databaseName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;db1&quot;</span><span style=\\\"color: #24292F\\\">, collectionName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;c1&quot;</span><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">listener</span><span style=\\\"color: #24292F\\\"> af</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">CosmosDBListener cosmosEp </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> ();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;cosmos&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> cosmosEp {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onUpdated</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">DBEntry</span><span style=\\\"color: #24292F\\\">[] </span><span style=\\\"color: #953800\\\">entries</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> @af</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">QueueOutput {queueName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;people&quot;</span><span style=\\\"color: #24292F\\\">} </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> name </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> entries[</span><span style=\\\"color: #0550AE\\\">0</span><span style=\\\"color: #24292F\\\">].name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        log</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">printInfo</span><span style=\\\"color: #24292F\\\">(entries.</span><span style=\\\"color: #8250DF\\\">toJsonString</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Hello, &quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}