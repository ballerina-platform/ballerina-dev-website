{"pageProps":{"frontmatter":{"layout":"ballerina-managing-dependencies-left-nav-pages-swanlake","title":"Manage dependencies","description":"The sections below include information about dependencies, imports, and how they can be used in your package.","keywords":"ballerina, programming language, ballerina packages, dependencies, importing modules","permalink":"/learn/manage-dependencies/","active":"manage-dependencies","intro":"The sections below include information about dependencies, imports, and how they can be used in your package.","redirect_from":["/learn/user-guide/ballerina-packages/dependencies","/learn/user-guide/ballerina-packages/dependencies/","/learn/managing-dependencies","/learn/managing-dependencies/","/learn/manage-dependencies","/learn/guides/managing-dependencies/","/learn/guides/managing-dependencies"]},"content":"\n## Specify dependencies\n\nA package can depend on other packages that are available in Ballerina repositories. By default, Ballerina searches for the dependencies in the repositories below.\n* The distribution repository\n* The Ballerina Central repository\n\nIt also supports a third repository named the `local repository`. It temporarily overrides dependencies, which is useful for the package development and bug fixing phases.\n\n**Distribution repository**\n\nThe distribution repository is a file system repository added with the local Ballerina installation. The repository is located at `<BALLERINA_HOME>/repo/bala`.\n\n**Ballerina Central repository**\n\nThe Ballerina Central is a remote repository and creates a local file system cache at `<USER_HOME>/.ballerina/repositories/central.ballerina.io/bala`. Ballerina queries the remote repository only if the specified dependency version is not present in its local cache.\n\n**Local repository**\n\nThe local repository is also a file system repository, which will be created in the `<USER_HOME>` location. The repository location is `<USER_HOME>/.ballerina/repositories/local/bala`. \nFor more information, see [Use dependencies from the local repository](/learn/manage-dependencies/#use-dependencies-from-the-local-repository).\n\n### Import a module\n\nTo use exported modules of any package, add an import statement in the Ballerina code. It enables access to all public symbols in the imported module.\n\nThe import declaration syntax is as follows.\n\n```ballerina\nimport [org_name/] module_name [as import_prefix];\n```\n\n* The `import_prefix` has to be a valid Ballerina identifier, and it is used to refer to public symbols in the declared module.\n* The `import_prefix` is optional. You can use the last part of the module name if an `import_prefix` is unavailable.\n\nYou can import a module by providing the organization name, and the module name. The module name consists of the package name, and the name of the module root directory.\nThe module name of the default module is always the package name. \n\nThe following example shows how to import modules from the `ballerina/io` package.\n\n```ballerina\nimport ballerina/io; // Imports the default module of io package\n\npublic function main() {\n\tio:println(\"Hello world!\");\n}\n```\n\nThe following is another example that shows the usage of multiple modules from different libraries.\n\n```ballerina\n// Imports the default module from the `ballerina/log` package.\nimport ballerina/log;\n// Imports the default module from the `googleapis.gmail` package\n// with an import prefix.\nimport ballerinax/googleapis.gmail as gmail;\n// Imports the only non-default module from the `googleapis.gmail` package\n// with an import prefix.\nimport ballerinax/googleapis.gmail.'listener as gmailListener;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable int port = ?;\nconfigurable string project = ?;\nconfigurable string pushEndpoint = ?;\n\ngmail:ConnectionConfig gmailConfig = {\n    auth: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: refreshToken,\n        clientId: clientId,\n        clientSecret: clientSecret\n    }\n};\n\nlistener gmailListener:Listener gmailEventListener =\n                            new (port, gmailConfig, project, pushEndpoint);\n\nservice / on gmailEventListener {\n    remote function onNewEmail(gmail:Message message) returns error? {\n        log:printInfo(\"New Email : \", message = message);\n    }\n}\n```\n\n## Specify dependency versions\n\nWhen building a package, the compiler figures out the dependency versions automatically. Ballerina searches the latest compatible versions of the package dependencies in the distribution repository, Ballerina Central repository, and the local repository (if specified).\n\nWhen you execute `bal build` for the first time on the package, the CLI operation will generate the `Dependencies.toml` in the package root. \nThis will contain the latest compatible dependency versions. From thereon, the versions locked in the `Dependencies.toml` are considered as the minimum required versions for the subsequent builds. The `Dependencies.toml` file is generated and managed by the Ballerina CLI and does not need user intervention.\n\n### Update dependency versions\n\nThe `Dependencies.toml` file generated during the compiler will automatically update the versions of the dependencies at the patch level. Therefore, if any patch release is available for a dependency, the compiler will pick the latest patch version.\n\n>**Note:** The automatic update runs only once a day to optimize the time taken during frequent builds. Run the `bal clean` command if you want to enable automatic updates for the next build.\n\nTo update the minor or the major version of a dependency, specify the dependency version in the `Ballerina.toml` file. The provided version is considered as the minimum required version for compiling the package, which will update the dependency to the latest version that is compatible with the version provided in the `Ballerina.toml` as well as the version locked in the`Dependencies.toml`.\n\nFor example, the minimum version of the `ballerinax/mysql` dependency can be specified in the following way.\n\n```toml\n[[dependency]]\norg = \"ballerinax\"\nname = \"mysql\"\nversion = \"1.5.0”\n```\n\n## Use dependencies from the local repository\n\nThe local repository is useful to test a package in the development phase or to fix bugs. To specify a dependency from the local repository, first, you need to publish it to the local repository by following the steps below.\n\n1. Generate the Ballerina archive after editing the package source files as required.\n\n   ```\n   bal pack\n   ```\n\n2. Publish to the local repository.\n   ```\n   bal push --repository local\n   ```\n\n   If you already have the path of Ballerina archive, then you can simply execute the following command.\n\n    ```\n    bal push --repository local <path-to-bala-archive>\n    ```\n\n3. Specify the dependency in the `Ballerina.toml` file.\n\n    ```toml\n    [[dependency]]\n    org = \"ballerinax\"\n    name = \"googleapis.gmail\"\n    version = \"2.1.1\"\n    repository = \"local\"\n    ```\n\nOnce you complete the above steps, the dependency will be picked from the local repository when building the package.\nBallerina considers the version specified in the Ballerina.toml as the minimum required version and uses the local repository to resolve the dependency.\nHowever, the compiler gives priority to the latest version if a new patch version is found in distribution or Ballerina Central repositories.\nAt this point, the compiler resolves the latest version and ignores the dependency version in the local repository.\n\n## Achieve reproducible builds\n\nBy default, the compiler always looks up the latest compatible versions of the dependencies in the repositories when building a package.\n It minimizes the hassle of managing dependency versions to the package developer since the compiler is smart enough to keep the package updated with the latest compatible dependencies all the time.\n However, if you need to repeat a constant behavior to make the build more predictable, Ballerina facilitates this using offline and sticky modes.\n\n### The sticky mode\n\nUsing the `--sticky` flag with `bal build` will force the compiler to stick to the exact versions locked in the `Dependencies.toml`. \nIn other words, the CLI disables the automatic-update feature when you provide the `--sticky` flag.\n   \n```\nbal build --sticky\n```\n\n>**Note:** The automatic update runs only once a day to optimize the time taken during frequent builds.\n\n### The offline mode\n\nUsing the` –-offline` flag with `bal build` will run the build offline without connecting to Ballerina Central. \nThis will save build time since the packages are resolved using the distribution repository, and the file system cache of the Ballerina Central repository.\n\nUsing the `--offline` flag along with the `--sticky` flag will ensure a predictable build with optimal time for compilation. \n\n## Version compatibility\n\nAbiding by the specifications of <a href=\"https://semver.org/\" target=\"_blank\">Semantic Versioning</a>, Ballerina considers two versions to be **compatible if the major versions are equal and not zero**.\n\nA few examples would be as follows:\n\n* `0.2.3` and `0.2.4` are considered incompatible since the major version is `0`. The major version `0` is unstable.\n* `1.2.3`, `1.2.4`, and `1.4.5` are compatible. `1.4.5` will be considered as the latest.\n* `1.2.3-alpha`, `1.2.3-alpha.2`, and `1.2.3-beta` are compatible and `1.2.3-beta` is considered the latest.\n* `1.2.3-alpha`, `1.2.3-beta`, `1.2.4-alpha` are compatible and `1.2.4-alpha` is considered the latest.\n* `1.0.0` and `2.0.0` are considered incompatible since the major versions are different.\n\nWhen building the dependency graph, if there is more than one version for a specific dependency, the versions are chosen according to the following.\n* If the versions are compatible, pick the latest version.\n* If the versions are incompatible, throw an error with a build failure.\n\nFor example, assume one dependency in your package depends on the `1.0.0` version of the `ballerina/observe` package, and another dependency depends on `0.9.0` of the same. The build fails with the following error message.\n\n```\nerror: compilation failed: Two incompatible versions exist in the dependency graph:\nballerina/observe versions: 0.9.0, 1.0.0\n```\n\n","id":"manage-dependencies","sub":"source-code-dependencies","third":"","slug":"source-code-dependencies/manage-dependencies","codes":"[[-713247735,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> [org_name/] module_name [</span><span style=\\\"color: #CF222E\\\">as</span><span style=\\\"color: #24292F\\\"> import_prefix];</span></span></code></pre>\"],[-871533555,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/io; </span><span style=\\\"color: #6E7781\\\">// Imports the default module of io package</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">main</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">\\tio</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Hello world!&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[953623648,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Imports the default module from the `ballerina/log` package.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Imports the default module from the `googleapis.gmail` package</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// with an import prefix.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerinax/googleapis.gmail </span><span style=\\\"color: #CF222E\\\">as</span><span style=\\\"color: #24292F\\\"> gmail;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Imports the only non-default module from the `googleapis.gmail` package</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// with an import prefix.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerinax/googleapis.gmail.&#39;listener </span><span style=\\\"color: #CF222E\\\">as</span><span style=\\\"color: #24292F\\\"> gmailListener;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> refreshToken </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> clientId </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> clientSecret </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> port </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> project </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> pushEndpoint </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">gmail</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ConnectionConfig gmailConfig </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    auth</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        refreshUrl</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> gmail:REFRESH_URL,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        refreshToken</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> refreshToken,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        clientId</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> clientId,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        clientSecret</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> clientSecret</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">listener</span><span style=\\\"color: #24292F\\\"> gmailListener</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Listener gmailEventListener </span><span style=\\\"color: #CF222E\\\">=</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">                            </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #953800\\\">port</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">gmailConfig</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">project</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">pushEndpoint</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> / </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> gmailEventListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onNewEmail</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">gmail</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Message message) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error?</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        log</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">printInfo</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;New Email : &quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">message</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> message);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[2039675758,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[[</span><span style=\\\"color: #953800\\\">dependency</span><span style=\\\"color: #24292F\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">org = </span><span style=\\\"color: #0A3069\\\">&quot;ballerinax&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">name = </span><span style=\\\"color: #0A3069\\\">&quot;mysql&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">version = </span><span style=\\\"color: #0A3069\\\">&quot;1.5.0”</span></span></code></pre>\"],[-553767983,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">[[</span><span style=\\\"color: #953800\\\">dependency</span><span style=\\\"color: #24292F\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">org = </span><span style=\\\"color: #0A3069\\\">&quot;ballerinax&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">name = </span><span style=\\\"color: #0A3069\\\">&quot;googleapis.gmail&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">version = </span><span style=\\\"color: #0A3069\\\">&quot;2.1.1&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">repository = </span><span style=\\\"color: #0A3069\\\">&quot;local&quot;</span></span></code></pre>\"]]"},"__N_SSG":true}