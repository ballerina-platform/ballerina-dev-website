{"pageProps":{"frontmatter":{"layout":"ballerina-testing-code-left-nav-pages-swanlake","title":"Mocking","description":"Learn how to use the mocking API of Ballerina test framework to test modules independent from other modules, and external endpoints.","keywords":"ballerina, programming language, testing, mocking, object mocking","permalink":"/learn/test-ballerina-code/mocking/","active":"mocking","intro":"Mocking is useful to control the behavior of functions and objects to control the communication with other modules and external endpoints. A mock can be created by defining return values or replacing the entire object or function with a user-defined equivalent. This feature will help you to test the Ballerina code independently from other modules and external endpoints.","redirect_from":["/learn/testing-ballerina-code/mocking","/learn/testing-ballerina-code/mocking/","/swan-lake/learn/testing-ballerina-code/mocking/","/swan-lake/learn/testing-ballerina-code/mocking","/learn/user-guide/testing-ballerina-code/mocking","/learn/user-guide/testing-ballerina-code/mocking/","/learn/test-ballerina-code/mocking","/learn/guides/testing-ballerina-code/mocking/","/learn/guides/testing-ballerina-code/mocking"]},"content":"\n## Mock objects\n\nThe `Test` module provides capabilities to mock an object for unit testing. This allows you to control the behaviour of \nthe object member functions and values of member fields via stubbing or replacing the entire object with a user-defined \nequivalent. This feature will help you to test the Ballerina code independently of other modules and external endpoints.\n\nMocking objects can be done in two ways :\n\n1. Creating a test double (providing an equivalent object in place of the real object)\n2. Stubbing the member function or member variable (specifying the behaviour of the functions and values of the \nvariables)\n\n\n### Create a test double\n\nYou can write a custom mock object and substitute it in place of the real object. The custom object should be made \nstructurally equivalent to the real object via the mocking features in the test module.\n\n***Example:***\n\nLet's make changes to the example in the [Test a simple function](/learn/test-ballerina-code/test-a-simple-function/) to define a \ntest double for the `clientEndpont` object.\n\n>**Note:** Only the `get` function is implemented since it is the only function used in the sample. Attempting to call\n any other member function of the `clientEndpoint` will result in a runtime error. \n\n***main_test.bal***\n\n```ballerina\nimport ballerina/test;\nimport ballerina/http;\n \n// An instance of this object can be used as the test double for the `clientEndpoint`.\npublic client class MockHttpClient {\n\n    remote function get(@untainted string path, map<string|string[]>? headers = (), http:TargetType targetType = http:Response) returns @tainted http:Response| anydata | http:ClientError {\n\n        http:Response response = new;\n        response.statusCode = 500;\n        return response;\n    }\n}\n\n@test:Config {}\npublic function testGetRandomJoke() {\n\n    // create and assign a test double to the `clientEndpoint` object\n    clientEndpoint=<http:Client>test:mock(http:Client, new MockHttpClient());\n\n    // invoke the function to test\n    string|error result = getRandomJoke(\"Sheldon\");\n\n    // verify that the function returns an error\n    test:assertTrue(result is error);\n}\n```\n\n### Stub member functions and variables of an object\n\nInstead of creating a test double, you may also choose to create a default mock object and stub the functions to return \na specific value or to do nothing.\n\n***Example:***\n\nThe example in [Test a simple function](/learn/test-ballerina-code/test-a-simple-function/) shows how the `get` function of the \nclient object can be stubbed to return a value. Letâ€™s make changes to that example to get a random joke from a specific \ncategory (e.g., food or movies).\n\n***main.bal***\n\n```ballerina\nimport ballerina/io;\nimport ballerina/http;\nimport ballerina/regex;\n\nhttp:Client clientEndpoint = check new (\"https://api.chucknorris.io/jokes/\");\n\n// This function performs a `get` request to the Chuck Norris API and returns a random joke \n// or an error if the API invocations fail.\nfunction getRandomJoke(string name, string category = \"food\") returns @tainted string|error {\n    string replacedText = \"\";\n    http:Response response = check clientEndpoint->get(\"/categories\");\n\n    // Check if the provided category is available\n\n    if (response.statusCode == http:STATUS_OK) {\n        json[] categories = <json[]>check response.getJsonPayload();\n\n        if (!isCategoryAvailable(categories, category)) {\n            error err = error(\"'\" + category + \"' is not a valid category.\");\n            io:println(err.message());\n            return err;\n        }\n\n    } else {\n        return createError(response);\n    }\n\n    // Get a random joke from the provided category\n    response = check clientEndpoint->get(\"/random?category=\" + category);\n\n    if (response.statusCode == http:STATUS_OK) {\n        json payload = check response.getJsonPayload();\n        json joke = check payload.value;\n\n        replacedText = regex:replaceAll(joke.toString(), \"Chuck Norris\", name);\n        return replacedText;\n\n    } else {\n        return createError(response);\n    }\n\n}\n```\n\n***utils.bal***\n\nThe util functions below are used to validate the categories and construct errors based on the HTTP response.\n\n```ballerina\nimport ballerina/io;\nimport ballerina/http;\n\n// This function checks if the provided category is a valid one.\nfunction isCategoryAvailable(json[] categories, string category) returns boolean {\n    foreach var cat in categories {\n        if (cat.toString() == category) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Returns an error based on the HTTP response.\nfunction createError(http:Response response) returns error {\n    error err = error(\"error occurred while sending GET request\");\n    io:println(err.message(), \", status code: \", response.statusCode);\n    return err;\n}\n```\n\n***test_utils.bal***\n\nThe util functions below are used to construct mock responses required for testing.\n  \n  ```ballerina\nimport ballerina/http;\n\n// Returns a mock HTTP response to be used for the random joke API invocation.\nfunction getMockResponse() returns http:Response {\n    http:Response mockResponse = new;\n    json mockPayload = {\"value\":\"When Chuck Norris wants an egg, he cracks open a chicken.\"};\n    mockResponse.setPayload(mockPayload);\n    return mockResponse;\n}\n\n// Returns a mock response to be used for the category API invocation.\nfunction getCategoriesResponse() returns http:Response {\n    http:Response categoriesRes = new;\n    json[] payload = [\"animal\",\"food\",\"history\",\"money\",\"movie\"];\n    categoriesRes.setJsonPayload(payload);\n    return categoriesRes;\n}\n```\n\n#### Stub to return a specific value\n\n***main_test.bal***\n \nThis test stubs the behaviour of the `get` function to return a specific value in 2 ways:\n\n1. Stubbing to return a specific value in general\n2. Stubbing to return a specific value based on the input\n\n```ballerina\nimport ballerina/test;\nimport ballerina/http;\n\n@test:Config {}\npublic function testGetRandomJoke() {\n    // Create a default mock HTTP Client and assign it to the `clientEndpoint` object\n    clientEndpoint = test:mock(http:Client);\n\n    // Stub to return the specified mock response when the `get` function is called.\n    test:prepare(clientEndpoint).when(\"get\").thenReturn(getMockResponse());\n\n    // Stub to return the specified mock response when the specified argument is passed.\n    test:prepare(clientEndpoint).when(\"get\").withArguments(\"/categories\")\n        .thenReturn(getCategoriesResponse());\n\n    // Invoke the function to test.\n    string result = checkpanic getRandomJoke(\"Sheldon\");\n\n    // Verify the return value against the expected string.\n    test:assertEquals(result, \"When Sheldon wants an egg, he cracks open a chicken.\");\n}\n```\n\n#### Stub with multiple values to return sequentially for each function call\n\n***main_test.bal***\n\nThis test stubs the behaviour of the `get` function to return a specified sequence of values for each `get` function \ninvocation (i.e., the first call to the `get` function will return the first argument and the second call will return \nthe second argument).\n\n```ballerina\nimport ballerina/test;\nimport ballerina/http;\n    \n@test:Config {}\npublic function testGetRandomJoke() {\n    // Create a default mock HTTP Client and assign it to the `clientEndpoint` object.\n    clientEndpoint = test:mock(http:Client);\n\n    // Stub to return the corresponding value for each invocation \n    test:prepare(clientEndpoint).when(\"get\")\n        .thenReturnSequence(getCategoriesResponse(), getMockResponse());\n\n    // Invoke the function to test\n    string result = checkpanic getRandomJoke(\"Sheldon\");\n\n    // Verify the return value against the expected string\n    test:assertEquals(result, \"When Sheldon wants an egg, he cracks open a chicken.\");\n}\n```\n\n#### Stub a member variable\n\nIf a `client` object has a public member variable, it can be stubbed to return a mock value for testing.\n\n***Example:***\n\n***main.bal***\n\n```ballerina\n# A record that represents a Product.\n#\n# + code - Code used to identify the product\n# + name - Product Name\n# + quantity - Quantity included in the product\npublic type Product record {|\n    readonly int code;\n    string name;\n    string quantity;\n|};\n\n# A table with a list of Products uniquely identified using the code.\npublic type ProductInventory table<Product> key(code);\n\n// This is a sample data set in the defined inventory.\nProductInventory inventory = table [\n            {code: 1,  name: \"Milk\", quantity: \"1l\"},\n            {code: 2, name: \"Bread\", quantity: \"500g\"},\n            {code: 3, name: \"Apple\", quantity: \"750g\"}\n        ];\n\n# This client represents a product.\n#\n# + productCode - An int code used to identify the product.\npublic client class ProductClient {\n    public int productCode;\n\n    public function init(int productCode) {\n        self.productCode = productCode;\n    }\n}\n\n// The Client represents the product with the code `1` (i.e. \"Milk\").\nProductClient productClient = new (1);\n\n# Get the name of the product represented by the ProductClient.\n#\n# + return - The name of the product\npublic function getProductName() returns string?{\n    if (inventory.hasKey(productClient.productCode)){\n        Product? product = inventory.get(productClient.productCode);\n        if(product is Product){\n                return product.name;\n        }\n    }\n }\n```\n\n***main_test.bal***\n\nThis test stubs the member variable `productCode` of the `ProductClient` to set a mock product code.\n\n```ballerina\nimport ballerina/test;\n\n@test:Config {}\nfunction testMemberVariable() {\n    int mockProductCode = 2;\n    // Create a mockClient which represents product with the code `mockProductCode`\n    ProductClient mockClient = test:mock(ProductClient);\n    // Stub the member variable `productCode`\n    test:prepare(mockClient).getMember(\"productCode\").thenReturn(mockProductCode);\n    // Replace `productClient` with the `mockClient`\n    productClient = mockClient;\n    // Assert for the mocked product name.\n    test:assertEquals(getProductName(), \"Bread\");\n}\n```\n\n#### Stub to do nothing\n\nIf a function has an optional or no return type specified, this function can be mocked to do nothing when writing\n test cases.\n\n***Example:***\n\n***main.bal***\n\n```ballerina\nimport ballerina/email;\n\nemail:SmtpClient smtpClient = check new (\"localhost\", \"admin\",\"admin\");\n\n// This function sends out emails to specified email addresses and returns an error if sending failed.\nfunction sendNotification(string[] emailIds) returns error? {\n    email:Message msg = {\n        'from: \"builder@abc.com\",\n        subject: \"Error Alert ...\",\n        to: emailIds,\n        body: \"\"\n    };\n    return check smtpClient->sendMessage(msg);\n}\n```\n***main_test.bal***\n\nThis test stubs the behaviour of the `send` function to do nothing for testing the `sendNotification` function.\n\n```ballerina\nimport ballerina/test;\nimport ballerina/email;\n\n@test:Config {}\nfunction testSendNotification() {\n    string[] emailIds = [\"user1@test.com\", \"user2@test.com\"];\n\n    // Create a default mock SMTP client and assign it to the `smtpClient` object.\n    smtpClient = test:mock(email:SmtpClient);\n\n    // Stub to do nothing when the`send` function is invoked.\n    test:prepare(smtpClient).when(\"sendMessage\").doNothing();\n\n    // Invoke the function to test and verify that no error occurred.\n    test:assertEquals(sendNotification(emailIds), ());\n}\n```\n\n## Mock functions\n\nThe Ballerina test framework provides the capability to mock a function. You can easily mock a function in a module that\nyou are testing or a function of an imported module by using the mocking feature. This feature will help you to test \nyour Ballerina code independently from other modules and functions.\n\nThe object specified with the `@test:Mock{}` annotation will be considered as a mock function, which gets triggered in \nplace of the real function.\n\n* ***moduleName : \"&lt;moduleName&gt;\"*** - (optional) Name of the module in which the function to be mocked resides \nin. If the function is within the same module, this can be left blank or \".\" (no module) can be passed. If the function \nis in a different module but within the same package, just passing the module name will suffice. For functions in \ncompletely separate modules, the fully-qualified module name must be passed, which includes the `packageOrg` \n(i.e., `packageOrg/moduleName`). For native functions, the Ballerina module needs to be specified.\n\n* ***functionName : \"&lt;functionName&gt;\"*** - Name of the function to be mocked.\n\n***Example:***\n\n***main.bal***\n\n```ballerina\n// This function returns the result provided by the `intAdd` function.\npublic function addValues(int a, int b) returns int {\n    return intAdd(a, b);\n}\n\n// This function adds two integers and returns the result.\npublic function intAdd(int a, int b) returns int {\n    return (a + b);\n}\n```\n\n***main_test.bal***\n \nThis is the initialization of the mock function, which should be called in place of the `intAdd` function.\n\n```ballerina\nimport ballerina/test;\n\n@test:Mock { functionName: \"intAdd\" }\ntest:MockFunction intAddMockFn = new();\n```\n\nAfter the initialization, the following options can be used to stub the behaviour of a function written in the module being tested.\n \n### Stub to return a specific value\n  \n This test stubs the behaviour of the `get` function to return a specific value in 2 ways:\n     \n 1. Stubbing to return a specific value in general\n 2. Stubbing to return a specific value based on the input\n\n```ballerina\nimport ballerina/test;\n\n@test:Mock { functionName: \"intAdd\" }\ntest:MockFunction intAddMockFn = new();\n   \n@test:Config {}\nfunction testReturn() {\n    // Stub to return the specified value when the `intAdd` is invoked.\n    test:when(intAddMockFn).thenReturn(20);\n   \n    // Stub to return the specified value when the `intAdd` is invoked with the specified arguments.\n    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n        \n    test:assertEquals(addValues(10, 6), 20, msg = \"function mocking failed\");\n    test:assertEquals(addValues(0, 0), -1, msg = \"function mocking with arguments failed\");\n}\n```\n\n### Stub to invoke another function in place of the real\n\nThis test stubs the behaviour of the `intAdd` function to substitute it with a user-defined mock function.\n\n```ballerina\nimport ballerina/test;\n\n@test:Mock { functionName: \"intAdd\" }\ntest:MockFunction intAddMockFn = new();\n\n@test:Config {}\nfunction testCall() {\n    // Stub to call another function when `intAdd` is called.\n    test:when(intAddMockFn).call(\"mockIntAdd\");\n   \n    test:assertEquals(addValues(11, 6), 5, msg = \"function mocking failed\");\n}\n    \n// The mock function to be used in place of the `intAdd` function\npublic function mockIntAdd(int a, int b) returns int {\n    return (a - b);\n}\n```\n\nThis test stubs the behaviour of an imported function to substitute it with a user-defined mock function.\n\n```ballerina\nimport ballerina/test;\nimport ballerina/io;\n\n@test:Mock {\n    moduleName: \"ballerina/io\",\n    functionName: \"println\"\n}\ntest:MockFunction printlnMockFn = new();\n\nint tally = 0;\n\n// This is a function that can be called in place of the `io:println` function.\npublic function mockPrint(any|error... val) {\n    tally = tally + 1;\n}\n\n@test:Config {}\nfunction testCall() {\n    test:when(printlnMockFn).call(\"mockPrint\");\n\n    io:println(\"Testing 1\");\n    io:println(\"Testing 2\");\n    io:println(\"Testing 3\");\n\n    test:assertEquals(tally, 3);\n}\n```\n\nThis test calls the original `intAdd` function after it has been stubbed with a user-defined mock function.\n\n```ballerina\nimport ballerina/test;\n       \n@test:Mock { functionName: \"intAdd\" }\ntest:MockFunction intAddMockFn = new();\n\n@test:Config {}\nfunction testCallOriginal() {\n    // Stub to call another function when `intAdd` is called.\n    test:when(intAddMockFn).call(\"mockIntAdd\");\n   \n    test:assertEquals(addValues(11, 6), 5, msg = \"function mocking failed\");\n    \n    // Stub to call the original `intAdd` function.\n    test:when(intAddMockFn).callOriginal();\n    test:assertEquals(addValues(11, 6), 17, msg = \"function mocking failed\");\n}\n    \n// The mock function to be used in place of the `intAdd` function\npublic function mockIntAdd(int a, int b) returns int {\n    return (a - b);\n}\n```\n","id":"mocking","sub":"test-document-the-code","third":"test-ballerina-code","slug":"test-document-the-code/test-ballerina-code/mocking","codes":"[[1751576612,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// An instance of this object can be used as the test double for the `clientEndpoint`.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">client class</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">MockHttpClient</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(@</span><span style=\\\"color: #0550AE\\\">untainted</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">path</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #CF222E\\\">map&lt;</span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\">[]</span><span style=\\\"color: #CF222E\\\">&gt;</span><span style=\\\"color: #24292F\\\">? </span><span style=\\\"color: #953800\\\">headers</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> (), http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">TargetType targetType </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> @tainted http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response</span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\"> anydata </span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\"> http:ClientError {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response response </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        response.statusCode </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">500</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> response;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testGetRandomJoke</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// create and assign a test double to the `clientEndpoint` object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    clientEndpoint</span><span style=\\\"color: #CF222E\\\">=&lt;</span><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client</span><span style=\\\"color: #CF222E\\\">&gt;</span><span style=\\\"color: #24292F\\\">test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">mock</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client, </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">MockHttpClient</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// invoke the function to test</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">|error</span><span style=\\\"color: #24292F\\\"> result </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getRandomJoke</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Sheldon&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// verify that the function returns an error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertTrue</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">result</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">is</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-1538082806,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/regex;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client clientEndpoint </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0A3069\\\">&quot;https://api.chucknorris.io/jokes/&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// This function performs a `get` request to the Chuck Norris API and returns a random joke </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// or an error if the API invocations fail.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getRandomJoke</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">name</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">category</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;food&quot;</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> @tainted </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">|error</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> replacedText </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response response </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> clientEndpoint</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/categories&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Check if the provided category is available</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\"> (response.statusCode </span><span style=\\\"color: #CF222E\\\">==</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">STATUS_OK) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\">[] categories </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&lt;</span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\">[]</span><span style=\\\"color: #CF222E\\\">&gt;check</span><span style=\\\"color: #24292F\\\"> response.</span><span style=\\\"color: #8250DF\\\">getJsonPayload</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #CF222E\\\">!</span><span style=\\\"color: #8250DF\\\">isCategoryAvailable</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">categories</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">category</span><span style=\\\"color: #24292F\\\">)) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #CF222E\\\">error</span><span style=\\\"color: #24292F\\\"> err </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;&#39;&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">category</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;&#39; is not a valid category.&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(err.</span><span style=\\\"color: #8250DF\\\">message</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> err;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    } </span><span style=\\\"color: #CF222E\\\">else</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">createError</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">response</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Get a random joke from the provided category</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    response </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> clientEndpoint</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/random?category=&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">category</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\"> (response.statusCode </span><span style=\\\"color: #CF222E\\\">==</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">STATUS_OK) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\"> payload </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> response.</span><span style=\\\"color: #8250DF\\\">getJsonPayload</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\"> joke </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> payload.value;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        replacedText </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> regex</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">replaceAll</span><span style=\\\"color: #24292F\\\">(joke.</span><span style=\\\"color: #8250DF\\\">toString</span><span style=\\\"color: #24292F\\\">(), </span><span style=\\\"color: #0A3069\\\">&quot;Chuck Norris&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">name</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> replacedText;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    } </span><span style=\\\"color: #CF222E\\\">else</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">createError</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">response</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[613569413,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// This function checks if the provided category is a valid one.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">isCategoryAvailable</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\">[] </span><span style=\\\"color: #953800\\\">categories</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">category</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">boolean</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">foreach </span><span style=\\\"color: #0550AE\\\">var</span><span style=\\\"color: #24292F\\\"> cat </span><span style=\\\"color: #CF222E\\\">in</span><span style=\\\"color: #24292F\\\"> categories {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\"> (cat.</span><span style=\\\"color: #8250DF\\\">toString</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">==</span><span style=\\\"color: #24292F\\\"> category) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">true</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">false</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Returns an error based on the HTTP response.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">createError</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response response) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">error</span><span style=\\\"color: #24292F\\\"> err </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;error occurred while sending GET request&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(err.</span><span style=\\\"color: #8250DF\\\">message</span><span style=\\\"color: #24292F\\\">(), </span><span style=\\\"color: #0A3069\\\">&quot;, status code: &quot;</span><span style=\\\"color: #24292F\\\">, response.statusCode);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> err;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-1595533543,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Returns a mock HTTP response to be used for the random joke API invocation.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getMockResponse</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response mockResponse </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\"> mockPayload </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> {</span><span style=\\\"color: #0A3069\\\">&quot;value&quot;</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #0A3069\\\">&quot;When Chuck Norris wants an egg, he cracks open a chicken.&quot;</span><span style=\\\"color: #24292F\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    mockResponse.</span><span style=\\\"color: #8250DF\\\">setPayload</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">mockPayload</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> mockResponse;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// Returns a mock response to be used for the category API invocation.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getCategoriesResponse</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response categoriesRes </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\">[] payload </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> [</span><span style=\\\"color: #0A3069\\\">&quot;animal&quot;</span><span style=\\\"color: #24292F\\\">,</span><span style=\\\"color: #0A3069\\\">&quot;food&quot;</span><span style=\\\"color: #24292F\\\">,</span><span style=\\\"color: #0A3069\\\">&quot;history&quot;</span><span style=\\\"color: #24292F\\\">,</span><span style=\\\"color: #0A3069\\\">&quot;money&quot;</span><span style=\\\"color: #24292F\\\">,</span><span style=\\\"color: #0A3069\\\">&quot;movie&quot;</span><span style=\\\"color: #24292F\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    categoriesRes.</span><span style=\\\"color: #8250DF\\\">setJsonPayload</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">payload</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> categoriesRes;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[1969889294,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testGetRandomJoke</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Create a default mock HTTP Client and assign it to the `clientEndpoint` object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    clientEndpoint </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">mock</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to return the specified mock response when the `get` function is called.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">prepare</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">clientEndpoint</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;get&quot;</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">thenReturn</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">getMockResponse</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to return the specified mock response when the specified argument is passed.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">prepare</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">clientEndpoint</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;get&quot;</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">withArguments</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/categories&quot;</span><span style=\\\"color: #24292F\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        .</span><span style=\\\"color: #8250DF\\\">thenReturn</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">getCategoriesResponse</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Invoke the function to test.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> result </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">checkpanic</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getRandomJoke</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Sheldon&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Verify the return value against the expected string.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">result</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">&quot;When Sheldon wants an egg, he cracks open a chicken.&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-560566887,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testGetRandomJoke</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Create a default mock HTTP Client and assign it to the `clientEndpoint` object.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    clientEndpoint </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">mock</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to return the corresponding value for each invocation </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">prepare</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">clientEndpoint</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;get&quot;</span><span style=\\\"color: #24292F\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        .</span><span style=\\\"color: #8250DF\\\">thenReturnSequence</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">getCategoriesResponse</span><span style=\\\"color: #24292F\\\">(), </span><span style=\\\"color: #953800\\\">getMockResponse</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Invoke the function to test</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> result </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">checkpanic</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getRandomJoke</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Sheldon&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Verify the return value against the expected string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">result</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">&quot;When Sheldon wants an egg, he cracks open a chicken.&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[659821483,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># A record that represents a Product.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">code</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">Code used to identify the product</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">name</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">Product Name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">quantity</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">Quantity included in the product</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">type</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">Product</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">record</span><span style=\\\"color: #24292F\\\"> {</span><span style=\\\"color: #CF222E\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">readonly</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> code;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> quantity;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># A table with a list of Products uniquely identified using the code.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">type</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">ProductInventory</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">table&lt;</span><span style=\\\"color: #24292F\\\">Product</span><span style=\\\"color: #CF222E\\\">&gt;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">key</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">code</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// This is a sample data set in the defined inventory.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">ProductInventory inventory </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">table</span><span style=\\\"color: #24292F\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            {code</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">1</span><span style=\\\"color: #24292F\\\">,  name</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Milk&quot;</span><span style=\\\"color: #24292F\\\">, quantity</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;1l&quot;</span><span style=\\\"color: #24292F\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            {code</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">2</span><span style=\\\"color: #24292F\\\">, name</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Bread&quot;</span><span style=\\\"color: #24292F\\\">, quantity</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;500g&quot;</span><span style=\\\"color: #24292F\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            {code</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">3</span><span style=\\\"color: #24292F\\\">, name</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Apple&quot;</span><span style=\\\"color: #24292F\\\">, quantity</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;750g&quot;</span><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        ];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># This client represents a product.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">productCode</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">An int code used to identify the product.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">client class</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">ProductClient</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> productCode;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">init</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">productCode</span><span style=\\\"color: #24292F\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #0550AE\\\">self</span><span style=\\\"color: #24292F\\\">.productCode </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> productCode;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// The Client represents the product with the code `1` (i.e. &quot;Milk&quot;).</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">ProductClient productClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0550AE\\\">1</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Get the name of the product represented by the ProductClient.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">return</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">The name of the product</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getProductName</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\"> (inventory.</span><span style=\\\"color: #8250DF\\\">hasKey</span><span style=\\\"color: #24292F\\\">(productClient.productCode)){</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        Product</span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\"> product </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> inventory.</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(productClient.productCode);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\">(product </span><span style=\\\"color: #CF222E\\\">is</span><span style=\\\"color: #24292F\\\"> Product){</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">                </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> product.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\"> }</span></span></code></pre>\"],[-689026840,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testMemberVariable</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> mockProductCode </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">2</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Create a mockClient which represents product with the code `mockProductCode`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    ProductClient mockClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">mock</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">ProductClient</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub the member variable `productCode`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">prepare</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">mockClient</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">getMember</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;productCode&quot;</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">thenReturn</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">mockProductCode</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Replace `productClient` with the `mockClient`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    productClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> mockClient;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Assert for the mocked product name.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">getProductName</span><span style=\\\"color: #24292F\\\">(), </span><span style=\\\"color: #0A3069\\\">&quot;Bread&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-396325560,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/email;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">email</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">SmtpClient smtpClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0A3069\\\">&quot;localhost&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">&quot;admin&quot;</span><span style=\\\"color: #24292F\\\">,</span><span style=\\\"color: #0A3069\\\">&quot;admin&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// This function sends out emails to specified email addresses and returns an error if sending failed.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">sendNotification</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\">[] </span><span style=\\\"color: #953800\\\">emailIds</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error?</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    email</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Message msg </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        &#39;from</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;builder@abc.com&quot;</span><span style=\\\"color: #24292F\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        subject</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Error Alert ...&quot;</span><span style=\\\"color: #24292F\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        to</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> emailIds,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        body</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> smtpClient</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">sendMessage</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">msg</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-2066947417,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/email;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testSendNotification</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\">[] emailIds </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> [</span><span style=\\\"color: #0A3069\\\">&quot;user1@test.com&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">&quot;user2@test.com&quot;</span><span style=\\\"color: #24292F\\\">];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Create a default mock SMTP client and assign it to the `smtpClient` object.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    smtpClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">mock</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">email</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">SmtpClient);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to do nothing when the`send` function is invoked.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">prepare</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">smtpClient</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;sendMessage&quot;</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">doNothing</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Invoke the function to test and verify that no error occurred.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">sendNotification</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">emailIds</span><span style=\\\"color: #24292F\\\">), ());</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[1480485673,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// This function returns the result provided by the `intAdd` function.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">addValues</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">a</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">b</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">intAdd</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">a</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">b</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// This function adds two integers and returns the result.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">intAdd</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">a</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">b</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #953800\\\">a</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">b</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-202428111,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Mock</span><span style=\\\"color: #24292F\\\"> { functionName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;intAdd&quot;</span><span style=\\\"color: #24292F\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">MockFunction intAddMockFn </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">();</span></span></code></pre>\"],[-991557193,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Mock</span><span style=\\\"color: #24292F\\\"> { functionName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;intAdd&quot;</span><span style=\\\"color: #24292F\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">MockFunction intAddMockFn </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">   </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testReturn</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to return the specified value when the `intAdd` is invoked.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">intAddMockFn</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">thenReturn</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">20</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">   </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to return the specified value when the `intAdd` is invoked with the specified arguments.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">intAddMockFn</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">withArguments</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">0</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">0</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">thenReturn</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #CF222E\\\">-</span><span style=\\\"color: #0550AE\\\">1</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">addValues</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">10</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">6</span><span style=\\\"color: #24292F\\\">), </span><span style=\\\"color: #0550AE\\\">20</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">msg</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;function mocking failed&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">addValues</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">0</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">0</span><span style=\\\"color: #24292F\\\">), </span><span style=\\\"color: #CF222E\\\">-</span><span style=\\\"color: #0550AE\\\">1</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">msg</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;function mocking with arguments failed&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-535273396,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Mock</span><span style=\\\"color: #24292F\\\"> { functionName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;intAdd&quot;</span><span style=\\\"color: #24292F\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">MockFunction intAddMockFn </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testCall</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to call another function when `intAdd` is called.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">intAddMockFn</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">call</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;mockIntAdd&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">   </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">addValues</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">11</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">6</span><span style=\\\"color: #24292F\\\">), </span><span style=\\\"color: #0550AE\\\">5</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">msg</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;function mocking failed&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// The mock function to be used in place of the `intAdd` function</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">mockIntAdd</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">a</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">b</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #953800\\\">a</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">-</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">b</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[578195533,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Mock</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    moduleName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;ballerina/io&quot;</span><span style=\\\"color: #24292F\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    functionName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;println&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">MockFunction printlnMockFn </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> tally </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">0</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// This is a function that can be called in place of the `io:println` function.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">mockPrint</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #CF222E\\\">any|error...</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">val</span><span style=\\\"color: #24292F\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    tally </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> tally </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">1</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testCall</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">printlnMockFn</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">call</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;mockPrint&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Testing 1&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Testing 2&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Testing 3&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">tally</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">3</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[128597270,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">       </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Mock</span><span style=\\\"color: #24292F\\\"> { functionName</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;intAdd&quot;</span><span style=\\\"color: #24292F\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">MockFunction intAddMockFn </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testCallOriginal</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to call another function when `intAdd` is called.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">intAddMockFn</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">call</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;mockIntAdd&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">   </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">addValues</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">11</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">6</span><span style=\\\"color: #24292F\\\">), </span><span style=\\\"color: #0550AE\\\">5</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">msg</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;function mocking failed&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #6E7781\\\">// Stub to call the original `intAdd` function.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">intAddMockFn</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">callOriginal</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">addValues</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">11</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">6</span><span style=\\\"color: #24292F\\\">), </span><span style=\\\"color: #0550AE\\\">17</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">msg</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;function mocking failed&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// The mock function to be used in place of the `intAdd` function</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">mockIntAdd</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">a</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">b</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #953800\\\">a</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">-</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">b</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}