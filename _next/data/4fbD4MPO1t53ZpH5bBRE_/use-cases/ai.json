{"pageProps":{"samples":{"ballerina-ai-agent":{"frontmatter":{"title":"Seamless integrations with Ballerina AI agents","description":"Ballerina's AI Agent feature enables your applications to understand and execute natural language commands by leveraging the reasoning capabilities of LLMs. It empowers your apps to act autonomouslyâ€”automating workflows, making decisions, and driving intelligent outcomes.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/personal_ai_assistant_agent/agents.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"agent:SystemPrompt systemPrompt = {\n    role: &#x22;Personal AI Assistant&#x22;,\n    instructions: string &#x60;You are Nova, a smart AI assistant helping &#x27;${userName}&#x27; stay organized and efficient.\n\nYour primary responsibilities include:\n- Calendar Management: Scheduling, updating, and retrieving events from the calendar as per the user&#x27;s needs.\n- Email Assistance: Reading, summarizing, composing, and sending emails while ensuring clarity and professionalism.\n- Context Awareness: Maintaining a seamless understanding of ongoing tasks and conversations to \n  provide relevant responses.\n- Privacy &#x26; Security: Handling user data responsibly, ensuring sensitive information is kept confidential,\n  and confirming actions before executing them.\n\nGuidelines:\n- Respond in a natural, friendly, and professional tone.\n- Always confirm before making changes to the user&#x27;s calendar or sending emails.\n- Provide concise summaries when retrieving information unless the user requests details.\n- Prioritize clarity, efficiency, and user convenience in all tasks.&#x60;\n};\n\nfinal agent:AzureOpenAiModel azureOpenAiModel = check new (serviceUrl, apiKey, deploymentId, apiVersion);\nfinal agent:Agent personalAiAssistant = check new (systemPrompt = systemPrompt, model = azureOpenAiModel,\n    tools = [readEmails, sendEmail, getCalanderEvents, createCalanderEvent, getCurrentDate]\n);\n\nservice /personalAiAssistant on new http:Listener(9090) {\n    resource function post chat(@http:Payload agent:ChatReqMessage request) returns agent:ChatRespMessage|error {\n        string agentResponse = check personalAiAssistant->run(request.message);\n        return {message: agentResponse};\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#24292E\">agent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">SystemPrompt systemPrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    role</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Personal AI Assistant\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    instructions</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`You are Nova, a smart AI assistant helping '${</span><span style=\"color:#24292E\">userName</span><span style=\"color:#032F62\">}' stay organized and efficient.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#032F62\">Your primary responsibilities include:</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">- Calendar Management: Scheduling, updating, and retrieving events from the calendar as per the user's needs.</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">- Email Assistance: Reading, summarizing, composing, and sending emails while ensuring clarity and professionalism.</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">- Context Awareness: Maintaining a seamless understanding of ongoing tasks and conversations to </span></span>\n<span class=\"line\"><span style=\"color:#032F62\">  provide relevant responses.</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">- Privacy &#x26; Security: Handling user data responsibly, ensuring sensitive information is kept confidential,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">  and confirming actions before executing them.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#032F62\">Guidelines:</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">- Respond in a natural, friendly, and professional tone.</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">- Always confirm before making changes to the user's calendar or sending emails.</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">- Provide concise summaries when retrieving information unless the user requests details.</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">- Prioritize clarity, efficiency, and user convenience in all tasks.`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> agent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">AzureOpenAiModel azureOpenAiModel </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">serviceUrl</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">apiKey</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">deploymentId</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">apiVersion</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> agent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Agent personalAiAssistant </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">systemPrompt</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> systemPrompt, </span><span style=\"color:#E36209\">model</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> azureOpenAiModel,</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">    tools</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> [readEmails, sendEmail, getCalanderEvents, createCalanderEvent, getCurrentDate]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#6F42C1\"> /personalAiAssistant</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">9090</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> chat</span><span style=\"color:#24292E\">(@</span><span style=\"color:#005CC5\">http</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">Payload</span><span style=\"color:#E36209\"> agent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ChatReqMessage request) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> agent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ChatRespMessage</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> agentResponse </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> personalAiAssistant</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">run</span><span style=\"color:#24292E\">(request.message);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> {message</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> agentResponse};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"ballerina_multimodel":{"frontmatter":{"title":"Beyond text: Multimodal AI at your fingertips","description":"AI isnâ€™t just about textâ€”and neither is Ballerina. With connectors to popular AI providers, you can integrate image generation, audio synthesis, and other multimodal capabilities into your applications. Whatever the medium, Ballerina helps you bring it all together through a unified, type-safe integration layer.","url":"","image":""},"code":""},"ballerina_text_connectors":{"frontmatter":{"title":"Simple when you want it. Powerful when you need it.","description":"Ballerina simplifies AI integration with high-level abstractions while providing full access to model provider APIs via type-safe connectors. This lets you leverage advanced features seamlessly, staying within the same language and ecosystem with confidence.","url":"","image":""},"code":""},"blog-analyzer-using-natural-programming":{"frontmatter":{"title":"Building an AI-powered blog analyzer using Ballerina's natural functions","description":"Ballerinaâ€™s natural functions let you bring AI-powered capabilities into your workflows using natural language. At runtime, they invoke an LLM and return a typed responseâ€”automatically structured and bound to your expected format for seamless integration.","url":"","image":""},"code":""},"concurrency-simplified-for-ai-development":{"frontmatter":{"title":"Concurrency simplified for AI development","description":"Ballerina's concurrency model is ideal for writing API-powered AI applications. Its sequence diagrams and concurrency control capabilities make it easy to manage and visualize complex operations leading to more efficient and reliable AI solutions.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/create_and_send_customized_greeting_cards_using_openai/service.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"fork {\n    // Generate greeting text and design in parallel\n    worker greetingWorker returns string|error? {\n        chat:CreateChatCompletionRequest request = {\n            model: &#x22;gpt-4o-mini&#x22;,\n            messages: [\n                {\n                    &#x22;role&#x22;: &#x22;user&#x22;,\n                    &#x22;content&#x22;: string &#x60;Generate a greeting for a/an ${occasion}.${&#x22;\\n&#x22;}Special notes: ${specialNotes}&#x60;\n                }\n            ]\n        };\n\n        chat:CreateChatCompletionResponse response = check openAIChat->/chat/completions.post(request);\n        return response.choices[0].message.content;\n    }\n\n    worker imageWorker returns string|error? {\n        images:CreateImageRequest imagePrompt = {\n            prompt: string &#x60;Greeting card design for ${occasion}, ${specialNotes}&#x60;\n        };\n        images:ImagesResponse imageRes = check openAIImages->/images/generations.post(imagePrompt);\n        return imageRes.data[0].url;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">fork</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Generate greeting text and design in parallel</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    worker</span><span style=\"color:#24292E\"> greetingWorker </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o-mini\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"role\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"content\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Generate a greeting for a/an ${</span><span style=\"color:#24292E\">occasion</span><span style=\"color:#032F62\">}.${\"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"}Special notes: ${</span><span style=\"color:#24292E\">specialNotes</span><span style=\"color:#032F62\">}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> response.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    worker</span><span style=\"color:#24292E\"> imageWorker </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateImageRequest imagePrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Greeting card design for ${</span><span style=\"color:#24292E\">occasion</span><span style=\"color:#032F62\">}, ${</span><span style=\"color:#24292E\">specialNotes</span><span style=\"color:#032F62\">}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ImagesResponse imageRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIImages</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">images</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">generations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">imagePrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> imageRes.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].url;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"copilot_your_partner":{"frontmatter":{"title":"Ballerina Copilot: Your AI partner in integration development","description":"Ballerina Copilot makes it easy to build both AI and non-AI integrations using natural languageâ€”just tell it what you want, and it gets to work. Whether you're connecting to an LLM or stitching together APIs, Copilot helps you move fast with less code. And the fun part? Ballerina Copilot is written in Ballerina itself!","url":"","image":""},"code":""},"create-ai-powered-apis":{"frontmatter":{"title":"Create AI-powered APIs, automations, and event handlers","description":"Effortlessly tackle any AI-powered API integration by leveraging the network abstractions of Ballerina to create APIs, automations, and event handlers for your applications.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/question_answering_based_on_context_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service / on new http:Listener(8080) {\n\n    map<string> documents = {};\n    map<float[]> docEmbeddings = {};\n\n    function init() returns error? {\n        sheets:Range range = check gSheets->getRange(sheetId, sheetName, &#x22;A2:B&#x22;);\n\n        //Populate the dictionaries with the content and embeddings for each doc.\n        foreach any[] row in range.values {\n            string title = <string>row[0];\n            string content = <string>row[1];\n            self.documents[title] = content;\n            self.docEmbeddings[title] = check getEmbedding(string &#x60;${title} ${&#x22;\\n&#x22;} ${content}&#x60;);\n        }\n    }\n\n    resource function get answer(string question) returns string?|error {\n        string prompt = check constructPrompt(question, self.documents, self.docEmbeddings);\n\n        chat:CreateChatCompletionRequest request = {\n            model: &#x22;gpt-4o-mini&#x22;,\n            messages: [\n                {\n                    &#x22;role&#x22;: &#x22;user&#x22;,\n                    &#x22;content&#x22;: prompt\n                }\n            ]\n        };\n\n        chat:CreateChatCompletionResponse response = check openAIChat->/chat/completions.post(request);\n        return response.choices[0].message.content;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> documents </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">float</span><span style=\"color:#24292E\">[]</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> docEmbeddings </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    function</span><span style=\"color:#6F42C1\"> init</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        sheets</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Range range </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gSheets</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getRange</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">sheetId</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">sheetName</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"A2:B\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        //Populate the dictionaries with the content and embeddings for each doc.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        foreach </span><span style=\"color:#24292E\">any[] row </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> range.values {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> title </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">row[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> content </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">row[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            self</span><span style=\"color:#24292E\">.documents[title] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> content;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            self</span><span style=\"color:#24292E\">.docEmbeddings[title] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> getEmbedding</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `${</span><span style=\"color:#24292E\">title</span><span style=\"color:#032F62\">} ${\"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"} ${</span><span style=\"color:#24292E\">content</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> answer</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> question</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">?|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> constructPrompt</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">question</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">self</span><span style=\"color:#24292E\">.documents, </span><span style=\"color:#005CC5\">self</span><span style=\"color:#24292E\">.docEmbeddings);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o-mini\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"role\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"content\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> prompt</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> response.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"effort1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service /slack on new http:Listener(8080) {\n    map<ChatMessage[]> chatHistory = {};\n\n    resource function post events(http:Request request) returns Response|error {\n        if !check verifyRequest(request) {\n            return error(&#x22;Request verification failed&#x22;);\n        }\n\n        map<string> params = check request.getFormParams();\n\n        string? channelName = params[&#x22;channel_name&#x22;];\n        string? requestText = params[&#x22;text&#x22;];\n        if channelName is () || requestText is () {\n            return error(&#x22;Invalid values in the request parameters for channel_name or text&#x22;);\n        }\n\n        ChatMessage[] history = self.chatHistory[channelName] ?:\n                                [{role: SYSTEM, content: &#x22;You are an AI slack bot to assist with user questions.&#x22;}];\n        history.push({role: USER, content: requestText});\n\n        chat:CreateChatCompletionResponse completion = check azureOpenAI->/deployments/[deploymentId]/chat/completions.post(API_VERSION, {messages: history});\n        record {|\n            chat:ChatCompletionResponseMessage message?;\n            chat:ContentFilterChoiceResults content_filter_results?;\n            int index?;\n            string finish_reason?;\n            anydata...;\n        |}[] choices = check completion.choices.ensureType();\n\n        chat:ChatCompletionResponseMessage? response = choices[0].message;\n        string? responseText = response?.content;\n        if response is () || responseText is () {\n            return error(&#x22;Error in response generation&#x22;);\n        }\n\n        history.push({role: ASSISTANT, content: requestText});\n\n        // Limit history to 25 messages to preserve token limit.\n        if history.length() > MAX_MESSAGES {\n            history = history.slice(history.length() - MAX_MESSAGES);\n        }\n        self.chatHistory[channelName] = history;\n\n        return {response_type: &#x22;in_channel&#x22;, text: responseText};\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#6F42C1\"> /slack</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#24292E\">ChatMessage[]</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> chatHistory </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> events</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Request request) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Response</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#D73A49\"> !check</span><span style=\"color:#6F42C1\"> verifyRequest</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Request verification failed\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        map&#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> params </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> request.</span><span style=\"color:#6F42C1\">getFormParams</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? channelName </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> params[</span><span style=\"color:#032F62\">\"channel_name\"</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? requestText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> params[</span><span style=\"color:#032F62\">\"text\"</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> channelName </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () </span><span style=\"color:#D73A49\">||</span><span style=\"color:#24292E\"> requestText </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invalid values in the request parameters for channel_name or text\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ChatMessage[] history </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> self</span><span style=\"color:#24292E\">.chatHistory[channelName] </span><span style=\"color:#D73A49\">?:</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                                [{role</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> SYSTEM, content</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"You are an AI slack bot to assist with user questions.\"</span><span style=\"color:#24292E\">}];</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        history.</span><span style=\"color:#6F42C1\">push</span><span style=\"color:#24292E\">({role</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> USER, content</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> requestText});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse completion </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> azureOpenAI</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">deployments</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">[deploymentId]</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">API_VERSION</span><span style=\"color:#24292E\">, {messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> history});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ChatCompletionResponseMessage message?;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ContentFilterChoiceResults content_filter_results?;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            int</span><span style=\"color:#24292E\"> index?;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> finish_reason?;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            anydata</span><span style=\"color:#D73A49\">...</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        |</span><span style=\"color:#24292E\">}[] choices </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> completion.choices.</span><span style=\"color:#6F42C1\">ensureType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ChatCompletionResponseMessage? response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? responseText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> response?.content;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> response </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () </span><span style=\"color:#D73A49\">||</span><span style=\"color:#24292E\"> responseText </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Error in response generation\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        history.</span><span style=\"color:#6F42C1\">push</span><span style=\"color:#24292E\">({role</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> ASSISTANT, content</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> requestText});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Limit history to 25 messages to preserve token limit.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> history.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> MAX_MESSAGES {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            history </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> history.</span><span style=\"color:#6F42C1\">slice</span><span style=\"color:#24292E\">(history.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">-</span><span style=\"color:#E36209\"> MAX_MESSAGES</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        self</span><span style=\"color:#24292E\">.chatHistory[channelName] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> history;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> {response_type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"in_channel\"</span><span style=\"color:#24292E\">, text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> responseText};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"effort2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service / on new http:Listener(8080) {\n    function init() returns error? {\n        sheets:Range range = check gSheets->getRange(sheetId, sheetName, &#x22;A2:B&#x22;);\n        pinecone:Vector[] vectors = [];\n\n        foreach any[] row in range.values {\n            string title = <string>row[0];\n            string content = <string>row[1];\n            float[] vector = check getEmbedding(string &#x60;${title} ${&#x22;\\n&#x22;} ${content}&#x60;);\n            vectors[vectors.length()] = {id: title, values: vector, metadata: {&#x22;content&#x22;: content}};\n        }\n\n        pinecone:UpsertResponse response = check pineconeClient->/vectors/upsert.post({vectors, namespace: NAMESPACE});\n        if response.upsertedCount != range.values.length() {\n            return error(&#x22;Failed to insert embedding vectors to pinecone.&#x22;);\n        }\n        io:println(&#x22;Successfully inserted embedding vectors to pinecone.&#x22;);\n    }\n\n    resource function get answer(string question) returns string?|error {\n        string prompt = check constructPrompt(question);\n\n        chat:CreateChatCompletionRequest request = {\n            model: &#x22;gpt-4o-mini&#x22;,\n            messages: [\n                {\n                    &#x22;role&#x22;: &#x22;user&#x22;,\n                    &#x22;content&#x22;: prompt\n                }\n            ]\n        };\n\n        chat:CreateChatCompletionResponse response = check openAIChat->/chat/completions.post(request);\n        return response.choices[0].message.content;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    function</span><span style=\"color:#6F42C1\"> init</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        sheets</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Range range </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gSheets</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getRange</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">sheetId</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">sheetName</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"A2:B\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        pinecone</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Vector[] vectors </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        foreach </span><span style=\"color:#24292E\">any[] row </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> range.values {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> title </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">row[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> content </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">row[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            float</span><span style=\"color:#24292E\">[] vector </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> getEmbedding</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `${</span><span style=\"color:#24292E\">title</span><span style=\"color:#032F62\">} ${\"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"} ${</span><span style=\"color:#24292E\">content</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            vectors[vectors.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">()] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> title, values</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> vector, metadata</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span><span style=\"color:#032F62\">\"content\"</span><span style=\"color:#24292E\">: content}};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        pinecone</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">UpsertResponse response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> pineconeClient</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">vectors</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">upsert.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">({vectors, namespace</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> NAMESPACE});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> response.upsertedCount </span><span style=\"color:#D73A49\">!=</span><span style=\"color:#24292E\"> range.values.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to insert embedding vectors to pinecone.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Successfully inserted embedding vectors to pinecone.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> answer</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> question</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">?|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> constructPrompt</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">question</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o-mini\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"role\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"content\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> prompt</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> response.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"effortlessly-create-impactful-business":{"frontmatter":{"title":"Effortlessly create impactful business use cases","description":"Take advantage of Ballerina's OpenAI, Azure, and VectorDB connectors to craft powerful solutions like Slack bots and Q&A bots that enhance customer engagement and optimize business operations.","url":"","image":""},"code":""},"fine-tune-models-with-your-own-data":{"frontmatter":{"title":"Fine-tune models with your data to create your own models","description":"OpenAIâ€™s fine tuning API lets you create a model that understands your world. Use Ballerinaâ€™s ability to easily integrate business APIs and systems to take your business data to fine-tune it and make that available for your business.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/finetune_openai_models/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n    finetunes:Client openAIFineTunes = check new ({auth: {token: openAIToken}});\n\n    finetunes:CreateFileRequest fileRequest = {\n        file: {\n            fileContent: check io:fileReadBytes(TRAIN_DATA_FILE_PATH),\n            fileName: TRAIN_DATA_FILE_NAME\n        },\n        purpose: &#x22;fine-tune&#x22;\n    };\n\n    finetunes:OpenAIFile fileResponse = check openAIFineTunes->/files.post(fileRequest);\n    io:println(string &#x60;Training file uploaded successfully with ID: ${fileResponse.id}&#x60;);\n\n    finetunes:CreateFineTuningJobRequest fineTuneRequest = {\n        training_file: fileResponse.id,\n        model: &#x22;gpt-3.5-turbo&#x22;,\n        seed: 4\n    };\n\n    finetunes:FineTuningJob fineTuneResponse = check openAIFineTunes->/fine_tuning/jobs.post(fineTuneRequest);\n    io:println(string &#x60;Fine-tune job started successfully with ID: ${fineTuneResponse.id}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIFineTunes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateFileRequest fileRequest </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            fileContent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io:</span><span style=\"color:#6F42C1\">fileReadBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">TRAIN_DATA_FILE_PATH</span><span style=\"color:#24292E\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            fileName</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> TRAIN_DATA_FILE_NAME</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        purpose</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"fine-tune\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">OpenAIFile fileResponse </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIFineTunes</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">files.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">fileRequest</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Training file uploaded successfully with ID: ${</span><span style=\"color:#24292E\">fileResponse</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">id</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateFineTuningJobRequest fineTuneRequest </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        training_file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> fileResponse.id,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-3.5-turbo\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        seed</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 4</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">FineTuningJob fineTuneResponse </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIFineTunes</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">fine_tuning</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">jobs.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">fineTuneRequest</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Fine-tune job started successfully with ID: ${</span><span style=\"color:#24292E\">fineTuneResponse</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">id</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"hosting_ipaas":{"frontmatter":{"title":"(Extra!) Deploy AI-Powered Integrations with Devant","description":"Devant by WSO2 is an AI-powered iPaaS built for the era of intelligent applications. Go beyond buildingâ€”deploy, scale, and manage AI integrations effortlessly. Whether itâ€™s GenAI models, knowledge bases, or custom AI Agents, Devant helps you operationalize them with low-code speed and cloud-native ease. From idea to live integrationâ€”Devant gets you there faster.","url":"https://wso2.com/devant/","image":"images/choreo-ipaas-image-v2.png"},"code":""},"libraries-for-ai-operations":{"frontmatter":{"title":"Libraries for AI operations","description":"Built-in mathematical operations such as distance measures, optimizations, etc. are a common building block in AI use cases.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/compare_similarity_between_two_texts_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n    final embeddings:Client openAIEmbeddings = check new ({auth: {token: openAIToken}});\n\n    string text1 = &#x22;What are you thinking?&#x22;;\n    string text2 = &#x22;you are playing cricket&#x22;;\n    embeddings:CreateEmbeddingRequest embeddingReq = {\n        model: &#x22;text-embedding-3-small&#x22;,\n        input: [text1, text2]\n    };\n    embeddings:CreateEmbeddingResponse embeddingRes = check openAIEmbeddings->/embeddings.post(embeddingReq);\n\n    float[] text1Embedding = embeddingRes.data[0].embedding;\n    float[] text2Embedding = embeddingRes.data[1].embedding;\n    float similarity = vector:cosineSimilarity(text1Embedding, text2Embedding);\n    io:println(&#x22;The similarity between the given two texts : &#x22;, similarity);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> embeddings</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIEmbeddings </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> text1 </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"What are you thinking?\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> text2 </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"you are playing cricket\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    embeddings</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEmbeddingRequest embeddingReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-embedding-3-small\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        input</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [text1, text2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    embeddings</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEmbeddingResponse embeddingRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIEmbeddings</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">embeddings.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">embeddingReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\">[] text1Embedding </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> embeddingRes.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].embedding;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\">[] text2Embedding </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> embeddingRes.data[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">].embedding;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> similarity </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> vector</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">cosineSimilarity</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">text1Embedding</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">text2Embedding</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"The similarity between the given two texts : \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">similarity</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"multimodel1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n    chat:CreateChatCompletionRequest request = {\n        model: &#x22;gpt-4o-mini&#x22;,\n        messages: [\n            {\n                role: &#x22;user&#x22;,\n                content: [\n                    {\n                        &#x27;type: &#x22;text&#x22;,\n                        text: &#x22;What is in this image?&#x22;\n                    },\n                    {\n                        &#x27;type: &#x22;image_url&#x22;,\n                        image_url: {\n                            url: &#x22;https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg&#x22;\n                        }\n                    }\n                ]\n            }\n        ]\n    };\n    chat:CreateChatCompletionResponse completionRes = check openAIChat->/chat/completions.post(request);\n\n    string content = check completionRes.choices[0].message.content.ensureType();\n    io:println(&#x22;Photo Description: &#x22;, content);   \n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o-mini\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                role</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                content</span><span style=\"color:#24292E\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                        'type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                        text</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"What is in this image?\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                        'type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"image_url\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                        image_url</span><span style=\"color:#24292E\">: {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                            url</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> content </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content.</span><span style=\"color:#6F42C1\">ensureType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Photo Description: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">content</span><span style=\"color:#24292E\">);   </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"multimodel2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service / on new http:Listener(9090) {\n    resource function post products() returns int|error {\n        // Get the product details from the last inserted row of the Google Sheet.\n        sheets:Range range = check gsheets->getRange(googleSheetId, &#x22;Sheet1&#x22;, &#x22;A2:F&#x22;);\n        var [name, benefits, features, productType] = getProduct(range);\n\n        // Generate a product description from OpenAI for a given product name.\n        string query = string &#x60;generate a product descirption in 250 words about ${name}&#x60;;\n        chat:CreateChatCompletionRequest request = {\n            model: &#x22;gpt-4o&#x22;,\n            messages: [\n                {\n                    &#x22;role&#x22;: &#x22;user&#x22;,\n                    &#x22;content&#x22;: query\n                }\n            ],\n            max_tokens: 100\n        };\n\n        chat:CreateChatCompletionResponse completionRes = check openAIChat->/chat/completions.post(request);\n\n        // Generate a product image from OpenAI for the given product.\n        images:CreateImageRequest imagePrmt = {prompt: string &#x60;${name}, ${benefits}, ${features}&#x60;};\n        images:ImagesResponse imageRes = check openAIImages->/images/generations.post(imagePrmt);\n\n        // Create a product in Shopify.\n        shopify:CreateProduct product = {\n            product: {\n                title: name,\n                body_html: completionRes.choices[0].message.content,\n                tags: features,\n                product_type: productType,\n                images: [{src: imageRes.data[0].url}]\n            }\n        };\n        shopify:ProductObject prodObj = check shopify->createProduct(product);\n        int? pid = prodObj?.product?.id;\n        if pid is () {\n            return error(&#x22;Error in creating product in Shopify&#x22;);\n        }\n        return pid;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">9090</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> products</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Get the product details from the last inserted row of the Google Sheet.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        sheets</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Range range </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gsheets</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getRange</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">googleSheetId</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"Sheet1\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"A2:F\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        var</span><span style=\"color:#24292E\"> [name, benefits, features, productType] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> getProduct</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">range</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Generate a product description from OpenAI for a given product name.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> query </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `generate a product descirption in 250 words about ${</span><span style=\"color:#24292E\">name</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"role\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"content\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> query</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Generate a product image from OpenAI for the given product.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateImageRequest imagePrmt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`${</span><span style=\"color:#24292E\">name</span><span style=\"color:#032F62\">}, ${</span><span style=\"color:#24292E\">benefits</span><span style=\"color:#032F62\">}, ${</span><span style=\"color:#24292E\">features</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ImagesResponse imageRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIImages</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">images</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">generations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">imagePrmt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Create a product in Shopify.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        shopify</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateProduct product </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            product</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                title</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                body_html</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                tags</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> features,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                product_type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> productType,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [{</span><span style=\"color:#6F42C1\">src</span><span style=\"color:#24292E\">: imageRes.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].url}]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        shopify</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ProductObject prodObj </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> shopify</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">createProduct</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">product</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        int</span><span style=\"color:#24292E\">? pid </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> prodObj?.product?.id;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> pid </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Error in creating product in Shopify\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> pid;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"multimodel3":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string audioURL, string toLanguage) returns error? {\n    // Creates a HTTP client to download the audio file\n    http:Client audioEP = check new (audioURL);\n    http:Response httpResp = check audioEP->get(&#x22;&#x22;);\n    byte[] audioBytes = check httpResp.getBinaryPayload();\n    check io:fileWriteBytes(AUDIO_FILE_PATH, audioBytes);\n\n    // Creates a request to translate the audio file to text (English)\n    audio:CreateTranslationRequest translationsReq = {\n        file: {fileContent: check io:fileReadBytes(AUDIO_FILE_PATH), fileName: AUDIO_FILE},\n        model: &#x22;whisper-1&#x22;\n    };\n\n    // Translates the audio file to text (English)\n    audio:Client openAIAudio = check new ({auth: {token: openAIToken}});\n    audio:CreateTranscriptionResponse transcriptionRes = check openAIAudio->/audio/translations.post(translationsReq);\n    io:println(&#x22;Audio text in English: &#x22;, transcriptionRes.text);\n\n    final chat:Client openAIChat = check new ({\n        auth: {\n            token: openAIToken\n        }\n    });\n\n    string query = string &#x60;Translate the following text from English to ${toLanguage} : ${transcriptionRes.text}&#x60;;\n\n    // Creates a request to translate the text from English to another language\n    chat:CreateChatCompletionRequest request = {\n        model: &#x22;gpt-4o&#x22;,\n        messages: [\n            {\n                &#x22;role&#x22;: &#x22;user&#x22;,\n                &#x22;content&#x22;: query\n            }\n        ],\n        temperature: 0.7,\n        max_tokens: 256,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0\n    };\n\n    // Translates the text from English to another language\n    chat:CreateChatCompletionResponse response = check openAIChat->/chat/completions.post(request);\n    string? translatedText = response.choices[0].message.content;\n\n    if translatedText is () {\n        return error(&#x22;Failed to translate the given audio.&#x22;);\n    }\n    io:println(&#x22;Translated text: &#x22;, translatedText);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> audioURL</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> toLanguage</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a HTTP client to download the audio file</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client audioEP </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">audioURL</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Response httpResp </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> audioEP</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    byte</span><span style=\"color:#24292E\">[] audioBytes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> httpResp.</span><span style=\"color:#6F42C1\">getBinaryPayload</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileWriteBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">audioBytes</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to translate the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranslationRequest translationsReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {fileContent: </span><span style=\"color:#D73A49\">check</span><span style=\"color:#24292E\"> io:</span><span style=\"color:#6F42C1\">fileReadBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">), fileName</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> AUDIO_FILE},</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"whisper-1\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Translates the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIAudio </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranscriptionResponse transcriptionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIAudio</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">audio</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">translations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">translationsReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Audio text in English: \"</span><span style=\"color:#24292E\">, transcriptionRes.text);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIChat </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            token</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> openAIToken</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> query </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `Translate the following text from English to ${</span><span style=\"color:#24292E\">toLanguage</span><span style=\"color:#032F62\">} : ${</span><span style=\"color:#24292E\">transcriptionRes</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">text</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to translate the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"role\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"content\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> query</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        temperature</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0.7</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 256</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        top_p</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        frequency_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        presence_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Translates the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? translatedText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> response.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> translatedText </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to translate the given audio.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Translated text: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">translatedText</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"multimodel4":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string podcastURL) returns error? {\n    // Creates a HTTP client to download the audio file\n    http:Client podcastEP = check new (podcastURL);\n    http:Response httpResp = check podcastEP->get(&#x22;&#x22;);\n    byte[] audioBytes = check httpResp.getBinaryPayload();\n    check io:fileWriteBytes(AUDIO_FILE_PATH, audioBytes);\n\n    // Creates a request to translate the audio file to text (English)\n    audio:CreateTranscriptionRequest transcriptionsReq = {\n        file: {fileContent: (check io:fileReadBytes(AUDIO_FILE_PATH)), fileName: AUDIO_FILE},\n        model: &#x22;whisper-1&#x22;\n    };\n\n    // Converts the audio file to text (English) using OpenAI speach to text API\n    audio:Client openAIAudio = check new ({auth: {token: openAIToken}});\n    audio:CreateTranscriptionResponse transcriptionsRes = check openAIAudio->/audio/transcriptions.post(transcriptionsReq);\n    io:println(&#x22;Text from the audio :&#x22;, transcriptionsRes.text);\n\n    // Creates a request to summarize the text\n    chat:CreateChatCompletionRequest request = {\n        model: &#x22;gpt-4o-mini&#x22;,\n        messages: [\n            {\n                role: &#x22;user&#x22;,\n                content: string &#x60;Summarize the following text to 100 characters : ${transcriptionsRes.text}&#x60;\n            }\n        ],\n        temperature: 0.7,\n        max_tokens: 256,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0\n    };\n\n    // Summarizes the text using OpenAI text completion API\n    final chat:Client openAIChat = check new ({auth: {token: openAIToken}});\n    chat:CreateChatCompletionResponse completionRes = check openAIChat->/chat/completions.post(request);\n\n    string? summerizedText = completionRes.choices[0].message.content;\n    if summerizedText is () {\n        return error(&#x22;Failed to summarize the given audio.&#x22;);\n    }\n    io:println(&#x22;Summarized text: &#x22;, summerizedText);\n\n    // Tweet it out!\n    final twitter:Client twitter = check new ({auth: {token: token}});\n    twitter:TweetCreateResponse tweet = check twitter->/tweets.post({text: summerizedText});\n    io:println(&#x22;Tweet: &#x22;, tweet);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> podcastURL</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a HTTP client to download the audio file</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client podcastEP </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">podcastURL</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Response httpResp </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> podcastEP</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    byte</span><span style=\"color:#24292E\">[] audioBytes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> httpResp.</span><span style=\"color:#6F42C1\">getBinaryPayload</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileWriteBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">audioBytes</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to translate the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranscriptionRequest transcriptionsReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {fileContent: (</span><span style=\"color:#D73A49\">check</span><span style=\"color:#E36209\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">)), fileName</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> AUDIO_FILE},</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"whisper-1\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Converts the audio file to text (English) using OpenAI speach to text API</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIAudio </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranscriptionResponse transcriptionsRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIAudio</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">audio</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">transcriptions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">transcriptionsReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Text from the audio :\"</span><span style=\"color:#24292E\">, transcriptionsRes.text);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to summarize the text</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o-mini\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                role</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                content</span><span style=\"color:#24292E\">: </span><span style=\"color:#005CC5\">string</span><span style=\"color:#24292E\"> `Summarize the following text to </span><span style=\"color:#005CC5\">100</span><span style=\"color:#6F42C1\"> characters</span><span style=\"color:#24292E\"> : ${transcriptionsRes.text}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        temperature</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0.7</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 256</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        top_p</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        frequency_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        presence_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Summarizes the text using OpenAI text completion API</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIChat </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? summerizedText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> summerizedText </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to summarize the given audio.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Summarized text: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">summerizedText</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Tweet it out!</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> twitter</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client twitter </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: token}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    twitter</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">TweetCreateResponse tweet </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> twitter</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">tweets.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">({text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> summerizedText});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Tweet: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">tweet</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"natural_programming_code":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/http;\nimport ballerinax/np;\n\nfinal readonly &#x26; string[] categories = [&#x22;Gardening&#x22;, &#x22;Sports&#x22;, &#x22;Health&#x22;];\n\npublic type Blog record {|\n    string title;\n    string content;\n|};\n\ntype Review record {|\n    string? suggestedCategory;\n    int rating;\n|};\n\npublic isolated function reviewBlog(\n        Blog blog,\n        np:Prompt prompt = &#x60;You are an expert content reviewer for a blog site that \n        categorizes posts under the following categories: ${categories}\n\n        Your tasks are:\n        1. Suggest a suitable category for the blog from exactly the specified categories. \n           If there is no match, use null.\n\n        2. Rate the blog post on a scale of 1 to 10 based on the following criteria:\n        - **Relevance**: How well the content aligns with the chosen category.\n        - **Depth**: The level of detail and insight in the content.\n        - **Clarity**: How easy it is to read and understand.\n        - **Originality**: Whether the content introduces fresh perspectives or ideas.\n        - **Language Quality**: Grammar, spelling, and overall writing quality.\n\n        Here is the blog post content:\n\n        Title: ${blog.title}\n        Content: ${blog.content}&#x60;) returns Review|error = @np:NaturalFunction external;\n\nservice /blogs on new http:Listener(8088) {\n    resource function post review(Blog blog) returns Review|http:InternalServerError {\n        Review|error review = reviewBlog(blog);\n        if review is error {\n            return {\n                body: &#x22;Failed to review the blog post&#x22;\n            };\n        }\n        return review;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerinax/np;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#D73A49\"> &#x26;</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\">[] categories </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> [</span><span style=\"color:#032F62\">\"Gardening\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"Sports\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"Health\"</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> type</span><span style=\"color:#6F42C1\"> Blog</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> content;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Review</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? suggestedCategory;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> rating;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> isolated</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> reviewBlog</span><span style=\"color:#24292E\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">        Blog</span><span style=\"color:#E36209\"> blog</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">        np</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Prompt prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> `</span><span style=\"color:#E36209\">You</span><span style=\"color:#E36209\"> are</span><span style=\"color:#E36209\"> an</span><span style=\"color:#E36209\"> expert</span><span style=\"color:#E36209\"> content</span><span style=\"color:#E36209\"> reviewer</span><span style=\"color:#E36209\"> for</span><span style=\"color:#E36209\"> a</span><span style=\"color:#E36209\"> blog</span><span style=\"color:#E36209\"> site</span><span style=\"color:#E36209\"> that</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#E36209\">        categorizes</span><span style=\"color:#E36209\"> posts</span><span style=\"color:#E36209\"> under</span><span style=\"color:#E36209\"> the</span><span style=\"color:#E36209\"> following</span><span style=\"color:#E36209\"> categories</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> ${categories}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E36209\">        Your</span><span style=\"color:#E36209\"> tasks</span><span style=\"color:#E36209\"> are</span><span style=\"color:#D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        1</span><span style=\"color:#24292E\">. Suggest </span><span style=\"color:#E36209\">a</span><span style=\"color:#E36209\"> suitable</span><span style=\"color:#E36209\"> category</span><span style=\"color:#E36209\"> for</span><span style=\"color:#E36209\"> the</span><span style=\"color:#E36209\"> blog</span><span style=\"color:#D73A49\"> from</span><span style=\"color:#E36209\"> exactly</span><span style=\"color:#E36209\"> the</span><span style=\"color:#E36209\"> specified</span><span style=\"color:#24292E\"> categories. </span></span>\n<span class=\"line\"><span style=\"color:#E36209\">           If</span><span style=\"color:#E36209\"> there</span><span style=\"color:#D73A49\"> is</span><span style=\"color:#E36209\"> no</span><span style=\"color:#D73A49\"> match</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">use</span><span style=\"color:#D73A49\"> null</span><span style=\"color:#24292E\">.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        2</span><span style=\"color:#24292E\">. Rate </span><span style=\"color:#E36209\">the</span><span style=\"color:#E36209\"> blog</span><span style=\"color:#E36209\"> post</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#E36209\"> a</span><span style=\"color:#E36209\"> scale</span><span style=\"color:#E36209\"> of</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#E36209\"> to</span><span style=\"color:#005CC5\"> 10</span><span style=\"color:#E36209\"> based</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#E36209\"> the</span><span style=\"color:#E36209\"> following</span><span style=\"color:#E36209\"> criteria</span><span style=\"color:#D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        -</span><span style=\"color:#24292E\"> **</span><span style=\"color:#E36209\">Relevance</span><span style=\"color:#24292E\">**</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> How well the content aligns with the chosen category.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        -</span><span style=\"color:#24292E\"> **</span><span style=\"color:#E36209\">Depth</span><span style=\"color:#24292E\">**</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> The level of detail and insight </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> the content.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        -</span><span style=\"color:#24292E\"> **</span><span style=\"color:#E36209\">Clarity</span><span style=\"color:#24292E\">**</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> How easy it </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> to read and understand.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        -</span><span style=\"color:#24292E\"> **</span><span style=\"color:#E36209\">Originality</span><span style=\"color:#24292E\">**</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> Whether the content introduces fresh perspectives or ideas.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        -</span><span style=\"color:#24292E\"> **</span><span style=\"color:#E36209\">Language</span><span style=\"color:#E36209\"> Quality</span><span style=\"color:#24292E\">**</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> Grammar, </span><span style=\"color:#E36209\">spelling</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">and</span><span style=\"color:#E36209\"> overall</span><span style=\"color:#E36209\"> writing</span><span style=\"color:#24292E\"> quality.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E36209\">        Here</span><span style=\"color:#D73A49\"> is</span><span style=\"color:#E36209\"> the</span><span style=\"color:#E36209\"> blog</span><span style=\"color:#E36209\"> post</span><span style=\"color:#E36209\"> content</span><span style=\"color:#D73A49\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E36209\">        Title</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> ${blog.title}</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">        Content</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> ${blog.content}`) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Review</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> @</span><span style=\"color:#005CC5\">np</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">NaturalFunction</span><span style=\"color:#6F42C1\"> external</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#6F42C1\"> /blogs</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8088</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> review</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">Blog</span><span style=\"color:#E36209\"> blog</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Review</span><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">InternalServerError {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Review</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> review </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> reviewBlog</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">blog</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> review </span><span style=\"color:#D73A49\">is</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                body</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Failed to review the blog post\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> review;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"openai1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string filePath) returns error? {\n    chat:Client openAIChat = check new ({auth: {token: openAIToken}});\n\n    string fileContent = check io:fileReadString(filePath);\n    io:println(string &#x60;Content: ${fileContent}&#x60;);\n\n    chat:CreateChatCompletionRequest request = {\n        model: &#x22;gpt-4o-mini&#x22;,\n        messages: [\n            {\n                &#x22;role&#x22;: &#x22;user&#x22;,\n                &#x22;content&#x22;: string &#x60;Summarize:\\n&#x22; ${fileContent}&#x60;\n            }\n        ],\n        max_tokens: 2000\n    };\n\n    chat:CreateChatCompletionResponse response = check openAIChat->/chat/completions.post(request);\n    string? summary = response.choices[0].message.content;\n\n    if summary is () {\n        return error(&#x22;Failed to summarize the given text.&#x22;);\n    }\n    io:println(string &#x60;Summary: ${summary}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> filePath</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIChat </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> fileContent </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadString</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">filePath</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Content: ${</span><span style=\"color:#24292E\">fileContent</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o-mini\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"role\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"content\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Summarize:</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\" ${</span><span style=\"color:#24292E\">fileContent</span><span style=\"color:#032F62\">}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2000</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? summary </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> response.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> summary </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to summarize the given text.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Summary: ${</span><span style=\"color:#24292E\">summary</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"openai2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n    ParamterSchema param = {\n        &#x27;type: &#x22;object&#x22;,\n        properties: {\n            &#x22;location&#x22;: {\n                &#x27;type: &#x22;string&#x22;,\n                description: &#x22;City and country e.g. BogotÃ¡, Colombia&#x22;\n            }\n        },\n        required: [&#x22;location&#x22;],\n        additionalProperties: false\n    };\n    chat:CreateChatCompletionRequest request = {\n        model: &#x22;gpt-4o-mini&#x22;,\n        messages: [\n            {\n                role: &#x22;user&#x22;,\n                content: string &#x60;What is the weather like in Paris today?&#x60;\n            }\n        ],\n        tools: [\n        {\n            &#x27;type: &#x22;function&#x22;,\n            &#x27;function: {\n                name: &#x22;get_weather&#x22;,\n                description: &#x22;Get current temperature for a given location.&#x22;,\n                parameters: param,\n                strict: true\n            }\n        }\n        ]\n    };\n    chat:CreateChatCompletionResponse completionRes = check openAIChat->/chat/completions.post(request);\n\n    chat:ChatCompletionMessageToolCalls toolCalls = check completionRes.choices[0].message.tool_calls.ensureType();\n    io:println(&#x22;Tool Calls: &#x22;, toolCalls);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    ParamterSchema param </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        'type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"object\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        properties</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            \"location\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                'type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"string\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                description</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"City and country e.g. BogotÃ¡, Colombia\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        required</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span><span style=\"color:#032F62\">\"location\"</span><span style=\"color:#24292E\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        additionalProperties</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> false</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o-mini\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                role</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                content</span><span style=\"color:#24292E\">: </span><span style=\"color:#005CC5\">string</span><span style=\"color:#24292E\"> `What is the weather like in Paris today?`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        tools</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            'type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"function\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            'function</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                name</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"get_weather\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                description</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"Get current temperature for a given location.\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                parameters</span><span style=\"color:#24292E\">: param,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">                strict</span><span style=\"color:#24292E\">: </span><span style=\"color:#005CC5\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ChatCompletionMessageToolCalls toolCalls </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.tool_calls.</span><span style=\"color:#6F42C1\">ensureType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Tool Calls: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">toolCalls</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"openai3":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n    // Get information on upcoming and recently released movies from TMDB\n    final themoviedb:Client moviedb = check new themoviedb:Client({apiKey: moviedbApiKey});\n    themoviedb:InlineResponse2001 upcomingMovies = check moviedb->getUpcomingMovies();\n\n    // Generate a creative tweet using Azure OpenAI   \n    string prompt = &#x22;Instruction: Generate a creative and short tweet below 250 characters about the following &#x22; +\n    &#x22;upcoming and recently released movies. Movies: &#x22;;\n    foreach int i in 1 ... NO_OF_MOVIES {\n        prompt += string &#x60;${i}. ${upcomingMovies.results[i - 1].title} &#x60;;\n    }\n\n    final twitter:Client twitter = check new ({\n        auth: {token: token}\n    });\n\n    final chat:Client chatClient = check new (config = {auth: {apiKey: openAIToken}}, serviceUrl = serviceUrl);\n\n    chat:CreateChatCompletionRequest chatBody = {\n        messages: [{role: &#x22;user&#x22;, &#x22;content&#x22;: prompt}]\n    };\n\n    chat:CreateChatCompletionResponse chatResult = check chatClient->/deployments/[deploymentId]/chat/completions.post(&#x22;2023-12-01-preview&#x22;, chatBody);\n    record {|chat:ChatCompletionResponseMessage message?; chat:ContentFilterChoiceResults content_filter_results?; int index?; string finish_reason?; anydata...;|}[] choices = check chatResult.choices.ensureType();\n    string? tweetContent = choices[0].message?.content;\n\n    if tweetContent is () {\n        return error(&#x22;Failed to generate a tweet on upcoming and recently released movies.&#x22;);\n    }\n\n    if tweetContent.length() > MAX_TWEET_LENGTH {\n        return error(&#x22;The generated tweet exceeded the maximum supported character length.&#x22;);\n    }\n\n    // Tweet it out!\n    twitter:TweetCreateResponse tweet = check twitter->/tweets.post(payload = {text: tweetContent});\n    io:println(&#x22;Tweet: &#x22;, tweet);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Get information on upcoming and recently released movies from TMDB</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> themoviedb</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client moviedb </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> themoviedb</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">Client</span><span style=\"color:#24292E\">({apiKey</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> moviedbApiKey});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    themoviedb</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">InlineResponse2001 upcomingMovies </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> moviedb</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getUpcomingMovies</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Generate a creative tweet using Azure OpenAI   </span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"Instruction: Generate a creative and short tweet below 250 characters about the following \"</span><span style=\"color:#D73A49\"> +</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">    \"upcoming and recently released movies. Movies: \"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    foreach </span><span style=\"color:#005CC5\">int</span><span style=\"color:#24292E\"> i </span><span style=\"color:#D73A49\">in</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#D73A49\"> ...</span><span style=\"color:#24292E\"> NO_OF_MOVIES {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        prompt </span><span style=\"color:#D73A49\">+=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `${</span><span style=\"color:#24292E\">i</span><span style=\"color:#032F62\">}. ${</span><span style=\"color:#24292E\">upcomingMovies</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">results</span><span style=\"color:#032F62\">[</span><span style=\"color:#24292E\">i</span><span style=\"color:#D73A49\"> -</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#032F62\">].</span><span style=\"color:#24292E\">title</span><span style=\"color:#032F62\">} `</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> twitter</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client twitter </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: token}</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client chatClient </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">config</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> {auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {apiKey: openAIToken}}, </span><span style=\"color:#E36209\">serviceUrl</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> serviceUrl);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest chatBody </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [{</span><span style=\"color:#6F42C1\">role</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"user\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"content\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> prompt}]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse chatResult </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> chatClient</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">deployments</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">[deploymentId]</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"2023-12-01-preview\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">chatBody</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ChatCompletionResponseMessage message?; chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ContentFilterChoiceResults content_filter_results?; </span><span style=\"color:#005CC5\">int</span><span style=\"color:#24292E\"> index?; </span><span style=\"color:#005CC5\">string</span><span style=\"color:#24292E\"> finish_reason?; </span><span style=\"color:#005CC5\">anydata</span><span style=\"color:#D73A49\">...</span><span style=\"color:#24292E\">;</span><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">}[] choices </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> chatResult.choices.</span><span style=\"color:#6F42C1\">ensureType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? tweetContent </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message?.content;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> tweetContent </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to generate a tweet on upcoming and recently released movies.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> tweetContent.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> MAX_TWEET_LENGTH {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"The generated tweet exceeded the maximum supported character length.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Tweet it out!</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    twitter</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">TweetCreateResponse tweet </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> twitter</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">tweets.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">payload</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> {text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> tweetContent});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Tweet: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">tweet</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"simplify-vector-database-management":{"frontmatter":{"title":"Simplify vector database management","description":"Ballerina comes with built-in connectors for vector databases, which are a common building block in AI use cases that support the storage and retrieval of high-dimensional vectors.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/answer_questions_using_vector_search_weaviate/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service / on new http:Listener(8080) {\n    resource function get answer(string question) returns weaviate:JsonObject|error? {\n        // Retrieve OpenAI embeddings for the input question\n        embeddings:CreateEmbeddingResponse embeddingResponse = check openai->/embeddings.post({\n                model: MODEL,\n                input: question\n            }\n        );\n        float[] vector = embeddingResponse.data[0].embedding;\n\n        // Querying Weaviate for the closest vector using GraphQL\n        string graphQLQuery = string &#x60;{\n                                    Get {\n                                        ${CLASS_NAME} (\n                                        nearVector: {\n                                            vector: ${vector.toString()}\n                                            }\n                                            limit: 1\n                                        ){\n                                        question\n                                        answer\n                                        _additional {\n                                            certainty,\n                                            id\n                                            }\n                                        }\n                                    }\n                                }&#x60;;\n\n        weaviate:GraphQLResponse results = check weaviate->/graphql.post({query: graphQLQuery});\n\n        return results.data;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> answer</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> question</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> weaviate</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">JsonObject</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Retrieve OpenAI embeddings for the input question</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        embeddings</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEmbeddingResponse embeddingResponse </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openai</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">embeddings.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> MODEL,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                input</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> question</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        );</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        float</span><span style=\"color:#24292E\">[] vector </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> embeddingResponse.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].embedding;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Querying Weaviate for the closest vector using GraphQL</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> graphQLQuery </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `{</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                    Get {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        ${</span><span style=\"color:#24292E\">CLASS_NAME</span><span style=\"color:#032F62\">} (</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        nearVector: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            vector: ${</span><span style=\"color:#24292E\">vector</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span><span style=\"color:#032F62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            limit: 1</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        ){</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        question</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        answer</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        _additional {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            certainty,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            id</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                    }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                }`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        weaviate</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">GraphQLResponse results </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> weaviate</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">graphql.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">({query</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> graphQLQuery});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> results.data;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"why-is-ballerina-the-way-you-should-write-ai-applications":{"frontmatter":{"title":"Why is Ballerina the way you should write AI applications?","description":"Python remains the go-to for machine learning, data science, and analyticsâ€”but integrating AI into modern business applications is a different challenge. Itâ€™s now about invoking LLMs, prompt engineering, and embedding AI into workflows. Ballerina, a cloud-native language built for integration, offers powerful abstractions to connect with LLMs and seamlessly weave AI into your applications to deliver real value.","url":"https://github.com/xlight05/ai-samples/blob/usecase-samples/hr_agent_rag_app/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service /agent on hrAgent {\n    resource function post chat(@http:Payload agent:ChatReqMessage request) returns agent:ChatRespMessage|error {\n        string query = request.message;\n        float[] embeddings = check getEmbeddings(query);\n        string retrievedChunks = check retrieveChunksFromPinecone(embeddings);\n        string hRAssistantResponse = check getHRAssistantResponse(query, retrievedChunks);\n        return {message: hRAssistantResponse};\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#6F42C1\"> /agent</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#24292E\"> hrAgent {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> chat</span><span style=\"color:#24292E\">(@</span><span style=\"color:#005CC5\">http</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">Payload</span><span style=\"color:#E36209\"> agent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ChatReqMessage request) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> agent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ChatRespMessage</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> query </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> request.message;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        float</span><span style=\"color:#24292E\">[] embeddings </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> getEmbeddings</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">query</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> retrievedChunks </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> retrieveChunksFromPinecone</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">embeddings</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> hRAssistantResponse </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> getHRAssistantResponse</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">query</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">retrievedChunks</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> {message</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> hRAssistantResponse};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"write-robust-api-powered-ai-applications":{"frontmatter":{"title":"Write robust API-powered AI applications","description":"Take on the unpredictable world of distributed systems with the built-in language features and Ballerina library features. Writing robust API-powered AI applications is now a breeze for every developer, no matter the challenges!","url":"https://github.com/ballerina-guides/ai-samples/blob/main/correct_grammar_and_spelling_in_text_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string filePath) returns error? {\n    http:RetryConfig retryConfig = {\n        interval: 5, // Initial retry interval in seconds.\n        count: 3, // Number of retry attempts before stopping.\n        backOffFactor: 2.0 // Multiplier of the retry interval.\n    };\n    final chat:Client openAIChat = check new ({auth: {token: openAIToken}, retryConfig});\n\n    chat:CreateChatCompletionRequest request = {\n        model: &#x22;gpt-4o-mini&#x22;,\n        messages: [\n            {\n                &#x22;role&#x22;: &#x22;user&#x22;,\n                &#x22;content&#x22;: string &#x60;Fix grammar and spelling mistakes of the content ${check\n                io:fileReadString(filePath)}&#x60;\n            }\n        ]\n    };\n\n    chat:CreateChatCompletionResponse response = check openAIChat->/chat/completions.post(request);\n    string text = check response.choices[0].message.content.ensureType();\n    io:println(string &#x60;Corrected: ${text}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> filePath</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">RetryConfig retryConfig </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        interval</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 5</span><span style=\"color:#24292E\">, </span><span style=\"color:#6A737D\">// Initial retry interval in seconds.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        count</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3</span><span style=\"color:#24292E\">, </span><span style=\"color:#6A737D\">// Number of retry attempts before stopping.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        backOffFactor</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2.0</span><span style=\"color:#6A737D\"> // Multiplier of the retry interval.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIChat </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}, </span><span style=\"color:#E36209\">retryConfig</span><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionRequest request </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"gpt-4o-mini\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"role\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"user\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"content\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Fix grammar and spelling mistakes of the content ${</span><span style=\"color:#D73A49\">check</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadString</span><span style=\"color:#032F62\">(</span><span style=\"color:#005CC5\">filePath</span><span style=\"color:#032F62\">)</span><span style=\"color:#032F62\">}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateChatCompletionResponse response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIChat</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> text </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> response.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message.content.</span><span style=\"color:#6F42C1\">ensureType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Corrected: ${</span><span style=\"color:#24292E\">text</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"}}},"__N_SSG":true}