{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina Toml Library\n\n_Owners_: @shafreenAnfar @MadhukaHarith92  \n_Reviewers_: @shafreenAnfar  \n_Created_: 2023/04/04  \n_Updated_: 2023/04/04  \n_Edition_: Swan Lake\n\n## Introduction\nThis is the specification for the Toml standard library of [Ballerina language](https://ballerina.io/), which provides APIs to convert a TOML configuration file to `map<json>`, and vice-versa.\n\nSince the parser is following LL(1) grammar, it follows a non-recursive predictive parsing algorithm that operates in a linear time complexity.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the [Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the specification is stored under `/docs/proposals`. Proposals under discussion can be found with the label `type/proposal` in GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Compatibility](#2-compatibility)\n3. [Parsing a TOML Document](#3-parsing-a-toml-document)\n4. [Writing to a TOML Document](#4-writing-to-a-toml-document)\n5. [Supported Data Types](#5-supported-data-types)\n6. [Example](#6-example)\n\n## 1. Overview\nThis specification elaborates on the functions available in the Toml library.\n\nSince the parser is following LL(1) grammar, it follows a non-recursive predictive parsing algorithm that operates in a linear time complexity.\n\n## 2. Compatibility\n\n| Language  | Version                        |\n| --------- | ------------------------------ |\n| Ballerina | Ballerina 2201.0.0 (Swan Lake) |\n| TOML      | 1.0                            |\n\nThe parser follows the grammar rules particularized in the [TOML specification 1.0](https://toml.io/en/v1.0.0).\n\n## 3. Parsing a TOML Document\n\nThe module supports parsing either a TOML file or a TOML string.\n\n```ballerina\n// Parsing a TOML file\nmap<json>|toml:Error tomlFile = toml:readFile(\"path/to/file.toml\");\n\n// Parsing a TOML string\nmap<json>|toml:Error tomLString = toml:readString(string\n    `bool = true\n    int = 1\n    float = 1.1`);\n```\n\nBy default, the package parses offset date time into `time.Utc`. This can be skipped by disabling the `parseOffsetDateTime`.\n\n## 4. Writing to a TOML Document\n\nAny `map<json>` structure containing the [supported data types](#Supported-Data-Types) can be converted to a TOML document. The package can either convert the document to an array of strings or write to a TOML file.\n\n```ballerina\nmap<json> toml = {\n    \"str\": \"string\",\n    \"float\": 0.01,\n    \"inline\": {\n        \"boolean\": false\n    }\n};\n\n// Write the TOML content into a file\ntoml:Error? fileResult = toml:writeFile(\"path/to/file.toml\", toml);\n\n// Covert the TOML content to an array of strings\nstring[]|toml:Error stringResult = toml:writeString(toml);\n```\n\n\n\nThe following options can be set to further format the output TOML file.\n\n| Option                      | Default | Description                                                                                                                                  |\n| --------------------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| `int indentationPolicy`     | `2`     | The number of whitespaces considered for an indent. An indentation is made once a standard or an array table is defined under the current one. |\n| `boolean allowedDottedKeys` | `true`  | If set, dotted keys are used instead of standard tables.                                                                                     |\n\nConsider the `map<json>` structure of  `{table: key = \"value\"}`. The output TOML document of this can be diverted based on the `allowedDottedKeys` property as follow.\n\n```toml\ntable.key = \"value\" # allowedDottedKeys = true\n\n# allowedDottedKeys = false\n[table]\nkey = \"value\"\n```\n\n## 5. Supported Data Types\n\nThe following TOML primitives are mapped to the Ballerina types as follows.\n\n| TOML                                        | Ballerina                       |\n| ------------------------------------------- | ------------------------------- |\n| Integer                                     | `ballerina.lang.int`            |\n| Float                                       | `ballerina.lang.decimal`        |\n| Infinity                                    | `ballerina.lang.float.Infinity` |\n| NaN                                         | `ballerina.lang.float.NaN`      |\n| Unquoted, Basic and Literal Strings         | `ballerina.lang.string`         |\n| Boolean                                     | `ballerina.lang.boolean`        |\n| Array                                       | `json[]`                        |\n| Table                                       | `map<json>`                     |\n| Offset Date-Time                            | `ballerina.time.Utc`            |\n| Local Date-Time, Local Date, and Local Time | `ballerina.lang.string`         |\n\n## 6. Example\n\nThe following example illustrates how TOML content is converted to a Ballerina record and written it back after processing it.\n\n```ballerina\nimport ballerina/io;\nimport ballerina/toml;\n\ntype Package record {|\n    string name;\n    record {|int major; int minor; int patch;|} 'version;\n|};\n\npublic function main() returns error? {\n    // Read the TOML content into a map<json>\n    map<json> result = check toml:readString(string\n        `name = \"toml\"\n\n        [version]\n        major = 0\n        minor = 1\n        patch = 3`);\n\n    Package packageToml = check result.fromJsonWithType();\n\n    // Update the version \n    packageToml.'version.minor += 1;\n    packageToml.'version.patch = 0;\n\n    // Convert map<json> into TOML content\n    io:println(toml:writeString(packageToml));\n}\n```\n","codeSnippets":"[[-1620582343,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// Parsing a TOML file</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">map&lt;</span><span style=\\\"color: #005CC5\\\">json</span><span style=\\\"color: #D73A49\\\">&gt;|</span><span style=\\\"color: #24292E\\\">toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error tomlFile </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">readFile</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;path/to/file.toml&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// Parsing a TOML string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">map&lt;</span><span style=\\\"color: #005CC5\\\">json</span><span style=\\\"color: #D73A49\\\">&gt;|</span><span style=\\\"color: #24292E\\\">toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error tomLString </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">readString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #032F62\\\">`bool = true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #032F62\\\">    int = 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #032F62\\\">    float = 1.1`</span><span style=\\\"color: #24292E\\\">);</span></span></code></pre>\"],[1489488164,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">map&lt;</span><span style=\\\"color: #005CC5\\\">json</span><span style=\\\"color: #D73A49\\\">&gt;</span><span style=\\\"color: #24292E\\\"> toml </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #032F62\\\">&quot;str&quot;</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;string&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #032F62\\\">&quot;float&quot;</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">0.01</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #032F62\\\">&quot;inline&quot;</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #032F62\\\">&quot;boolean&quot;</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// Write the TOML content into a file</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error? fileResult </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">writeFile</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;path/to/file.toml&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">toml</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// Covert the TOML content to an array of strings</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">[]</span><span style=\\\"color: #D73A49\\\">|toml:</span><span style=\\\"color: #24292E\\\">Error stringResult </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">writeString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">toml</span><span style=\\\"color: #24292E\\\">);</span></span></code></pre>\"],[2089319253,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">table.key = </span><span style=\\\"color: #032F62\\\">&quot;value&quot;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6A737D\\\"># allowedDottedKeys = true</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># allowedDottedKeys = false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #6F42C1\\\">table</span><span style=\\\"color: #24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">key = </span><span style=\\\"color: #032F62\\\">&quot;value&quot;</span></span></code></pre>\"],[465024478,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/toml;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">Package</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> major; </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> minor; </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> patch;</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">} &#39;version;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\">// Read the TOML content into a map&lt;json&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">map&lt;</span><span style=\\\"color: #005CC5\\\">json</span><span style=\\\"color: #D73A49\\\">&gt;</span><span style=\\\"color: #24292E\\\"> result </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">readString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #032F62\\\">`name = &quot;toml&quot;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #032F62\\\">        [version]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #032F62\\\">        major = 0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #032F62\\\">        minor = 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #032F62\\\">        patch = 3`</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    Package packageToml </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> result.</span><span style=\\\"color: #6F42C1\\\">fromJsonWithType</span><span style=\\\"color: #24292E\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\">// Update the version </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    packageToml.&#39;version.minor </span><span style=\\\"color: #D73A49\\\">+=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    packageToml.&#39;version.patch </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">0</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\">// Convert map&lt;json&gt; into TOML content</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">toml</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">writeString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">packageToml</span><span style=\\\"color: #24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}