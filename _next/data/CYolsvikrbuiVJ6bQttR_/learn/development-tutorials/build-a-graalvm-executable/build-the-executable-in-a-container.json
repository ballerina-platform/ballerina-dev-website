{"pageProps":{"frontmatter":{"title":"Build the GraalVM executable in a container","permalink":"/learn/build-the-executable-in-a-container/","description":"Building and packing the GraalVM executable from Ballerina in a container.","keywords":"ballerina, programming language, ballerina packages, language-guide, graalvm, native, executable, container, docker","active":"build-the-executable-in-a-container","intro":"This guide walks you through compiling a Ballerina application to a native executable and packing the GraalVM executable in a container."},"content":"\n## Prerequisites\n\nTo complete this part of the guide, you need:\n1. Latest [Ballerina Swan Lake](/downloads) distribution\n2. A text editor\n   >**Tip:** Preferably, <a href=\"https://code.visualstudio.com/\" target=\"_blank\">Visual Studio Code</a> with the  <a href=\"https://wso2.com/ballerina/vscode/docs/\" target=\"_blank\">Ballerina extension</a> installed.\n3. [Docker](https://www.docker.com) installed and configured in your machine\n   >**Tip:** Since the GraalVM native build consumes a significant amount of memory, it is recommended to increase the memory allocated to Docker to at least 8GB and potentially add more CPUs as well. For more details, see [How to assign more memory to Docker container](https://stackoverflow.com/questions/44533319/how-to-assign-more-memory-to-docker-container/44533437#44533437).\n4. A command terminal\n\nAfter the environment is set up, follow the steps below to build the native executable and pack it in a container.\n\n## Build the GraalVM executable in a container\n\n1. Execute the command below to create a Ballerina service package.\n\n   ```\n   $ bal new hello_docker -t service\n   ```\n\n2. Replace the content of the file `service.bal` with the following.\n\n   ```ballerina\n   import ballerina/http;\n\n   service / on new http:Listener(8080) {\n       resource function get greeting() returns string {   \n           return \"Hello, Docker!\";   \n       }\n   }\n   ```\n\n3. Execute `bal build --graalvm --cloud=docker` to generate the artifacts with the native executable. \n\n   >**Info:** Optionally, you can create a file named `Cloud.toml` in the package directory to add cloud related configurations. For more information, see [Docker](/learn/by-example/#docker) and [Kubernetes](/learn/by-example/#kubernetes) documentation.\n\n   ```\n   $ bal build --graalvm --cloud=docker\n   Compiling source\n           user/hello_docker:0.1.0\n   \n   Generating artifacts\n   Building the native image. This may take a while\n\n   [+] Building 193.8s (13/13) FINISHED                                                                                                                                        docker:default\n    => [internal] load .dockerignore                                                                                              0.0s\n    => => transferring context: 2B                                                                                                0.0s\n    => [internal] load build definition from Dockerfile                                                                           0.0s\n    => => transferring dockerfile: 416B                                                                                           0.0s\n    => [internal] load metadata for gcr.io/distroless/base:latest                                                                 3.2s\n    => [internal] load metadata for ghcr.io/graalvm/native-image-community:17-ol8                                                 4.2s\n    => [build 1/4] FROM ghcr.io/graalvm/native-image-community:17-ol8@sha256                                                      0.0s\n    => [internal] load build context                                                                                              0.2s\n    => => transferring context: 38.38MB                                                                                           0.2s\n    => [stage-1 1/3] FROM gcr.io/distroless/base@sha256:73deaaf6a207c1a33850257ba74e0f196bc418636cada9943a03d7abea980d6d          0.0s\n    => CACHED [stage-1 2/3] WORKDIR /home/ballerina                                                                               0.0s\n    => CACHED [build 2/4] WORKDIR /app/build                                                                                      0.0s\n    => [build 3/4] COPY hello_world.jar .                                                                                         0.1s\n    => [build 4/4] RUN native-image -jar hello_world.jar -H:Name=hello_world --no-fallback -H:+StaticExecutableWithDynamicLibC  188.7s\n    => [stage-1 3/3] COPY --from=build /app/build/hello_world .                                                                   0.2s \n    => exporting to image                                                                                                         0.3s \n    => => exporting layers                                                                                                        0.2s \n    => => writing image sha256:0129932fea465e620849b5842b42cb8136ab2daabf25e1817a7879207f6d861b                                   0.0s \n    => => naming to docker.io/library/hello_world:latest                                                                          0.0s \n                                                                                                                                                                                           \n    Execute the below command to run the generated Docker image: \n           docker run -d -p 8080:8080 hello_world:latest\n   ```\n\n   **The Docker file:**\n\n   ```\t\n   # Auto Generated Dockerfile\n   FROM ghcr.io/graalvm/native-image-community:17-ol8 as build\n\n   WORKDIR /app/build\n\n   COPY hello_world.jar .\n\n   RUN native-image -jar hello_world.jar -H:Name=hello_world --no-fallback -H:+StaticExecutableWithDynamicLibC\n\n   FROM gcr.io/distroless/base\n\n   WORKDIR /home/ballerina\n\n   EXPOSE  8080\n   COPY --from=build /app/build/hello_world .\n\n   CMD [\"./hello_world\"]\n   ```\n\n4. Execute the Docker image.\n\n   ```\n   $ docker run -d -p 8080:8080 hello_docker:latest\n   ```\n\n5. Test the service with the cURL request below.\n\n   ```\n   $ curl http://localhost:8080/greeting\n   Hello, Docker!\n   ```\n","id":"build-the-executable-in-a-container","sub":"build-a-graalvm-executable","third":"","slug":"build-a-graalvm-executable/build-the-executable-in-a-container","codes":"[[-1619164373,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {   </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, Docker!\\\"</span><span style=\\\"color:#24292E\\\">;   </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}