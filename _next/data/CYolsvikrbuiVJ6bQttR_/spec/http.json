{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina HTTP Library\n\n_Owners_: @shafreenAnfar @TharmiganK @ayeshLK @chamil321  \n_Reviewers_: @shafreenAnfar @bhashinee @TharmiganK @ldclakmal  \n_Created_: 2021/12/23  \n_Updated_: 2024/06/13   \n_Edition_: Swan Lake\n\n\n## Introduction\nThis is the specification for the HTTP standard library of [Ballerina language](https://ballerina.io/), which provides HTTP client-server functionalities to produce and consume HTTP APIs.  \n\nThe HTTP library specification has evolved and may continue to evolve in the future. The released versions of the specification can be found under the relevant GitHub tag. \n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the [Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the specification is stored under `/docs/proposals`. Proposals under discussion can be found with the label `type/proposal` in GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Components](#2-components)\n    * 2.1. [Listener](#21-listener)\n        * 2.1.1. [Automatically starting the service](#211-automatically-starting-the-service)\n        * 2.1.2. [Programmatically starting the service](#212-programmatically-starting-the-service)\n    * 2.2. [Service](#22-service)\n        * 2.2.1. [Service type](#221-service-type)\n        * 2.2.2. [Service-base-path](#222-service-base-path)\n        * 2.2.3. [Service declaration](#223-service-declaration)\n        * 2.2.4. [Service class declaration](#224-service-class-declaration)\n        * 2.2.5. [Service constructor expression](#225-service-constructor-expression)\n        * 2.2.6. [Service contract type](#226-service-contract-type)\n    * 2.3. [Resource](#23-resource)\n        * 2.3.1. [Accessor](#231-accessor)\n        * 2.3.2. [Resource-name](#232-resource-name)\n        * 2.3.3. [Path parameter](#233-path-parameter)\n        * 2.3.4. [Signature parameters](#234-signature-parameters)\n            * 2.3.4.1. [Caller](#2341-httpcaller)\n            * 2.3.4.2. [Request](#2342-httprequest)\n            * 2.3.4.3. [Query param](#2343-query-parameter)\n            * 2.3.4.4. [Payload param](#2344-payload-parameter)\n            * 2.3.4.5. [Header param](#2345-header-parameter)\n        * 2.3.5. [Return types](#235-return-types)\n            * 2.3.5.1. [Status Code Response](#2351-status-code-response)\n            * 2.3.5.2. [Return nil](#2352-return-nil)\n            * 2.3.5.3. [Return SSE stream](#2353-return-sse-stream)\n            * 2.3.5.4. [Default response status codes](#2354-default-response-status-codes)\n        * 2.3.6. [OpenAPI specification resources](#236-openapi-specification-resources)\n            * 2.3.6.1. [Introspection resource](#2361-introspection-resource)\n            * 2.3.6.2. [SwaggerUI resource](#2362-swaggerui-resource)\n    * 2.4. [Client](#24-client)\n        * 2.4.1. [Client types](#241-client-types)\n            * 2.4.1.1. [Security](#2411-security)\n            * 2.4.1.2. [Caching](#2412-caching)\n            * 2.4.1.3. [Redirect](#2413-redirect)\n            * 2.4.1.4. [Retry](#2414-retry)\n            * 2.4.1.5. [Circuit breaker](#2415-circuit-breaker)\n            * 2.4.1.6. [Cookie](#2416-cookie)\n            * 2.4.1.7. [Load balance](#2417-load-balance)\n            * 2.4.1.8. [Failover](#2418-failover)\n            * 2.4.1.9. [Status code binding client](#2419-status-code-binding-client)\n        * 2.4.2. [Client actions](#242-client-action)\n            * 2.4.2.1. [Entity body methods](#2421-entity-body-methods)\n            * 2.4.2.2. [Non entity body methods](#2422-non-entity-body-methods)\n            * 2.4.2.3. [Resource methods](#2423-resource-methods)\n            * 2.4.2.4. [Forward/execute methods](#2424-forwardexecute-methods)\n            * 2.4.2.5. [HTTP2 additional methods](#2425-http2-additional-methods)\n        * 2.4.3. [Client actions return types](#243-client-action-return-types)\n3. [Request-routing](#3-request-routing)\n    * 3.1. [Uri and http method match](#31-uri-and-http-method-match)\n    * 3.2. [Most specific path match](#32-most-specific-path-match)\n    * 3.3. [Wild card path match](#33-wild-card-path-match)\n    * 3.4. [Path parameter template match](#34-path-parameter-template-match)\n4. [Annotations](#4-annotations)\n    * 4.1. [Service configuration](#41-service-configuration)\n    * 4.2. [Resource configuration](#42-resource-configuration)\n    * 4.3. [Payload annotation](#43-payload-annotation)\n        * 4.3.1. [Payload binding parameter](#431-payload-binding-parameter)\n        * 4.3.2. [Anydata return value info](#432-anydata-return-value-info)\n    * 4.4. [CallerInfo annotation](#44-callerinfo-annotation)\n    * 4.5. [Header annotation](#45-header-annotation)\n    * 4.6. [Cache annotation](#46-cache-annotation)\n5. [url-parameters](#5-url-parameters)\n    * 5.1. [Path](#51-path)\n    * 5.2. [Query](#52-query)\n    * 5.3. [Matrix](#53-matrix)\n6. [Request and Response](#6-request-and-response)\n7. [Header and Payload](#7-header-and-payload)\n    * 7.1. [Parse header functions](#71-parse-header-functions)\n    * 7.2. [Links support](#72-links-support)\n      * 7.2.1 [LinkedTo record](#721-linkedto-record)\n      * 7.2.2 [Links in the response](#722-links-in-the-response)\n8. [Interceptor and error handling](#8-interceptor-and-error-handling)\n    * 8.1. [Interceptor](#81-interceptor)\n        * 8.1.1. [Request interceptor](#811-request-interceptor)\n            * 8.1.1.1. [Request context](#8111-request-context)\n            * 8.1.1.2. [Next method](#8112-next-method)\n            * 8.1.1.3. [Return to respond](#8113-return-to-respond)\n            * 8.1.1.4 [Get JWT information](#8114-get-jwt-information)\n        * 8.1.2. [Response interceptor](#812-response-interceptor)\n            * 8.1.2.1. [Return to respond](#8121-return-to-respond)\n        * 8.1.3. [Request error interceptor and response error interceptor](#813-request-error-interceptor-and-response-error-interceptor)\n        * 8.1.4. [Engaging interceptors](#814-engaging-interceptors)\n            * 8.1.4.1. [Service level](#8141-service-level)\n            * 8.1.4.2. [Execution order of interceptors](#8142-execution-order-of-interceptors)\n        * 8.1.5. [Data binding](#815-data-binding)\n    * 8.2. [Error handling](#82-error-handling)\n      * 8.2.1. [Error interceptors](#821-error-interceptors)\n      * 8.2.2. [Error types](#822-error-types)\n      * 8.2.3. [Trace log](#823-trace-log)\n      * 8.2.4. [Access log](#824-access-log)\n      * 8.2.5. [Panic inside resource](#825-panic-inside-resource)\n9. [Security](#9-security)\n    * 9.1. [Authentication and Authorization](#91-authentication-and-authorization)\n        * 9.1.1. [Declarative Approach](#911-declarative-approach)\n            * 9.1.1.1. [Listener - Basic Auth - File User Store](#9111-listener---basic-auth---file-user-store)\n            * 9.1.1.2. [Listener - Basic Auth - LDAP User Store](#9112-listener---basic-auth---ldap-user-store)\n            * 9.1.1.3. [Listener - JWT Auth](#9113-listener---jwt-auth)\n            * 9.1.1.4. [Listener - OAuth2](#9114-listener---oauth2)\n            * 9.1.1.5. [Client - Basic Auth](#9115-client---basic-auth)\n            * 9.1.1.6. [Client - Bearer Token Auth](#9116-client---bearer-token-auth)\n            * 9.1.1.7. [Client - Self Signed JWT Auth](#9117-client---self-signed-jwt)\n            * 9.1.1.8. [Client - Bearer Token OAuth2](#9118-client---bearer-token-oauth2)\n            * 9.1.1.9. [Client - Grant Types OAuth2](#9119-client---grant-types-oauth2)\n        * 9.1.2 [Imperative Approach](#912-imperative-approach)\n            * 9.1.2.1. [Listener - Basic Auth - File User Store](#9121-listener---basic-auth---file-user-store)\n            * 9.1.2.2. [Listener - Basic Auth - LDAP User Store](#9122-listener---basic-auth---ldap-user-store)\n            * 9.1.2.3. [Listener - JWT Auth](#9123-listener---jwt-auth)\n            * 9.1.2.4. [Listener - OAuth2](#9124-listener---oauth2)\n            * 9.1.2.5. [Client - Basic Auth](#9125-client---basic-auth)\n            * 9.1.2.6. [Client - Bearer Token Auth](#9126-client---bearer-token-auth)\n            * 9.1.2.7. [Client - Self Signed JWT Auth](#9127-client---self-signed-jwt)\n            * 9.1.2.8. [Client - Bearer Token OAuth2](#9128-client---bearer-token-oauth2)\n            * 9.1.2.9. [Client - Grant Types OAuth2](#9129-client---grant-types-oauth2)\n   * 9.2. [SSL/TLS and Mutual SSL](#92-ssltls-and-mutual-ssl)\n        * 9.2.1. [Listener - SSL/TLS](#921-listener---ssltls)\n        * 9.2.2. [Listener - Mutual SSL](#922-listener---mutual-ssl)\n        * 9.2.3. [Client - SSL/TLS](#923-client---ssltls)\n        * 9.2.4. [Client - Mutual SSL](#924-client---mutual-ssl)\n10. [Protocol-upgrade](#10-protocol-upgrade)\n    * 10.1. [HTTP2](#101-http2)\n        * 10.1.1. [Push promise and promise response](#1011-push-promise-and-promise-response)\n\n## 1. Overview\nBallerina language provides first-class support for writing network-oriented programs. The HTTP standard library uses these language constructs and creates the programming model to produce and consume HTTP APIs.\n\nThe HTTP standard library is designed to work with HTTP protocol. It includes high-level abstractions such as `http:Request`, `http:Response`, `http:Service`, and `http:Client` which allow users to produce and consume HTTP API. Further, developers can use this library to build other libraries. The standard libraries such as GraphQL, Websub, and WebSubHub use this library internally.\n\nIn addition to functional requirements, this library deals with nonfunctional requirements such as security, observability, and resiliency. Each requirement is discussed in detail in the coming sections.\n\n## 2. Components\n### 2.1. Listener\nThe HTTP listener object receives network data from a remote process according to the HTTP transport protocol and \ntranslates the received data into invocations on the resources functions of services that have been \nattached to the listener object. The listener provides the interface between network and services. When initiating\nthe listener, the port is a compulsory parameter whereas the second parameter is the listenerConfiguration which\nchanges the behaviour of the listener based on the requirement. By default, HTTP listener supports\nHTTP2 version.\n\n```ballerina\npublic type ListenerConfiguration record {|\n    string host = \"0.0.0.0\";\n    ListenerHttp1Settings http1Settings = {};\n    ListenerSecureSocket? secureSocket = ();\n    HttpVersion httpVersion = HTTP_2_0;\n    decimal timeout = DEFAULT_LISTENER_TIMEOUT;\n    string? server = ();\n    RequestLimitConfigs requestLimits = {};\n    int http2InitialWindowSize = 65535;\n    decimal minIdleTimeInStaleState = 300;\n    decimal timeBetweenStaleEviction = 30;\n|};\n```\n\nAs defined in [Ballerina 2021R1 Section 5.7.4](https://ballerina.io/spec/lang/2021R1/#section_5.7.4) the Listener has \nthe object constructor and life cycle methods such as attach(), detach(), 'start(), gracefulStop(), and immediateStop().\n\n#### 2.1.1. Automatically starting the service\nIf a service is attached to the listener, then the listener starts listening on the given port after executing \nattach() and start() methods. HTTP listener can be declared as follows honoring to the generic \n[listener declaration](https://ballerina.io/spec/lang/2021R1/#section_8.3.1)\n\n```ballerina\n// Listener object constructor\nlistener http:Listener serviceListener = new(9090);\n\n// Service attaches to the Listener\nservice /foo/bar on serviceListener {\n    resource function get greeting() returns string {}\n}\n```\n\n#### 2.1.2. Programmatically starting the service\n\nUsers can programmatically start the listener by calling each lifecycle method as follows.\n\n```ballerina\n// Listener object constructor\nlistener http:Listener serviceListener = new(9090);\n\npublic function main() {\n    error? err1 = serviceListener.attach(s, \"/foo/bar\");\n    error? err2 = serviceListener.start();\n    //...\n    error? err3 = serviceListener.gracefulStop();\n}\n\nhttp:Service s = service object {\n    resource function get greeting() returns string {}\n};\n```\n\n### 2.2. Service\nService is a collection of resources functions, which are the network entry points of a ballerina program. \nIn addition to that a service can contain public and private functions which can be accessed by calling with `self`.\n\n#### 2.2.1. Service type\n```ballerina\npublic type Service distinct service object {\n\n};\n```\nAbove distinct type is provided by HTTP module and user can include the type as `*http:Service` to refer it.\nThe comprehensive typing support is yet to be added to the language. Until that, the compiler plugin is used to \nvalidate the services.\n\n#### 2.2.2. Service base path\n\nThe base path is considered during the request dispatching to discover the service. Identifiers and string literals\nare allowed to be stated as base path, and it should be started with `/`. The base path is optional, and it will be \ndefaulted to `/` when not defined. If the base path contains any special characters, those should be escaped or defined\nas string literals\n\n```ballerina\nservice /hello\\-world on new http:Listener(9090) {\n   resource function get foo() {\n   }\n}\n\nservice \"hello-world\" on new http:Listener(9090) {\n   resource function get foo() {\n   }\n}\n```\n\nA service can be declared in three ways upon the requirement.\n\n#### 2.2.3. Service declaration\nThe [Service declaration](https://ballerina.io/spec/lang/2021R1/#section_8.3.2) is a syntactic sugar for creating a\nservice and, it is the mostly used approach for creating a service. The declaration gets desugared into creating a \nlistener object, creating a service object, attaching the service object to the listener object.\n\n```ballerina\nservice /foo/bar on new http:Listener(9090) {\n  resource function get greeting() returns string {\n      return \"hello world\";\n  }\n}\n```\n\n#### 2.2.4. Service class declaration\n\nThe service value can be instantiated using the service class. This way, user has the completed control of attaching\nthe service to the listener. The life cycle methods to used to proceed.\n\n```ballerina\nservice isolated class SClass {\n   *http:Service;\n   resource function get greeting() returns string {\n       return \"hello world\";\n   }\n}\n\nlistener http:Listener serviceListener = check new (9090);\n\npublic function main() {\n   http:Service httpService = new SClass();\n   error? err1 = serviceListener.attach(httpService, [\"foo\", \"bar\"]);\n   error? err2 = serviceListener.'start();\n}\n```\n\n#### 2.2.5. Service constructor expression\n\n```ballerina\nlistener http:Listener serviceListener = new (9090);\n\nhttp:Service httpService = @http:ServiceConfig {} service object {\n   resource function get greeting() returns string {\n       return \"hello world\";\n   }\n};\n\npublic function main() {\n   error? err1 = serviceListener.attach(httpService, \"/foo/bar\");\n   error? err2 = serviceListener.start();\n}\n```\n\n### 2.2.6. Service contract type\n\nThe service contract type is a distinct type which is used to represent the service contract. This service contract\ntype can be used along with the service declaration to implement a service which ensures that the service is compliant\nwith the contract. Additionally, all the metadata related to the service can be defined within the service contract \ntype which makes the service declaration clean and readable.\n\nFollowing is an example of a service contract type:\n\n```ballerina\n@http:ServiceConfig {basePath: \"/v1\"}\npublic type AlbumService service object {\n    *http:ServiceContract;\n\n    @openapi:ResourceInfo {\n        summary: \"Get all albums\"\n    }\n    resource function get albums() returns Album[];\n\n    @openapi:ResourceInfo {\n        summary: \"Add a new album\"\n    }\n    resource function post albums(@openapi:Example {\n                value: {\n                    title: \"Blue Train\",\n                    artist: \"John Coltrane\"\n                }\n            } Album album) returns Album|ErrorPayloadBadRequest;\n};\n```\n\nThe service contract type can have the annotations which are supported on the service declaration. Additionally, a \n`basePath` can be defined in the `ServiceConfig` annotation to define the base path of the service. This field is \noptional and if not defined, the base path will be defaulted to `/`.\n\nFollowing is an example of a service implemented with the above service contract type:\n\n```ballerina\nservice AlbumService on new http:Listener(9090) {\n\n    resource function get albums() returns Album[] {\n        return albums.toArray();\n    }\n\n    resource function post albums(Album album) returns Album|ErrorPayloadBadRequest {\n        albums.add(album);\n        return album;\n    }\n}\n```\n\nThe service implemented via the service contract type has the following restrictions:\n- None of the service level, resource level and parameter level HTTP annotation are allowed.\n- The base path is not allowed in the service declaration, and it is inferred from the service contract type.\n- The service declaration cannot have additional resource methods which are not defined in the service contract type.\n\n### 2.3. Resource\n\nA method of a service can be declared as a [resource method](https://ballerina.io/spec/lang/2021R1/#resources) \nwhich is associated with configuration data that is invoked by a network message by a Listener. Users write the \nbusiness logic inside a resource and expose it over the network.\n\n#### 2.3.1. Accessor\nThe accessor-name of the resource represents the HTTP method, and it can be get, post, put, delete, head, patch, options \nand default. If the accessor is unmatched, 405 Method Not Allowed response is returned. When the accessor name is \nstated as default, any HTTP method can be matched to it in the absence of an exact match. Users can define custom \nmethods such as copy, move based on their requirement. A resource which can handle any method would look like as \nfollows. This is useful when handling unmatched verbs.\n\n```ballerina\nresource function 'default NAME_TEMPLATE () {\n    \n}\n```\n#### 2.3.2. Resource name\nThe resource-name represents the path of the resource which is considered during the request dispatching. The name can \nbe hierarchical(foo/bar/baz). Each path identifier should be separated by `/` and first path identifier should not \ncontain a prefixing `/`. If the paths are unmatched, 404 NOT FOUND response is returned.\n```ballerina\nresource function post hello() {\n    \n}\n```\nOnly the identifiers can be used as resource path not string literals. Dot identifier is \nused to denote the `/` only if the path contains a single identifier. \n```ballerina\nresource function post .() {\n    \n}\n```\nAny special characters can be used in the path by escaping.\n```ballerina\nresource function post hello\\-world() {\n    \n}\n```\n\n#### 2.3.3. Path parameter\nThe path parameter segment is also a part of the resource name which is declared within brackets along with the type. \nAs per the following resource name, baz is the path param segment, and it’s type is string. Like wise users can define \nstring, int, boolean, float, and decimal typed path parameters. If the paths are unmatched, 404 NOT FOUND response \nis returned. If the segment failed to parse into the expected type, 500 Internal Server Error response is returned.\n\n```ballerina\nresource function post foo/bar/[string baz]/qux() {\n    // baz is the path param\n}\n\nresource function get data/[int age]/[string name]/[boolean status]/[float weight]() returns json {\n   int balAge = age + 1;\n   float balWeight = weight + 2.95;\n   string balName = name + \" lang\";\n   if status {\n       balName = name;\n   }\n   json responseJson = { Name:name, Age:balAge, Weight:balWeight, Status:status, Lang: balName};\n   return responseJson;\n}\n```\n\nIf multiple path segments needs to be matched after the last identifier, Rest param should be used at the end of the \nresource name as the last identifier. string, int, boolean, float, and decimal types are supported as rest parameters.\n```ballerina\nresource function get foo/[string... bar]() returns json {\n   json responseJson = {\"echo\": bar[0]};\n   return responseJson;\n}\n```\n\nUsing both `'default` accessor and the rest parameters, a default resource can be defined to a service. This \ndefault resource can act as a common destination where the unmatched requests (either HTTP method or resource path) may \nget dispatched.\n\n```ballerina\nresource function 'default [string... s]() {\n\n}\n```\n\n#### 2.3.4. Signature parameters\nThe resource method can have the following parameters in the signature. There are not any mandatory params or any \nparticular order. But it’s a good practice to keep the optional param at the end.\n\n```ballerina\nresource function XXX NAME_TEMPLATE ([http:Caller hc], [http:Request req], (anydata queryParam)?, \n    (@http:Payload anydata payload)?, (@http:Header string header)?, (http:Header headers)? ) {\n        \n}\n```\n\nHowever, the first choice should be to use signature params and use returns. Avoid caller unless you have specific \nrequirement. Also use data binding, header params and resource returns to write smaller code with more readability.\n\n##### 2.3.4.1. http:Caller\n\nThe caller client object represents the endpoint which initiates the request. Once the request is processed, the \ncorresponding response is sent back using the remote methods which are associated with the caller object. \nIn addition to that, the caller has certain meta information related to remote and local host such as IP address,\nprotocol. This parameter is not compulsory and not ordered.\n\n\nThe CallerInfo annotation associated with the `Caller` is to denote the response type.\nIt will ensure that the resource method responds with the right type and provides static type information about \nthe response type that can be used to generate OpenAPI.\n\nThe default type is the `http:Response`. Other than that, caller remote methods will accept following types as the \noutbound response payload. Internally an `http:Response` is created including the given payload value\n\n```ballerina\nstring|xml|json|byte[]|int|float|decimal|boolean|map<json>|table<map<json>>|(map<json>|table<map<json>>)[]|\nmime:Entity[]|stream<byte[], io:Error?>|()\n```\n\nBased on the payload types respective header value is added as the `Content-type` of the `http:Response`.\n\n| Type                                                                  | Content Type             |\n|-----------------------------------------------------------------------|--------------------------|\n| ()                                                                    | -                        |\n| string                                                                | text/plain               |\n| xml                                                                   | application/xml          |\n| byte[], stream<byte[], io:Error?>                                     | application/octet-stream |\n| int, float, decimal, boolean                                          | application/json         |\n| map\\<json\\>, table<map\\<json\\>>, map\\<json\\>[], table<map\\<json\\>>)[] | application/json         |\n\nIn addition to the above types, caller `respond()` method can accept `StatusCodeResponse` or `error` type. In case of \n`error`, an error response is returned to the client with the error message.\n\nThe HTTP compiler extension checks the argument of the `respond()` method if the matching payload type is passed as\ndenoted in the CallerInfo annotation. At the moment, in terms of responding error, CallerInfo annotation can only support \n`http:Error` type.\n\n```ballerina\nresource function post foo(@http:CallerInfo {respondType:Person}  http:Caller hc) {\n    Person p = {};\n    error? result = hc->respond(p);\n}\n```\n\nWhen the caller `respond()` method is invoked from HTTP post resource by providing `anydata` payload, the status \ncode of the outbound response will be set to HTTP Created (201) by default.\n\n##### 2.3.4.2. http:Request\n\nThe `http:Request` represents the request which is sent and received over the network which includes headers and \nthe entity body. Listener passes it to the resource method as an argument to be accessed by the user based on \ntheir requirement. This parameter is not compulsory and not ordered.\n\n```ballerina\nresource function get person(http:Request req) {\n    \n}\n```\n\nSee section [Request and Response](#6-request-and-response) to find out more. \n\n##### 2.3.4.3. Query parameter\n\nThe query param is a URL parameter which is available as a resource method parameter, and it's not associated \nwith any annotation or additional detail unless any default payload param is defined. This parameter is not compulsory \nand not ordered. The type of query param are as follows\n\n```ballerina\ntype BasicType boolean|int|float|decimal|string|map<anydata>|enum;\npublic type QueryParamType ()|BasicType|BasicType[];\n```\n\nThe same query param can have multiple values. In the presence of multiple such values,  If the user has specified \nthe param as an array type, then all values will return. If not the first param values will be returned. As per the \nfollowing resource method, the request may contain at least two query params with the key of bar and id.\nEg : “/hello?bar=hi&id=56”\n\n```ballerina\nresource function get hello(string bar, int id) { \n    \n}\n```\n\nWith the introduction of the default payload param support, the structured data types such as map<json> can be\nidentified as payload param. To solve that ambiguity between the default payload and query param, the\n@http:Query annotation should be defined in front of the query param.\n\n```ballerina\nresource function post queryParamCheck(@http:Query map<json> q) returns map<json> {\n    return q; // q is payload param\n}\n```\n\nIf the query parameter is not defined in the function signature, then the query param binding does not happen. If a \nquery param of the request URL has no corresponding parameter in the resource method, then that param is ignored. \nIf the parameter is defined in the function, but there is no such query param in the URL, that request will lead \nto a 400 BAD REQUEST error response unless the type is nilable (string?)\n\nIf the query parameter is defined with a defaultable value in the resource signature, in the absence of particular\nquery parameter, the default value will be assigned to the variable.\n\n```ballerina\nresource function get price(int id = 10) { \n    \n}\n```\n\nThe query param consists of query name and values. Sometimes user may send query without value(`foo:`). In such\nsituations, when the query param type is nilable, the values returns nil and same happened when the complete query is\nnot present in the request. In order to avoid the missing detail, a service level configuration has introduced naming\n`treatNilableAsOptional`\n\n```ballerina\n@http:ServiceConfig {\n    treatNilableAsOptional : false\n}\nservice /queryparamservice on new http:Listener(9090) {\n\n    resource function get queryvalues(string foo, int bar) returns json {\n        json responseJson = { value1: foo, value2: bar};\n        return responseJson;\n    }\n}\n```\n\n<table>\n<tr>\n<th> Case </th>\n<th>  Resource argument </th>\n<th>  Query </th>\n<th>  Current Mapping (treatNilableAsOptional=true - Default) </th>\n<th>  Ideal Mapping (treatNilableAsOptional=false) </th>\n</tr>\n<tr>\n<td rowspan=4> 1 </td>\n<td rowspan=4> string foo </td>\n<td> foo=bar </td>\n<td> bar </td>\n<td> bar </td>\n</tr>\n<tr>\n<td> foo=</td>\n<td> \"\" </td>\n<td> \"\" </td>\n</tr>\n<tr>\n<td> foo</td>\n<td> Error : no query param value found for 'foo' </td>\n<td> Error : no query param value found for 'foo' </td>\n</tr>\n<tr>\n<td> No query</td>\n<td> Error : no query param value found for 'foo' </td>\n<td> Error : no query param value found for 'foo' </td>\n</tr>\n<tr>\n<td rowspan=4> 2 </td>\n<td rowspan=4> string? foo </td>\n<td> foo=bar </td>\n<td> bar </td>\n<td> bar </td>\n</tr>\n<tr>\n<td> foo=</td>\n<td> \"\" </td>\n<td> \"\" </td>\n</tr>\n<tr>\n<td> foo</td>\n<td> nil </td>\n<td> nil </td>\n</tr>\n<tr>\n<td> No query</td>\n<td> nil </td>\n<td> Error : no query param value found for 'foo' </td>\n</tr>\n<tr>\n<td rowspan=4> 3 </td>\n<td rowspan=4> string foo = \"baz\"<br/> string? foo = \"baz\" </td>\n<td> foo=bar </td>\n<td> bar </td>\n<td> bar </td>\n</tr>\n<tr>\n<td> foo=</td>\n<td> \"\" </td>\n<td> \"\" </td>\n</tr>\n<tr>\n<td> foo</td>\n<td> baz </td>\n<td> baz </td>\n</tr>\n<tr>\n<td> No query</td>\n<td> baz </td>\n<td> baz </td>\n</tr>\n</table>\n\nSee section [Query](#52-query) to understand accessing query param via the request object.\n\n##### 2.3.4.4. Payload parameter\n\nThe payload parameter is used to access the request payload during the resource invocation. When the payload param is \ndefined with @http:Payload annotation, the listener deserialize the inbound request payload based on the media type \nwhich retrieved by the `Content-type` header of the request. The data binding happens thereafter considering the \nparameter type. The type of payload parameter can be one of the `anydata`. If the header is not present or not a \nstandard header, the binding type is inferred by the parameter type.\n\nWhen the following conditions are met, the listener identifies the default payload parameter, which is defined \nwithout the @http:Payload annotation:\n- The default payload parameter rules are only applicable to POST, PUT, PATCH, DELETE, and DEFAULT accessors.\n- Parameters must contain only one structured(map/record/table/tuple/array) type or `xml`. However, the array types of \n  basic types are considered as query parameters. But `byte[]` is an exception, and it is considered as a payload param.\n    - `resource function post path(Student p) {}` -> `Student` is payload param type\n    - `resource function post path(Student[] p) {}` -> `Student[]` is payload param type\n    - `resource function post path(map<json> p) {}` -> `map<json>` is payload param type\n    - `resource function post path(int[] p) {}` -> `int[]` is query param type\n    - `resource function post path(byte[] p) {}` -> `byte[]` is payload param type\n    - `resource function post path(int p) {}` -> `int` is query param type\n- If there's more than one structured type, the ambiguity must be resolved using either @http:Payload or @http:Query\n  annotation.\n    - `resource function post path(Student p, map<json> q) {}` -> ambiguous types for payload\n    - `resource function post path(@http:Payload Student p, map<json> q) {}` -> `p` is payload, `q` is query parameter\n    - `resource function post path(Student p, @http:Query map<json> q) {}` -> `p` is payload, `q` is query parameter\n- If there are no structured types, all parameters are considered query parameters.\n    - `resource function post path(string p, string q) {}` -> `p` and `q` are query params\n    - `resource function post path(@http:Payload string p, string q) {}` -> `p` is payload, `q` is query parameter\n- If the query parameter is structured, then the @http:Query annotation is required.\n    - `resource function post path(Student p) {}` -> `p` is payload param type\n    - `resource function post path(@http:Query Student p) {}` -> `p` is query param type\n- The only types allowed in the union for a parameter are structured types, `xml`, and `nil`.\n    - `resource function post path(Student|xml p) {}` -> `Student|xml` is payload param type\n    - `resource function post path(map<json>|xml p) {}` -> `map<json>|xml` is payload param type\n    - `resource function post path(Student? p) {}` -> `Student?` is payload param type\n    - `resource function post path(Student|string p) {}` -> invalid union type for default payload param\n\nFollowing table explains the compatible `anydata` types with each common media type. In the absence of a standard media \ntype, the binding type is inferred by the payload parameter type itself. If the type is not compatible with the media \ntype, error is returned.\n\n| Ballerina Type | Structure               | \"text\" | \"xml\" | \"json\" | \"x-www-form-urlencoded\" | \"octet-stream\" |\n|----------------|-------------------------|:------:|:-----:|:------:|:-----------------------:|:--------------:|\n| boolean        |                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | boolean[]               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<boolean\\>          |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | table\\<map\\<boolean\\>\\> |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n| int            |                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | int[]                   |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<int\\>              |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | table\\<map\\<int\\>\\>     |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n| float          |                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | float[]                 |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<float\\>            |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | table\\<map\\<float\\>\\>   |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n| decimal        |                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | decimal[]               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<decimal\\>          |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | table\\<map\\<decimal\\>\\> |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n| byte[]         |                         |   ✅    |   ❌   |   ✅    |            ❌            |       ✅        |\n|                | byte[][]                |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<byte[]\\>           |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | table\\<map\\<byte[]\\>\\>  |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n| string         |                         |   ✅    |   ❌   |   ✅    |            ✅            |       ❌        |\n|                | string[]                |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<string\\>           |   ❌    |   ❌   |   ✅    |            ✅            |       ❌        |\n|                | table\\<map\\<string\\>\\>  |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n| xml            |                         |   ❌    |   ✅   |   ❌    |            ❌            |       ❌        |\n| json           |                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | json[]                  |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<json\\>             |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | table\\<map\\<json\\>\\>    |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n| map            |                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map[]                   |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<map\\>              |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | table\\<map\\<map\\>\\>     |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n| record         |                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | record[]                |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | map\\<record\\>           |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n|                | table\\<record\\>         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |\n\nThe payload binding process begins soon after finding the correct resource for the given URL and before the \nresource execution. \nThe error which may occur during the process will be returned to the caller with the response \nstatus code of 400 BAD REQUEST. The successful binding will proceed the resource execution with the built payload.\n\n```ballerina\nresource function post hello(json payload) { \n    \n}\n```\n\nAdditionally, the payload parameter type can be a union of `anydata`. Based on the media type, the potential binding\ntype is decided. For example, if the union is defined as `json|xml` and the media type is related to `json`,\nthe deserialization and the binding will proceed according to the type `json`. But if the media type is related to `xml`\nthe process will happen according to the type `xml`.\nIf the given types of the union are not compatible with the media type, an error is returned.\n\n```ballerina\nresource function post album(json|xml payload) { \n    \n}\n\n```\nIf any of the type is union with `()`(i.e `string?`), then in the absence of the payload, `()` will be assigned as \nthe value without being responded by a `BAD REQUEST` response.\n\nInternally the complete payload is built, therefore the application should have sufficient memory to support the \nprocess. Payload binding is not recommended if the service behaves as a proxy/pass-through where request payload is \nnot accessed.\n\nUser may specify the expected content type in the annotation to shape the resource as described in section [Payload \nbinding parameter](#431-payload-binding-parameter)\n\n##### 2.3.4.5. Header parameter\n\nThe header parameter is to access the inbound request headers The header param is defined with `@http:Header` annotation\nThe type of header param can be defined as follows;\n\n```ballerina\ntype BasicType string|int|float|decimal|boolean;\npublic type HeaderParamType ()|BasicType|BasicType[]|record {| BasicType...; |};\n```\n\nWhen multiple header values are present for the given header, the first header value is returned when the param \ntype is `string` or any of the basic types. To retrieve all the values, use `string[]` type or any array of the\nbasic types. This parameter is not compulsory and not ordered. \n\nThe header param name is considered as the header name during the value retrieval. However, the header annotation name \nfield can be used to define the header name whenever user needs some different variable name for the header. \n\nUser cannot denote the type as a union of pure type, array type, or record type together, that way the resource \ncannot infer a single type to proceed. Hence, returns a compiler error.\n\nIn the absence of a header when the param is defined in the resource signature, listener returns 400 BAD REQUEST unless\nthe type is nilable. \n\n```ballerina\n//Single header value extraction\nresource function post album(@http:Header string referer) {\n    \n}\n\n//Multiple header value extraction\nresource function post product(@http:Header {name: \"Accept\"} string[] accept) {\n    \n}\n```\n\nWhen the header parameter type is a record, the record fields represents each header values and the header name is \nconsidered as the field name. However, the header annotation with a name field can be used to define the header \nname whenever user needs some different variable name for the header. \n\n```ballerina\npublic type RateLimitHeaders record {|\n    string x\\-rate\\-limit\\-id;\n    int x\\-rate\\-limit\\-remaining;\n    string[] x\\-rate\\-limit\\-types;\n|};\n\n//Populate selected headers to a record\nresource function get price(@http:Header RateLimitHeaders rateLimitHeaders) {\n}\n\npublic type RateLimitHeadersWithName record {|\n    @http:Header {name: \"X-RATE-LIMIT-ID\"}\n    string rateLimitId;\n    @http:Header {name: \"X-RATE-LIMIT-REMAINING\"}\n    int rateLimitRemaining;\n    @http:Header {name: \"X-RATE-LIMIT-TYPES\"}\n    string[] rateLimitTypes;\n|};\n\n//Populate selected headers to a record. The header name is defined in the field level annotation\nresource function get price(@http:Header RateLimitHeadersWithName rateLimitHeaders) {\n}\n```\n\nIf the requirement is to access all the header of the inbound request, it can be achieved through the `http:Headers` \ntyped param in the signature. It does not need the annotation and not ordered.\n\n```ballerina\nresource function get price(http:Headers headers) {\n    string|http:HeaderNotFoundError referer = headers.getHeader(\"Referer\");\n    string[]|http:HeaderNotFoundError accept = headers.getHeaders(\"Accept\");\n    string[] keys = headers.getHeaderNames();\n}\n```\n\nThe header consists of header name and values. Sometimes user may send header without value(`foo:`). In such \nsituations, when the header param type is nilable, the values returns nil and same happened when the complete header is \nnot present in the request. In order to avoid the missing detail, a service level configuration has introduced naming \n`treatNilableAsOptional`\n\n```ballerina\n@http:ServiceConfig {\n    treatNilableAsOptional : false\n}\nservice /headerparamservice on HeaderBindingIdealEP {\n\n    resource function get headers(@http:Header string? foo) returns json {\n        \n    }\n}\n```\n\n<table>\n<tr>\n<th>  Case </th>\n<th>  Resource argument </th>\n<th>  Header </th>\n<th>  Current Mapping (treatNilableAsOptional=true - Default) </th>\n<th>  Ideal Mapping (treatNilableAsOptional=false) </th>\n</tr>\n<tr>\n<td rowspan=3> 1 </td>\n<td rowspan=3> string foo </td>\n<td> foo:bar </td>\n<td> bar </td>\n<td> bar </td>\n</tr>\n<tr>\n<td> foo:</td>\n<td> Error : no header value found for 'foo' </td>\n<td> Error : no header value found for 'foo' </td>\n</tr>\n<tr>\n<td> No header</td>\n<td> Error : no header value found for 'foo' </td>\n<td> Error : no header value found for 'foo' </td>\n</tr>\n<tr>\n<td rowspan=3> 2 </td>\n<td rowspan=3> string? foo </td>\n<td> foo:bar </td>\n<td> bar </td>\n<td> bar </td>\n</tr>\n<tr>\n<td> foo:</td>\n<td> nil </td>\n<td> nil </td>\n</tr>\n<tr>\n<td> No header</td>\n<td> nil </td>\n<td> Error : no header value found for 'foo' </td>\n</tr>\n</table>\n\n\n#### 2.3.5. Return types\nThe resource method supports `anydata`, `error?`, `http:Response`, `http:StatusCodeResponse` and `stream<http:SseEvent, error?>` as return types. \nWhenever user returns a particular output, that will result in an HTTP response to the caller who initiated the \ncall. Therefore, user does not necessarily depend on the `http:Caller` and its remote methods to proceed with the \nresponse. \n\n```ballerina\nresource function XXX NAME_TEMPLATE () returns @http:Payload anydata|http:Response|http:StatusCodeResponse|stream<http:SseEvent, error?>|http:Error? {\n}\n```\n\nIn addition to that the `@http:Payload` annotation can be specified along with anydata return type\nmentioning the content type of the outbound payload.\n\n```ballerina\nresource function get greeting() returns @http:Payload {mediaType:\"text/id+plain\"} string {\n    return \"hello world\";\n}\n```\n\nBased on the return types respective header value is added as the `Content-type` of the `http:Response`. \n\n| Type                                                                  | Content Type                |\n|-----------------------------------------------------------------------|-----------------------------|\n| ()                                                                    | -                           |\n| string                                                                | text/plain                  |\n| xml                                                                   | application/xml             |\n| byte[]                                                                | application/octet-stream    |\n| int, float, decimal, boolean                                          | application/json            |\n| map\\<json\\>, table<map\\<json\\>>, map\\<json\\>[], table<map\\<json\\>>)[] | application/json            |\n| http:StatusCodeResponse                                               | derived from the body field |\n| stream<http:SseEvent, error?>                                         | text/event-stream           |\n\n##### 2.3.5.1. Status Code Response\n\nThe status code response records are defined in the HTTP module for every HTTP status code. It improves readability & \nhelps OpenAPI spec generation. By default, the content type of the response message is derived from the `body` field.\nThis default content type can be overwritten by the `mediaType` field as shown below.\n\n```ballerina\ntype PersonCreated record {|\n    *http:Created;\n    record {|\n        string name;\n    |} body;\n|};\n\nresource function post name(string name) returns PersonCreated {\n   Person person = {name:name};\n   return {\n       mediaType: \"application/person+json\",\n       headers: {\n           \"X-Server\": \"myServer\"\n       },\n       body: person\n   };\n}\n```\n\nFollowing is the `http:Ok` definition. Likewise, all the status codes are provided.\n\n```ballerina\npublic type Ok record {\n   string mediaType;\n   map<string|string[]> headers?;\n   anydata body?;\n};\n\nresource function get greeting() returns http:Ok|http:InternalServerError {\n   http:Ok ok = { body: \"hello world\", headers: { xtest: \"foo\"} };\n   return ok;\n}\n```\n\n##### 2.3.5.2. Return nil\n\nReturn nil from the resource has few meanings. \n\n1. If the resource wants to return nothing, the listener will return 202 ACCEPTED response.\n    ```ballerina\n    resource function post person(@http:Payload Person p) {\n        int age = p.age;\n        io:println(string `Age is: ${age}`);\n    }\n    ```   \n2. If the resource is dealt with the response via http:Caller, then returning () does not lead to subsequent response. \n   Listener aware that the request is already being served.\n    ```ballerina\n    resource function get fruit(string? colour, http:Caller caller) {\n        if colour == \"red\" {\n            error? result = caller->respond(\"Sending apple\");\n            return; // ending the flow, so not 202 response\n        }\n        error? result = caller->respond(\"Sending orange\");\n    }\n    ```   \n3. If the resource is dealt with the success response via http:Caller and return () in the else case, then the \n   response is 500 INTERNAL SERVER ERROR.\n    ```ballerina\n    resource function get fruit(string? colour, http:Caller caller) {\n        if colour == \"red\" {\n            error? result = caller->respond(\"Sending apple\");\n            return; // ending the flow\n        }\n        return; // 500 internal Server Error\n    }\n    ```\n\n##### 2.3.5.3. Return SSE stream\n\nWhen an `http:SseEvent` stream is returned from the service, it's considered a server-sent event. By default, the service will add the following headers: \n\n- For HTTP 2.0: \n  - `Content-Type: text/event-stream`\n  - `Cache-Control: no-cache`\n\n- For HTTP 1.1, in addition to the previously mentioned headers, the following headers will also be included in the response: \n  - `Transfer-Encoding: chunked`\n  - `Connection: keep-alive`\n\n##### 2.3.5.4. Default response status codes\n\nTo improve the developer experience for RESTful API development, following default status codes will be used in outbound \nresponse when returning `anydata` directly from a resource method.\n\n| Resource Accessor | Semantics                                                     | Status Code             |\n|-------------------|---------------------------------------------------------------|-------------------------|\n| GET               | Retrieve the resource                                         | 200 OK                  |\n| POST              | Create a new resource                                         | 201 Created             |\n| PUT               | Create a new resource or update an existing resource          | 200 OK                  |\n| PATCH             | Partially update an existing resource                         | 200 OK                  |\n| DELETE            | Delete an existing resource                                   | 200 OK                  |\n| HEAD              | Retrieve headers                                              | 200 OK                  |\n| OPTIONS           | Retrieve permitted communication options                      | 200 OK                  |\n\n#### 2.3.6. OpenAPI specification resources\n\nOAS resources are internally generated for each service and host the generated OpenAPI specification for the service in\ndifferent formats. In order to access these resources user can send an OPTIONS request either to one of the resources or\nthe service base-path. The link header in the 204 response specifies the location for the OAS resources.\n\nSample service\n```ballerina\nimport ballerina/http;\nimport ballerina/openapi;\n\n@openapi:ServiceInfo {\n    embed: true\n}\nservice /hello on new http:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Hello world\";\n    }\n}\n```\n\nOutput of OPTIONS call to service base path\n```ballerina\ncurl -v localhost:9090/hello -X OPTIONS \n*   Trying 127.0.0.1:9090...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9090 (#0)\n> OPTIONS /hello HTTP/1.1\n> Host: localhost:9090\n> User-Agent: curl/7.68.0\n> Accept: */*\n>\n< HTTP/1.1 204 No Content\n< allow: GET, OPTIONS\n< link: </hello/openapi-doc-dygixywsw>;rel=\"service-desc\", </hello/swagger-ui-dygixywsw>;rel=\"swagger-ui\"\n< server: ballerina\n< date: Thu, 13 Jun 2024 20:04:11 +0530\n< \n* Connection #0 to host localhost left intact\n* Closing connection 0\n```\n\n##### 2.3.6.1. Introspection resource\n\nThe introspection resource is one of the generated OAS resources, and it hosts the OpenAPI specification for the service \nin JSON format. The user can send a GET request to the resource path specified in the link header with the relation \nattribute set to `service-desc`.\n\nOutput of GET call to introspection resource\n```ballerina\ncurl -v localhost:9090/hello/openapi-doc-dygixywsw\n*   Trying 127.0.0.1:9090...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9090 (#0)\n> GET /hello/openapi-doc-dygixywsw HTTP/1.1\n> Host: localhost:9090\n> User-Agent: curl/7.68.0\n> Accept: */*\n> \n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< content-type: application/json\n< content-length: 675\n< server: ballerina\n< date: Thu, 13 Jun 2024 20:05:03 +0530\n< \n{\n  \"openapi\" : \"3.0.1\",\n  \"info\" : {\n    \"title\" : \"Hello\",\n    \"version\" : \"0.1.0\"\n  },\n  \"servers\" : [ {\n    \"url\" : \"{server}:{port}/hello\",\n    \"variables\" : {\n      \"server\" : {\n        \"default\" : \"http://localhost\"\n      },\n      \"port\" : {\n        \"default\" : \"9090\"\n      }\n    }\n  } ],\n  \"paths\" : {\n    \"/greeting\" : {\n      \"get\" : {\n        \"operationId\" : \"getGreeting\",\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"Ok\",\n            \"content\" : {\n              \"text/plain\" : {\n                \"schema\" : {\n                  \"type\" : \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n##### 2.3.6.2. SwaggerUI resource\n\nThe swagger-ui resource is one of the generated OAS resources, and it hosts the OpenAPI specification for the service in \nHTML format. The user can view it in a web browser by accessing the URL specified in the HTTP link header, which has \nrelation attribute set to `swagger-ui`.\n\n### 2.4. Client\nA client allows the program to send network messages to a remote process according to the HTTP protocol. The fixed \nremote methods of the client object correspond to distinct network operations defined by the HTTP protocol.\n\nThe client init function requires a valid URL and optional configuration to initialize the client. \n```ballerina\nhttp:Client clientEP = check new (\"http://localhost:9090\", { httpVersion: \"2.0\" });\n```\n\n#### 2.4.1 Client types\nThe client configuration can be used to enhance the client behaviour. By default, HTTP client supports HTTP2 version.\n\n```ballerina\npublic type ClientConfiguration record {|\n    string httpVersion = HTTP_2_0;\n    ClientHttp1Settings http1Settings = {};\n    ClientHttp2Settings http2Settings = {};\n    decimal timeout = 60;\n    string forwarded = \"disable\";\n    FollowRedirects? followRedirects = ();\n    PoolConfiguration? poolConfig = ();\n    CacheConfig cache = {};\n    Compression compression = COMPRESSION_AUTO;\n    ClientAuthConfig? auth = ();\n    CircuitBreakerConfig? circuitBreaker = ();\n    RetryConfig? retryConfig = ();\n    CookieConfig? cookieConfig = ();\n    ResponseLimitConfigs responseLimits = {};\n    ClientSecureSocket? secureSocket = ();\n    ProxyConfig? proxy = ();\n    boolean validation = true;\n|};\n\npublic type ClientHttp1Settings record {|\n    KeepAlive keepAlive = KEEPALIVE_AUTO;\n    Chunking chunking = CHUNKING_AUTO;\n    ProxyConfig? proxy = ();\n|};\n\npublic type ClientHttp2Settings record {|\n    boolean http2PriorKnowledge = false;\n    int http2InitialWindowSize = 65535;\n|};\n\n```\n\nBased on the config, the client object will be accompanied by following client behaviours. Following clients cannot be\ninstantiated calling `new`, instead user have to enable the config in the `ClientConfiguration`.\n\n##### 2.4.1.1 Security\nProvides secure HTTP remote methods for interacting with HTTP endpoints. This will make use of the authentication\nschemes configured in the HTTP client endpoint to secure the HTTP requests.\n```ballerina\nhttp:Client clientEP = check new (\"https://localhost:9090\",\n    auth = {\n        username: username,\n        password: password\n    },\n    secureSocket = {\n        cert: {\n            path: TRUSTSTORE_PATH,\n            password: \"ballerina\"\n        }\n    }\n);\n```\n\n##### 2.4.1.2 Caching\nAn HTTP caching client uses the HTTP caching layer once `cache` config is enabled.\n```ballerina\nhttp:Client clientEP = check new (\"http://localhost:9090\",\n    cache = {\n        enabled: true, \n        isShared: true \n    }\n);\n```\n\n##### 2.4.1.3 Redirect\nProvide the redirection support for outbound requests internally considering the location header when `followRedirects`\nconfigs are defined.\n```ballerina\nhttp:Client clientEP = check new (\"http://localhost:9090\", \n    followRedirects = { \n        enabled: true, \n        maxCount: 3 \n    }\n);\n```\n\n##### 2.4.1.4 Retry\nProvides the retrying over HTTP requests when `retryConfig` is defined.\n```ballerina\nhttp:Client clientEP = check new (\"http://localhost:9090\",\n    retryConfig = {\n        interval: 3,\n        count: 3,\n        backOffFactor: 0.5\n    }\n);\n```\n\n##### 2.4.1.5 Circuit breaker\nA Circuit Breaker implementation which can be used to gracefully handle network failures.\n```ballerina\nhttp:Client clientEP = check new (\"http://localhost:9090\", \n    circuitBreaker = {\n        rollingWindow: {\n            timeWindow: 60,\n            bucketSize: 20,\n            requestVolumeThreshold: 0\n        },\n        failureThreshold: 0.3,\n        resetTime: 2,\n        statusCodes: [500, 501, 502, 503]\n    }\n);\n```\n\n##### 2.4.1.6 Cookie\nProvides the cookie functionality across HTTP client actions. The support functions defined in the request can be \nused to manipulate cookies.\n```ballerina\nhttp:Client clientEP = check new (\"http://localhost:9090\", \n    cookieConfig = { \n        enabled: true, \n        persistentCookieHandler: myPersistentStore \n    }\n);\n```\n\nFollowing clients can be created separately as it requires different configurations.\n\n##### 2.4.1.7 Load balance\nLoadBalanceClient endpoint provides load balancing functionality over multiple HTTP clients. It uses the\nLoadBalanceClientConfiguration. \n```ballerina\npublic type LoadBalanceClientConfiguration record {|\n    *CommonClientConfiguration;\n    TargetService[] targets = [];\n    LoadBalancerRule? lbRule = ();\n    boolean failover = true;\n|};\n\nhttp:LoadBalanceClient clientEP = check new (\n    targets = [\n        { url: \"http://localhost:8093/LBMock1\" },\n        { url: \"http://localhost:8093/LBMock2\" },\n        { url: \"http://localhost:8093/LBMock3\" }\n    ],\n    timeout = 5\n);\n```\n\n##### 2.4.1.8 Failover\nAn HTTP client endpoint which provides failover support over multiple HTTP clients. It uses the\nFailoverClientConfiguration.\n```ballerina\npublic type FailoverClientConfiguration record {|\n    *CommonClientConfiguration;\n    TargetService[] targets = [];\n    int[] failoverCodes = [501, 502, 503, 504];\n    decimal interval = 0;\n|};\n\nhttp:FailoverClient foBackendEP00 = check new (\n    timeout = 5,\n    failoverCodes = [501, 502, 503],\n    interval = 5,\n    targets = [\n        { url: \"http://localhost:3467/inavalidEP\" },\n        { url: \"http://localhost:8080/echo00\" },\n        { url: \"http://localhost:8080/mockResource\" },\n        { url: \"http://localhost:8080/mockResource\" }\n    ]\n)\n```\n\n##### 2.4.1.9 Status code binding client\n\nAn HTTP status code binding client can be used to bind the response to the status code response records.\n\n```ballerina\nfinal http:StatusCodeClient albumClient = check new (\"localhost:9090\");\n\npublic type AlbumsOk record {|\n    *http:Ok;\n    Album[] body;\n|};\n\npublic function main() {\n    // Status code response binding with generic type \n    http:Ok|error response1 = albumClient->/v1/albums;\n    \n    // Status code response binding with specific body type\n    AlbumsOk|error response2 = albumClient->/v1/albums;\n}\n```\n\n##### 2.4.2. Client action\n\nThe HTTP client contains separate remote method representing each HTTP method such as `get`, `put`, `post`,\n`delete`,`patch`,`head`,`options` and some custom remote methods.\n\n###### 2.4.2.1 Entity body methods\n \nPOST, PUT, DELETE, PATCH methods are considered as entity body methods. These remote methods contains RequestMessage\nas the second parameter to send out the Request or Payload. \n\n```ballerina\npublic type RequestMessage Request|string|xml|json|byte[]|int|float|decimal|boolean|map<json>|table<map<json>>|\n                           (map<json>|table<map<json>>)[]|mime:Entity[]|stream<byte[], io:Error?>|();\n```\n\nBased on the payload types respective header value is added as the `Content-type` of the `http:Request`.\n\n| Type                                                                  | Content Type             |\n|-----------------------------------------------------------------------|--------------------------|\n| ()                                                                    | -                        |\n| string                                                                | text/plain               |\n| xml                                                                   | application/xml          |\n| byte[], stream<byte[], io:Error?>                                     | application/octet-stream |\n| int, float, decimal, boolean                                          | application/json         |\n| map\\<json\\>, table<map\\<json\\>>, map\\<json\\>[], table<map\\<json\\>>)[] | application/json         |\n\nThe header map and the mediaType param are optional for entity body remote methods.\n\n```ballerina\n# The post() function can be used to send HTTP POST requests to HTTP endpoints.\nremote isolated function post(string path, RequestMessage message, map<string|string[]>? headers = (),\n        string? mediaType = (), TargetType targetType = <>)\n        returns targetType|ClientError;\n\n# The put() function can be used to send HTTP PUT requests to HTTP endpoints.\nremote isolated function put(string path, RequestMessage message, map<string|string[]>? headers = (),\n        string? mediaType = (), TargetType targetType = <>)\n        returns targetType|ClientError;\n\n# The patch() function can be used to send HTTP PATCH requests to HTTP endpoints.\nremote isolated function patch(string path, RequestMessage message, map<string|string[]>? headers = (),\n        string? mediaType = (), TargetType targetType = <>)\n        returns targetType|ClientError;\n\n# The delete() function can be used to send HTTP DELETE requests to HTTP endpoints.\nremote isolated function delete(string path, RequestMessage message = (), map<string|string[]>? headers = (),\n        string? mediaType = (), TargetType targetType = <>)\n        returns targetType|ClientError;\n```\n\n```ballerina\nhttp:Client httpClient = check new (\"https://www.example.com\");\nstring response = check httpClient->post(\"/some/endpoint\",\n   {\n       name: \"foo\",\n       age: 25,\n       address: \"area 51\"\n   },\n   headers = {\n       \"my-header\": \"my-header-value\"\n   }\n   mediaType = \"application/json\",\n);\n```\n\n###### 2.4.2.2 Non Entity body methods\n\nGET, HEAD, OPTIONS methods are considered as non entity body methods. These remote methods do not contain \nRequestMessage, but the header map an optional param.\n\n```ballerina\n# The head() function can be used to send HTTP HEAD requests to HTTP endpoints.\nremote isolated function head(string path, map<string|string[]>? headers = ()) returns Response|ClientError;\n\n# The get() function can be used to send HTTP GET requests to HTTP endpoints.\nremote isolated function get( string path, map<string|string[]>? headers = (), TargetType targetType = <>)\n        returns  targetType|ClientError;\n\n# The options() function can be used to send HTTP OPTIONS requests to HTTP endpoints.\nremote isolated function options( string path, map<string|string[]>? headers = (), TargetType targetType = <>)\n        returns  targetType|ClientError;\n```\n\n````ballerina\nhttp:Client httpClient = check new (\"https://www.example.com\");\nmap<string|string[]> headers = {\n   \"my-header\": \"my-header-value\",\n   \"header-2\": [\"foo\", \"bar\"]\n};\nstring resp = check httpClient->get(\"/data\", headers);\n````\n\n###### 2.4.2.3 Resource methods\n\nIn addition to the above remote method actions, HTTP client supports executing standard HTTP methods through resource \nmethods. The following are the definitions of those resource methods :\n\n```ballerina\n# Defines the path parameter types.\npublic type PathParamType boolean|int|float|decimal|string;\n\n# The post resource method can be used to send HTTP POST requests to HTTP endpoints.\nresource function post [PathParamType ...path](RequestMessage message, map<string|string[]>? headers = (), string? mediaType = (),\n            TargetType targetType = <>, *QueryParams params) returns targetType|ClientError;\n\n# The put resource method can be used to send HTTP PUT requests to HTTP endpoints.            \nresource function put [PathParamType ...path](RequestMessage message, map<string|string[]>? headers = (), string? mediaType = (),\n            TargetType targetType = <>, *QueryParams params) returns targetType|ClientError;\n\n# The patch resource method can be used to send HTTP PATCH requests to HTTP endpoints.              \nresource function patch [PathParamType ...path](RequestMessage message, map<string|string[]>? headers = (), string? mediaType = (),\n            TargetType targetType = <>, *QueryParams params) returns targetType|ClientError;\n\n# The delete resource method can be used to send HTTP DELETE requests to HTTP endpoints.              \nresource function delete [PathParamType ...path](RequestMessage message = (), map<string|string[]>? headers = (), string? mediaType = (),\n            TargetType targetType = <>, *QueryParams params) returns targetType|ClientError;\n\n# The head resource method can be used to send HTTP HEAD requests to HTTP endpoints.              \nresource function head [PathParamType ...path](map<string|string[]>? headers = (), *QueryParams params)\n            returns Response|ClientError; \n\n# The get resource method can be used to send HTTP GET requests to HTTP endpoints.              \nresource function get [PathParamType ...path](map<string|string[]>? headers = (), TargetType targetType = <>,\n            *QueryParams params) returns targetType|ClientError;\n\n# The options resource method can be used to send HTTP OPTIONS requests to HTTP endpoints.              \nresource function options [PathParamType ...path](map<string|string[]>? headers = (), TargetType targetType = <>,\n            *QueryParams params) returns targetType|ClientError;                                               \n```\n\n* Path parameter\n\nPath parameters can be specified in the resource invocation along with the type.\nThe supported types are `string`, `int`, `float`, `boolean`, and `decimal`.\n\n```ballerina\n// Making a GET request\nstring 'from = \"2022-10-31\";\nstring to = \"2023-10-29\";\nhttp:Client httpClient = check new (\"https://www.example.com\");\nstring resp = check httpClient->/date/['from]/[to];\n// Same as the following :\n// string response = check httpClient->get(\"/date/2022-10-31/2023-10-29\");\n```\n\n```ballerina\n// Making a POST request\nstring profession = \"chemist\";\njson payload = {\n   name: \"Jesse Pinkman\",\n   age: 25\n};\nstring response = check httpClient->/addPerson/[profession].post(payload);\n// Same as the following :\n// string response = check httpClient->post(\"/addPerson/chemist\", payload);\n```\n\n* Query parameter\n\nA query parameter is passed as a key-value pair in the resource method call.\nThe supported types are `string`, `int`, `float`, `boolean`, `decimal`, and the `array` types of the aforementioned types.\nThe query param type can be nil as well.\n```ballerina\n// Making a GET request\nstring resp = check httpClient->/date(id = 123);\n// Same as the following :\n// string response = check httpClient->get(\"/date?id=123\");\n```\n```ballerina\n// Making a POST request\njson payload = {\n   name: \"Jesse Pinkman\",\n   age: 25\n};\nstring response = check httpClient->/addPerson.post(payload, profession = \"chemist\", id = 123);\n// Same as the following :\n// string response = check httpClient->post(\"/addPerson?profession=chemist&id=123\", payload);\n```\n\n* Header parameter\n\nThe headers to a resource method can be provided as `map<string|string[]>`.\n\n```ballerina\n// Making a GET request\nmap<string|string[]> headers = {\n   \"my-header\": \"my-header-value\",\n   \"header-2\": [\"foo\", \"bar\"]\n};\nstring resp = check httpClient->/date(headers);\n// Same as the following :\n// string response = check httpClient->get(\"/date\", headers);\n```\n\n```ballerina\n// Making a POST request\njson payload = {\n   name: \"Jesse Pinkman\",\n   age: 25\n};\nmap<string> headers = { \"my-header\": \"my-header-value\" };\nstring response = check httpClient->/addPerson.post(payload, headers, \"application/json\");\n// Same as the following :\n// string response = check httpClient->post(\"/addPerson\", payload, headers, \"application/json\");\n```\n\n###### 2.4.2.4 Forward/Execute methods\n\nIn addition to the standard HTTP methods, `forward` function can be used to proxy an inbound request using the incoming \nHTTP request method. Also `execute` remote method is useful to send request with custom HTTP verbs such as `move`, \n`copy` and etc.\n\n\n```ballerina\n# Invokes an HTTP call with the specified HTTP verb.\nremote isolated function execute(string httpVerb,  string path, RequestMessage message, \n        map<string|string[]>? headers = (), string? mediaType = (), TargetType targetType = <>)\n        returns targetType|ClientError;\n\n# The forward() function can be used to invoke an HTTP call with inbound request's HTTP verb\nremote isolated function forward(string path, Request request, TargetType targetType = <>)\n        returns  targetType|ClientError;\n```\n\n###### 2.4.2.5 HTTP2 additional methods\nFollowing are the HTTP2 client related additional remote methods to deal with promises and responses.\n\n```ballerina\n\n# Submits an HTTP request to a service with the specified HTTP verb.\n# The submit() function does not give out a http:Response as the result.\n# Rather it returns an http:HttpFuture which can be used to do further interactions with the endpoint.\nremote isolated function submit(string httpVerb, string path, RequestMessage message)\n    returns HttpFuture|ClientError;\n\n# Passes the request to actual network call.\nremote isolated function getResponse(HttpFuture httpFuture) returns Response|ClientError;\n\n# Passes the request to actual network call.\nremote isolated function hasPromise(HttpFuture httpFuture) returns boolean;\n\n# Passes the request to actual network call.\nremote isolated function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError;\n\n# Passes the request to an actual network call.\nremote isolated function getPromisedResponse(PushPromise promise) returns Response|ClientError;\n\n# Passes the request to actual network call.\nremote isolated function rejectPromise(PushPromise promise);\n```\n\n##### 2.4.3. Client action return types\n\nThe HTTP client remote method supports the contextually expected return types. The client operation is able to \ninfer the expected payload type from the LHS variable type. This is called as client payload binding support where the \ninbound response payload is accessed and parse to the expected type in the method signature. It is easy to access the\npayload directly rather manipulation `http:Response` using its support methods such as `getTextPayload()`, \n`getJsonPayload()` and etc.\n\nClient data binding supports `anydata` and `stream<http:SseEvent>` where the payload is deserialized based on the media type before binding it \nto the required type. Similar to the service data binding following table explains the compatible `anydata` types with \neach common media type. In the absence of a standard media type, the binding type is inferred by the payload parameter \ntype itself. If the type is not compatible with the media type, error is returned.\n\n| Ballerina Type | Structure                     | \"text\" | \"xml\" | \"json\" | \"x-www-form-urlencoded\" | \"octet-stream\" | \"event-stream\" |\n|----------------|-------------------------------|:------:|:-----:|:------:|:-----------------------:|:--------------:|:--------------:|\n| boolean        |                               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | boolean[]                     |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<boolean\\>                |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | table\\<map\\<boolean\\>\\>       |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| int            |                               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | int[]                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<int\\>                    |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | table\\<map\\<int\\>\\>           |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| float          |                               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | float[]                       |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<float\\>                  |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | table\\<map\\<float\\>\\>         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| decimal        |                               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | decimal[]                     |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<decimal\\>                |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | table\\<map\\<decimal\\>\\>       |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| byte[]         |                               |   ✅    |   ❌   |   ✅    |            ❌            |       ✅        |       ❌        |\n|                | byte[][]                      |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<byte[]\\>                 |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | table\\<map\\<byte[]\\>\\>        |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| string         |                               |   ✅    |   ❌   |   ✅    |            ✅            |       ❌        |       ❌        |\n|                | string[]                      |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<string\\>                 |   ❌    |   ❌   |   ✅    |            ✅            |       ❌        |       ❌        |\n|                | table\\<map\\<string\\>\\>        |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| xml            |                               |   ❌    |   ✅   |   ❌    |            ❌            |       ❌        |       ❌        |\n| json           |                               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | json[]                        |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<json\\>                   |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | table\\<map\\<json\\>\\>          |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| map            |                               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map[]                         |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<map\\>                    |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | table\\<map\\<map\\>\\>           |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| record         |                               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | record[]                      |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | map\\<record\\>                 |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | table\\<record\\>               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n| stream         |                               |   ❌    |   ❌   |   ✅    |            ❌            |       ❌        |       ❌        |\n|                | stream<http:SseEvent, error?> |   ❌    |   ❌   |   ❌    |            ❌            |       ❌        |       ✅        |\n\n```ballerina\nhttp:Client httpClient = check new (\"https://person.free.beeceptor.com\");\njson payload = check httpClient->get(\"/data\");\n```\nIn case of using var as return type, user can pass the typedesc to the targetType argument.\n\n```ballerina\nhttp:Client httpClient = check new (\"https://person.free.beeceptor.com\");\nvar payload = check httpClient->get(\"/data\", targetType = json);\n```\n\nIf any of the type is union with `()`(i.e `string?`), then in the absence of the payload, `()` will be assigned as\nthe value without being responded by a `BAD REQUEST` response.\n\n```ballerina\nstring? payload = check httpClient->get(\"/data\");\n```\n\nWhen the user expects client data binding to happen, the HTTP error responses (4XX, 5XX) will be categorized as an \nerror (http:ClientRequestError, http:RemoteServerError) of the client remote operation. These error types contain \npayload, headers and status code inside the error detail.\n\n```ballerina\npublic type Detail record {\n    int statusCode;\n    map<string[]> headers;\n    anydata body;\n};\n```\nThe error detail is useful when user wants to dig deeper to understand the backend failure. Here the error message \nis the response phrase.\n\n```ballerina\njson|error result = httpClient->post(\"/backend/5XX\", \"payload\");\nif result is http:RemoteServerError {\n    int statusCode = result.detail().statusCode;\n    anydata payload = result.detail().body;\n    map<string[]> headers = result.detail().headers;\n}\n```\n\nAdditionally, the client action return type can be a union of `anydata`. Based on the media type, the potential binding\ntype is decided. For example, if the union is defined as `json|xml` and the media type is related to `json`,\nthe deserialization and the binding will proceed according to the type `json`. But if the media type is related to `xml`\nthe process will happen according to the type `xml`.\nIf the given types of the union are not compatible with the media type, an error is returned.\n\n```ballerina\njson|xml payload = check httpClient->get(\"/data\");\n```\n\nIf the type is union with `()`(i.e `string?`), then in the absence of the payload, `()` will be assigned as\nthe value without being responded by a `BAD REQUEST` response.\n\n## 3. Request routing\nBallerina dispatching logic is implemented to uniquely identify a resource based on the request URI and Method.\n\n### 3.1. URI and HTTP method match\n\nThe ballerina dispatcher considers the absolute-resource-path of the service as the base path and the resource\nmethod name as the path of the resource method for the URI path match.\nBallerina dispatching logic depends on the HTTP method of the request in addition to the URI. Therefore, matching only \nthe request path will not be sufficient. Once the dispatcher finds a resource, it checks for the method compatibility \nas well. The accessor name of the resource describes the HTTP method where the name of the remote method implicitly \ndescribes its respective method\n\n### 3.2. Most specific path match\nWhen discovering the resource, the complete path will be considered when figuring out the best match. Perhaps a \npart of the request URI can be matched, yet they won’t be picked unless the longest is matched.\n\n### 3.3. Wild card path match\nThe resource path can contain a template within the bracket along with the type which represents the wild card. \ni.e `[string… s]`.That is some special way to say that if nothing matched, then the wildcard should be invoked. \nWhen the best resource match does not exist, a resource with a wild card path can be stated in the API design to \nget requests dispatched without any failure.  \n\n### 3.4. Path parameter template match\nPathParam is a parameter which allows you to map variable URI path segments into your resource call. Only the \nresource methods allow this functionality where the resource name can have path templates as a path segment with \nvariable type and the identifier within curly braces.\n```ballerina\nresource function /foo/[string bar]() {\n    \n}\n```\nThe value of the variable is extracted from the URI and assigned to the resource name parameter during the run-time \nexecution.\n\n## 4. Annotations\n   \n### 4.1. Service configuration\nThe configurations stated in the http:ServiceConfig  changes the behavior of particular services and applies it to \nall the resources mentioned in the particular services. Some configurations such as Auth, CORS can be overridden by \nresource level configurations. Yet, the service config is useful to cover service level configs.\n\n```ballerina\n# ServiceConfig definition\npublic type HttpServiceConfig record {|\n    string host = \"b7a.default\";\n    CompressionConfig compression = {};\n    Chunking chunking = CHUNKING_AUTO;\n    CorsConfig cors = {};\n    ListenerAuthConfig[] auth?;\n    string mediaTypeSubtypePrefix?;\n    boolean treatNilableAsOptional = true;\n    Interceptor|Interceptor[] interceptors?;\n    byte[] openApiDefinition = [];\n|};\n\n@http:ServiceConfig {\n    chunking: http:CHUNKING_ALWAYS\n}\nservice on testListener {\n    \n}\n```\n\nThe `openApiDefinition` field in http:ServiceConfig annotation serves a unique purpose. It will be automatically \npopulated at compile-time with OpenAPI definition of the particular http:Service if the OpenAPI definition auto \ngeneration is available.\n\n### 4.2. Resource configuration\nThe resource configuration responsible for shaping the resource method. Most of the behaviours are provided from \nthe language itself such as path, HTTP verb as a part of resource method. Some other configs such as CORS, \ncompression, auth are defined in the resource config.\n\n```ballerina\n# ResourceConfig definition\npublic type HttpResourceConfig record {|\n    string name?;\n    string[] consumes = [];\n    string[] produces = [];\n    CorsConfig cors = {};\n    boolean transactionInfectable = true;\n    ListenerAuthConfig[]|Scopes auth?;\n    LinkedTo[] linkedTo?;\n|};\n\n@http:ResourceConfig {\n    produces: [\"application/json\"]\n}\nresource function post person() {\n\n}\n```\n\n### 4.3. Payload annotation\nThe payload annotation has two usages. It is used to decorate the resource method payload parameter and to decorate \nthe resource return type. \n\n```ballerina\npublic type Payload record {|\n    string|string[] mediaType?;\n|}\n```\n\n#### 4.3.1. Payload binding parameter\n\nThe request payload binding is supported in resource methods where users can access it through a resource method \nparameter. The @http:Payload annotation is specially introduced to distinguish the request payload with other \nresource method parameters. The annotation can be used to specify values such as mediaType...etc. Users can \ndefine the potential request payload content type as the mediaType to perform some pre-validations as same as \nConsumes resource config field.\n\n```ballerina\nresource function post person(@http:Payload {mediaType:[\"application/json\", \"application/ld+json\"]} json payload)  {\n    \n}\n```\n\nDuring the runtime, the request content-type header is matched against the mediaType field value to validate. If the \nvalidation fails, the listener returns an error response with the status code of 415 Unsupported Media Type. \nOtherwise, the dispatching moves forward. \n\n#### 4.3.2. Anydata return value info\n\nThe same annotation can be used to specify the MIME type return value when a particular resource method returns \none of the anydata typed values. In this way users can override the default MIME type which the service type has \ndefined based on the requirement. Users can define the potential response payload content type as the mediaType \nto perform some pre-runtime validations in addition to the compile-time validations as same as produces resource \nconfig field.\n\n```ballerina\nresource function post person() returns @http:Payload{mediaType:\"application/xml\"} xml? {\n    \n}\n```\n\nDuring the runtime, the request accept header is matched against the mediaType field value to validate. If the \nvalidation fails, the listener returns an error response with the status code of 406 Not Acceptable. Otherwise, the \ndispatching moves forward.\n\nThe annotation is not mandatory, so if the media type info is not defined, the following table describes the default \nMIME types assigned to each anydata type.\n\n| Declared return type                                                            | MIME type                |\n|---------------------------------------------------------------------------------|--------------------------|\n| ()                                                                              | (no body)                |\n| xml                                                                             | application/xml          |\n| string                                                                          | text/plain               |\n| byte[]                                                                          | application/octet-stream |\n| map\\<json\\>, table\\<map\\<json\\>\\>, (map\\<json\\> &#124; table\\<map\\<json\\>\\>)[]) | application/json         |\n| int, float, decimal, boolean                                                    | application/json         |\n\nIf anything comes other than above return types will be default to `application/json`.\n\n### 4.4. CallerInfo annotation\n\nThe CallerInfo annotation associated with the `Caller` is to denote the response type.\nIt will ensure that the resource method responds with the right type and provides static type information about\nthe response type that can be used to generate OpenAPI.\n\n```ballerina\nresource function get person(@http:CallerInfo { respondType: http:Accepted } http:Caller hc) returns error?{\n    Person p = {};\n    hc->respond(Person p);\n}\n```\n\n### 4.5. Header annotation\n\n```ballerina\n\nresource function get person(@http:Header {name:\"Referer\"} string referer) {\n\n}\n```\n### 4.6. Cache annotation\n\nThis annotation can be used to enable response caching from the resource signature. This allows to set the \n`cache-control`, `etag` and `last-modified` headers in the response.\n\nThe default behavior (`@http:Cache`) is to have `must-revalidate,public,max-age=3600` directives in \n`cache-control` header. In addition to that `etag` and `last-modified` headers will be added.\n\n```ballerina\n@http:Cache {                 // Default Configuration\n    mustRevalidate : true,    // Sets the must-revalidate directive\n    noCache : false,          // Sets the no-cache directive\n    noStore : false,          // Sets the no-store directive \n    noTransform : false,      // Sets the no-transform directive\n    isPrivate : false,        // Sets the private and public directive\n    proxyRevalidate : false,  // Sets the proxy-revalidate directive\n    maxAge : 3600,             // Sets the max-age directive. Default value is 3600 seconds\n    sMaxAge : -1,             // Sets the s-maxage directive\n    noCacheFields : [],       // Optional fields for no-cache directive\n    privateFields : [],       // Optional fields for private directive\n    setETag : true,           // Sets the etag header\n    setLastModified : true    // Sets the last-modified header\n}\n```\nThis annotation can **only** support return types of `anydata` and `SuccessStatusCodeResponse`. (For other return \nvalues cache configuration will not be added through this annotation)\n\n```ballerina\n// Sets the cache-control header as \"public,must-revalidate,max-age=5\". Also sets the etag header.\n// last-modified header will not be set\nresource function get greeting() returns @http:Cache{maxAge : 5, setLastModified : false} string {\n    return \"Hello, World!!\"\n}\n```\n\n## 5. URL parameters\n### 5.1. Path\nPath params are specified in the resource name itself. Path params can be specified in the types of string, int, \nboolean, decimal and float. During the request runtime the respective path segment is matched and cast into param \ntype. Users can access it within the resource method, and it is very useful when designing APIs with dynamically \nchanging path segments.\n\n### 5.2. Query\nQuery params can be accessed via the resource signature without an annotation or accessed via request functions.\n\n```ballerina\n# Gets the query parameters of the request as a map consisting of a string array.\npublic isolated function getQueryParams() returns map<string[]> {\n    \n}\n\n# Gets the query param value associated with the given key.\npublic isolated function getQueryParamValue(string key) returns string? {\n\n}\n\n# Gets all the query param values associated with the given key.\npublic isolated function getQueryParamValues(string key) returns string[]? {\n\n}\n```\n### 5.3. Matrix\nThe matrix params are one of the URL param which is supported access in ballerina using a function which bound to \nthe request\n\n```ballerina\n# Gets the matrix parameters of the request.\npublic isolated function getMatrixParams(string path) returns map<any> {\n    \n}\n```\n\n## 6. Request and Response\nThe request and the response represent the message/data which travel over the network using HTTP. The request object \nmodels the inbound/outbound message with request oriented properties, headers and payload. Followings are the properties \nassociated with the `http:Request` which get populated for each request during the runtime.\n\n```ballerina\npublic class Request {\n   public string rawPath = \"\";\n   public string method = \"\";\n   public string httpVersion = \"\";\n   public string userAgent = \"\";\n   public string extraPathInfo = \"\";\n   public RequestCacheControl? cacheControl = ();\n   public MutualSslHandshake? mutualSslHandshake = ();\n}\n```\n\nThe header and the payload manipulation can be done using the functions associated to the request.\n\nSame as request, the response object also models the inbound/outbound message with the response oriented properties \nand headers. Followings are the properties associated with the `http:Response` which get populated for each response \nduring the runtime.\n\n```ballerina\npublic class Response {\n    public int statusCode = 200;\n    public string reasonPhrase = \"\";\n    public string server = \"\";\n    public string resolvedRequestedURI = \"\";\n    public ResponseCacheControl? cacheControl = ();\n}\n```\n\nThe header and the payload manipulation can be done using the functions associated to the response.\n\n## 7. Header and Payload\nThe header and payload are the main components of the request and response. In the world of MIME, that is called \nEntity header and Entity body. Ballerina supports multiple payload types and allows convenient functions to access \nheaders along with other properties.\n\n### 7.1. Parse header functions\n\n```ballerina\n# Parses the header value which contains multiple values or parameters.\nparseHeader(string headerValue) returns HeaderValue[]|ClientError  {\n\n}\n```\n\n### 7.2 Links support\nHypermedia As the Engine Of Application State (HATEOAS) is one of the key principles in REST, which brings the \nconnectedness to a set of scattered resources. It also brings direction as to what might user could do next. Similar \nto Web pages REST APIs becomes self-descriptive and dynamic along with this principle.\n\nAs an initial support to HATEOAS, HTTP package has the ability to statically record the connectedness of resources \nthrough `Links` object. `Links` is a map of `Link` objects which represent the connectedness between resources. The \n`Link` record is defined as follows :\n```ballerina\npublic type Link record {\n    # Names the relationship of the linked target to the current representation\n    string rel?;\n    # Target URL\n    string href;\n    # Expected resource representation media types\n    string[] types?;\n    # Allowed resource methods\n    Method[] methods?;\n};\n```\n\nThis `Links` is generated from the `linkedTo` field in the `ResourceConfig` annotation and added either to the \npayload or as a `Link` header depending on the payload type. This `Links` will not be added when an `http:Response` is \nreturned.\n\n#### 7.2.1 LinkedTo record\nThe `LinkedTo` record is defined as follows :\n```ballerina\npublic type LinkedTo record {|\n    string name;\n    string relation = \"self\";\n    string method?;\n|};\n```\n\nThis record represents a connectedness between two resources. All the fields in the `LinkedTo` record is \n**case-insensitive**. The `relation` field is defaulted to the IANA link relation `self`, and for a specific resource, \nthe linked resources should have a **unique** relation.  \n\nThe linked resource is resolved using the resource link name specified in the `name` field. To \nfind the linked resource, the linked resource should be configured with the same name through `ResourceConfig` \nannotation. Following is a simple example of creating links :\n```ballerina\nservice on new http:Listener(port) {\n\n    @http:ResourceConfig {\n        // Create a link between this resource and \"Payment\" resource\n        linkedTo: [{ name: \"Payment\", rel: \"payment\" }]\n    }\n    resource function post 'order(@http:Payload Order 'order) returns \n            http:Accepted|http:InternalServerError {\n        // some logic\n    }\n    \n    @http:ResourceConfig {\n        name: \"Payment\"\n    }\n    resource function put payment/[string id](@http:Payload Payment payment) returns \n            http:Ok|http:InternalServerError {\n        // some logic\n    }\n}\n```\n\nResource link name can be duplicated only when the resources have the same path. In this case, the `method` of the \nlinked resource should be specified in the `LinkedTo` record to resolve conflicts. Following is an example when we have two \nresources with the same resource link name :\n```ballerina\nservice on new http:Listener(port) {\n\n    @http:ResourceConfig {\n        name: \"Orders\",\n        linkedTo: [\n            { name: \"Orders\", rel: \"edit\",  method: \"PUT\" },\n            { name: \"Orders\", rel: \"remove\",  method: \"DELETE\" }\n        ]\n    }\n    resource function put orders/[string id](@http:Payload Order 'order) returns \n            http:Ok|http:InternalServerError {\n        // some logic\n    }\n    \n    @http:ResourceConfig {\n        name : \"Orders\"\n    }\n    resource function delete orders/[string id]() returns http:Ok|http:InternalServerError {\n        // some logic\n    }\n}\n```\n\n#### 7.2.2 Links in the response\nThe static `Links` generated from the `linkedTo` field will be injected into the JSON payload when it is not \na closed record and not `readonly`. Suppose the user returns the below record type, the runtime will inject the `Links` \nrecord as in the latter. Therefore, the response should be considered as a record with the `Links` field.\n\n```ballerina\npublic type 'Order record {\n    string item_name;\n    string id;\n    string quantity;\n};\n```\n\n```ballerina\npublic type 'Order record {\n    *http:Links;\n    string item_name;\n    string id;\n    string quantity;\n};\n```\n\nFollowing is an example of `Links` in payload :\n```ballerina\nservice on new http:Listener(port) {\n\n    @http:ResourceConfig {\n        linkedTo: [{ name: \"Payment\", rel: \"payment\" }]\n    }\n    resource function get orders/[string id]() returns Order|http:NotFound {\n        // some logic\n    }\n    \n    @http:ResourceConfig {\n        name: \"Payment\"\n    }\n    resource function put payment/[string id](@http:Payload Payment payment) returns \n            http:Ok|http:InternalServerError {\n        // some logic\n    }\n}\n```\nThe response payload to the GET resource will look like this :\n```json\n{\n   \"item_name\": \"latte\",\n   \"quantity\": 2,\n   \"_links\":{\n      \"payment\":{\n         \"href\": \"/payment/{id}\", \n         \"types\": [\"application/json\"],\n         \"methods\":[\"PUT\"]\n      }\n   }\n}\n```\nThe fields of the `Link` are automatically populated from the resource specified in the `LinkedTo` configuration.\n\nWhen there is no payload or when `Links` not supported in the payload, the `Links` will be added as a `Link` header. \nFollowing is an example of `Links` in `Link` header:\n```ballerina\nservice on new http:Listener(port) {\n\n    @http:ResourceConfig {\n        linkedTo: [{ name: \"Payment\", rel: \"payment\" }]\n    }\n    resource function post order(@http:Payload Order 'order) returns \n            http:Accepted|http:InternalServerError {\n        // some logic\n        // return http:Accepted without body\n    }\n    \n    @http:ResourceConfig {\n        name: \"Payment\"\n    }\n    resource function put payment/[string id](@http:Payload Payment payment) returns \n            http:Ok|http:InternalServerError {\n        // some logic\n    }\n}\n```\nThe response will have the following header :\n```\nlink: \"</payment/{id}>; rel=\\\"payment\\\"; methods=\\\"\\\"PUT\\\"\\\"\"\n```\n\nThe `Links` will not overwrite the payload or the header if the user has already added the links.\n\n## 8. Interceptor and error handling\n### 8.1 Interceptor\nInterceptor enhances the HTTP package with interceptors. Interceptors typically do small units of work such as logging, header \nmanipulation, state publishing, etc., before resources are invoked. The ability to execute some common logic for all \nthe inbound requests and outbound responses has proven to be highly useful. It typically includes some small unit of \nwork such as the below.\n - Logging\n - Header manipulation\n - Observability\n - Throttling\n - Validating\n - Securing\n\nInterceptors are designed for both request and response flows. There are just service objects which will be executed in\na configured order to intercept request and response. These interceptor services can only have either a resource method \nor a remote method depends on the interceptor type. Moreover, they do not support `ServiceConfig`, `ResourceConfig`\nand `Cache` annotations.\n\n#### 8.1.1 Request interceptor\nFollowing is an example of `RequestInterceptor` written in Ballerina swan-lake. `RequestInterceptor` can only have one \nresource method.\n\n```ballerina\nservice class RequestInterceptor {\n   *http:RequestInterceptor;\n \n   resource function 'default [string… path](http:RequestContext ctx, http:Request req) returns http:NextService|error? {\n       req.setHeader(\"X-requestHeader\", \"RequestInterceptor\");\n       return ctx.next();\n   }\n}\n```\n\nSince interceptors work with network activities, it must be either a remote or resource method. In this case resource \nfunctions are used for `RequestInterceptor` as it gives more flexibility. With resource methods interceptors can be engaged \nbased on HTTP method and path.\n\nFor instance consider a scenario where there are two resources: one on path `foo` whereas the other on path `bar`. If the \nuser writes an interceptor as follows, it would only get hit when the request is directed to `foo` resource.\n\n```ballerina\nservice class RequestInterceptor {\n   *http:RequestInterceptor;\n \n   resource function 'default foo(http:RequestContext ctx, http:Request req) returns http:NextService|error? {\n       req.setHeader(\"X-requestHeader\", \"RequestInterceptor\");\n       return ctx.next();\n   }\n}\n```\n\n##### 8.1.1.1 Request context\nFollowing is the rough definition of the interceptor context. Request context can store non-error values, and these values \ncan be retrieved at the next services in the pipeline.  \n```ballerina\n// This is same as the `value:Cloneable`, except that it does not include `error` type.\n# Represents a non-error type that can be cloned.\npublic type Cloneable (any & readonly)|xml|Cloneable[]|map<Cloneable>|table<map<Cloneable>>;\n \n# Request context member type.\npublic type ReqCtxMember Cloneable|isolated object {};\n\n# Request context member type descriptor.\npublic type ReqCtxMemberType typedesc<ReqCtxMember>;\n\n# Represents an HTTP Context that allows user to pass data between interceptors.\npublic isolated class RequestContext {\n    private final map<ReqCtxMember> members = {};\n\n    # Sets an member to the request context object.\n    #\n    # + key - Represents the member key\n    # + value - Represents the member value\n    public isolated function set(string key, ReqCtxMember value) {}\n\n    # Gets an member value from the request context object.\n    #\n    # + key - Represents the member key\n    # + return - Member value\n    public isolated function get(string key) returns ReqCtxMember {}\n\n    # Checks whether the request context object has an member corresponds to the key.\n    #\n    # + key - Represents the member key\n    # + return - true if the member exists, else false\n    public isolated function hasKey(string key) returns boolean {}\n\n    # Returns the member keys of the request context object.\n    #\n    # + return - Array of member keys\n    public isolated function keys() returns string[] {}\n\n    # Gets an attribute value with type from the request context object.\n    #\n    # + key - Represents the member key\n    # + targetType - Represents the expected type of the member value\n    # + return - Attribute value or an error if the member value is not of the expected type\n    public isolated function getWithType(string key, ReqCtxMemberType targetType = <>) returns targetType|ListenerError = external;\n\n    # Removes a member from the request context object. It panics if there is no such member.\n    #\n    # + key - Represents the member key\n    public isolated function remove(string key) {}\n\n    # Calls the next service in the interceptor pipeline.\n    #\n    # + return - The next service object in the pipeline. An error is returned, if the call fails\n    public isolated function next() returns NextService|error? = external;\n}\n```\n\n##### 8.1.1.2 next() method\nHowever, there is an addition when it comes to `RequestContext`. A new method namely, `next()` is introduced to control \nthe execution flow. Users must invoke `next()` method in order to trigger the next interceptor in the pipeline. Then \nthe reference of the retrieved interceptor must be returned from the resource method. Pipeline use this reference to\nexecute the next interceptor. \n\nPreviously, this was controlled by returning a boolean value which is quite cryptic and confusing.\n\n##### 8.1.1.3 Return to respond\nThere is a key difference between interceptors and the final service. Resources in the final service allow returning \nvalues which in turn results in HTTP responses. The same can be done inside the `RequestInterceptors`. However, as \nmentioned above `RequestInterceptor` additionally could return the `NextService|error?` to continue the pipeline which\ndoes not translate into HTTP response. \n\nWhen a `RequestInterceptor` responded with a response, the response interceptor pipeline will get executed immediately.\nIn case of an error, interceptor pipeline execution jumps to the nearest `RequestErrorInterceptor` or \n`ResponseErrorInterceptor` in the pipeline. These error interceptors are special kinds of interceptor which could be \nused to handle errors, and they are not necessarily the last interceptor in the pipeline, they can be anywhere in the \nchain. However, in the case of there is no error interceptors in the pipeline, pipeline returns the internal error \nresponse to the client similar to any HTTP service resource.\n\n##### 8.1.1.4 Get JWT information\nIf the JWT information of the request is required, it can be retrieved by using the `getWithType()` api.\n```ballerina\n[jwt:Header, jwt:Payload] jwtInformation = check ctx.getWithType(http:JWT_INFORMATION);\n```\n\n#### 8.1.2 Response interceptor\n\nFollowing is an example of `ResponseInterceptor` written in Ballerina swan-lake. `ResponseInterceptor` can only have one\nremote method : `interceptResponse()`.\n\n```ballerina\nservice class ResponseInterceptor {\n   *http:ResponseInterceptor;\n \n   remote function interceptResponse(http:RequestContext ctx, http:Response res) returns http:NextService|error? {\n       res.setHeader(\"X-responseHeader\", \"ResponseInterceptor\");\n       return ctx.next();\n   }\n}\n```\n\n`ResponseInterceptor` is different from `RequestInterceptor`. Since it has nothing to do with HTTP methods and paths, \nremote method is used instead of resource method. The `ResponseInterceptor` can access the request as a function parameter.\n\n##### 8.1.2.1 Return to respond\nThe remote method : `interceptResposne()` allows returning values other than `NextService|error?`. Anyway this will\ncontinue the response interceptor pipeline with the returned response object and calling `RequestContext.next()` is\nredundant in this case.\n\nIn case of an error, interceptor pipeline execution jumps to the nearest `ResponseErrorInterceptor` in the \npipeline. . However, in the case of there is no `ResponseInterceptor` in the pipeline, pipeline returns the internal \nerror response to the client.\n\n#### 8.1.3 Request error interceptor and response error interceptor\nAs mentioned above, these are special kinds of interceptor designed to handle errors. These interceptors can  \nbe placed anywhere in the request or response interceptor chain. The framework automatically adds default \n`RequestErrorInterceptor` and `ResponseErrorInterceptor` which basically prints the error message to the console.\n\nUsers can override these interceptors by defining their own ones as follows. Users don’t have to specifically engage \nthese interceptors as they only have fixed positions, and they are always executed. The only additional and mandatory \nargument in this case is error `err`. Moreover, the `RequestErrorInterceptor` resource method can only have\nthe `default` method and default path.\n\n```ballerina\nservice class RequestErrorInterceptor {\n   *http:RequestErrorInterceptor;\n \n   remote function 'default [string… path](http:RequestContext ctx, http:Caller caller,\n                       http:Request req, error err) returns http:NextService|error? {\n       // deal with the error\n   }\n}\n```\n\nThe same works for `ResponseErrorInterceptor`, the difference is it has a remote method : `interceptResponseError()`\nand deals with response object. In addition, the `ResponseErrorInterceptor` can access the request as a function parameter.\n\n```ballerina\nservice class ResponseErrorInterceptor {\n   *http:ResponseErrorInterceptor;\n \n   remote function interceptResponseError(http:RequestContext ctx, http:Response res, error err) \n                       returns http:NextService|error? {\n       // deal with the error\n   }\n}\n```\n\nIn the case of an error returned within an error interceptor, again execution jumps to the nearest error interceptor. \nHowever, if there is no error interceptor to jump to, the internal error response is returned just like in a normal \ninterceptors.\n\n#### 8.1.4 Engaging interceptors\n##### 8.1.4.1 Service level\nInterceptors could get engaged at service level. One reason for this is that users may want to engage two different \ninterceptor chains for each service even though it is attached to the same Listener. At the service level resource \nfunction paths are relative to the service base path.\n\nIn order to engage interceptors at service level, the service should be marked as `http:InterceptableService`. Then, the \ninterceptor pipeline can be defined by implementing the `createInterceptors` function.\n```ballerina\npublic function createInterceptors() returns Interceptor|Interceptor[];\n```\nInternally, this function is used to create the interceptor pipeline when the service gets initialised. An example \nimplementation is shown below,\n```ballerina\nservice http:InterceptableService / on new http:Listener(9099) {\n\n    public function createInterceptors() returns [RequestInterceptor, ResponseInterceptor] {\n        return [new RequestInterceptor(), new ResponseInterceptor()];\n    }\n\n    resource function get hello() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\nWhen handling `http:ServiceNotFound` scenarios,\n1. If there is a service in `/`, the error will be handled by the interceptors in that service.\n2. If there is only a single service, the error will be handled by the interceptors in that service.\n3. If there are multiple services including a service in `/`, the error will be handled by the interceptors in `/`.\n   Otherwise, it will be handled by the `http:DefaultErrorInterceptor`.\n\n##### 8.1.4.2 Execution order of interceptors\n\n![img.png](_resources/img.png)\nIn the above example blue dashed box represents the `RequestErrorInterceptor` and blue boxes simply represent the \n`RequestInterceptors`, whereas green dashed box represents the `ResponseErrorInterceptor` and green boxes simply represent the \n`ResponseInterceptors`. \n\n`ResponseInterceptors` are executed in the opposite direction of `RequestInterceptors` i.e. `RequestInterceptors`\nare executed head to tail whereas `ResponseInterceptors` are executed tail to head. The new execution order is as follows, \nassuming that there are no error occurred in the pipeline :\n```\nRequestInterceptor  : 1, 2, 4\nResponseInterceptor : 5, 3\n```\n\nHowever, if the user decides to respond at 4 and terminate the cycle, only the `ResponseInterceptor` at 3 gets executed.\nAlso, when the `RequestInterceptor` at 2 returns an error, the execution jumps from 2 to 6 as the nearest Error Interceptor\nis at 6. The same goes to the response path.\n\nExecution of interceptors does not depend on the existence of the end service i.e. the interceptors are executed in the\nrelevant order even though the end service does not exist.\n\n#### 8.1.5 Data binding\n`RequestInterceptor` methods support data binding. Which means users can directly access the payload, headers and query\nparameters. In order to get hold of the headers and the payload, users must use @http:Payload and @http:Headers.\n\n### 8.2 Error handling\n\n#### 8.2.1 Error interceptors\n\nError handling is an integral part of any network program. Errors can be returned by many components such as interceptors,\ndispatcher, data-binder, security handlers, etc. These errors are often handled by a default handler and sent back as \n`500 Internal Server Error` with an entity-body. However, this often causes problems because when designing any API \nconsistency matters. Therefore, all the responses must have a consistent format. \n\nAs a result, almost all the real API requires overriding the default error handler and replacing it with their own\nerror handlers. This can be done by error interceptors discussed in [Request error interceptor and response error \ninterceptor](#813-request-error-interceptor-and-response-error-interceptor). These error handlers can be placed \nanywhere in the pipeline. The only mandatory argument in error interceptors is `error`. Just like a main service, it \nis possible to return values from error handlers which will send back as HTTP responses. This overrides the current response\nand results in triggering the next response interceptor. Following is such an example :\n```ballerina\nservice class ResponseErrorInterceptor {\n   *http:ResponseErrorInterceptor;\n \n   remote function interceptResponseError(error err) returns http:NotFound {\n       http:NotFound nf = { body: { msg: err.message()} };\n       return nf;\n   }\n}\n```\n\nThe HTTP module also have a `DefaultErrorInterceptor` which is a `ResponseErrorInterceptor`. This will be added by \nthe listener and will be executed at last when there is an error. Hence, any error which is not handled by other \nerror interceptors will be finally handled by this default error handler. In essence, the internal default error interceptor\nwill look like this :\n```ballerina\nservice class DefaultErrorInterceptor {\n    *http:ResponseErrorInterceptor;\n\n    remote function interceptResponseError(error err) returns http:Response {\n        http:Response res = new;\n        res.setTextPayload(err.message());\n        // By default, the error response is set to 500 - Internal Server Error\n        // However, if the error is an internal error which has a different error\n        // status code (4XX or 5XX) then this 500 status code will be overwritten \n        // by the original status code.\n        res.statusCode = 500;\n        return res;\n    }\n}\n```\n\nIn order to overwrite this default error handling behavior, a custom `ResponseErrorInterceptor` can be placed as the \nfirst interceptor in the listener level configuration which will be executed at last just before the  `DefaultErrorHandler`.\n\n#### 8.2.2 Error types\n\nIn addition to error interceptors, HTTP module provides distinct error types in order to intercept errors and handle \nthem differently. These error types have a hierarchical structure starting from the basic `HttpError`. The following \ntable summarizes the error types which can be intercepted by the error interceptors:\n\n<table>\n<thead>\n  <tr>\n    <th></th>\n    <th>Error</th>\n    <th>Error Type</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td rowspan=\"5\">Executing Interceptors - Interceptor Level</td>\n    <td>500 - no next service to be returned</td>\n    <td rowspan=\"4\">InterceptorReturnError</td>\n  </tr>\n  <tr>\n    <td>500 - request context object does not contain the configured interceptors</td>\n  </tr>\n  <tr>\n    <td>500 - next interceptor service did not match with the configuration</td>\n  </tr>\n  <tr>\n    <td>500 - target service did not match with the configuration</td>\n  </tr>\n  <tr>\n    <td>Other errors occurred during the resource/remote method execution</td>\n    <td><i>Same as the returned error type</i></td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">Finding Service - Listener Level</td>\n    <td>404 - no service has registered for listener</td>\n    <td rowspan=\"3\">ServiceDispatchingError</td>\n  </tr>\n  <tr>\n    <td>404 - no matching service found for path</td>\n  </tr>\n  <tr>\n    <td>400 - Found non-matrix parameter in path</td>\n  </tr>\n  <tr>\n    <td rowspan=\"2\">Finding Resource - Service Level</td>\n    <td>404 - no matching resource found for path</td>\n     <td rowspan=\"4\">ResourceDispatchingError</td>\n  </tr>\n  <tr>\n    <td>405 - Method not allowed</td>\n  </tr>\n  <tr>\n    <td rowspan=\"2\">Consumes & Produces - Service Level</td>\n    <td>406 - Not Acceptable</td>\n  </tr>\n  <tr>\n    <td>415 - Unsupported Media Type</td>\n  </tr>\n  <tr>\n    <td rowspan=\"6\">Databinding - Service Level</td>\n    <td>400 - Error in casting path param</td>\n    <td>PathParameterBindingError</td>\n  </tr>\n  <tr>\n    <td>400 - no query param value found</td>\n    <td rowspan=\"2\">QueryParameterBindingError</td>\n  </tr>\n  <tr>\n    <td>400 - Error in casting query param </td>\n  </tr>\n  <tr>\n    <td>400 - no header value found</td>\n    <td rowspan=\"2\">HeaderBindingError</td>\n  </tr>\n  <tr>\n    <td>400 - header binding failed </td>\n  </tr>\n  <tr>\n    <td>400 - data binding failed</td>\n    <td>PayloadBindingError</td>\n  </tr>\n  <tr>\n    <td rowspan=\"2\">Security - Resource Level</td>\n    <td>401 - Unauthorized errors</td>\n    <td>ListenerAuthnError</td>\n  </tr>\n  <tr>\n    <td>403 - Forbidden errors</td>\n    <td>ListenerAuthzError</td>\n  </tr>\n  <tr>\n    <td>Resource execution -  Resource Level</td>\n    <td>500 - Returned errors</td>\n    <td><i>Same as the returned error type</i></td>\n  </tr>\n</tbody>\n</table>\n\n#### 8.2.3 Trace log\nThe HTTP trace logs can be used to monitor the HTTP traffic that goes in and out of Ballerina.\nThe HTTP trace logs are **disabled as default**.\nTo enable trace logs, the log level has to be set to TRACE using the runtime argument:\n`-Cballerina.http.traceLogConsole=true.`\n\nThe HTTP access logs and trace logs are **disabled as default**. To enable, the configurations can be set by the \nfollowing `config.toml` file:\n\nThe configurations can be set in the `config.toml` file for advanced use cases such as specifying the file path to \nsave the trace logs and specifying the hostname and port of a socket service to publish the trace logs.\n\n```toml\n[ballerina.http.traceLogAdvancedConfig]\n# Enable printing trace logs in console\nconsole = true              # Default is false\n# Specify the file path to save the trace logs  \npath = \"testTraceLog.txt\"   # Optional\n# Specify the hostname and port of a socket service to publish the trace logs\nhost = \"localhost\"          # Optional\nport = 8080                 # Optional\n```\n\n#### 8.2.4 Access log\nBallerina supports HTTP access logs for HTTP services, providing insights into web traffic and request handling.\nThe access log feature is **disabled by default** to allow users to opt-in as per their requirements.\n\nTo enable access logs, configuration settings are provided under `ballerina.http.accessLogConfig` in the\n`Config.toml` file. Users can specify whether logs should be output to the console, a file, or both, \nand can select the format and specific attributes to log.\n\n```toml\n[ballerina.http.accessLogConfig]\n# Enable printing access logs in console\nconsole = true              # Default is false\n# Specify the file path to save the access logs\npath = \"testAccessLog.txt\"  # Optional, omit to disable file logging\n# Select the format of the access logs\nformat = \"json\"             # Options: \"flat\", \"json\"; Default is \"flat\". Omit to stick to the default.\n# Specify which attributes to log. Omit to stick to the default set.\nattributes = [\"ip\", \"date_time\", \"request\", \"status\", \"response_body_size\", \"http_referrer\", \"http_user_agent\"]\n# Default attributes: ip, date_time, request, status, response_body_size, http_referrer, http_user_agent\n```\n\n##### Configurable Attributes\nUsers can customize which parts of the access data are logged by specifying attributes in the configuration.\nThis allows for tailored logging that can focus on particular details relevant to the users' needs.\n\n|       Attribute        |                                                    Description                                                     |\n|:----------------------:|:------------------------------------------------------------------------------------------------------------------:|\n|           ip           |                                                Client's IP address                                                 |\n|       date_time        |                                             HTTP request received time                                             |\n|        request         |                                   Full HTTP request line (method, URI, protocol)                                   |\n|     request_method     |                                             HTTP method of the request                                             |\n|      request_uri       |                                      URI of the request, including parameters                                      |\n|         scheme         |                                       Scheme of the request and HTTP version                                       |\n|         status         |                                      HTTP status code returned to the client                                       |\n|   request_body_size    |                                         Size of the request body in bytes                                          |\n|   response_body_size   |                                      Size of the HTTP response body in bytes                                       |\n|      request_time      |                                      Total time taken to process the request                                       |\n|     http_referrer      |                                 HTTP Referer header, indicating the previous page                                  |\n|    http_user_agent     |                                 User-Agent header, identifying the client software                                 |\n|  http_x_forwarded_for  |                                      Originating IP address if using a proxy                                       |\n| http_(X-Custom-Header) | Header fields. Referring to them with `http` followed by the header name. (`x-request-id` ->; `http_x-request-id`) |\n\n#### 8.2.5 Panic inside resource\n\nBallerina consider panic as a catastrophic error and non-recoverable. Hence, immediate application termination is \nperformed to fail fast after responding to the request. This behaviour will be more useful in cloud environments as \nwell.\n\n## 9. Security\n\n### 9.1 Authentication and Authorization\n\nThere are two ways to enable authentication and authorization in HTTP.\n\n1. Declarative approach\n2. Imperative approach\n\n#### 9.1.1 Declarative Approach\n\nThis is also known as the configuration-driven approach, which is used for simple use cases, where users have to \nprovide a set of configurations and do not need to be worried more about how authentication and authorization works. \nThe user does not have full control over the configuration-driven approach.\n\nThe service configurations are used to define the authentication and authorization configurations. Users can \nconfigure the configurations needed for different authentication schemes and configurations needed for \nauthorizations of each authentication scheme. Also, the configurations can be provided at the service level. \nThe priority will be given from bottom to top. Then, the auth handler creation and request \nauthentication/authorization is handled internally without user intervention. The requests that succeeded both \nauthentication and/or authorization phases according to the configurations will be passed to the business logic layer.\n\n##### 9.1.1.1 Listener - Basic Auth - File User Store\n\n```ballerina\n@http:ServiceConfig {\n    auth: [\n        {\n            fileUserStoreConfig: {},\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice / on new http:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n```ballerina\n# Config.toml\n\n[[ballerina.auth.users]]\nusername=\"alice\"\npassword=\"alice@123\"\nscopes=[\"developer\"]\n\n[[ballerina.auth.users]]\nusername=\"ldclakmal\"\npassword=\"ldclakmal@123\"\nscopes=[\"developer\", \"admin\"]\n\n[[ballerina.auth.users]]\nusername=\"eve\"\npassword=\"eve@123\"\n```\n\n##### 9.1.1.2. Listener - Basic Auth - LDAP User Store\n\n```ballerina\n@http:ServiceConfig {\n    auth: [\n        {\n            ldapUserStoreConfig: {\n                domainName: \"avix.lk\",\n                connectionUrl: \"ldap://localhost:389\",\n                connectionName: \"cn=admin,dc=avix,dc=lk\",\n                connectionPassword: \"avix123\",\n                userSearchBase: \"ou=Users,dc=avix,dc=lk\",\n                userEntryObjectClass: \"inetOrgPerson\",\n                userNameAttribute: \"uid\",\n                userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n                userNameListFilter: \"(objectClass=inetOrgPerson)\",\n                groupSearchBase: [\"ou=Groups,dc=avix,dc=lk\"],\n                groupEntryObjectClass: \"groupOfNames\",\n                groupNameAttribute: \"cn\",\n                groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n                groupNameListFilter: \"(objectClass=groupOfNames)\",\n                membershipAttribute: \"member\",\n                userRolesCacheEnabled: true,\n                connectionPoolingEnabled: false,\n                connectionTimeout: 5,\n                readTimeout: 60\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice / on new http:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n##### 9.1.1.3 Listener - JWT Auth\n\n```ballerina\n@http:ServiceConfig {\n    auth: [\n        {\n            jwtValidatorConfig: {\n                issuer: \"wso2\",\n                audience: \"ballerina\",\n                signatureConfig: {\n                    certFile: \"/path/to/public.crt\"\n                },\n                scopeKey: \"scp\"\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice / on new http:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n##### 9.1.1.4 Listener - OAuth2\n\n```ballerina\n@http:ServiceConfig {\n    auth: [\n        {\n            oauth2IntrospectionConfig: {\n                url: \"https://localhost:9445/oauth2/introspect\",\n                tokenTypeHint: \"access_token\",\n                scopeKey: \"scp\",\n                clientConfig: {\n                    customHeaders: {\"Authorization\": \"Basic YWRtaW46YWRtaW4=\"},\n                    secureSocket: {\n                        cert: \"/path/to/public.crt\"\n                    }\n                }\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice / on new http:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n##### 9.1.1.5 Client - Basic Auth\n\n```ballerina\nhttp:Client c = check new (\"https://localhost:9090\",\n    auth = {\n        username: \"tom\",\n        password: \"123\"\n    }\n);\n\npublic function main() returns error? {\n    http:Request req = new;\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n##### 9.1.1.6 Client - Bearer Token Auth\n\n```ballerina\nhttp:Client c = check new (\"https://localhost:9090\",\n    auth = {\n        token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiw\" +\n               \"ibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2Q\" +\n               \"T4fwpMeJf36POk6yJV_adQssw5c\"\n    }\n);\n\npublic function main() returns error? {\n    http:Request req = new;\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n##### 9.1.1.7 Client - Self-Signed JWT\n\n```ballerina\nhttp:Client c = check new (\"https://localhost:9090\",\n    auth = {\n        username: \"ballerina\",\n        issuer: \"wso2\",\n        audience: [\"ballerina\", \"ballerina.org\", \"ballerina.io\"],\n        keyId: \"5a0b754-895f-4279-8843-b745e11a57e9\",\n        jwtId: \"JlbmMiOiJBMTI4Q0JDLUhTMjU2In\",\n        customClaims: {\"scp\": \"admin\"},\n        expTime: 3600,\n        signatureConfig: {\n            config: {\n                keyFile: \"/path/to/private.key\"\n            }\n        }\n    }\n);\n\npublic function main() returns error? {\n    http:Request req = new;\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n##### 9.1.1.8 Client - Bearer Token OAuth2\n\n```ballerina\nhttp:Client c = check new (\"https://localhost:9090\",\n    auth = {\n        token: \"56ede317-4511-44b4-8579-a08f094ee8c5\"\n    }\n);\n\npublic function main() returns error? {\n    http:Request req = new;\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n##### 9.1.1.9 Client - Grant Types OAuth2\n\n```ballerina\nhttp:OAuth2ClientCredentialsGrantConfig config = {\n    tokenUrl: \"https://localhost:8080/oauth2/token/authorize\",\n    clientId: \"3MVG9YDQS5WtC11paU2WcQjBB3L5w4gz52uriT8ksZ3nUVjKvrfQMrU4uvZohTftxS\",\n    clientSecret: \"9205371918321623741\"\n};\n\nhttp:Client c = check new (\"https://localhost:9090\", auth = config);\n\npublic function main() returns error? {\n    http:Request req = new;\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n#### 9.1.2 Imperative Approach\n\nThis is also known as the code-driven approach, which is used for advanced use cases, where users need to be \nworried more about how authentication and authorization work and need to have further customizations. The user has \nfull control of the code-driven approach. The handler creation and authentication/authorization calls are made by \nthe user at the business logic layer.\n\n##### 9.1.2.1 Listener - Basic Auth - File User Store\n\n```ballerina\nhttp:FileUserStoreConfig config = {};\nhttp:ListenerFileUserStoreBasicAuthHandler handler = new (config);\n\nservice /foo on new http:Listener(9090) {\n    resource function post bar(@http:Header string Authorization) returns string|http:Unauthorized|http:Forbidden {\n        auth:UserDetails|http:Unauthorized authn = handler.authenticate(Authorization);\n        if authn is http:Unauthorized {\n            return authn;\n        }\n        http:Forbidden? authz = handler.authorize(<auth:UserDetails>authn, \"admin\");\n        if authz is http:Forbidden {\n            return authz;\n        }\n        // business logic\n    }\n}\n```\n\n```ballerina\n# Config.toml\n[ballerina.observe]\nenabled=true\nprovider=\"noop\"\n\n[[auth.users]]\nusername=\"admin\"\npassword=\"123\"\nscopes=[\"write\", \"update\"]\n```\n\n##### 9.1.2.2 Listener - Basic Auth - LDAP User Store\n\n```ballerina\nhttp:LdapUserStoreConfig config = {\n    domainName: \"avix.lk\",\n    connectionUrl: \"ldap://localhost:389\",\n    connectionName: \"cn=admin,dc=avix,dc=lk\",\n    connectionPassword: \"avix123\",\n    userSearchBase: \"ou=Users,dc=avix,dc=lk\",\n    userEntryObjectClass: \"inetOrgPerson\",\n    userNameAttribute: \"uid\",\n    userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n    userNameListFilter: \"(objectClass=inetOrgPerson)\",\n    groupSearchBase: [\"ou=Groups,dc=avix,dc=lk\"],\n    groupEntryObjectClass: \"groupOfNames\",\n    groupNameAttribute: \"cn\",\n    groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n    groupNameListFilter: \"(objectClass=groupOfNames)\",\n    membershipAttribute: \"member\",\n    userRolesCacheEnabled: true,\n    connectionPoolingEnabled: false,\n    connectionTimeout: 5,\n    readTimeout: 60\n};\nhttp:ListenerLdapUserStoreBasicAuthHandler handler = new (config);\n\nservice /foo on new http:Listener(9090) {\n    resource function post bar(@http:Header string Authorization) returns string|http:Unauthorized|http:Forbidden {\n        auth:UserDetails|http:Unauthorized authn = handler->authenticate(Authorization);\n        if authn is http:Unauthorized {\n            return authn;\n        }\n        http:Forbidden? authz = handler->authorize(<auth:UserDetails>authn, \"admin\");\n        if authz is http:Forbidden {\n            return authz;\n        }\n        // business logic\n    }\n}\n```\n\n##### 9.1.2.3 Listener - JWT Auth\n\n```ballerina\nhttp:JwtValidatorConfig config = {\n    issuer: \"ballerina\",\n    audience: [\"wso2\"],\n    signatureConfig: {\n        jwksConfig: {\n            url: \"https://localhost:8080/jwks\"\n        }\n    }\n};\nhttp:ListenerJwtAuthHandler handler = new (config);\n\nservice /foo on new http:Listener(9090) {\n    resource function post bar(@http:Header string Authorization) returns string|http:Unauthorized|http:Forbidden {\n        jwt:Payload|http:Unauthorized authn = handler.authenticate(Authorization);\n        if authn is http:Unauthorized {\n            return authn;\n        }\n        http:Forbidden? authz = handler.authorize(<jwt:Payload>authn, \"admin\");\n        if authz is http:Forbidden {\n            return authz;\n        }\n        // business logic\n    }\n}\n```\n\n##### 9.1.2.4 Listener - OAuth2\n\n```ballerina\nhttp:OAuth2IntrospectionConfig config = {\n    url: \"https://localhost:8080/oauth2/introspect\",\n    tokenTypeHint: \"access_token\"\n};\nhttp:ListenerOAuth2Handler handler = new (config);\n\nservice /foo on new http:Listener(9090) {\n    resource function post bar(@http:Header string authorization) returns string|http:Unauthorized|http:Forbidden {\n        oauth2:IntrospectionResponse|http:Unauthorized|http:Forbidden auth = handler->authorize(authorization, \"admin\");\n        if auth is http:Unauthorized || auth is http:Forbidden {\n            return auth;\n        }\n        // business logic\n    }\n}\n```\n\n##### 9.1.2.5 Client - Basic Auth\n\n```ballerina\nhttp:CredentialsConfig config = {\n    username: \"tom\",\n    password: \"123\"\n};\nhttp:ClientBasicAuthHandler handler = new (config);\n\nhttp:Client c = check new (\"https://localhost:9090\");\n\npublic function main() returns error? {\n    http:Request req = new;\n    req = check handler.enrich(req);\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n##### 9.1.2.6 Client - Bearer Token Auth\n\n```ballerina\nhttp:BearerTokenConfig config = {\n    token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFt\" +\n           \"ZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf3\" +\n           \"6POk6yJV_adQssw5c\"\n};\nhttp:ClientBearerTokenAuthHandler handler = new (config);\n\nhttp:Client c = check new (\"https://localhost:9090\");\n\npublic function main() returns error? {\n    http:Request req = new;\n    req = check handler.enrich(req);\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n##### 9.1.2.7. Client - Self-Signed JWT\n\n```ballerina\nhttp:JwtIssuerConfig config = {\n    username: \"admin\",\n    issuer: \"ballerina\",\n    audience: [\"wso2\"],\n    signatureConfig: {\n        config: {\n            keyFile: \"/path/to/private.key\",\n            keyPassword: \"password\"\n        }\n    }\n};\nhttp:ClientSelfSignedJwtAuthHandler handler = new (config);\n\nhttp:Client c = check new (\"https://localhost:9090\");\n\npublic function main() returns error? {\n    http:Request req = new;\n    req = check handler.enrich(req);\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n##### 9.1.2.8. Client - Bearer Token OAuth2\n\n```ballerina\nhttp:BearerTokenConfig config = {\n    token: \"JhbGciOiJIIiwiaWF0IjUzI1NiIsInR5cCI6IkpXVCJ9WIiOiIxMjM0NTY3ODkwI\"\n};\nhttp:ClientBearerTokenAuthHandler handler = new (config);\n\nhttp:Client c = check new (\"https://localhost:9090\");\n\npublic function main() returns error? {\n    http:Request req = new;\n    req = check handler.enrich(req);\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n##### 9.1.2.9. Client - Grant Types OAuth2\n\n```ballerina\nhttp:OAuth2ClientCredentialsGrantConfig config = {\n    tokenUrl: \"https://localhost:8080/oauth2/token/authorize\",\n    clientId: \"3MVG9YDQS5WtC11paU2WcQjBB3L5w4gz52uriT8ksZ3nUVjKvrfQMrU4uvZohTftxS\",\n    clientSecret: \"9205371918321623741\"\n};\nhttp:ClientOAuth2Handler handler = new (config);\n\nhttp:Client c = check new (\"https://localhost:9090\");\n\npublic function main() returns error? {\n    http:Request req = new;\n    req = check handler->enrich(req);\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n### 9.2 SSL/TLS and Mutual SSL\n\nThe HTTPS listener could connect to or interact with an HTTPS client. The `http:ListenerSecureSocket` configuration\nof the listener exposes the HTTPS connection related configs.\n\n#### 9.2.1 Listener - SSL/TLS\n\n```ballerina\nlistener http:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"/path/to/public.crt\",\n            keyFile: \"/path/to/private.key\"\n        }\n    }\n);\n\nservice / on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n#### 9.2.2 Listener - Mutual SSL\n\nThe mutual SSL support which is a certificate-based authentication process in which two parties \n(the client and server) authenticate each other by verifying the digital certificates. It ensures that both \nparties are assured of each other’s identity.\n\n```ballerina\nlistener http:Listener securedEP = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"/path/to/public.crt\",\n            keyFile: \"/path/to/private.key\"\n        },\n\n        mutualSsl: {\n            verifyClient: http:REQUIRE,\n            cert: \"/path/to/public.crt\"\n        },\n\n        protocol: {\n            name: http:TLS,\n            versions: [\"TLSv1.2\", \"TLSv1.1\"]\n        },\n\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\nservice / on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n#### 9.2.3 Client - SSL/TLS\n\n```ballerina\nhttp:Client securedEP = check new(\"https://localhost:9090\",\n    secureSocket = {\n        cert: \"/path/to/public.crt\"\n    }\n);\n\npublic function main() returns error? {\n    http:Request req = new;\n    string response = check securedEP->post(\"/foo/bar\", req);\n    io:println(response);\n}\n```\n\n#### 9.2.4 Client - Mutual SSL\n\n```ballerina\nhttp:Client securedEP = check new(\"https://localhost:9090\",\n    secureSocket = {\n        key: {\n            certFile: \"/path/to/public.crt\",\n            keyFile: \"/path/to/private.key\"\n        },\n        cert: \"/path/to/public.crt\",\n        protocol: {\n            name: http:TLS\n        },\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n\n    }\n);\npublic function main() returns error? {\n    http:Request req = new;\n    string response = check securedEP->post(\"/foo/bar\", req);\n    io:println(response);\n}\n```\n\n## 10. Protocol upgrade\n### 10.1. HTTP/2\nThe version 2 of HTTP protocol is supported in both Listener and Client space which could be configured through the \nrespective configuration.\n\n```ballerina\n// Listener declaration\nlistener http:Listener http2ServiceEP = new (7090, config = {httpVersion: \"2.0\"});\n\n// Client declaration\nhttp:Client clientEP = check new (\"http://localhost:7090\", {httpVersion: \"2.0\"});\n```\n\nThere are few API level additions when it comes to the HTTP/2 design such as Push promise and promise response.\n#### 10.1.1. Push Promise and Promise Response\nPush Promise and Promise response are the only application level new semantics which are introduced by HTTP2.\n\nOther protocol changes such as streams, messages, frames, request prioritization, flow control, header compression, \netc. are all lower level changes that can be handled by the HTTP listener seamlessly from the user.\n","codeSnippets":"[[1868441267,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ListenerConfiguration</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> host </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"0.0.0.0\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ListenerHttp1Settings http1Settings </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ListenerSecureSocket</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> secureSocket </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    HttpVersion httpVersion </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> HTTP_2_0;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    decimal</span><span style=\\\"color:#24292E\\\"> timeout </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_LISTENER_TIMEOUT;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">? server </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    RequestLimitConfigs requestLimits </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> http2InitialWindowSize </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 65535</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    decimal</span><span style=\\\"color:#24292E\\\"> minIdleTimeInStaleState </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 300</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    decimal</span><span style=\\\"color:#24292E\\\"> timeBetweenStaleEviction </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 30</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1460323093,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Listener object constructor</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener serviceListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Service attaches to the Listener</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /foo/bar</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> serviceListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-48206290,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Listener object constructor</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener serviceListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    error?</span><span style=\\\"color:#24292E\\\"> err1 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> serviceListener.</span><span style=\\\"color:#6F42C1\\\">attach</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">s</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    error?</span><span style=\\\"color:#24292E\\\"> err2 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> serviceListener.</span><span style=\\\"color:#6F42C1\\\">start</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    //...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    error?</span><span style=\\\"color:#24292E\\\"> err3 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> serviceListener.</span><span style=\\\"color:#6F42C1\\\">gracefulStop</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Service s </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-876786931,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Service</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-783554227,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /hello</span><span style=\\\"color:#24292E\\\">\\\\-world </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> foo</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#032F62\\\"> \\\"hello-world\\\"</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> foo</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1727812377,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /foo/bar</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">  resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">      return</span><span style=\\\"color:#032F62\\\"> \\\"hello world\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1525147152,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> class</span><span style=\\\"color:#6F42C1\\\"> SClass</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Service;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">       return</span><span style=\\\"color:#032F62\\\"> \\\"hello world\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener serviceListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Service httpService </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> SClass</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   error?</span><span style=\\\"color:#24292E\\\"> err1 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> serviceListener.</span><span style=\\\"color:#6F42C1\\\">attach</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">httpService</span><span style=\\\"color:#24292E\\\">, [</span><span style=\\\"color:#032F62\\\">\\\"foo\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"bar\\\"</span><span style=\\\"color:#24292E\\\">]);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   error?</span><span style=\\\"color:#24292E\\\"> err2 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> serviceListener.</span><span style=\\\"color:#6F42C1\\\">'start</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-95083219,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener serviceListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Service httpService </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {} </span><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">       return</span><span style=\\\"color:#032F62\\\"> \\\"hello world\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   error?</span><span style=\\\"color:#24292E\\\"> err1 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> serviceListener.</span><span style=\\\"color:#6F42C1\\\">attach</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">httpService</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   error?</span><span style=\\\"color:#24292E\\\"> err2 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> serviceListener.</span><span style=\\\"color:#6F42C1\\\">start</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[953540456,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {basePath</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/v1\\\"</span><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> AlbumService</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ServiceContract;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        summary</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Get all albums\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> albums</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Album[];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        summary</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Add a new album\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> albums</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Example</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                value: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    title: </span><span style=\\\"color:#032F62\\\">\\\"Blue Train\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    artist: </span><span style=\\\"color:#032F62\\\">\\\"John Coltrane\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            } </span><span style=\\\"color:#E36209\\\">Album</span><span style=\\\"color:#E36209\\\"> album</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Album</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ErrorPayloadBadRequest;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-339689505,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> AlbumService </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> albums</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Album[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> albums.</span><span style=\\\"color:#6F42C1\\\">toArray</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> albums</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Album</span><span style=\\\"color:#E36209\\\"> album</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Album</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ErrorPayloadBadRequest {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        albums.</span><span style=\\\"color:#6F42C1\\\">add</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">album</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> album;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[55916031,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'default </span><span style=\\\"color:#6F42C1\\\">NAME_TEMPLATE</span><span style=\\\"color:#24292E\\\"> () {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-789539815,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> hello</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1617837507,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#24292E\\\"> .() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[951333928,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> hello</span><span style=\\\"color:#24292E\\\">\\\\-world() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1759494997,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> foo</span><span style=\\\"color:#24292E\\\">/bar/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> baz</span><span style=\\\"color:#24292E\\\">]/qux() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // baz is the path param</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> data</span><span style=\\\"color:#24292E\\\">/[</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> age</span><span style=\\\"color:#24292E\\\">]/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">]/[</span><span style=\\\"color:#005CC5\\\">boolean</span><span style=\\\"color:#E36209\\\"> status</span><span style=\\\"color:#24292E\\\">]/[</span><span style=\\\"color:#005CC5\\\">float</span><span style=\\\"color:#E36209\\\"> weight</span><span style=\\\"color:#24292E\\\">]() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> json</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   int</span><span style=\\\"color:#24292E\\\"> balAge </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> age </span><span style=\\\"color:#D73A49\\\">+</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   float</span><span style=\\\"color:#24292E\\\"> balWeight </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> weight </span><span style=\\\"color:#D73A49\\\">+</span><span style=\\\"color:#005CC5\\\"> 2.95</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   string</span><span style=\\\"color:#24292E\\\"> balName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">+</span><span style=\\\"color:#032F62\\\"> \\\" lang\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   if</span><span style=\\\"color:#24292E\\\"> status {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       balName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   json</span><span style=\\\"color:#24292E\\\"> responseJson </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> { Name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">name, Age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">balAge, Weight</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">balWeight, Status</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">status, Lang</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> balName};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   return</span><span style=\\\"color:#24292E\\\"> responseJson;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1816380900,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> foo</span><span style=\\\"color:#24292E\\\">/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#E36209\\\"> bar</span><span style=\\\"color:#24292E\\\">]() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> json</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   json</span><span style=\\\"color:#24292E\\\"> responseJson </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#032F62\\\">\\\"echo\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> bar[</span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">]};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   return</span><span style=\\\"color:#24292E\\\"> responseJson;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1183626601,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'default [</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#E36209\\\"> s</span><span style=\\\"color:#24292E\\\">]() {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-63629957,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> XXX</span><span style=\\\"color:#6F42C1\\\"> NAME_TEMPLATE</span><span style=\\\"color:#24292E\\\"> ([http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Caller hc], [http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req], (</span><span style=\\\"color:#005CC5\\\">anydata</span><span style=\\\"color:#E36209\\\"> queryParam</span><span style=\\\"color:#24292E\\\">)?, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    (@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#E36209\\\"> payload</span><span style=\\\"color:#24292E\\\">)</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">, (@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#E36209\\\"> header</span><span style=\\\"color:#24292E\\\">)</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">, (</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Header headers)</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> ) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1529012100,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">xml</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">float</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">decimal</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">boolean</span><span style=\\\"color:#D73A49\\\">|map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">>|table&#x3C;map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">>>|</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">>|table&#x3C;map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">>></span><span style=\\\"color:#24292E\\\">)[]</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">mime</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Entity[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">stream&#x3C;byte[], io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?</span><span style=\\\"color:#D73A49\\\">>|</span><span style=\\\"color:#24292E\\\">()</span></span></code></pre>\"],[-2114921255,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> foo</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">CallerInfo</span><span style=\\\"color:#24292E\\\"> {respondType:Person}  </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Caller hc) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Person p </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    error?</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> hc</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">respond</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">p</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-14702937,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> person</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-259605871,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> BasicType</span><span style=\\\"color:#005CC5\\\"> boolean</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">float</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">decimal</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|map&#x3C;</span><span style=\\\"color:#005CC5\\\">anydata</span><span style=\\\"color:#D73A49\\\">>|enum</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> QueryParamType</span><span style=\\\"color:#24292E\\\"> ()</span><span style=\\\"color:#D73A49\\\">|BasicType|BasicType</span><span style=\\\"color:#24292E\\\">[];</span></span></code></pre>\"],[1856893491,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> hello</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> bar</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[712253990,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> queryParamCheck</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Query</span><span style=\\\"color:#D73A49\\\"> map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#E36209\\\"> q</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> q; </span><span style=\\\"color:#6A737D\\\">// q is payload param</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1424037072,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> price</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 10</span><span style=\\\"color:#24292E\\\">) { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[629558785,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    treatNilableAsOptional </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /queryparamservice</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> queryvalues</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> foo</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> bar</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> json</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        json</span><span style=\\\"color:#24292E\\\"> responseJson </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> { value1</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> foo, value2</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> bar};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> responseJson;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-937062929,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> hello</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#E36209\\\"> payload</span><span style=\\\"color:#24292E\\\">) { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-994670963,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> album</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">xml</span><span style=\\\"color:#E36209\\\"> payload</span><span style=\\\"color:#24292E\\\">) { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1497821733,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> BasicType</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">float</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">decimal</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">boolean</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> HeaderParamType</span><span style=\\\"color:#24292E\\\"> ()</span><span style=\\\"color:#D73A49\\\">|BasicType|BasicType</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\"> BasicType</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#24292E\\\">; </span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1384614968,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">//Single header value extraction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> album</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#E36209\\\"> referer</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">//Multiple header value extraction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> product</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#24292E\\\"> {name: </span><span style=\\\"color:#032F62\\\">\\\"Accept\\\"</span><span style=\\\"color:#24292E\\\">} </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[] </span><span style=\\\"color:#E36209\\\">accept</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[465981092,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> RateLimitHeaders</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> x\\\\</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">rate\\\\</span><span style=\\\"color:#D73A49\\\">-limit</span><span style=\\\"color:#24292E\\\">\\\\</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> x\\\\</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">rate\\\\</span><span style=\\\"color:#D73A49\\\">-limit</span><span style=\\\"color:#24292E\\\">\\\\</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">remaining;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">[] x\\\\</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">rate\\\\</span><span style=\\\"color:#D73A49\\\">-limit</span><span style=\\\"color:#24292E\\\">\\\\</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">types;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">//Populate selected headers to a record</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> price</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#E36209\\\"> RateLimitHeaders</span><span style=\\\"color:#E36209\\\"> rateLimitHeaders</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> RateLimitHeadersWithName</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#24292E\\\"> {name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"X-RATE-LIMIT-ID\\\"</span><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> rateLimitId;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#24292E\\\"> {name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"X-RATE-LIMIT-REMAINING\\\"</span><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> rateLimitRemaining;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#24292E\\\"> {name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"X-RATE-LIMIT-TYPES\\\"</span><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">[] rateLimitTypes;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">//Populate selected headers to a record. The header name is defined in the field level annotation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> price</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#E36209\\\"> RateLimitHeadersWithName</span><span style=\\\"color:#E36209\\\"> rateLimitHeaders</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1449930930,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> price</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Headers headers) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#D73A49\\\">|http:</span><span style=\\\"color:#24292E\\\">HeaderNotFoundError referer </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> headers.</span><span style=\\\"color:#6F42C1\\\">getHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Referer\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|http:</span><span style=\\\"color:#24292E\\\">HeaderNotFoundError accept </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> headers.</span><span style=\\\"color:#6F42C1\\\">getHeaders</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Accept\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">[] keys </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> headers.</span><span style=\\\"color:#6F42C1\\\">getHeaderNames</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1824533524,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    treatNilableAsOptional </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /headerparamservice</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> HeaderBindingIdealEP {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> headers</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">foo</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> json</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1106405382,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> XXX</span><span style=\\\"color:#6F42C1\\\"> NAME_TEMPLATE</span><span style=\\\"color:#24292E\\\"> () </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> @http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Payload anydata</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Response</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:StatusCodeResponse</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">stream&#x3C;http:SseEvent, </span><span style=\\\"color:#D73A49\\\">error?>|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-577217669,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> @http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Payload {mediaType</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\">\\\"text/id+plain\\\"</span><span style=\\\"color:#24292E\\\">} </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#032F62\\\"> \\\"hello world\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1455385287,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> PersonCreated</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Created;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |</span><span style=\\\"color:#24292E\\\">} body;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> PersonCreated {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   Person person </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">name};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   return</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       mediaType</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"application/person+json\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       headers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">           \\\"X-Server\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"myServer\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       body</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> person</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2069163237,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Ok</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   string</span><span style=\\\"color:#24292E\\\"> mediaType;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> headers?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   anydata</span><span style=\\\"color:#24292E\\\"> body?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok ok </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> { body</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"hello world\\\"</span><span style=\\\"color:#24292E\\\">, headers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> { xtest: </span><span style=\\\"color:#032F62\\\">\\\"foo\\\"</span><span style=\\\"color:#24292E\\\">} };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   return</span><span style=\\\"color:#24292E\\\"> ok;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-954906684,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> person</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#E36209\\\"> Person</span><span style=\\\"color:#E36209\\\"> p</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> p.age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#032F62\\\"> `Age is: ${</span><span style=\\\"color:#24292E\\\">age</span><span style=\\\"color:#032F62\\\">}`</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-889081446,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> fruit</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">colour</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Caller caller) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    if</span><span style=\\\"color:#24292E\\\"> colour </span><span style=\\\"color:#D73A49\\\">==</span><span style=\\\"color:#032F62\\\"> \\\"red\\\"</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        error?</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> caller</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">respond</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Sending apple\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\">; </span><span style=\\\"color:#6A737D\\\">// ending the flow, so not 202 response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    error?</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> caller</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">respond</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Sending orange\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1448940462,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> fruit</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">colour</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Caller caller) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    if</span><span style=\\\"color:#24292E\\\"> colour </span><span style=\\\"color:#D73A49\\\">==</span><span style=\\\"color:#032F62\\\"> \\\"red\\\"</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        error?</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> caller</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">respond</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Sending apple\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\">; </span><span style=\\\"color:#6A737D\\\">// ending the flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\">; </span><span style=\\\"color:#6A737D\\\">// 500 internal Server Error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-17129659,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/openapi;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    embed</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /hello</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello world\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2056567989,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">curl </span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">v localhost</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">/hello -X OPTIONS </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">   Trying </span><span style=\\\"color:#005CC5\\\">127.0</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#005CC5\\\">0.1</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\"> TCP_NODELAY set</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\"> Connected to </span><span style=\\\"color:#6F42C1\\\">localhost </span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">127.0</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#005CC5\\\">0.1</span><span style=\\\"color:#24292E\\\">) port </span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\"> (#</span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> OPTIONS </span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">hello HTTP</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#005CC5\\\">1.1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> Host</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> localhost:</span><span style=\\\"color:#005CC5\\\">9090</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> User</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">Agent</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> curl/</span><span style=\\\"color:#005CC5\\\">7.68</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#005CC5\\\">0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> Accept</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> */*</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> HTTP</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#005CC5\\\">1.1</span><span style=\\\"color:#005CC5\\\"> 204</span><span style=\\\"color:#24292E\\\"> No Content</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> allow</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> GET, OPTIONS</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> link</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> &#x3C;/hello/openapi-doc-dygixywsw</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">;rel</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"service-desc\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">&#x3C;/</span><span style=\\\"color:#24292E\\\">hello</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">swagger</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">ui</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">dygixywsw</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">;rel</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"swagger-ui\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> server</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> ballerina</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> date</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> Thu, </span><span style=\\\"color:#005CC5\\\">13</span><span style=\\\"color:#24292E\\\"> Jun </span><span style=\\\"color:#005CC5\\\">2024</span><span style=\\\"color:#005CC5\\\"> 20</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\">04</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">11</span><span style=\\\"color:#24292E\\\"> +</span><span style=\\\"color:#005CC5\\\">0530</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\"> Connection </span><span style=\\\"color:#6A737D\\\">#0 to host localhost left intact</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\"> Closing connection </span><span style=\\\"color:#005CC5\\\">0</span></span></code></pre>\"],[287818202,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">curl </span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">v localhost</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">/hello/openapi-doc-dygixywsw</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">   Trying </span><span style=\\\"color:#005CC5\\\">127.0</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#005CC5\\\">0.1</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\"> TCP_NODELAY set</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\"> Connected to </span><span style=\\\"color:#6F42C1\\\">localhost </span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">127.0</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#005CC5\\\">0.1</span><span style=\\\"color:#24292E\\\">) port </span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\"> (#</span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> GET </span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">hello</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">openapi</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">doc</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">dygixywsw HTTP</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#005CC5\\\">1.1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> Host</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> localhost:</span><span style=\\\"color:#005CC5\\\">9090</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> User</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">Agent</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> curl/</span><span style=\\\"color:#005CC5\\\">7.68</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#005CC5\\\">0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> Accept</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> */*</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\"> Mark bundle </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> not supporting multiuse</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> HTTP</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#005CC5\\\">1.1</span><span style=\\\"color:#005CC5\\\"> 200</span><span style=\\\"color:#24292E\\\"> OK</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> content</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">type</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> application/json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> content</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">length</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 675</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> server</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> ballerina</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> date</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> Thu, </span><span style=\\\"color:#005CC5\\\">13</span><span style=\\\"color:#24292E\\\"> Jun </span><span style=\\\"color:#005CC5\\\">2024</span><span style=\\\"color:#005CC5\\\"> 20</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\">05</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">03</span><span style=\\\"color:#24292E\\\"> +</span><span style=\\\"color:#005CC5\\\">0530</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">  \\\"openapi\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"3.0.1\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">  \\\"info\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">    \\\"title\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"Hello\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">    \\\"version\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"0.1.0\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">  \\\"servers\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> [ {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">    \\\"url\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"{server}:{port}/hello\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">    \\\"variables\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">      \\\"server\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"default\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"http://localhost\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">      \\\"port\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"default\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"9090\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  } ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">  \\\"paths\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">    \\\"/greeting\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">      \\\"get\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"operationId\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"getGreeting\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"responses\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">          \\\"200\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">            \\\"description\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"Ok\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">            \\\"content\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">              \\\"text/plain\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                \\\"schema\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                  \\\"type\\\"</span><span style=\\\"color:#D73A49\\\"> :</span><span style=\\\"color:#032F62\\\"> \\\"string\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">              }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1288861369,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">, { httpVersion</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"2.0\\\"</span><span style=\\\"color:#24292E\\\"> });</span></span></code></pre>\"],[672067574,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ClientConfiguration</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> httpVersion </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> HTTP_2_0;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ClientHttp1Settings http1Settings </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ClientHttp2Settings http2Settings </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    decimal</span><span style=\\\"color:#24292E\\\"> timeout </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 60</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> forwarded </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"disable\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    FollowRedirects</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> followRedirects </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    PoolConfiguration</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> poolConfig </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    CacheConfig cache </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Compression compression </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> COMPRESSION_AUTO;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ClientAuthConfig</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> auth </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    CircuitBreakerConfig</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> circuitBreaker </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    RetryConfig</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> retryConfig </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    CookieConfig</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> cookieConfig </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ResponseLimitConfigs responseLimits </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ClientSecureSocket</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> secureSocket </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ProxyConfig</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> proxy </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> validation </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> true</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ClientHttp1Settings</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    KeepAlive keepAlive </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> KEEPALIVE_AUTO;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Chunking chunking </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> CHUNKING_AUTO;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ProxyConfig</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> proxy </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ClientHttp2Settings</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> http2PriorKnowledge </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> false</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> http2InitialWindowSize </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 65535</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[76372919,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        username</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> username,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        password</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> password</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            path</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> TRUSTSTORE_PATH,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            password</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ballerina\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[1038730136,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    cache</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        isShared</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[835519673,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    followRedirects</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxCount</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[792387274,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    retryConfig</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        interval</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        count</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        backOffFactor</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 0.5</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-812016556,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    circuitBreaker</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        rollingWindow</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            timeWindow</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 60</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            bucketSize</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 20</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            requestVolumeThreshold</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        failureThreshold</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 0.3</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        resetTime</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 2</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        statusCodes</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">500</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">501</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">502</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">503</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-991941276,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    cookieConfig</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        persistentCookieHandler</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> myPersistentStore </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-1907141494,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> LoadBalanceClientConfiguration</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">CommonClientConfiguration;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    TargetService[] targets </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    LoadBalancerRule</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> lbRule </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> failover </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> true</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">LoadBalanceClient clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    targets</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        { url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://localhost:8093/LBMock1\\\"</span><span style=\\\"color:#24292E\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        { url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://localhost:8093/LBMock2\\\"</span><span style=\\\"color:#24292E\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        { url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://localhost:8093/LBMock3\\\"</span><span style=\\\"color:#24292E\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    timeout</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 5</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[632696716,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> FailoverClientConfiguration</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">CommonClientConfiguration;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    TargetService[] targets </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\">[] failoverCodes </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">501</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">502</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">503</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">504</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    decimal</span><span style=\\\"color:#24292E\\\"> interval </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">FailoverClient foBackendEP00 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    timeout</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    failoverCodes</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">501</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">502</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">503</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    interval</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    targets</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        { url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://localhost:3467/inavalidEP\\\"</span><span style=\\\"color:#24292E\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        { url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://localhost:8080/echo00\\\"</span><span style=\\\"color:#24292E\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        { url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://localhost:8080/mockResource\\\"</span><span style=\\\"color:#24292E\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        { url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://localhost:8080/mockResource\\\"</span><span style=\\\"color:#24292E\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">)</span></span></code></pre>\"],[2008708081,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">final</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">StatusCodeClient albumClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> AlbumsOk</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Album[] body;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Status code response binding with generic type </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> response1 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> albumClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#24292E\\\">v1</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">albums;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Status code response binding with specific body type</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    AlbumsOk</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> response2 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> albumClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#24292E\\\">v1</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">albums;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1406868637,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> RequestMessage</span><span style=\\\"color:#D73A49\\\"> Request|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">xml</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">float</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">decimal</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">boolean</span><span style=\\\"color:#D73A49\\\">|map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">>|table&#x3C;map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">>>|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                           (</span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">>|table&#x3C;map&#x3C;</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">>></span><span style=\\\"color:#24292E\\\">)[]</span><span style=\\\"color:#D73A49\\\">|mime:</span><span style=\\\"color:#24292E\\\">Entity[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">stream&#x3C;byte[], io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?</span><span style=\\\"color:#D73A49\\\">>|</span><span style=\\\"color:#24292E\\\">();</span></span></code></pre>\"],[882076576,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The post() function can be used to send HTTP POST requests to HTTP endpoints.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The put() function can be used to send HTTP PUT requests to HTTP endpoints.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> put</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The patch() function can be used to send HTTP PATCH requests to HTTP endpoints.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> patch</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The delete() function can be used to send HTTP DELETE requests to HTTP endpoints.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> delete</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? headers </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span></code></pre>\"],[-833924571,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client httpClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://www.example.com\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/some/endpoint\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"foo\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 25</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       address</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"area 51\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">   headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">       \\\"my-header\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"my-header-value\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">   mediaType</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"application/json\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-1752131452,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The head() function can be used to send HTTP HEAD requests to HTTP endpoints.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> head</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> ()) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Response</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The get() function can be used to send HTTP GET requests to HTTP endpoints.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\">( </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        returns</span><span style=\\\"color:#24292E\\\">  targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The options() function can be used to send HTTP OPTIONS requests to HTTP endpoints.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> options</span><span style=\\\"color:#24292E\\\">( </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        returns</span><span style=\\\"color:#24292E\\\">  targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span></code></pre>\"],[1470774998,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client httpClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://www.example.com\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> headers </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">   \\\"my-header\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"my-header-value\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">   \\\"header-2\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"foo\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"bar\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> resp </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/data\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[268284620,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Defines the path parameter types.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> PathParamType</span><span style=\\\"color:#005CC5\\\"> boolean</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">float</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">decimal</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The post resource method can be used to send HTTP POST requests to HTTP endpoints.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#E36209\\\">PathParamType</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">QueryParams params) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The put resource method can be used to send HTTP PUT requests to HTTP endpoints.            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> put</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#E36209\\\">PathParamType</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">QueryParams params) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The patch resource method can be used to send HTTP PATCH requests to HTTP endpoints.              </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> patch</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#E36209\\\">PathParamType</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">QueryParams params) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The delete resource method can be used to send HTTP DELETE requests to HTTP endpoints.              </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> delete</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#E36209\\\">PathParamType</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? headers </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">QueryParams params) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The head resource method can be used to send HTTP HEAD requests to HTTP endpoints.              </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> head</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#E36209\\\">PathParamType</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">QueryParams params)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            returns</span><span style=\\\"color:#24292E\\\"> Response</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError; </span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The get resource method can be used to send HTTP GET requests to HTTP endpoints.              </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#E36209\\\">PathParamType</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            *</span><span style=\\\"color:#24292E\\\">QueryParams params) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The options resource method can be used to send HTTP OPTIONS requests to HTTP endpoints.              </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> options</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#E36209\\\">PathParamType</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            *</span><span style=\\\"color:#24292E\\\">QueryParams params) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span></code></pre>\"],[-1135325961,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Making a GET request</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> 'from </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"2022-10-31\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> to </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"2023-10-29\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client httpClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://www.example.com\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> resp </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#24292E\\\">date</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">['from]</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">[to];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Same as the following :</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// string response = check httpClient->get(\\\"/date/2022-10-31/2023-10-29\\\");</span></span></code></pre>\"],[1620178941,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Making a POST request</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> profession </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"chemist\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#24292E\\\"> payload </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Jesse Pinkman\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 25</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#24292E\\\">addPerson</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">[profession].</span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">payload</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Same as the following :</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// string response = check httpClient->post(\\\"/addPerson/chemist\\\", payload);</span></span></code></pre>\"],[1894614889,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Making a GET request</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> resp </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#6F42C1\\\">date</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 123</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Same as the following :</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// string response = check httpClient->get(\\\"/date?id=123\\\");</span></span></code></pre>\"],[-922617705,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Making a POST request</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#24292E\\\"> payload </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Jesse Pinkman\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 25</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#24292E\\\">addPerson.</span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">payload</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">profession</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"chemist\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 123</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Same as the following :</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// string response = check httpClient->post(\\\"/addPerson?profession=chemist&#x26;id=123\\\", payload);</span></span></code></pre>\"],[-1631287207,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Making a GET request</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> headers </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">   \\\"my-header\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"my-header-value\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">   \\\"header-2\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"foo\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"bar\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> resp </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#6F42C1\\\">date</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Same as the following :</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// string response = check httpClient->get(\\\"/date\\\", headers);</span></span></code></pre>\"],[1366848647,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Making a POST request</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#24292E\\\"> payload </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Jesse Pinkman\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 25</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> headers </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> { </span><span style=\\\"color:#032F62\\\">\\\"my-header\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"my-header-value\\\"</span><span style=\\\"color:#24292E\\\"> };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#24292E\\\">addPerson.</span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">payload</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"application/json\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Same as the following :</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// string response = check httpClient->post(\\\"/addPerson\\\", payload, headers, \\\"application/json\\\");</span></span></code></pre>\"],[-31830982,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Invokes an HTTP call with the specified HTTP verb.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> httpVerb</span><span style=\\\"color:#24292E\\\">,  </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? mediaType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), TargetType targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The forward() function can be used to invoke an HTTP call with inbound request's HTTP verb</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> forward</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">Request</span><span style=\\\"color:#E36209\\\"> request</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">TargetType</span><span style=\\\"color:#E36209\\\"> targetType</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        returns</span><span style=\\\"color:#24292E\\\">  targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span></code></pre>\"],[14222546,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">Submits an HTTP request to a </span><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> with the specified HTTP verb.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> The submit() functi</span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> does not give out a http:Response </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> the result.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> Rather it </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> an http:HttpFuture which can be used to </span><span style=\\\"color:#D73A49\\\">do</span><span style=\\\"color:#24292E\\\"> further interactions with the endpoint.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">emote </span><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> submit(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> httpVerb</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">RequestMessage</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   returns</span><span style=\\\"color:#24292E\\\"> HttpFuture</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> Passes the request to actual network call.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">emote </span><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> getResponse(</span><span style=\\\"color:#E36209\\\">HttpFuture</span><span style=\\\"color:#E36209\\\"> httpFuture</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Response</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> Passes the request to actual network call.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">emote </span><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> hasPromise(</span><span style=\\\"color:#E36209\\\">HttpFuture</span><span style=\\\"color:#E36209\\\"> httpFuture</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> boolean</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> Passes the request to actual network call.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">emote </span><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> getNextPromise(</span><span style=\\\"color:#E36209\\\">HttpFuture</span><span style=\\\"color:#E36209\\\"> httpFuture</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> PushPromise</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> Passes the request to an actual network call.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">emote </span><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> getPromisedResponse(</span><span style=\\\"color:#E36209\\\">PushPromise</span><span style=\\\"color:#E36209\\\"> promise</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Response</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> Passes the request to actual network call.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">emote </span><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> rejectPromise(</span><span style=\\\"color:#E36209\\\">PushPromise</span><span style=\\\"color:#E36209\\\"> promise</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[1107558879,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client httpClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://person.free.beeceptor.com\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#24292E\\\"> payload </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/data\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-1186508180,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client httpClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://person.free.beeceptor.com\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">var</span><span style=\\\"color:#24292E\\\"> payload </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/data\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">targetType</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> json</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-287119000,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? payload </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/data\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[1988573084,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Detail</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> statusCode;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> headers;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    anydata</span><span style=\\\"color:#24292E\\\"> body;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[460582891,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/backend/5XX\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"payload\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">if</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RemoteServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> statusCode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> result.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().statusCode;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    anydata</span><span style=\\\"color:#24292E\\\"> payload </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> result.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().body;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> headers </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> result.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().headers;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1267336227,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">xml</span><span style=\\\"color:#24292E\\\"> payload </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> httpClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/data\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[62827681,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> /foo/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> bar</span><span style=\\\"color:#24292E\\\">]() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1094511740,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ServiceConfig definition</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> HttpServiceConfig</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> host </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"b7a.default\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    CompressionConfig compression </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Chunking chunking </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> CHUNKING_AUTO;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    CorsConfig cors </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ListenerAuthConfig[] auth</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> mediaTypeSubtypePrefix?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> treatNilableAsOptional </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> true</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Interceptor</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">Interceptor[] interceptors</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] openApiDefinition </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    chunking</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:CHUNKING_ALWAYS</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> testListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1682515867,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ResourceConfig definition</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> HttpResourceConfig</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">[] consumes </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">[] produces </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    CorsConfig cors </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> transactionInfectable </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> true</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ListenerAuthConfig[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">Scopes auth</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    LinkedTo[] linkedTo</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    produces</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"application/json\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> person</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[986834414,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Payload</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[] mediaType?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[551070687,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> person</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#24292E\\\"> {mediaType:[</span><span style=\\\"color:#032F62\\\">\\\"application/json\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"application/ld+json\\\"</span><span style=\\\"color:#24292E\\\">]} </span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#E36209\\\"> payload</span><span style=\\\"color:#24292E\\\">)  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[978737699,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> person</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> @http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Payload{mediaType</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\">\\\"application/xml\\\"</span><span style=\\\"color:#24292E\\\">} </span><span style=\\\"color:#005CC5\\\">xml</span><span style=\\\"color:#24292E\\\">? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1392317048,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> person</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">CallerInfo</span><span style=\\\"color:#24292E\\\"> { respondType: http:Accepted } </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Caller hc) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Person p </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    hc</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">respond</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Person</span><span style=\\\"color:#E36209\\\"> p</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1746888239,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">esource </span><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> person</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#24292E\\\"> {name:</span><span style=\\\"color:#032F62\\\">\\\"Referer\\\"</span><span style=\\\"color:#24292E\\\">} </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> referer</span><span style=\\\"color:#24292E\\\">) {</span></span></code></pre>\"],[1844776680,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Cache</span><span style=\\\"color:#24292E\\\"> {                 </span><span style=\\\"color:#6A737D\\\">// Default Configuration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    mustRevalidate </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,    </span><span style=\\\"color:#6A737D\\\">// Sets the must-revalidate directive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    noCache </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">,          </span><span style=\\\"color:#6A737D\\\">// Sets the no-cache directive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    noStore </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">,          </span><span style=\\\"color:#6A737D\\\">// Sets the no-store directive </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    noTransform </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">,      </span><span style=\\\"color:#6A737D\\\">// Sets the no-transform directive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    isPrivate </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">,        </span><span style=\\\"color:#6A737D\\\">// Sets the private and public directive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    proxyRevalidate </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">,  </span><span style=\\\"color:#6A737D\\\">// Sets the proxy-revalidate directive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    maxAge </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3600</span><span style=\\\"color:#24292E\\\">,             </span><span style=\\\"color:#6A737D\\\">// Sets the max-age directive. Default value is 3600 seconds</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    sMaxAge </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> -</span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">,             </span><span style=\\\"color:#6A737D\\\">// Sets the s-maxage directive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    noCacheFields </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [],       </span><span style=\\\"color:#6A737D\\\">// Optional fields for no-cache directive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    privateFields </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [],       </span><span style=\\\"color:#6A737D\\\">// Optional fields for private directive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    setETag </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,           </span><span style=\\\"color:#6A737D\\\">// Sets the etag header</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    setLastModified </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#6A737D\\\">    // Sets the last-modified header</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[286815309,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Sets the cache-control header as \\\"public,must-revalidate,max-age=5\\\". Also sets the etag header.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// last-modified header will not be set</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> @http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Cache{maxAge </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">, setLastModified </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">} </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!!\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1384036362,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Gets the query parameters of the request as a map consisting of a string array.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> getQueryParams</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Gets the query param value associated with the given key.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> getQueryParamValue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Gets all the query param values associated with the given key.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> getQueryParamValues</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-311834900,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Gets the matrix parameters of the request.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> getMatrixParams</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> map&#x3C;any></span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-204596310,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public class</span><span style=\\\"color:#6F42C1\\\"> Request</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> rawPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> method </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> httpVersion </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> userAgent </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> extraPathInfo </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#24292E\\\"> RequestCacheControl</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> cacheControl </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#24292E\\\"> MutualSslHandshake</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> mutualSslHandshake </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1930851739,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public class</span><span style=\\\"color:#6F42C1\\\"> Response</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> statusCode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 200</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> reasonPhrase </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> server </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> resolvedRequestedURI </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#24292E\\\"> ResponseCacheControl</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> cacheControl </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1013995119,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Parses the header value which contains multiple values or parameters.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">parseHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> headerValue</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> HeaderValue[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError  {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2071797146,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Link</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Names the relationship of the linked target to the current representation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> rel?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Target URL</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> href;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Expected resource representation media types</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">[] types?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Allowed resource methods</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Method[] methods</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1836073359,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> LinkedTo</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> relation </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"self\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> method?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1941311692,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#E36209\\\">port</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Create a link between this resource and \\\"Payment\\\" resource</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        linkedTo</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [{ </span><span style=\\\"color:#6F42C1\\\">name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Payment\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#6F42C1\\\">rel</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"payment\\\"</span><span style=\\\"color:#24292E\\\"> }]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#24292E\\\"> 'order(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#E36209\\\"> Order</span><span style=\\\"color:#24292E\\\"> 'order) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Accepted</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // some logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Payment\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> put</span><span style=\\\"color:#6F42C1\\\"> payment</span><span style=\\\"color:#24292E\\\">/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">](@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#E36209\\\"> Payment</span><span style=\\\"color:#E36209\\\"> payment</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // some logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1740019425,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#E36209\\\">port</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Orders\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        linkedTo</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            { </span><span style=\\\"color:#6F42C1\\\">name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Orders\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#6F42C1\\\">rel</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"edit\\\"</span><span style=\\\"color:#24292E\\\">,  </span><span style=\\\"color:#6F42C1\\\">method</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"PUT\\\"</span><span style=\\\"color:#24292E\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            { </span><span style=\\\"color:#6F42C1\\\">name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Orders\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#6F42C1\\\">rel</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"remove\\\"</span><span style=\\\"color:#24292E\\\">,  </span><span style=\\\"color:#6F42C1\\\">method</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"DELETE\\\"</span><span style=\\\"color:#24292E\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> put</span><span style=\\\"color:#6F42C1\\\"> orders</span><span style=\\\"color:#24292E\\\">/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">](@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#E36209\\\"> Order</span><span style=\\\"color:#24292E\\\"> 'order) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // some logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        name </span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Orders\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> delete</span><span style=\\\"color:#6F42C1\\\"> orders</span><span style=\\\"color:#24292E\\\">/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">]() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // some logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1672123353,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#24292E\\\"> type 'Order </span><span style=\\\"color:#D73A49\\\">record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> item_name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> quantity;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1291053681,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#24292E\\\"> type 'Order </span><span style=\\\"color:#D73A49\\\">record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Links;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> item_name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> quantity;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1368590698,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#E36209\\\">port</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        linkedTo</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [{ </span><span style=\\\"color:#6F42C1\\\">name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Payment\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#6F42C1\\\">rel</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"payment\\\"</span><span style=\\\"color:#24292E\\\"> }]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> orders</span><span style=\\\"color:#24292E\\\">/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">]() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Order</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">NotFound {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // some logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Payment\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> put</span><span style=\\\"color:#6F42C1\\\"> payment</span><span style=\\\"color:#24292E\\\">/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">](@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#E36209\\\"> Payment</span><span style=\\\"color:#E36209\\\"> payment</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // some logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2059524189,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   \\\"item_name\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"latte\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   \\\"quantity\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   \\\"_links\\\"</span><span style=\\\"color:#24292E\\\">:{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      \\\"payment\\\"</span><span style=\\\"color:#24292E\\\">:{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">         \\\"href\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"/payment/{id}\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">         \\\"types\\\"</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"application/json\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">         \\\"methods\\\"</span><span style=\\\"color:#24292E\\\">:[</span><span style=\\\"color:#032F62\\\">\\\"PUT\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2013604392,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#E36209\\\">port</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        linkedTo</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [{ </span><span style=\\\"color:#6F42C1\\\">name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Payment\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#6F42C1\\\">rel</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"payment\\\"</span><span style=\\\"color:#24292E\\\"> }]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> order</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#E36209\\\"> Order</span><span style=\\\"color:#24292E\\\"> 'order) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Accepted</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // some logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // return http:Accepted without body</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Payment\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> put</span><span style=\\\"color:#6F42C1\\\"> payment</span><span style=\\\"color:#24292E\\\">/[</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">](@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#E36209\\\"> Payment</span><span style=\\\"color:#E36209\\\"> payment</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Ok</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // some logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-711909017,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> RequestInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestInterceptor;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'default [</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">… </span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext ctx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">NextService</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       req.</span><span style=\\\"color:#6F42C1\\\">setHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"X-requestHeader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"RequestInterceptor\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">       return</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">next</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1035366761,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> RequestInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestInterceptor;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'default </span><span style=\\\"color:#6F42C1\\\">foo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext ctx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">NextService</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       req.</span><span style=\\\"color:#6F42C1\\\">setHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"X-requestHeader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"RequestInterceptor\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">       return</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">next</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1408172402,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// This is same as the `value:Cloneable`, except that it does not include `error` type.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a non-error type that can be cloned.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Cloneable</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#D73A49\\\">any</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#D73A49\\\"> readonly</span><span style=\\\"color:#24292E\\\">)</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">xml</span><span style=\\\"color:#D73A49\\\">|Cloneable</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|map&#x3C;</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">>|table&#x3C;map&#x3C;</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">>></span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Request context member type.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ReqCtxMember</span><span style=\\\"color:#D73A49\\\"> Cloneable|isolated</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Request context member type descriptor.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ReqCtxMemberType</span><span style=\\\"color:#D73A49\\\"> typedesc&#x3C;</span><span style=\\\"color:#24292E\\\">ReqCtxMember</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents an HTTP Context that allows user to pass data between interceptors.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated class</span><span style=\\\"color:#6F42C1\\\"> RequestContext</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#D73A49\\\"> map&#x3C;</span><span style=\\\"color:#24292E\\\">ReqCtxMember</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> members </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Sets an member to the request context object.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">key</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Represents the member key</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">value</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Represents the member value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> set</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">ReqCtxMember</span><span style=\\\"color:#E36209\\\"> value</span><span style=\\\"color:#24292E\\\">) {}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Gets an member value from the request context object.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">key</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Represents the member key</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Member value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ReqCtxMember {}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Checks whether the request context object has an member corresponds to the key.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">key</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Represents the member key</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">true if the member exists, else false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> hasKey</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> boolean</span><span style=\\\"color:#24292E\\\"> {}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Returns the member keys of the request context object.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Array of member keys</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> keys</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">[] {}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Gets an attribute value with type from the request context object.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">key</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Represents the member key</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">targetType</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Represents the expected type of the member value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Attribute value or an error if the member value is not of the expected type</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> getWithType</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">ReqCtxMemberType</span><span style=\\\"color:#E36209\\\"> targetType</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ListenerError </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#6F42C1\\\"> external</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Removes a member from the request context object. It panics if there is no such member.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">key</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Represents the member key</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> remove</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">) {}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Calls the next service in the interceptor pipeline.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The next service object in the pipeline. An error is returned, if the call fails</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> next</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> NextService</span><span style=\\\"color:#D73A49\\\">|error?</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#6F42C1\\\"> external</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[564934036,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Header, jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Payload] jwtInformation </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getWithType</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">JWT_INFORMATION);</span></span></code></pre>\"],[409445820,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> ResponseInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ResponseInterceptor;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> interceptResponse</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext ctx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Response res) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">NextService</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       res.</span><span style=\\\"color:#6F42C1\\\">setHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"X-responseHeader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"ResponseInterceptor\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">       return</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">next</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-874808599,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> RequestErrorInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestErrorInterceptor;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'default [</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">… </span><span style=\\\"color:#E36209\\\">path</span><span style=\\\"color:#24292E\\\">](</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext ctx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Caller caller,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">                       http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req, </span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#E36209\\\"> err</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">NextService</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">       // deal with the error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1139912264,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> ResponseErrorInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ResponseErrorInterceptor;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> interceptResponseError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext ctx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Response res, </span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#E36209\\\"> err</span><span style=\\\"color:#24292E\\\">) </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                       returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">NextService</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">       // deal with the error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1196970228,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> createInterceptors</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Interceptor</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">Interceptor[];</span></span></code></pre>\"],[-1227525513,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> http:InterceptableService / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9099</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> createInterceptors</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> [RequestInterceptor, ResponseInterceptor] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#D73A49\\\">new</span><span style=\\\"color:#6F42C1\\\"> RequestInterceptor</span><span style=\\\"color:#24292E\\\">(), </span><span style=\\\"color:#D73A49\\\">new</span><span style=\\\"color:#6F42C1\\\"> ResponseInterceptor</span><span style=\\\"color:#24292E\\\">()];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> hello</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[252369757,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> ResponseErrorInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ResponseErrorInterceptor;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> interceptResponseError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#E36209\\\"> err</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">NotFound {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">NotFound nf </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> { body</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> { msg: err.</span><span style=\\\"color:#6F42C1\\\">message</span><span style=\\\"color:#24292E\\\">()} };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">       return</span><span style=\\\"color:#24292E\\\"> nf;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2089771572,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> DefaultErrorInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ResponseErrorInterceptor;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> interceptResponseError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#E36209\\\"> err</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Response {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Response res </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        res.</span><span style=\\\"color:#6F42C1\\\">setTextPayload</span><span style=\\\"color:#24292E\\\">(err.</span><span style=\\\"color:#6F42C1\\\">message</span><span style=\\\"color:#24292E\\\">());</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // By default, the error response is set to 500 - Internal Server Error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // However, if the error is an internal error which has a different error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // status code (4XX or 5XX) then this 500 status code will be overwritten </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // by the original status code.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        res.statusCode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 500</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> res;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1554590539,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">http</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">traceLogAdvancedConfig</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Enable printing trace logs in console</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">console = </span><span style=\\\"color:#005CC5\\\">true</span><span style=\\\"color:#6A737D\\\">              # Default is false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Specify the file path to save the trace logs  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">path = </span><span style=\\\"color:#032F62\\\">\\\"testTraceLog.txt\\\"</span><span style=\\\"color:#6A737D\\\">   # Optional</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Specify the hostname and port of a socket service to publish the trace logs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">host = </span><span style=\\\"color:#032F62\\\">\\\"localhost\\\"</span><span style=\\\"color:#6A737D\\\">          # Optional</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">port = </span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#6A737D\\\">                 # Optional</span></span></code></pre>\"],[-1386519574,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">http</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">accessLogConfig</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Enable printing access logs in console</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">console = </span><span style=\\\"color:#005CC5\\\">true</span><span style=\\\"color:#6A737D\\\">              # Default is false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Specify the file path to save the access logs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">path = </span><span style=\\\"color:#032F62\\\">\\\"testAccessLog.txt\\\"</span><span style=\\\"color:#6A737D\\\">  # Optional, omit to disable file logging</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Select the format of the access logs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">format = </span><span style=\\\"color:#032F62\\\">\\\"json\\\"</span><span style=\\\"color:#6A737D\\\">             # Options: \\\"flat\\\", \\\"json\\\"; Default is \\\"flat\\\". Omit to stick to the default.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Specify which attributes to log. Omit to stick to the default set.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">attributes = [</span><span style=\\\"color:#032F62\\\">\\\"ip\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"date_time\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"request\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"status\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"response_body_size\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"http_referrer\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"http_user_agent\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Default attributes: ip, date_time, request, status, response_body_size, http_referrer, http_user_agent</span></span></code></pre>\"],[-261430773,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            fileUserStoreConfig</span><span style=\\\"color:#24292E\\\">: {},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            scopes</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1667269379,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Config.toml</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[ballerina.auth.users]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">username</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"alice\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">password</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"alice@123\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">scopes</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#032F62\\\">\\\"developer\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[ballerina.auth.users]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">username</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"ldclakmal\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">password</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"ldclakmal@123\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">scopes</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#032F62\\\">\\\"developer\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[ballerina.auth.users]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">username</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"eve\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">password</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"eve@123\\\"</span></span></code></pre>\"],[339438180,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            ldapUserStoreConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                domainName</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"avix.lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionUrl</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"ldap://localhost:389\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionName</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"cn=admin,dc=avix,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionPassword</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"avix123\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userSearchBase</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"ou=Users,dc=avix,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userEntryObjectClass</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"inetOrgPerson\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userNameAttribute</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"uid\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userNameSearchFilter</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"(&#x26;(objectClass=inetOrgPerson)(uid=?))\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userNameListFilter</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"(objectClass=inetOrgPerson)\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupSearchBase</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"ou=Groups,dc=avix,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupEntryObjectClass</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"groupOfNames\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupNameAttribute</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"cn\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupNameSearchFilter</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"(&#x26;(objectClass=groupOfNames)(cn=?))\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupNameListFilter</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"(objectClass=groupOfNames)\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                membershipAttribute</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"member\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userRolesCacheEnabled</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionPoolingEnabled</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionTimeout</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">5</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                readTimeout</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">60</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            scopes</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-507007830,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            jwtValidatorConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                issuer</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"wso2\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                audience</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                signatureConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                    certFile</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"/path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                scopeKey</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"scp\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            scopes</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1270747524,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            oauth2IntrospectionConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                url</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9445/oauth2/introspect\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                tokenTypeHint</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"access_token\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                scopeKey</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"scp\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                clientConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                    customHeaders</span><span style=\\\"color:#24292E\\\">: {</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Basic YWRtaW46YWRtaW4=\\\"</span><span style=\\\"color:#24292E\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                    secureSocket</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                        cert</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"/path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            scopes</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1321569626,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        username</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"tom\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        password</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"123\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1070302098,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        token</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiw\\\"</span><span style=\\\"color:#24292E\\\"> +</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">               \\\"ibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2Q\\\"</span><span style=\\\"color:#D73A49\\\"> +</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">               \\\"T4fwpMeJf36POk6yJV_adQssw5c\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2141144118,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        username</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        issuer</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"wso2\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        audience</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"ballerina.org\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"ballerina.io\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        keyId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"5a0b754-895f-4279-8843-b745e11a57e9\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        jwtId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"JlbmMiOiJBMTI4Q0JDLUhTMjU2In\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        customClaims</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#032F62\\\">\\\"scp\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        expTime</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3600</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        signatureConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            config</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">                keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-317945504,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        token</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"56ede317-4511-44b4-8579-a08f094ee8c5\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-661176827,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">OAuth2ClientCredentialsGrantConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    tokenUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:8080/oauth2/token/authorize\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    clientId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"3MVG9YDQS5WtC11paU2WcQjBB3L5w4gz52uriT8ksZ3nUVjKvrfQMrU4uvZohTftxS\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    clientSecret</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"9205371918321623741\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> config);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[953333292,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">FileUserStoreConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ListenerFileUserStoreBasicAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /foo</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> bar</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#E36209\\\"> Authorization</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">UserDetails</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Unauthorized authn </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">authenticate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authn </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> authn;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden? authz </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">authorize</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#E36209\\\">auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">UserDetails</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#E36209\\\">authn</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authz </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> authz;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // business logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1525110197,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Config.toml</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[ballerina.observe]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">enabled</span><span style=\\\"color:#D73A49\\\">=true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">provider</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"noop\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[auth.users]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">username</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">password</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\">\\\"123\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">scopes</span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#032F62\\\">\\\"write\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"update\\\"</span><span style=\\\"color:#24292E\\\">]</span></span></code></pre>\"],[-1867737466,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">LdapUserStoreConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    domainName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"avix.lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ldap://localhost:389\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"cn=admin,dc=avix,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionPassword</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"avix123\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userSearchBase</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ou=Users,dc=avix,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userEntryObjectClass</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"inetOrgPerson\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userNameAttribute</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"uid\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userNameSearchFilter</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"(&#x26;(objectClass=inetOrgPerson)(uid=?))\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userNameListFilter</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"(objectClass=inetOrgPerson)\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupSearchBase</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"ou=Groups,dc=avix,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupEntryObjectClass</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"groupOfNames\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupNameAttribute</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"cn\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupNameSearchFilter</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"(&#x26;(objectClass=groupOfNames)(cn=?))\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupNameListFilter</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"(objectClass=groupOfNames)\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    membershipAttribute</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"member\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userRolesCacheEnabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionPoolingEnabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionTimeout</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    readTimeout</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 60</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ListenerLdapUserStoreBasicAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /foo</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> bar</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#E36209\\\"> Authorization</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">UserDetails</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Unauthorized authn </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">authenticate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authn </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> authn;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden? authz </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">authorize</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#E36209\\\">auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">UserDetails</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#E36209\\\">authn</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authz </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> authz;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // business logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-177243094,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">JwtValidatorConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    issuer</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    audience</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"wso2\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    signatureConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        jwksConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:8080/jwks\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ListenerJwtAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /foo</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> bar</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#E36209\\\"> Authorization</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Payload</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Unauthorized authn </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">authenticate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authn </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> authn;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden? authz </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">authorize</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#E36209\\\">jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Payload</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#E36209\\\">authn</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authz </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> authz;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // business logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-331771363,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">OAuth2IntrospectionConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:8080/oauth2/introspect\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    tokenTypeHint</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"access_token\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ListenerOAuth2Handler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /foo</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> bar</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Header</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#E36209\\\"> authorization</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        oauth2</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">IntrospectionResponse</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Unauthorized</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Forbidden auth </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">authorize</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> auth </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized </span><span style=\\\"color:#D73A49\\\">||</span><span style=\\\"color:#24292E\\\"> auth </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http:Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> auth;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // business logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[586807377,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">CredentialsConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    username</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"tom\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    password</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"123\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientBasicAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">enrich</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1304029731,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">BearerTokenConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    token</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFt\\\"</span><span style=\\\"color:#24292E\\\"> +</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">           \\\"ZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf3\\\"</span><span style=\\\"color:#D73A49\\\"> +</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">           \\\"6POk6yJV_adQssw5c\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientBearerTokenAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">enrich</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1543967823,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">JwtIssuerConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    username</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"admin\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    issuer</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    audience</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"wso2\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    signatureConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        config</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyPassword</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"password\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientSelfSignedJwtAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">enrich</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[583308707,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">BearerTokenConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    token</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"JhbGciOiJIIiwiaWF0IjUzI1NiIsInR5cCI6IkpXVCJ9WIiOiIxMjM0NTY3ODkwI\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientBearerTokenAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">enrich</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-42921746,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">OAuth2ClientCredentialsGrantConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    tokenUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:8080/oauth2/token/authorize\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    clientId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"3MVG9YDQS5WtC11paU2WcQjBB3L5w4gz52uriT8ksZ3nUVjKvrfQMrU4uvZohTftxS\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    clientSecret</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"9205371918321623741\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientOAuth2Handler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client c </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> handler</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">enrich</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> c</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // evaluate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[577492717,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener securedEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        key:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            certFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> securedEP {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-222227382,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener securedEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        key:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            certFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        mutualSsl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            verifyClient</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:REQUIRE,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        protocol</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:TLS,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            versions</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLSv1.2\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"TLSv1.1\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        ciphers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> securedEP {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1119782399,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client securedEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> securedEP</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">response</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1197724126,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client securedEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9090\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        key:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            certFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        protocol</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:TLS</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        ciphers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> securedEP</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">post</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"/foo/bar\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">req</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">response</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1899852972,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Listener declaration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener http2ServiceEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">7090</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {httpVersion</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"2.0\\\"</span><span style=\\\"color:#24292E\\\">});</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Client declaration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client clientEP </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://localhost:7090\\\"</span><span style=\\\"color:#24292E\\\">, {httpVersion</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"2.0\\\"</span><span style=\\\"color:#24292E\\\">});</span></span></code></pre>\"]]"},"__N_SSG":true}