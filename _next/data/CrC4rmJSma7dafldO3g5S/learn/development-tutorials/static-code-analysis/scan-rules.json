{"pageProps":{"frontmatter":{"title":"Scan rules","description":"Learn about the scan rules used in Ballerina static code analysis.","keywords":"ballerina runtime, static code analysis, scan rules, code smells, bugs, vulnerabilities","permalink":"/learn/scan-rules/","active":"scan-rules"},"content":"\nThe Ballerina scan tool uses a set of predefined rules to analyze Ballerina code and identify potential issues such as\ncode smells, bugs, and vulnerabilities.\nThese rules are designed to help developers maintain high-quality code and\nadhere to best practices.\n\n## Language rules\n\n### Avoid checkpanic\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:1 |\n| **Rule Kind** | Code Smell  |\n\nWhen `checkpanic` is used, the program terminates abruptly with a `panic` unless it’s handled explicitly along the call\nstack.\n\n#### Noncompliant Code Example\n\n```ballerina\npublic function checkResult() {\n    json result = checkpanic getResult();\n    \n    // ...\n}\n\npublic function getResult() returns json|error {\n    // ...\n}\n```\n\n#### Compliant Code Example\n\nCheck and handle the error explicitly.\n\n```ballerina\npublic function checkResult() {\n    json|error result = getResult();\n\n    if result is error {\n        // handle error\n    }\n\n    // ...\n}\n\npublic function getResult() returns json|error {\n    // ...\n}\n```\n\nMake use of the `check` keyword, which immediately returns the error or transfers control to an `on-fail` block, in\ncontrast to `checkpanic` and panicking if an expression or action evaluates to an error.\n\n```ballerina\npublic function checkResult() returns error? {\n    json result = check getResult();\n}\n\npublic function getResult() returns json|error {\n    // ...\n}\n```\n\n### Unused function parameter\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:2 |\n| **Rule Kind** | Code Smell  |\n\nUnused function parameters cause unnecessary code complexity and can lead to confusion for developers maintaining the\ncode. They may also indicate potential errors in function design or changes in requirements that were not properly\nimplemented.\n\n#### Noncompliant Code Example\n\n```ballerina\nimport ballerina/io;\n\nfunction name(int a, int b) {\n   io:println(a);\n}\n\npublic function main() {\n   name(1, 2);\n}\n```\n\n#### Compliant Code Example\n\nRemove unused function parameters to improve code clarity and maintainability. If the parameter is intended for future\nuse or completeness, consider documenting it or refactoring the function to use it.\n\n```ballerina\nimport ballerina/io;\n\nfunction name(int a) {\n   io:println(a);\n}\n\npublic function main() {\n   name(1);\n}\n```\n\n### Non isolated public function\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:3 |\n| **Rule Kind** | Code Smell  |\n\nA non-isolated function will not be called concurrently. Only isolated functions are called concurrently given that they\nare guaranteed to be safe if the arguments are also safe. To allow being called concurrently, a public function should\nbe marked as isolated.\n\n#### Noncompliant Code Example\n\n```ballerina\npublic function helperFunction() {\n   // isolated code\n}\n```\n\n#### Compliant Code Example\n\nMark public functions as isolated to ensure the function can be called concurrently.\n\n```ballerina\npublic isolated function helperFunction() {\n   // isolated code\n}\n```\n\n### Non isolated public method\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:4 |\n| **Rule Kind** | Code Smell  |\n\nClass methods can be isolated. An isolated method is the same as an isolated function with self treated as a parameter.\nA non-isolated method will not be called concurrently. Only isolated methods are called concurrently given that they are\nguaranteed to be safe if the arguments are also safe. To allow being called concurrently, a public method should be\nmarked as isolated.\n\n#### Noncompliant Code Example\n\n```ballerina\nclass EvenNumber {\n    int i = 1;\n\n    public function generate() returns int {\n        return self.i * 2;\n    }\n}\n```\n\n#### Compliant Code Example\n\nMark public methods as isolated to ensure the method can be called concurrently.\n\n```ballerina\nclass EvenNumber {\n    int i = 1;\n\n    public isolated function generate() returns int {\n        lock {\n            return self.i * 2;\n        }\n    }\n}\n```\n\n### Non isolated public class\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:5 |\n| **Rule Kind** | Code Smell  |\n\nA class defined as isolated is similar to a module with isolated module-level variables. A non-isolated class will not\nbe accessed concurrently. Only isolated classes are accessed concurrently. To allow being accessed concurrently, a\npublic class should be marked as isolated.\n\n#### Noncompliant Code Example\n\n```ballerina\npublic class EvenNumber {\n    int i = 1;\n\n    public isolated function generate() returns int {\n        lock {\n            return self.i * 2;\n        }\n    }\n}\n```\n\n#### Compliant Code Example\n\nMark public classes as isolated to ensure the class can be used in a concurrent environment.\n\n```ballerina\npublic isolated class EvenNumber {\n    int i = 1;\n\n    public isolated function generate() returns int {\n        lock {\n            return self.i * 2;\n        }\n    }\n}\n```\n\n### Non isolated public object\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:6 |\n| **Rule Kind** | Code Smell  |\n\nA non-isolated object will not be accessed concurrently. Only isolated objects are accessed concurrently. To allow being\naccessed concurrently, a public object should be marked as isolated.\n\n#### Noncompliant Code Example\n\n```ballerina\npublic type Hashable object {\n    function hash() returns int;\n};\n```\n\n#### Compliant Code Example\n\nMark public objects as isolated to ensure the object can be used in a concurrent environment.\n\n```ballerina\npublic type Hashable isolated object {\n    function hash() returns int;\n};\n```\n\n### This operation always evaluates to true\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:7 |\n| **Rule Kind** | Code Smell  |\n\nConditions that are always true don't do any meaningful computation. They increase code complexity, reduce the code\nreadability and potentially hide logical errors.\n\n#### Noncompliant Code Example\n\n```ballerina\npublic function main() {\n   int a = 1;\n   boolean b = a <= int:MAX_VALUE;\n}\n```\n\n### This operation always evaluates to false\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:8 |\n| **Rule Kind** | Code Smell  |\n\nConditions that are always false indicate unreachable code or logic that will never execute. This can clutter the\ncodebase, make it harder to understand, and potentially hide bugs or unintentional logic errors.\n\n#### Noncompliant Code Example\n\n```ballerina\npublic function main() {\n   int a = 1;\n   boolean b = a <= int:MIN_VALUE;\n}\n```\n\n### This operation always evaluates to the same value\n\n| Property      | Description |\n|---------------|-------------|\n| **Rule ID**   | ballerina:9 |\n| **Rule Kind** | Code Smell  |\n\nConditions which always evaluate to the same value don't do any meaningful computation. They increase code complexity,\nreduce the code readability, and potentially hide logical errors.\n\n#### Noncompliant Code Example\n\n```ballerina\npublic function main() {\n   int a = x % 1; // always evaluates to zero\n}\n```\n\n### This variable is assigned to itself\n\n| Property      | Description  |\n|---------------|--------------|\n| **Rule ID**   | ballerina:10 |\n| **Rule Kind** | Code Smell   |\n\nSelf-assignments, where a variable is assigned to itself (x = x), are redundant and do not alter the state of the\nvariable. They can indicate incomplete or erroneous logic and make the code harder to read and maintain.\n\n#### Noncompliant Code Example\n\n```ballerina\npublic function main() {\n   int x = 5;\n   x = x;\n}\n```\n\n### Unused class private fields\n\n| Property      | Description  |\n|---------------|--------------|\n| **Rule ID**   | ballerina:11 |\n| **Rule Kind** | Code Smell   |\n\nUnused or unread private fields/methods in a class can indicate incomplete or erroneous logic, lead to unnecessary\nmemory usage, and make the code harder to maintain and understand.\n\n#### Noncompliant Code Example\n\n```ballerina\nclass A {\n  private int[] a = [];\n  private int[] b = [];\n\n  function foo() {\n    self.a = [2];\n  }\n}\n\npublic function main() {\n  A a = new A();\n}\n```\n\n#### Compliant Code Example\n\nRemove the unused private fields/methods. If the field/method is intended for future use or completeness, consider\ndocumenting, refactoring the class to use it, or introducing it when ready to implement the rest.\n\n```ballerina\nclass A {\n  private int[] a = [];\n\n  function foo() {\n      self.a = [2];\n  }\n}\n\npublic function main() {\n  A a = new A();\n}\n```\n\n### Invalid range expression\n\n| Property      | Description  |\n|---------------|--------------|\n| **Rule ID**   | ballerina:12 |\n| **Rule Kind** | Code Smell   |\n\nThe update clause of a range expression should ensure the counter moves in the correct direction. Incorrect range\nexpression directions can lead to unexpected behavior, making the code harder to understand and debug.\n\n#### Noncompliant Code Example\n\n```ballerina\nimport ballerina/io;\n\npublic function main() {\n   foreach int i in 9...0 {\n       io:println(i);\n   }\n}\n```\n\n#### Compliant Code Example\n\nEnsure the range expression counter moves in the correct direction according to the desired iteration. Use the correct\nrange or adjust the range expression logic to achieve the intended behavior.\n\n```ballerina\nimport ballerina/io;\n\npublic function main() {\n   foreach int i in 0...9 {\n       io:println(i);\n   }\n}\n```\n\n## Library rules\n\n### Avoid using insecure cipher modes or padding schemes\n\n| Property      | Description        |\n|---------------|--------------------|\n| **Rule ID**   | ballerina/crypto:1 |\n| **Rule Kind** | Vulnerability      |\n\nEncryption algorithms are essential for protecting sensitive information and ensuring secure communications. When implementing encryption, it's critical to select not only strong algorithms but also secure modes of operation and padding schemes. Using weak or outdated encryption modes can compromise the security of otherwise strong algorithms.\n\n#### AES Encryption Code Example\n\n##### Noncompliant Code Example\n\n```ballerina\nbyte[] cipherText = check crypto:encryptAesEcb(data, key);\n```\n\nFor AES, the weakest mode is ECB (Electronic Codebook). Repeated blocks of data are encrypted to the same value, making them easy to identify and reducing the difficulty of recovering the original cleartext.\n\n```ballerina\nbyte[] cipherText = check crypto:encryptAesCbc(data, key, initialVector);\n```\n\nUnauthenticated modes such as CBC (Cipher Block Chaining) may be used but are prone to attacks that manipulate the ciphertext (like padding oracle attacks). They must be used with caution and additional integrity checks.\n\n##### Compliant Code Example\n\n```ballerina\nbyte[] cipherText = check crypto:encryptAesGcm(data, key, initialVector);\n```\n\nAES-GCM (Galois/Counter Mode) provides authenticated encryption, ensuring both confidentiality and integrity of the encrypted data.\n\n#### RSA Encryption Example\n\n##### Noncompliant Code Example\n\n```ballerina\n// Default padding is PKCS1\nbyte[] cipherText = check crypto:encryptRsaEcb(data, publicKey);\n\ncipherText = check crypto:encryptRsaEcb(data, publicKey, crypto:PKCS1);\n```\n\nFor `RSA`, avoid using `PKCS1v1.5` padding as it is vulnerable to various attacks. Instead, use `OAEP` (Optimal Asymmetric Encryption Padding) which provides better security.\n\n##### Compliant Code Example\n\n```ballerina\nbyte[] cipherText = check crypto:encryptRsaEcb(data, publicKey, crypto:OAEPwithMD5andMGF1);\n```\n\nThe `OAEP` paddings such as `OAEPwithMD5andMGF1`, `OAEPWithSHA1AndMGF1`, `OAEPWithSHA256AndMGF1`, `OAEPwithSHA384andMGF1`, and `OAEPwithSHA512andMGF1` should be used for RSA encryption to enhance security.\n\n### Avoid using fast hashing algorithms\n\n| Property      | Description        |\n|---------------|--------------------|\n| **Rule ID**   | ballerina/crypto:2 |\n| **Rule Kind** | Vulnerability      |\n\nStoring passwords in plaintext or using fast hashing algorithms creates significant security vulnerabilities. If an attacker gains access to your database, plaintext passwords are immediately compromised. Similarly, passwords hashed with fast algorithms (like `MD5`, `SHA-1`, or `SHA-256` without sufficient iterations) can be rapidly cracked using modern hardware.\n\nFollowing are the OWASP (Open Web Application Security Project) recommended parameters:\n\nFor `BCrypt`:\n\n- Use a work factor of 10 or more\n- Only use `BCrypt` for password storage in legacy systems where `Argon2` and `scrypt` are not available\n- Be aware of `BCrypt`'s 72-byte password length limit\n\nFor `Argon2`:\n\n- Use the `Argon2id` variant (which Ballerina implements)\n- Minimum configuration of 19 MiB (19,456 KB) of memory\n- An iteration count of at least 2\n- At least 1 degree of parallelism (this is enforced by Ballerina)\n\n#### BCrypt Hashing Code Example\n\n##### Noncompliant Code Example\n\n```ballerina\npublic function main() returns error? {\n    string password = \"mySecurePassword123\";\n    // Using insufficient work factor\n    string hashedPassword = check crypto:hashBcrypt(password, 4);\n    io:println(\"Hashed Password: \", hashedPassword);\n}\n```\n\nUsing `BCrypt` with a work factor below 10 is insufficient and vulnerable to brute-force attacks.\n\n##### Compliant Code Example\n\n```ballerina\npublic function hashPassword() returns error? {\n    string password = \"mySecurePassword123\";\n    // Using sufficient work factor (14 or higher for better security)\n    string hashedPassword = check crypto:hashBcrypt(password, 14);\n    io:println(\"Hashed Password: \", hashedPassword);\n}\n```\n\n#### Argon2 Hashing Code Example\n\n##### Noncompliant Code Example\n\n```ballerina\npublic function main() returns error? {\n    string password = \"mySecurePassword123\";\n    // Using insufficient memory configuration\n    string hashedPassword = check crypto:hashArgon2(password, memory = 4096);\n    io:println(\"Hashed Password: \", hashedPassword);\n}\n```\n\nUsing `Argon2` with insufficient memory (less than 19,456 KB) makes it vulnerable to attacks.\n\n##### Compliant Code Example\n\n```ballerina\npublic function hashPassword() returns error? {\n    string password = \"mySecurePassword123\";\n    // Using recommended parameters: sufficient memory, iterations, and parallelism\n    string hashedPassword = check crypto:hashArgon2(password, iterations = 3, memory = 65536, parallelism = 4);\n    io:println(\"Hashed Password: \", hashedPassword);\n}\n```\n\n### Avoid reusing counter mode initialization vectors\n\n| Property      | Description        |\n|---------------|--------------------|\n| **Rule ID**   | ballerina/crypto:3 |\n| **Rule Kind** | Vulnerability      |\n\nWhen using encryption algorithms in counter mode (such as `AES-GCM`, `AES-CCM`, or `AES-CTR`), initialization vectors (IVs) or nonces should never be reused with the same encryption key. Reusing IVs with the same key can completely compromise the security of the encryption.\n\n#### AES-GCM Encryption Code Example\n\n##### Noncompliant Code Example\n\n```ballerina\npublic function encryptData(string data) returns byte[]|error {\n    byte[16] initialVector = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    byte[16] key = [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\n    byte[] dataBytes = data.toBytes();\n    return crypto:encryptAesGcm(dataBytes, key, initialVector);\n}\n```\n\nIn this non-compliant example, the initialization vector is hardcoded, meaning every encryption operation uses the same IV. This completely undermines the security of AES-GCM encryption, regardless of key strength.\n\n##### Compliant Code Example\n\n```ballerina\nimport ballerina/crypto;\nimport ballerina/random;\n\npublic function encryptData(string data) returns [byte[], byte[16]]|error {\n    byte[16] initialVector = [];\n    foreach int i in 0...15 {\n        initialVector[i] = <byte>(check random:createIntInRange(0, 255));\n    }\n    byte[16] key = [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\n    byte[] dataBytes = data.toBytes();\n    byte[] encryptedData = check crypto:encryptAesGcm(dataBytes, key, initialVector);\n    return [encryptedData, initialVector];\n}\n```\n\nThis compliant approach generates a cryptographically secure random initialization vector for each encryption operation and returns it along with the encrypted data. The IV must be stored alongside the encrypted data (but doesn't need to be kept secret) to allow for decryption later.\n\n#### AES-CBC Encryption Code Example\n\n##### Noncompliant Code Example\n\n```ballerina\npublic function encryptMessage(string message) returns byte[]|error {\n    // Static nonce - this is vulnerable!\n    byte[12] nonce = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];\n    byte[16] key = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    byte[] messageBytes = message.toBytes();\n    return crypto:encryptAesCbc(messageBytes, key, nonce);\n}\n```\n\n##### Compliant Code Example\n\n```ballerina\nimport ballerina/crypto;\nimport ballerina/random;\n\npublic function encryptMessage(string message) returns [byte[], byte[12]]|error {\n    // Generate unique nonce for each encryption\n    byte[12] nonce = [];\n    foreach int i in 0...11 {\n        nonce[i] = <byte>(check random:createIntInRange(0, 255));\n    }\n    byte[16] key = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    byte[] messageBytes = message.toBytes();\n    byte[] encryptedData = check crypto:encryptAesCbc(messageBytes, key, nonce);\n    return [encryptedData, nonce];\n}\n```\n\n### Avoid using publicly writable directories for file operations without proper access controls\n\n| Property      | Description      |\n|---------------|------------------|\n| **Rule ID**   | ballerina/file:1 |\n| **Rule Kind** | Vulnerability    |\n\nOperating systems often have global directories with write access granted to any user. These directories serve as\ntemporary storage locations like /tmp in Linux-based systems. However, when an application manipulates files within\nthese directories, it becomes vulnerable to race conditions on filenames. A malicious user may attempt to create a file\nwith a predictable name before the application does. If successful, such an attack could lead to unauthorized access,\nmodification, corruption, or deletion of other files. This risk escalates further if the application operates with\nelevated permissions.\n\n#### Noncompliant Code Example\n\n```ballerina\nstring tempFolderPath = os:getEnv(\"TMP\");\ncheck file:create(tempFolderPath + \"/\" + \"myfile.txt\");\ncheck file:getAbsolutePath(tempFolderPath + \"/\" + \"myfile.txt\");\ncheck file:createTemp(\"suffix\", \"prefix\");\ncheck file:createTempDir((), \"prefix\");\n```\n\n#### Compliant Code Example\n\nUse dedicated sub-folders.\n\n```ballerina\ncheck file:create(\"./myDirectory/myfile.txt\");\ncheck file:getAbsolutePath(\"./myDirectory/myfile.txt\");\n```\n\n### File function calls should not be vulnerable to path injection attacks\n\n| Property      | Description      |\n|---------------|------------------|\n| **Rule ID**   | ballerina/file:2 |\n| **Rule Kind** | Vulnerability    |\n\nPath injections occur when an application constructs a file path using untrusted data without first validating the path.\n\nA malicious user can inject specially crafted values, like \"../\", to alter the intended path. This manipulation may lead\nthe path to resolve to a location within the filesystem where the user typically wouldn't have access.\n\n#### Noncompliant Code Example\n\n```ballerina\nlistener http:Listener endpoint = new (8080);\nstring targetDirectory = \"./path/to/target/directory/\";\n\nservice / on endpoint {\n    resource function get deleteFile(string fileName) returns string|error {\n        check file:remove(targetDirectory + fileName);\n        // ...\n    }\n}\n```\n\n#### Compliant Code Example\n\nConduct validation of canonical paths.\n\n```ballerina\nlistener http:Listener endpoint = new (8080);\nstring targetDirectory = \"./path/to/target/directory/\";\n\nservice / on endpoint {\n    resource function get deleteFile(string fileName) returns string|error {\n        // Retrieve the normalized absolute path of the user provided file\n        string absoluteUserFilePath = check file:getAbsolutePath(\n            targetDirectory +\n            fileName);\n        string normalizedAbsoluteUserFilePath = check file:normalizePath(\n            absoluteUserFilePath,\n            file:CLEAN);\n\n        // Check whether the user provided file exists\n        boolean fileExists = check file:test(\n            normalizedAbsoluteUserFilePath,\n            file:EXISTS);\n        if !fileExists {\n            return \"File does not exist!\";\n        }\n\n        // Retrieve the normalized absolute path of parent directory of the user provided file\n        string canonicalDestinationPath = check file:parentPath(\n            normalizedAbsoluteUserFilePath);\n        string normalizedCanonicalDestinationPath = check file:normalizePath(\n            canonicalDestinationPath,\n            file:CLEAN);\n\n        // Retrieve the normalized absolute path of the target directory\n        string absoluteTargetFilePath = check file:getAbsolutePath(\n            targetDirectory);\n        string normalizedTargetDirectoryPath = check file:normalizePath(\n            absoluteTargetFilePath,\n            file:CLEAN);\n\n        // Perform comparison of user provided file path and target directory path\n        boolean dirMatch = normalizedTargetDirectoryPath.equalsIgnoreCaseAscii(\n            normalizedCanonicalDestinationPath);\n        if !dirMatch {\n            return \"Entry is not in the target directory!\";\n        }\n\n        check file:remove(normalizedAbsoluteUserFilePath);\n    }\n}\n```\n\n### Avoid allowing default resource accessor\n\n| Property      | Description      |\n|---------------|------------------|\n| **Rule ID**   | ballerina/http:1 |\n| **Rule Kind** | Vulnerability    |\n\nAn HTTP resource is safe when used for read-only operations like GET, HEAD, or OPTIONS. An unsafe HTTP resource is used\nto alter the state of an application, such as modifying the user’s profile on a web application.\n\nUnsafe HTTP resources include POST, PUT, and DELETE.\n\nEnabling both safe and insecure HTTP resources to execute a particular operation on a web application may compromise its\nsecurity; for instance, CSRF protections are typically designed to safeguard operations executed by insecure HTTP\nresources.\n\n#### Noncompliant Code Example\n\n```ballerina\nlistener http:Listener endpoint = new (8080);\n\nservice / on endpoint {\n    // Sensitive: by default all HTTP methods are allowed\n    resource function default deleteRequest(http:Request clientRequest, string username) returns string {\n        // state of the application will be changed here\n    }\n}\n```\n\n#### Compliant Code Example\n\nFor every resource in an application, it’s crucial to explicitly define the type of the HTTP resource, ensuring that\nsafe resources are exclusively used for read-only operations.\n\n```ballerina\nservice / on endpoint {\n    resource function delete deleteRequest(http:Request clientRequest, string username) returns string {\n        // state of the application will be changed here\n    }\n}\n```\n\n### Avoid permissive Cross-Origin Resource Sharing\n\n| Property      | Description      |\n|---------------|------------------|\n| **Rule ID**   | ballerina/http:2 |\n| **Rule Kind** | Vulnerability    |\n\nBrowsers enforce the same-origin policy by default, as a security measure, preventing JavaScript frontends from making\ncross-origin HTTP requests to resources with different origins (domains, protocols, or ports). However, the target\nresource can include additional HTTP headers in its response, known as CORS headers, which serve as directives for the\nbrowser and modify the access control policy, effectively relaxing the same-origin policy.\n\n#### Noncompliant Code Example\n\n```ballerina\nlistener http:Listener endpoint = new (8080);\n\nservice / on endpoint {\n    @http:ResourceConfig {\n        cors: {\n            allowOrigins: [\"*\"] // Sensitive\n        }\n    }\n\n    resource function get example() returns http:Response|error? {\n        // Return response\n    }\n}\n```\n\n#### Compliant Code Example\n\nThe resource configuration should be configured exclusively for trusted origins and specific resources.\n\n```ballerina\nlistener http:Listener endpoint = new (8080);\n\nservice / on endpoint {\n    @http:ResourceConfig {\n        cors: {\n            allowOrigins: [\"trustedwebsite.com\"] // Compliant\n        }\n    }\n\n    resource function get example() returns http:Response|error? {\n        // Return response\n    }\n}\n```\n\n### Server-side requests should not be vulnerable to traversing attacks\n\n| Property      | Description      |\n|---------------|------------------|\n| **Rule ID**   | ballerina/http:3 |\n| **Rule Kind** | Vulnerability    |\n\nServer-Side Request Forgery (SSRF) is a vulnerability that allows attackers to induce the server-side application to make requests to an unintended location. When applications accept user input that influences server-side HTTP requests without proper validation or sanitization, attackers can manipulate these requests.\n\n#### Noncompliant Code Example\n\n```ballerina\nservice /api/v1 on new http:Listener(8080) {\n    resource function get users(string id) returns http:Response|error {\n        http:Client userClient = check new (\"http://example.com\");\n        // User input is used directly in the URL\n        return userClient->/users/[id];\n    }\n}\n```\n\n#### Compliant Code Example\n\n```ballerina\nservice /api/v1 on new http:Listener(8080) {\n    resource function get users(string id) returns http:Response|error {\n        // Validate the user input\n        string validatedId = check getValidatedId(id);\n        http:Client userClient = check new (\"http://example.com\");\n        return userClient->/users/[validatedId];\n    }\n}\n```\n\n### HTTP request redirections should not be open to forging attacks\n\n| Property      | Description      |\n|---------------|------------------|\n| **Rule ID**   | ballerina/http:4 |\n| **Rule Kind** | Vulnerability    |\n\nOpen redirects occur when an application accepts user-controlled input that specifies a URL to which the user will be redirected. When these redirects are implemented without proper validation, attackers can craft redirection URLs to malicious sites.\n\n#### Noncompliant Code Example\n\n```ballerina\nservice /api/v1 on new http:Listener(8080) {\n    resource function get redirect(string location) returns http:TemporaryRedirect {\n        return {\n            headers: {\n                // User input is used directly in the Location header\n                \"Location\": location\n            }\n        };\n    }\n}\n```\n\n#### Compliant Code Example\n\n```ballerina\nservice /api/v1 on new http:Listener(8080) {\n    resource function get redirect(string location) returns http:TemporaryRedirect|error {\n        // Validate the user input\n        string validatedLocation = check getValidatedLocation(location);\n        return {\n            headers: {\n                \"Location\": validatedLocation\n            }\n        };\n    }\n}\n```\n\n### I/O function calls should not be vulnerable to path injection attacks\n\n| Property      | Description    |\n|---------------|----------------|\n| **Rule ID**   | ballerina/io:1 |\n| **Rule Kind** | Vulnerability  |\n\nPath injections occur when an application constructs a file path using untrusted data without first validating the path.\n\nA malicious user can inject specially crafted values, like \"../\", to alter the intended path. This manipulation may lead\nthe path to resolve to a location within the filesystem where the user typically wouldn't have access.\n\n#### Noncompliant Code Example\n\n```ballerina\nimport ballerina/io;\nimport ballerina/http;\n\nservice /fileService on new http:Listener(8080) {\n   resource function get file(string fileName) returns string|error {\n       // Noncompliant: User input is directly concatenated into the file path\n       string filePath = \"./resources/\" + fileName;\n\n       // Reading file without validating the path\n       string content = check io:fileReadString(filePath);\n       return content;\n   }\n}\n```\n\n#### Compliant Code Example\n\nValidate and normalize the path to ensure the accessed file remains within the intended target directory.\n\n```ballerina\nimport ballerina/io;\nimport ballerina/http;\nimport ballerina/file;\n\nservice /fileService on new http:Listener(8080) {\n    resource function get file(string fileName) returns string|error {\n        string targetDirectory = \"./resources/\";\n\n        // Retrieve the normalized absolute path of the user-provided file\n        string absoluteUserFilePath = check file:getAbsolutePath(targetDirectory + fileName);\n        string normalizedAbsoluteUserFilePath = check file:normalizePath(absoluteUserFilePath, file:CLEAN);\n\n        // Retrieve the normalized absolute path of the target directory\n        string absoluteTargetFilePath = check file:getAbsolutePath(targetDirectory);\n        string normalizedTargetDirectoryPath = check file:normalizePath(absoluteTargetFilePath, file:CLEAN);\n\n        // Perform comparison of user provided file path and target directory path\n        boolean dirMatch = normalizedTargetDirectoryPath.equalsIgnoreCaseAscii(\n        check file:parentPath(normalizedAbsoluteUserFilePath));\n        if !dirMatch {\n            return \"Access to files outside the target directory is not allowed!\";\n        }\n\n        string content = check io:fileReadString(normalizedAbsoluteUserFilePath);\n        return content;\n    }\n}\n```\n\n### Potentially-sensitive configurable variables are logged\n\n| Property      | Description     |\n|---------------|-----------------|\n| **Rule ID**   | ballerina/log:1 |\n| **Rule Kind** | Vulnerability   |\n\nIn Ballerina, configurable variables typically contain sensitive data that should not be exposed externally and are\nusually kept secret. This includes credentials to access external systems, such as databases. To protect users' privacy,\ninformation is forbidden or strongly discouraged from being logged, such as user passwords or credit card numbers, which\nshould obviously not be stored or at least not in clear text.\n\n#### Noncompliant Code Example\n\n```ballerina\nimport ballerina/log;\n\nconfigurable string password = ?;\nconfigurable string user = ?;\n\npublic function main() {\n   log:printInfo(password);\n   log:printError(string `Error: ${password}`);\n   log:printWarn(`Error: ${password}`);\n   log:printError(\"Error \" + password);\n   log:printWarn(\"Warning\", password = password);\n   log:printError(\"Error\", password = password, user = user);\n}\n```\n\n#### Compliant Code Example\n\nAvoid using configurable variables inside the logging statement.\n\n```ballerina\nimport ballerina/log;\n\nint id = 12345;\n\npublic function main() {\n   log:printInfo(“task executed successfully.”, id = id);\n}\n```\n\n### Avoid constructing system command arguments from user input without proper sanitization\n\n| Property      | Description    |\n|---------------|----------------|\n| **Rule ID**   | ballerina/os:1 |\n| **Rule Kind** | Vulnerability  |\n\nArguments of system commands are processed by the executed program. The arguments are usually used to configure and\ninfluence the behavior of the programs. Control over a single argument might be enough for an attacker to trigger\ndangerous features like executing arbitrary commands or writing files into specific directories.\n\nArguments like -delete or -exec for the find command can alter the expected behavior and result in vulnerabilities.\n\n#### Noncompliant Code Example\n\n```ballerina\nstring terminalPath = ...;\nstring input = request.getQueryParamValue(\"input\").toString();\nstring[] cmd = [..., input];\n\n// Sensitive\nos:Process result = check os:exec({\n    value: terminalPath,\n    arguments: cmd\n});\n```\n\n#### Compliant Code Example\n\nUse an allow-list to restrict the arguments to trusted values.\n\n```ballerina\nstring terminalPath = ...;\nstring input = request.getQueryParamValue(\"input\").toString();\nstring[] cmd = [..., input];\nstring[] allowed = [\"main\", \"main.bal\", \"bal\"];\n\nif allowed.some(keyword => keyword.equalsIgnoreCaseAscii(input)) {\n    os:Process result = check os:exec({\n        value: terminalPath,\n        arguments: cmd\n    });\n}\n```\n\n### Avoid constructing environment variables from user input without proper sanitization\n\n| Property      | Description    |\n|---------------|----------------|\n| **Rule ID**   | ballerina/os:2 |\n| **Rule Kind** | Vulnerability  |\n\nEnvironment variables are often used to store sensitive configuration data, credentials, and application settings. When\napplications allow untrusted input to define or modify environment variables without proper validation, they can\nintroduce significant security risks.\n\nUsing untrusted input to set environment variables can lead to various security concerns because environment variables\nare often globally accessible within a process and can affect child processes.\n\n#### Noncompliant Code Example\n\n```ballerina\nservice / on new http:Listener(8080) {\n    resource function get configPath(http:Request req) {\n        string configPath = req.getQueryParamValue(\"path\") ?: \"\";\n        \n        os:Error? err = os:setEnv(\"CONFIG_PATH\", configPath);\n    }\n}\n```\n\n#### Compliant Code Example\n\nImplement proper input validation by ensuring that only alphanumeric characters are allowed in the environment variable\nvalue.\n\n```ballerina\nservice / on new http:Listener(8080) {\n    resource function get configPath(http:Request req) returns string|error {\n        string configPath = req.getQueryParamValue(\"path\") ?: \"\";\n        \n        if regex:matches(configPath, \"^[a-zA-Z0-9]*$\") {\n            os:Error? err = os:setEnv(\"CONFIG_PATH\", configPath);\n            \n            if err is os:Error {\n                return error(\"Failed to set environment variable\");\n            }\n            return \"Environment variable set successfully\";\n        } else {\n            return error(\"Invalid input: Only alphanumeric characters are allowed\");\n        }\n    }\n}\n```\n\n### Avoid using weak cipher algorithms when signing and verifying JWTs\n\n| Property      | Description     |\n|---------------|-----------------|\n| **Rule ID**   | ballerina/jwt:1 |\n| **Rule Kind** | Vulnerability   |\n\nJSON Web Tokens (JWTs) are a compact, URL-safe means of representing claims between two parties. They're commonly used\nfor authentication and authorization in web applications. The security of JWT-based authentication depends critically on\nthe signature mechanism used to verify token authenticity.\n\nWhen JWTs are issued without a signature or with weak algorithms, attackers can forge tokens to impersonate legitimate\nusers, modify token claims, bypass authentication entirely, and gain unauthorized access to protected resources.\n\n#### Noncompliant Code Example\n\n```ballerina\njwt:IssuerConfig issuerConfig = {\n    issuer: \"ballerina\",\n    expTime: 3600,\n    signatureConfig: {\n        algorithm: jwt:NONE\n    }\n};\n\nstring token = check jwt:issue(issuerConfig);\n```\n\n#### Compliant Code Example\n\nUse a strong signing algorithm like RS256, which uses RSA encryption with an SHA-256 hash function.\n\n```ballerina\njwt:IssuerConfig issuerConfig = {\n    issuer: \"ballerina\",\n    expTime: 3600,\n    signatureConfig: {\n        algorithm: jwt:RS256,\n        config: {\n            keyFile: \"private.key\"\n        }\n    }\n};\n\nstring token = check jwt:issue(issuerConfig);\n```\n\n### Avoid unverified server hostnames during SSL/TLS connections\n\n| Property      | Description       |\n|---------------|-------------------|\n| **Rule ID**   | ballerina/email:1 |\n| **Rule Kind** | Vulnerability     |\n\nUsing outdated or weak SSL/TLS protocols puts application communications at serious risk. These obsolete protocols\ncontain known vulnerabilities that attackers can exploit to intercept, decrypt, or manipulate data transmitted between\nclients and servers.\n\n#### Noncompliant Code Example\n\n```ballerina\n\npublic function main() returns error? {\n    email:PopClient _ = check new (\"smtp.email.com\", \"sender@email.com\", \"pass123\", clientConfig = {\n        port: 465,\n        secureSocket: {\n            cert: \"path/to/certfile.crt\",\n            protocol: {\n                name: email:TLS,\n                versions: [\"TLSv1.2\", \"TLSv1.1\"]\n            },\n            ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"],\n            verifyHostName: false\n        }\n    });\n}\n```\n\n#### Compliant Code Example\n\nEnable hostname verification to ensure the server's certificate matches the hostname.\n\n```ballerina\n\npublic function main() returns error? {\n    email:PopClient _ = check new (\"smtp.email.com\", \"sender@email.com\", \"pass123\", clientConfig = {\n        port: 465,\n        secureSocket: {\n            cert: \"path/to/certfile.crt\",\n            protocol: {\n                name: email:TLS,\n                versions: [\"TLSv1.2\", \"TLSv1.1\"]\n            },\n            ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"],\n            verifyHostName: true\n        }\n    });\n}\n```\n","id":"scan-rules","sub":"static-code-analysis","third":"","slug":"static-code-analysis/scan-rules","codes":"[[981068849,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> checkResult</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> checkpanic</span><span style=\\\"color:#6F42C1\\\"> getResult</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> getResult</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> json</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-927776896,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> checkResult</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#6F42C1\\\"> getResult</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    if</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // handle error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> getResult</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> json</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2075754546,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> checkResult</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    json</span><span style=\\\"color:#24292E\\\"> result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#6F42C1\\\"> getResult</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> getResult</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> json</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1220027815,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> a</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> b</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">a</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">   name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[424581822,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> a</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">a</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">   name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-800292386,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> helperFunction</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   // isolated code</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1018345353,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> helperFunction</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   // isolated code</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1830117771,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">class</span><span style=\\\"color:#6F42C1\\\"> EvenNumber</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> i </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> generate</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.i </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#005CC5\\\"> 2</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[271411741,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">class</span><span style=\\\"color:#6F42C1\\\"> EvenNumber</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> i </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> generate</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        lock</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.i </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#005CC5\\\"> 2</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[27796212,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public class</span><span style=\\\"color:#6F42C1\\\"> EvenNumber</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> i </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> generate</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        lock</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.i </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#005CC5\\\"> 2</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[822239053,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated class</span><span style=\\\"color:#6F42C1\\\"> EvenNumber</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> i </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> generate</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        lock</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.i </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#005CC5\\\"> 2</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-879075473,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Hashable</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> hash</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1867196124,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Hashable</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> hash</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-709285023,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   int</span><span style=\\\"color:#24292E\\\"> a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   boolean</span><span style=\\\"color:#24292E\\\"> b </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> a </span><span style=\\\"color:#D73A49\\\">&#x3C;=</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">MAX_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-234858957,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   int</span><span style=\\\"color:#24292E\\\"> a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   boolean</span><span style=\\\"color:#24292E\\\"> b </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> a </span><span style=\\\"color:#D73A49\\\">&#x3C;=</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">MIN_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1395665587,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   int</span><span style=\\\"color:#24292E\\\"> a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> x </span><span style=\\\"color:#D73A49\\\">%</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">; </span><span style=\\\"color:#6A737D\\\">// always evaluates to zero</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1592381861,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   int</span><span style=\\\"color:#24292E\\\"> x </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   x </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> x;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-522672885,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">class</span><span style=\\\"color:#6F42C1\\\"> A</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">  private</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">  private</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] b </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">  function</span><span style=\\\"color:#6F42C1\\\"> foo</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    self</span><span style=\\\"color:#24292E\\\">.a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  A a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> A</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[39480781,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">class</span><span style=\\\"color:#6F42C1\\\"> A</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">  private</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">  function</span><span style=\\\"color:#6F42C1\\\"> foo</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      self</span><span style=\\\"color:#24292E\\\">.a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  A a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> A</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1868599836,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   foreach </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#24292E\\\"> i </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#005CC5\\\"> 9</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">i</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[426784156,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   foreach </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#24292E\\\"> i </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#005CC5\\\">9</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">i</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-839025351,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[] cipherText </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptAesEcb</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">data</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">key</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[335487454,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[] cipherText </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptAesCbc</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">data</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">initialVector</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-1473511791,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[] cipherText </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptAesGcm</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">data</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">initialVector</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-1635227029,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Default padding is PKCS1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[] cipherText </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptRsaEcb</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">data</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">publicKey</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">cipherText </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptRsaEcb</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">data</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">publicKey</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">PKCS1);</span></span></code></pre>\"],[996027147,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[] cipherText </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptRsaEcb</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">data</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">publicKey</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">OAEPwithMD5andMGF1);</span></span></code></pre>\"],[323351517,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> password </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"mySecurePassword123\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Using insufficient work factor</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> hashedPassword </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">hashBcrypt</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">password</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">4</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Hashed Password: \\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">hashedPassword</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-334974696,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> hashPassword</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> password </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"mySecurePassword123\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Using sufficient work factor (14 or higher for better security)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> hashedPassword </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">hashBcrypt</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">password</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">14</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Hashed Password: \\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">hashedPassword</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1943347466,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> password </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"mySecurePassword123\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Using insufficient memory configuration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> hashedPassword </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">hashArgon2</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">password</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">memory</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 4096</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Hashed Password: \\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">hashedPassword</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1888002946,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> hashPassword</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> password </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"mySecurePassword123\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Using recommended parameters: sufficient memory, iterations, and parallelism</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> hashedPassword </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">hashArgon2</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">password</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">iterations</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 3</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">memory</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 65536</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">parallelism</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 4</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Hashed Password: \\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">hashedPassword</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-936521804,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> encryptData</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> data</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> byte</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">] initialVector </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">3</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">4</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">5</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">6</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">7</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">8</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">9</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">10</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">11</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">12</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">13</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">14</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">15</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">] key </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">15</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">14</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">13</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">12</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">11</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">10</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">9</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">8</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">7</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">6</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">5</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">4</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">3</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] dataBytes </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> data.</span><span style=\\\"color:#6F42C1\\\">toBytes</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptAesGcm</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">dataBytes</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">initialVector</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1243306014,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/crypto;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/random;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> encryptData</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> data</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[], </span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">]]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">] initialVector </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    foreach </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#24292E\\\"> i </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#005CC5\\\">15</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        initialVector[i] </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#E36209\\\"> random</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">createIntInRange</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">255</span><span style=\\\"color:#24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">] key </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">15</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">14</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">13</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">12</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">11</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">10</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">9</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">8</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">7</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">6</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">5</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">4</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">3</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] dataBytes </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> data.</span><span style=\\\"color:#6F42C1\\\">toBytes</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] encryptedData </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptAesGcm</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">dataBytes</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">initialVector</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> [encryptedData, initialVector];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1082119147,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> encryptMessage</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> byte</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Static nonce - this is vulnerable!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">12</span><span style=\\\"color:#24292E\\\">] nonce </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">] key </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">3</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">4</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">5</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">6</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">7</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">8</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">9</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">10</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">11</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">12</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">13</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">14</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">15</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] messageBytes </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> message.</span><span style=\\\"color:#6F42C1\\\">toBytes</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptAesCbc</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">messageBytes</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">nonce</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1870819658,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/crypto;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/random;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> encryptMessage</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> message</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[], </span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">12</span><span style=\\\"color:#24292E\\\">]]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Generate unique nonce for each encryption</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">12</span><span style=\\\"color:#24292E\\\">] nonce </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    foreach </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#24292E\\\"> i </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#005CC5\\\">11</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        nonce[i] </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#E36209\\\"> random</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">createIntInRange</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">255</span><span style=\\\"color:#24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">] key </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">3</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">4</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">5</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">6</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">7</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">8</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">9</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">10</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">11</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">12</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">13</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">14</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">15</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">16</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] messageBytes </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> message.</span><span style=\\\"color:#6F42C1\\\">toBytes</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] encryptedData </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">encryptAesCbc</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">messageBytes</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">nonce</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> [encryptedData, nonce];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[828268756,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> tempFolderPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">getEnv</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"TMP\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">create</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">tempFolderPath</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#032F62\\\"> \\\"/\\\"</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#032F62\\\"> \\\"myfile.txt\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">getAbsolutePath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">tempFolderPath</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#032F62\\\"> \\\"/\\\"</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#032F62\\\"> \\\"myfile.txt\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">createTemp</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"suffix\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"prefix\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">createTempDir</span><span style=\\\"color:#24292E\\\">((), </span><span style=\\\"color:#032F62\\\">\\\"prefix\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[1317903178,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">create</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"./myDirectory/myfile.txt\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">getAbsolutePath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"./myDirectory/myfile.txt\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[646234740,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener endpoint </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> targetDirectory </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"./path/to/target/directory/\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> endpoint {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> deleteFile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> fileName</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">remove</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">targetDirectory</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#E36209\\\"> fileName</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-661584478,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener endpoint </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> targetDirectory </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"./path/to/target/directory/\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> endpoint {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> deleteFile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> fileName</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Retrieve the normalized absolute path of the user provided file</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> absoluteUserFilePath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">getAbsolutePath</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            targetDirectory</span><span style=\\\"color:#D73A49\\\"> +</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            fileName</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> normalizedAbsoluteUserFilePath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">normalizePath</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            absoluteUserFilePath</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">CLEAN);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Check whether the user provided file exists</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        boolean</span><span style=\\\"color:#24292E\\\"> fileExists </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">test</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            normalizedAbsoluteUserFilePath</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">EXISTS);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#D73A49\\\"> !</span><span style=\\\"color:#24292E\\\">fileExists {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#032F62\\\"> \\\"File does not exist!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Retrieve the normalized absolute path of parent directory of the user provided file</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> canonicalDestinationPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">parentPath</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            normalizedAbsoluteUserFilePath</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> normalizedCanonicalDestinationPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">normalizePath</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            canonicalDestinationPath</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">CLEAN);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Retrieve the normalized absolute path of the target directory</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> absoluteTargetFilePath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">getAbsolutePath</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            targetDirectory</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> normalizedTargetDirectoryPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">normalizePath</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            absoluteTargetFilePath</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">CLEAN);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Perform comparison of user provided file path and target directory path</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        boolean</span><span style=\\\"color:#24292E\\\"> dirMatch </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> normalizedTargetDirectoryPath.</span><span style=\\\"color:#6F42C1\\\">equalsIgnoreCaseAscii</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            normalizedCanonicalDestinationPath</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#D73A49\\\"> !</span><span style=\\\"color:#24292E\\\">dirMatch {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#032F62\\\"> \\\"Entry is not in the target directory!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">remove</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">normalizedAbsoluteUserFilePath</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[521478173,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener endpoint </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> endpoint {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Sensitive: by default all HTTP methods are allowed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> default</span><span style=\\\"color:#6F42C1\\\"> deleteRequest</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request clientRequest, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> username</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // state of the application will be changed here</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1402667726,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> endpoint {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> delete</span><span style=\\\"color:#6F42C1\\\"> deleteRequest</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request clientRequest, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> username</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // state of the application will be changed here</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[860311252,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener endpoint </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> endpoint {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        cors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            allowOrigins</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"*\\\"</span><span style=\\\"color:#24292E\\\">] </span><span style=\\\"color:#6A737D\\\">// Sensitive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> example</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Response</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Return response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[617886734,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener endpoint </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#24292E\\\"> endpoint {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        cors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            allowOrigins</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"trustedwebsite.com\\\"</span><span style=\\\"color:#24292E\\\">] </span><span style=\\\"color:#6A737D\\\">// Compliant</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> example</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Response</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Return response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1427568364,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /api/v1</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> users</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Response</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client userClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://example.com\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // User input is used directly in the URL</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> userClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#24292E\\\">users</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">[id];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1016391040,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /api/v1</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> users</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Response</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Validate the user input</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> validatedId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#6F42C1\\\"> getValidatedId</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client userClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"http://example.com\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> userClient</span><span style=\\\"color:#D73A49\\\">->/</span><span style=\\\"color:#24292E\\\">users</span><span style=\\\"color:#D73A49\\\">/</span><span style=\\\"color:#24292E\\\">[validatedId];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1665035884,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /api/v1</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> redirect</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> location</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">TemporaryRedirect {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            headers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">                // User input is used directly in the Location header</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                \\\"Location\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> location</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-425108473,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /api/v1</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> redirect</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> location</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">TemporaryRedirect</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Validate the user input</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> validatedLocation </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#6F42C1\\\"> getValidatedLocation</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">location</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            headers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                \\\"Location\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> validatedLocation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1438918461,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /fileService</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> file</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> fileName</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">       // Noncompliant: User input is directly concatenated into the file path</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">       string</span><span style=\\\"color:#24292E\\\"> filePath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"./resources/\\\"</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#24292E\\\"> fileName;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">       // Reading file without validating the path</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">       string</span><span style=\\\"color:#24292E\\\"> content </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">fileReadString</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">filePath</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">       return</span><span style=\\\"color:#24292E\\\"> content;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-562245778,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/file;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /fileService</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> file</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> fileName</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> targetDirectory </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"./resources/\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Retrieve the normalized absolute path of the user-provided file</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> absoluteUserFilePath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">getAbsolutePath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">targetDirectory</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#E36209\\\"> fileName</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> normalizedAbsoluteUserFilePath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">normalizePath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">absoluteUserFilePath</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">CLEAN);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Retrieve the normalized absolute path of the target directory</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> absoluteTargetFilePath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">getAbsolutePath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">targetDirectory</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> normalizedTargetDirectoryPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">normalizePath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">absoluteTargetFilePath</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">CLEAN);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Perform comparison of user provided file path and target directory path</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        boolean</span><span style=\\\"color:#24292E\\\"> dirMatch </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> normalizedTargetDirectoryPath.</span><span style=\\\"color:#6F42C1\\\">equalsIgnoreCaseAscii</span><span style=\\\"color:#24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        check</span><span style=\\\"color:#E36209\\\"> file</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">parentPath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">normalizedAbsoluteUserFilePath</span><span style=\\\"color:#24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#D73A49\\\"> !</span><span style=\\\"color:#24292E\\\">dirMatch {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#032F62\\\"> \\\"Access to files outside the target directory is not allowed!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> content </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">fileReadString</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">normalizedAbsoluteUserFilePath</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> content;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1435711513,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">configurable</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> password </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> ?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">configurable</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> user </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> ?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">password</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#032F62\\\"> `Error: ${</span><span style=\\\"color:#24292E\\\">password</span><span style=\\\"color:#032F62\\\">}`</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printWarn</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">`Error: ${</span><span style=\\\"color:#24292E\\\">password</span><span style=\\\"color:#032F62\\\">}`</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Error \\\"</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#E36209\\\"> password</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printWarn</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Warning\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">password</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> password);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Error\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">password</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> password, </span><span style=\\\"color:#E36209\\\">user</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> user);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[949289509,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#24292E\\\"> id </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 12345</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(“</span><span style=\\\"color:#E36209\\\">task</span><span style=\\\"color:#E36209\\\"> executed</span><span style=\\\"color:#24292E\\\"> successfully.”, </span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> id);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1114885329,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> terminalPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> input </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> request.</span><span style=\\\"color:#6F42C1\\\">getQueryParamValue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"input\\\"</span><span style=\\\"color:#24292E\\\">).</span><span style=\\\"color:#6F42C1\\\">toString</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[] cmd </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#24292E\\\">, input];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Sensitive</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Process result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">exec</span><span style=\\\"color:#24292E\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> terminalPath,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    arguments</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> cmd</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">});</span></span></code></pre>\"],[-1036215976,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> terminalPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> ...</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> input </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> request.</span><span style=\\\"color:#6F42C1\\\">getQueryParamValue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"input\\\"</span><span style=\\\"color:#24292E\\\">).</span><span style=\\\"color:#6F42C1\\\">toString</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[] cmd </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#24292E\\\">, input];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[] allowed </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"main\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"main.bal\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"bal\\\"</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">if</span><span style=\\\"color:#24292E\\\"> allowed.</span><span style=\\\"color:#6F42C1\\\">some</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">keyword</span><span style=\\\"color:#D73A49\\\"> =></span><span style=\\\"color:#24292E\\\"> keyword.</span><span style=\\\"color:#6F42C1\\\">equalsIgnoreCaseAscii</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">input</span><span style=\\\"color:#24292E\\\">)) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Process result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">exec</span><span style=\\\"color:#24292E\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> terminalPath,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        arguments</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> cmd</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2100108155,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> configPath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> configPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> req.</span><span style=\\\"color:#6F42C1\\\">getQueryParamValue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"path\\\"</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">?:</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error? err </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">setEnv</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"CONFIG_PATH\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">configPath</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1917203041,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> configPath</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request req) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> configPath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> req.</span><span style=\\\"color:#6F42C1\\\">getQueryParamValue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"path\\\"</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">?:</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> regex</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">matches</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">configPath</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"^[a-zA-Z0-9]*$\\\"</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error? err </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">setEnv</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"CONFIG_PATH\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">configPath</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            if</span><span style=\\\"color:#24292E\\\"> err </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> os</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Failed to set environment variable\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#032F62\\\"> \\\"Environment variable set successfully\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        } </span><span style=\\\"color:#D73A49\\\">else</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Invalid input: Only alphanumeric characters are allowed\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[871593951,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">IssuerConfig issuerConfig </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    issuer</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    expTime</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3600</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    signatureConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        algorithm</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> jwt:NONE</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> token </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">issue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">issuerConfig</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-260840744,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">IssuerConfig issuerConfig </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    issuer</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    expTime</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3600</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    signatureConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        algorithm</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> jwt:RS256,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        config</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> token </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">issue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">issuerConfig</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[798756194,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">ublic </span><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   email</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">PopClient _ </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"smtp.email.com\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"sender@email.com\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"pass123\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">clientConfig</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       port</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 465</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       secureSocket</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">           cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/certfile.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">           protocol</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">               name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> email:TLS,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">               versions</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLSv1.2\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"TLSv1.1\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">           },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">           ciphers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">           verifyHostName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   });</span></span></code></pre>\"],[1878855141,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">ublic </span><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   email</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">PopClient _ </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"smtp.email.com\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"sender@email.com\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"pass123\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">clientConfig</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       port</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 465</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       secureSocket</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">           cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/certfile.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">           protocol</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">               name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> email:TLS,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">               versions</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLSv1.2\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"TLSv1.1\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">           },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">           ciphers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">           verifyHostName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   });</span></span></code></pre>\"]]"},"__N_SSG":true}