{"pageProps":{"samples":{"data-immutability-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\ntype Student record {|\n    int grade;\n    string name;\n    map<int> marks;\n|};\n\npublic function main() {\n    Student & readonly student = {\n        grade: 12,\n        name: \"John\",\n        // The applicable contextually-expected type for marks now is `map<int> & readonly`.\n        // Thus, the value for marks will be constructed as an immutable map.\n        marks: {\n            \"Maths\": 75,\n            \"English\": 90\n        }\n    };\n\n    // student.grade = 11; // Compile time error\n\n    // student.marks[\"Maths\"] = 80; // Compile time error\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"type Student record {|\n    int grade;\n    string name;\n    map<int> marks;\n|};\n\npublic function main() {\n    Student &#x26; readonly student = {\n        grade: 12,\n        name: &#x22;John&#x22;,\n        // The applicable contextually-expected type for marks now is &#x60;map<int> &#x26; readonly&#x60;.\n        // Thus, the value for marks will be constructed as an immutable map.\n        marks: {\n            &#x22;Maths&#x22;: 75,\n            &#x22;English&#x22;: 90\n        }\n    };\n\n    // student.grade = 11; // Compile time error\n\n    // student.marks[&#x22;Maths&#x22;] = 80; // Compile time error\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Student</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> grade;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">int</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> marks;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Student </span><span style=\"color:#D73A49\">&#x26;</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#24292E\"> student </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        grade</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 12</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // The applicable contextually-expected type for marks now is `map&#x3C;int> &#x26; readonly`.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Thus, the value for marks will be constructed as an immutable map.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        marks</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            \"Maths\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 75</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            \"English\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 90</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // student.grade = 11; // Compile time error</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // student.marks[\"Maths\"] = 80; // Compile time error</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"data-immutability-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Main {\n    record Student(int grade, String name, Map<String, Integer> marks) {}\n\n    public static void main(String[] args) {\n        Map<String, Integer> marks = new HashMap<>();\n        marks.put(\"Maths\", 75);\n        marks.put(\"English\", 90);\n\n        Student student1 = new Student(12, \"John\", marks);\n\n        // student1.course.credits = 4; // Compile time error\n        // student1.marks = new HashMap<>(); // Compile time error\n\n        student1.marks.put(\"English\", 95); // Shallow immutability\n\n        Student student2 = new Student(12, \"John\", Collections.unmodifiableMap(marks));\n        student2.marks.put(\"English\", 95); // Fails at runtime\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Main {\n    record Student(int grade, String name, Map<String, Integer> marks) {}\n\n    public static void main(String[] args) {\n        Map<String, Integer> marks = new HashMap<>();\n        marks.put(&#x22;Maths&#x22;, 75);\n        marks.put(&#x22;English&#x22;, 90);\n\n        Student student1 = new Student(12, &#x22;John&#x22;, marks);\n\n        // student1.course.credits = 4; // Compile time error\n        // student1.marks = new HashMap<>(); // Compile time error\n\n        student1.marks.put(&#x22;English&#x22;, 95); // Shallow immutability\n\n        Student student2 = new Student(12, &#x22;John&#x22;, Collections.unmodifiableMap(marks));\n        student2.marks.put(&#x22;English&#x22;, 95); // Fails at runtime\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.Collections;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.HashMap;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.Map;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    record</span><span style=\"color:#6F42C1\"> Student</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">int</span><span style=\"color:#E36209\"> grade</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> name</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">Map</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">Integer</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\"> marks</span><span style=\"color:#24292E\">) {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Map</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String, Integer</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> marks </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> HashMap</span><span style=\"color:#D73A49\">&#x3C;></span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        marks.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Maths\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">75</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        marks.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"English\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">90</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Student student1 </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> Student</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">12</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"John\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">marks</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // student1.course.credits = 4; // Compile time error</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // student1.marks = new HashMap&#x3C;>(); // Compile time error</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        student1.marks.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"English\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">95</span><span style=\"color:#24292E\">); </span><span style=\"color:#6A737D\">// Shallow immutability</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Student student2 </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> Student</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">12</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"John\"</span><span style=\"color:#24292E\">, Collections.</span><span style=\"color:#6F42C1\">unmodifiableMap</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">marks</span><span style=\"color:#24292E\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        student2.marks.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"English\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">95</span><span style=\"color:#24292E\">); </span><span style=\"color:#6A737D\">// Fails at runtime</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"data-immutability":{"frontmatter":{"title":"Data immutability","description":"Immutable data ensures data integrity, simplifies reasoning about code, and reduces the potential for unexpected side effects. <br><br>Ballerina and Java approach data immutability differently. In Ballerina, immutability is emphasized by default, providing deep immutability for data. On the other hand, in Java, a `record` is considered to be shallowly immutable.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/data-oriented-programming/immutability","image":""},"content":"","code":""},"expressive-query":{"frontmatter":{"title":"Declarative data processing","description":"Ballerina's query language is a powerful feature that enhances data-oriented programming by providing a concise and expressive way to transform and manipulate data. It allows developers to perform complex data operations such as filtering, mapping, aggregating, and sorting with ease. The query language in Ballerina is specifically designed to work seamlessly with structured data types like records, making it well-suited for data-oriented programming tasks.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/declarative-data-processing/main.bal","image":""},"content":"```\nimport ballerina/http;\nimport ballerina/io;\n\ntype Country record {\n    string country;\n    int population;\n    string continent;\n    int cases;\n    int deaths;\n};\n\n// Prints the top 10 countries having the highest case-fatality ratio grouped by continent.\npublic function main() returns error? {\n    http:Client diseaseEp = check new (\"https://disease.sh/v3\");\n    Country[] countries = check diseaseEp->/covid\\-19/countries;\n\n    json summary =\n        from var {country, continent, population, cases, deaths} in countries\n            where population >= 100000 && deaths >= 100\n            let decimal caseFatalityRatio = (<decimal>deaths / <decimal>cases * 100).round(4)\n            let json countryInfo = {country, population, caseFatalityRatio}\n            order by caseFatalityRatio descending\n            limit 10\n            group by continent\n            order by avg(caseFatalityRatio)\n            select {continent, countries: [countryInfo]};\n    io:println(summary);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/http;\nimport ballerina/io;\n\ntype Country record {\n    string country;\n    int population;\n    string continent;\n    int cases;\n    int deaths;\n};\n\n// Prints the top 10 countries having the highest case-fatality ratio grouped by continent.\npublic function main() returns error? {\n    http:Client diseaseEp = check new (&#x22;https://disease.sh/v3&#x22;);\n    Country[] countries = check diseaseEp->/covid\\-19/countries;\n\n    json summary =\n        from var {country, continent, population, cases, deaths} in countries\n            where population >= 100000 &#x26;&#x26; deaths >= 100\n            let decimal caseFatalityRatio = (<decimal>deaths / <decimal>cases * 100).round(4)\n            let json countryInfo = {country, population, caseFatalityRatio}\n            order by caseFatalityRatio descending\n            limit 10\n            group by continent\n            order by avg(caseFatalityRatio)\n            select {continent, countries: [countryInfo]};\n    io:println(summary);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Country</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> country;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> population;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> continent;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> cases;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> deaths;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Prints the top 10 countries having the highest case-fatality ratio grouped by continent.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client diseaseEp </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#032F62\">\"https://disease.sh/v3\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Country[] countries </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> diseaseEp</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">covid\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#005CC5\">19</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">countries;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> summary </span><span style=\"color:#D73A49\">=</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        from</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> {country, continent, population, cases, deaths} </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> countries</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            where</span><span style=\"color:#24292E\"> population </span><span style=\"color:#D73A49\">>=</span><span style=\"color:#005CC5\"> 100000</span><span style=\"color:#D73A49\"> &#x26;&#x26;</span><span style=\"color:#24292E\"> deaths </span><span style=\"color:#D73A49\">>=</span><span style=\"color:#005CC5\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            let</span><span style=\"color:#005CC5\"> decimal</span><span style=\"color:#24292E\"> caseFatalityRatio </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#005CC5\">decimal</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\">deaths</span><span style=\"color:#D73A49\"> /</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">decimal</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\">cases</span><span style=\"color:#D73A49\"> *</span><span style=\"color:#005CC5\"> 100</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">round</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">4</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            let</span><span style=\"color:#005CC5\"> json</span><span style=\"color:#24292E\"> countryInfo </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {country, population, caseFatalityRatio}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            order</span><span style=\"color:#D73A49\"> by</span><span style=\"color:#24292E\"> caseFatalityRatio </span><span style=\"color:#D73A49\">descending</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            limit</span><span style=\"color:#005CC5\"> 10</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            group</span><span style=\"color:#D73A49\"> by</span><span style=\"color:#24292E\"> continent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            order</span><span style=\"color:#D73A49\"> by</span><span style=\"color:#6F42C1\"> avg</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">caseFatalityRatio</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            select</span><span style=\"color:#24292E\"> {continent, countries</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [countryInfo]};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">summary</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"flexible-typing-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\n// closed record\ntype PersonalDetails record {|\n    string name;\n    int age;\n|};\n\n// open record\ntype EmployeeDetails record {\n    string designation;\n    float salary;\n};\n\npublic function main() {\n    // Create a new employee record with closed fields\n    PersonalDetails personalDetails = {name: \"John Doe\", age: 30};\n\n    // Access and modify closed record fields using dot notation\n    personalDetails.name = \"Jane Smith\";\n    personalDetails.age = personalDetails.age + 1;\n\n    // Create a new employee record with open and closed fields\n    EmployeeDetails employeeInfo = {designation: \"n/a\", salary: 3000.0, ...personalDetails};\n\n    // Access and modify open record fields using dot notation\n    employeeInfo.designation = \"Software Engineer\";\n    employeeInfo.salary = 5000.0;\n\n    // Access and modify record fields using bracket notation\n    employeeInfo[\"name\"] = \"John Smith\";\n\n    // Add a new field to the employee record\n    employeeInfo[\"address\"] = \"123 Main St\";\n\n    // Print the updated employee information\n    io:println(personalDetails);\n    io:println(employeeInfo);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\n// closed record\ntype PersonalDetails record {|\n    string name;\n    int age;\n|};\n\n// open record\ntype EmployeeDetails record {\n    string designation;\n    float salary;\n};\n\npublic function main() {\n    // Create a new employee record with closed fields\n    PersonalDetails personalDetails = {name: &#x22;John Doe&#x22;, age: 30};\n\n    // Access and modify closed record fields using dot notation\n    personalDetails.name = &#x22;Jane Smith&#x22;;\n    personalDetails.age = personalDetails.age + 1;\n\n    // Create a new employee record with open and closed fields\n    EmployeeDetails employeeInfo = {designation: &#x22;n/a&#x22;, salary: 3000.0, ...personalDetails};\n\n    // Access and modify open record fields using dot notation\n    employeeInfo.designation = &#x22;Software Engineer&#x22;;\n    employeeInfo.salary = 5000.0;\n\n    // Access and modify record fields using bracket notation\n    employeeInfo[&#x22;name&#x22;] = &#x22;John Smith&#x22;;\n\n    // Add a new field to the employee record\n    employeeInfo[&#x22;address&#x22;] = &#x22;123 Main St&#x22;;\n\n    // Print the updated employee information\n    io:println(personalDetails);\n    io:println(employeeInfo);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// closed record</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> PersonalDetails</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// open record</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> EmployeeDetails</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> designation;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> salary;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Create a new employee record with closed fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    PersonalDetails personalDetails </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">, age</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 30</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Access and modify closed record fields using dot notation</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    personalDetails.name </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"Jane Smith\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    personalDetails.age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> personalDetails.age </span><span style=\"color:#D73A49\">+</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Create a new employee record with open and closed fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    EmployeeDetails employeeInfo </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {designation</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"n/a\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3000.0</span><span style=\"color:#24292E\">, </span><span style=\"color:#D73A49\">...</span><span style=\"color:#24292E\">personalDetails};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Access and modify open record fields using dot notation</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeInfo.designation </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"Software Engineer\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeInfo.salary </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> 5000.0</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Access and modify record fields using bracket notation</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeInfo[</span><span style=\"color:#032F62\">\"name\"</span><span style=\"color:#24292E\">] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"John Smith\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Add a new field to the employee record</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeInfo[</span><span style=\"color:#032F62\">\"address\"</span><span style=\"color:#24292E\">] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"123 Main St\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Print the updated employee information</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">personalDetails</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">employeeInfo</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"flexible-typing-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport java.util.HashMap;\nimport java.util.Map;\n\nfinal class PersonalDetails {\n    String name;\n    int age;\n\n    PersonalDetails(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"PersonalDetails{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\nfinal class EmployeeDetails {\n    String designation;\n    float salary;\n    Map<String, Object> otherFields;\n\n    EmployeeDetails(String designation, float salary, Map<String, Object> otherFields) {\n        this.designation = designation;\n        this.salary = salary;\n        this.otherFields = otherFields;\n    }\n\n    @Override\n    public String toString() {\n        return \"EmployeeDetails{\" +\n                \"designation='\" + designation + '\\'' +\n                \", salary=\" + salary +\n                \", otherFields=\" + otherFields +\n                '}';\n    }\n};\n\nclass Main {\n    public static void main(String[] args) {\n        // Create a new PersonalDetails populating defined fields\n        PersonalDetails personalDetails = new PersonalDetails(\"John Doe\", 30);\n\n        // Access and modify defined fields\n        personalDetails.name = \"Jane Smith\";\n        personalDetails.age = personalDetails.age + 1;\n\n        // Create a new EmployeeDetails with dynamic fields\n        EmployeeDetails employeeInfo = new EmployeeDetails(\"n/a\", 3000.0f,\n                convertToMap(personalDetails));\n\n        // Access and modify defined fields\n        employeeInfo.designation = \"Software Engineer\";\n        employeeInfo.salary = 5000.0f;\n\n        // Access and modify dynamically added fields\n        employeeInfo.otherFields.put(\"name\", \"John Smith\");\n\n        // Add a new dynamic field\n        employeeInfo.otherFields.put(\"address\", \"123 Main St\");\n\n        // Print the updated data\n        System.out.println(personalDetails);\n        System.out.println(employeeInfo);\n    }\n\n    static Map<String, Object> convertToMap(Object obj) {\n        Map<String, Object> map = new HashMap<>();\n        for (var field : obj.getClass().getDeclaredFields()) {\n            try {\n                map.put(field.getName(), field.get(obj));\n            } catch (IllegalAccessException ignored) {\n            }\n        }\n        return map;\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import java.util.HashMap;\nimport java.util.Map;\n\nfinal class PersonalDetails {\n    String name;\n    int age;\n\n    PersonalDetails(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return &#x22;PersonalDetails{&#x22; +\n                &#x22;name=&#x27;&#x22; + name + &#x27;\\&#x27;&#x27; +\n                &#x22;, age=&#x22; + age +\n                &#x27;}&#x27;;\n    }\n}\n\nfinal class EmployeeDetails {\n    String designation;\n    float salary;\n    Map<String, Object> otherFields;\n\n    EmployeeDetails(String designation, float salary, Map<String, Object> otherFields) {\n        this.designation = designation;\n        this.salary = salary;\n        this.otherFields = otherFields;\n    }\n\n    @Override\n    public String toString() {\n        return &#x22;EmployeeDetails{&#x22; +\n                &#x22;designation=&#x27;&#x22; + designation + &#x27;\\&#x27;&#x27; +\n                &#x22;, salary=&#x22; + salary +\n                &#x22;, otherFields=&#x22; + otherFields +\n                &#x27;}&#x27;;\n    }\n};\n\nclass Main {\n    public static void main(String[] args) {\n        // Create a new PersonalDetails populating defined fields\n        PersonalDetails personalDetails = new PersonalDetails(&#x22;John Doe&#x22;, 30);\n\n        // Access and modify defined fields\n        personalDetails.name = &#x22;Jane Smith&#x22;;\n        personalDetails.age = personalDetails.age + 1;\n\n        // Create a new EmployeeDetails with dynamic fields\n        EmployeeDetails employeeInfo = new EmployeeDetails(&#x22;n/a&#x22;, 3000.0f,\n                convertToMap(personalDetails));\n\n        // Access and modify defined fields\n        employeeInfo.designation = &#x22;Software Engineer&#x22;;\n        employeeInfo.salary = 5000.0f;\n\n        // Access and modify dynamically added fields\n        employeeInfo.otherFields.put(&#x22;name&#x22;, &#x22;John Smith&#x22;);\n\n        // Add a new dynamic field\n        employeeInfo.otherFields.put(&#x22;address&#x22;, &#x22;123 Main St&#x22;);\n\n        // Print the updated data\n        System.out.println(personalDetails);\n        System.out.println(employeeInfo);\n    }\n\n    static Map<String, Object> convertToMap(Object obj) {\n        Map<String, Object> map = new HashMap<>();\n        for (var field : obj.getClass().getDeclaredFields()) {\n            try {\n                map.put(field.getName(), field.get(obj));\n            } catch (IllegalAccessException ignored) {\n            }\n        }\n        return map;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.HashMap;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.Map;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final class</span><span style=\"color:#6F42C1\"> PersonalDetails</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    String name;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> age;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">    PersonalDetails</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> name</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">int</span><span style=\"color:#E36209\"> age</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        this.name </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        this.age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @Override</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> String </span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#032F62\"> \"PersonalDetails{\"</span><span style=\"color:#D73A49\"> +</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"name='\"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> name </span><span style=\"color:#D73A49\">+</span><span style=\"color:#24292E\"> '\\'' </span><span style=\"color:#D73A49\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \", age=\"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> age </span><span style=\"color:#D73A49\">+</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                '}';</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final class</span><span style=\"color:#6F42C1\"> EmployeeDetails</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    String designation;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> salary;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Map</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String, Object</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> otherFields;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">    EmployeeDetails</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> designation</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">float</span><span style=\"color:#E36209\"> salary</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">Map</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">Object</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\"> otherFields</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        this.designation </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> designation;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        this.salary </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> salary;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        this.otherFields </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> otherFields;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @Override</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> String </span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#032F62\"> \"EmployeeDetails{\"</span><span style=\"color:#D73A49\"> +</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"designation='\"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> designation </span><span style=\"color:#D73A49\">+</span><span style=\"color:#24292E\"> '\\'' </span><span style=\"color:#D73A49\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \", salary=\"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> salary </span><span style=\"color:#D73A49\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \", otherFields=\"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> otherFields </span><span style=\"color:#D73A49\">+</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                '}';</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Create a new PersonalDetails populating defined fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        PersonalDetails personalDetails </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> PersonalDetails</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"John Doe\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">30</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Access and modify defined fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        personalDetails.name </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"Jane Smith\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        personalDetails.age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> personalDetails.age </span><span style=\"color:#D73A49\">+</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Create a new EmployeeDetails with dynamic fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        EmployeeDetails employeeInfo </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> EmployeeDetails</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"n/a\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">3000.0</span><span style=\"color:#24292E\">f,</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">                convertToMap</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">personalDetails</span><span style=\"color:#24292E\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Access and modify defined fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        employeeInfo.designation </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"Software Engineer\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        employeeInfo.salary </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> 5000.0</span><span style=\"color:#24292E\">f;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Access and modify dynamically added fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        employeeInfo.otherFields.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"name\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"John Smith\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Add a new dynamic field</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        employeeInfo.otherFields.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"address\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"123 Main St\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Print the updated data</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">personalDetails</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">employeeInfo</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    static Map</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String, Object</span><span style=\"color:#D73A49\">></span><span style=\"color:#6F42C1\"> convertToMap</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">Object</span><span style=\"color:#E36209\"> obj</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Map</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String, Object</span><span style=\"color:#D73A49\">></span><span style=\"color:#D73A49\"> map</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> HashMap</span><span style=\"color:#D73A49\">&#x3C;></span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">        for </span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">var</span><span style=\"color:#E36209\"> field</span><span style=\"color:#D73A49\"> :</span><span style=\"color:#24292E\"> obj.</span><span style=\"color:#6F42C1\">getClass</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">getDeclaredFields</span><span style=\"color:#24292E\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            try {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                map</span><span style=\"color:#24292E\">.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">field</span><span style=\"color:#24292E\">.</span><span style=\"color:#6F42C1\">getName</span><span style=\"color:#24292E\">(), </span><span style=\"color:#D73A49\">field</span><span style=\"color:#24292E\">.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">obj</span><span style=\"color:#24292E\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            } </span><span style=\"color:#6F42C1\">catch </span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">IllegalAccessException</span><span style=\"color:#E36209\"> ignored</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> map</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"flexible-typing":{"frontmatter":{"title":"Be conservative in what you send, be liberal in what you accept","description":"Ballerina employs \"be conservative in what you send, be liberal in what you accept\" by using structural types that support openness. <br><br>These types serve a dual purpose: enhancing static typing within programs and describing service interfaces accurately. While outgoing messages are tightly controlled to ensure protocol adherence, incoming data is handled with a degree of flexibility. The result is a balance of strictness and tolerance that enhances interoperability and resilience. This makes Ballerina a robust and adaptable choice for constructing cloud-native applications.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/data-oriented-programming/model-constrained-flexible-data","image":""},"content":"","code":""},"json-support-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype InvoiceItem record {\n    string id;\n    decimal price;\n    boolean taxable;\n};\n\ntype Customer record {\n    string id;\n    string name;\n};\n\ntype Invoice record {\n    string id;\n    Customer customer;\n    InvoiceItem[] items;\n};\n\npublic function main() returns error?{\n    json invoiceData = check io:fileReadJson(\"./invoice.json\");\n\n    // Enjoy lax static typing here!\n    // Fails at runtime if the key is not present or the value is not a string.\n    string id = check invoiceData.id;\n    io:println(\"Invoice id: \", id);\n\n    // Fails at runtime if the key is not present.\n    json items = check invoiceData.items;\n    io:println(\"Invoice items: \", items);\n\n    // Fails at runtime if the convertion is not possible.\n    json[] itemArr = check items.cloneWithType();\n\n    // Results in a nil value if the accessed field is not present.\n    decimal? discountAmount = check itemArr[1]?.discount?.amount;\n    io:println(\"Discount amount: \", discountAmount);\n\n    // Converts to the domain type.\n    // Fails at runtime if the json value does not match the type.\n    Invoice invoice = check invoiceData.fromJsonWithType();\n\n    // Enjoy type-safe handling of json values.\n    id = invoice.id;\n    InvoiceItem[] invoiceItems = invoice.items;\n    io:println(\"Invoice items: \", invoiceItems);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\ntype InvoiceItem record {\n    string id;\n    decimal price;\n    boolean taxable;\n};\n\ntype Customer record {\n    string id;\n    string name;\n};\n\ntype Invoice record {\n    string id;\n    Customer customer;\n    InvoiceItem[] items;\n};\n\npublic function main() returns error?{\n    json invoiceData = check io:fileReadJson(&#x22;./invoice.json&#x22;);\n\n    // Enjoy lax static typing here!\n    // Fails at runtime if the key is not present or the value is not a string.\n    string id = check invoiceData.id;\n    io:println(&#x22;Invoice id: &#x22;, id);\n\n    // Fails at runtime if the key is not present.\n    json items = check invoiceData.items;\n    io:println(&#x22;Invoice items: &#x22;, items);\n\n    // Fails at runtime if the convertion is not possible.\n    json[] itemArr = check items.cloneWithType();\n\n    // Results in a nil value if the accessed field is not present.\n    decimal? discountAmount = check itemArr[1]?.discount?.amount;\n    io:println(&#x22;Discount amount: &#x22;, discountAmount);\n\n    // Converts to the domain type.\n    // Fails at runtime if the json value does not match the type.\n    Invoice invoice = check invoiceData.fromJsonWithType();\n\n    // Enjoy type-safe handling of json values.\n    id = invoice.id;\n    InvoiceItem[] invoiceItems = invoice.items;\n    io:println(&#x22;Invoice items: &#x22;, invoiceItems);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> InvoiceItem</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    boolean</span><span style=\"color:#24292E\"> taxable;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Customer</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Invoice</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Customer customer;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    InvoiceItem[] items;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> invoiceData </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadJson</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"./invoice.json\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Enjoy lax static typing here!</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the key is not present or the value is not a string.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.id;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice id: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">id</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the key is not present.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> items </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.items;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice items: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">items</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the convertion is not possible.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\">[] itemArr </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> items.</span><span style=\"color:#6F42C1\">cloneWithType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Results in a nil value if the accessed field is not present.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\">? discountAmount </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> itemArr[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">]?.discount?.amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Discount amount: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">discountAmount</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Converts to the domain type.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the json value does not match the type.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Invoice invoice </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.</span><span style=\"color:#6F42C1\">fromJsonWithType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Enjoy type-safe handling of json values.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> invoice.id;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    InvoiceItem[] invoiceItems </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> invoice.items;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice items: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">invoiceItems</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"json-support-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\nrecord InvoiceItem(String id, double price, boolean taxable) {}\n\nrecord Customer(String id, String name) {}\n\nrecord Invoice(String id, Customer customer, List<InvoiceItem> items) {}\n\nclass Main {\n    public static void main(String[] args) throws IOException {\n            String invoiceData = Files.readString(Paths.get(\"./invoice.json\"));\n\n            // Parse the JSON string\n            Gson gson = new Gson();\n            JsonObject jsonObj = gson.fromJson(invoiceData, JsonObject.class);\n\n            // Fails at runtime if the key is not present or the value is not a string.\n            String id = jsonObj.get(\"id\").getAsString();\n            System.out.println(\"Invoice id: \" + id);\n\n            // Fails at runtime if the key is not present.\n            JsonArray items = jsonObj.getAsJsonArray(\"items\");\n            System.out.println(\"Invoice items: \" + items);\n\n            // Results in a null value if the accessed field is not present.\n            JsonObject secondItem = items.get(1).getAsJsonObject();\n            if (secondItem.has(\"discount\")) {\n                double discount = secondItem.get(\"discount\").getAsDouble();\n                System.out.println(\"Discount: \" + discount);\n            }\n\n            // Converts to the domain type.\n            // Fails at runtime if the json value does not match the type.\n            Invoice invoice = gson.fromJson(invoiceData, Invoice.class);\n\n            // Access the fields of the domain type.\n            id = invoice.id();\n            List<InvoiceItem> invoiceItems = invoice.items();\n            System.out.println(\"Invoice items: \" + invoiceItems);\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\nrecord InvoiceItem(String id, double price, boolean taxable) {}\n\nrecord Customer(String id, String name) {}\n\nrecord Invoice(String id, Customer customer, List<InvoiceItem> items) {}\n\nclass Main {\n    public static void main(String[] args) throws IOException {\n            String invoiceData = Files.readString(Paths.get(&#x22;./invoice.json&#x22;));\n\n            // Parse the JSON string\n            Gson gson = new Gson();\n            JsonObject jsonObj = gson.fromJson(invoiceData, JsonObject.class);\n\n            // Fails at runtime if the key is not present or the value is not a string.\n            String id = jsonObj.get(&#x22;id&#x22;).getAsString();\n            System.out.println(&#x22;Invoice id: &#x22; + id);\n\n            // Fails at runtime if the key is not present.\n            JsonArray items = jsonObj.getAsJsonArray(&#x22;items&#x22;);\n            System.out.println(&#x22;Invoice items: &#x22; + items);\n\n            // Results in a null value if the accessed field is not present.\n            JsonObject secondItem = items.get(1).getAsJsonObject();\n            if (secondItem.has(&#x22;discount&#x22;)) {\n                double discount = secondItem.get(&#x22;discount&#x22;).getAsDouble();\n                System.out.println(&#x22;Discount: &#x22; + discount);\n            }\n\n            // Converts to the domain type.\n            // Fails at runtime if the json value does not match the type.\n            Invoice invoice = gson.fromJson(invoiceData, Invoice.class);\n\n            // Access the fields of the domain type.\n            id = invoice.id();\n            List<InvoiceItem> invoiceItems = invoice.items();\n            System.out.println(&#x22;Invoice items: &#x22; + invoiceItems);\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.google.gson.Gson;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.google.gson.JsonArray;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.google.gson.JsonObject;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.io.IOException;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.nio.file.Files;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.nio.file.Paths;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.List;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">record</span><span style=\"color:#6F42C1\"> InvoiceItem</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">double</span><span style=\"color:#E36209\"> price</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">boolean</span><span style=\"color:#E36209\"> taxable</span><span style=\"color:#24292E\">) {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">record</span><span style=\"color:#6F42C1\"> Customer</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> name</span><span style=\"color:#24292E\">) {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">record</span><span style=\"color:#6F42C1\"> Invoice</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">Customer</span><span style=\"color:#E36209\"> customer</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">List</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#E36209\">InvoiceItem</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\"> items</span><span style=\"color:#24292E\">) {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) throws IOException {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            String invoiceData </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> Files.</span><span style=\"color:#6F42C1\">readString</span><span style=\"color:#24292E\">(Paths.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"./invoice.json\"</span><span style=\"color:#24292E\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // Parse the JSON string</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            Gson gson </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> Gson</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            JsonObject jsonObj </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> gson.</span><span style=\"color:#6F42C1\">fromJson</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">invoiceData</span><span style=\"color:#24292E\">, JsonObject.class);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // Fails at runtime if the key is not present or the value is not a string.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            String id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> jsonObj.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"id\"</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">getAsString</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice id: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // Fails at runtime if the key is not present.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            JsonArray items </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> jsonObj.</span><span style=\"color:#6F42C1\">getAsJsonArray</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"items\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice items: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> items</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // Results in a null value if the accessed field is not present.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            JsonObject secondItem </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> items.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">getAsJsonObject</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            if</span><span style=\"color:#24292E\"> (secondItem.</span><span style=\"color:#6F42C1\">has</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"discount\"</span><span style=\"color:#24292E\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                double discount </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> secondItem.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"discount\"</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">getAsDouble</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Discount: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> discount</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // Converts to the domain type.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // Fails at runtime if the json value does not match the type.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            Invoice invoice </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> gson.</span><span style=\"color:#6F42C1\">fromJson</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">invoiceData</span><span style=\"color:#24292E\">, Invoice.class);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // Access the fields of the domain type.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> invoice.</span><span style=\"color:#6F42C1\">id</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            List</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">InvoiceItem</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> invoiceItems </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> invoice.</span><span style=\"color:#6F42C1\">items</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invoice items: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> invoiceItems</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"json-support":{"frontmatter":{"title":"JSON support","description":"Ballerina and Java both support JSON, a lightweight data-interchange format. Ballerina has native JSON support, allowing seamless integration with JSON-based systems and APIs. In Java, external libraries like Jackson or Gson provide comprehensive JSON processing capabilities.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/working_with_json","image":""},"content":"","code":""},"optional-types-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype Person record {|\n    int id;\n    string name;\n    // optional typed field\n    int? age;\n    // optional field\n    string email?;\n|};\n\npublic function main() returns error? {\n    json jsonInput = {\n        id: 1,\n        \"name\": \"John Doe\",\n        \"age\": null\n    };\n\n    Person person = check jsonInput.fromJsonWithType();\n\n    io:println(person.age.toBalString()); // output: ()\n\n    // optional type access\n    int age = person.age ?: -1;\n    io:println(age); // output: -1\n\n    // optional field access\n    io:println(person.hasKey(\"email\")); // output: false\n    string email = person.email ?: \"Email is not provided\";\n    io:println(email); // output: Email is not provided\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\ntype Person record {|\n    int id;\n    string name;\n    // optional typed field\n    int? age;\n    // optional field\n    string email?;\n|};\n\npublic function main() returns error? {\n    json jsonInput = {\n        id: 1,\n        &#x22;name&#x22;: &#x22;John Doe&#x22;,\n        &#x22;age&#x22;: null\n    };\n\n    Person person = check jsonInput.fromJsonWithType();\n\n    io:println(person.age.toBalString()); // output: ()\n\n    // optional type access\n    int age = person.age ?: -1;\n    io:println(age); // output: -1\n\n    // optional field access\n    io:println(person.hasKey(&#x22;email&#x22;)); // output: false\n    string email = person.email ?: &#x22;Email is not provided&#x22;;\n    io:println(email); // output: Email is not provided\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Person</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // optional typed field</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\">? age;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // optional field</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> email?;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> jsonInput </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"name\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"age\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#D73A49\"> null</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Person person </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> jsonInput.</span><span style=\"color:#6F42C1\">fromJsonWithType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(person.age.</span><span style=\"color:#6F42C1\">toBalString</span><span style=\"color:#24292E\">()); </span><span style=\"color:#6A737D\">// output: ()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // optional type access</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> person.age </span><span style=\"color:#D73A49\">?:</span><span style=\"color:#D73A49\"> -</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">age</span><span style=\"color:#24292E\">); </span><span style=\"color:#6A737D\">// output: -1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // optional field access</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(person.</span><span style=\"color:#6F42C1\">hasKey</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"email\"</span><span style=\"color:#24292E\">)); </span><span style=\"color:#6A737D\">// output: false</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> email </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> person.email </span><span style=\"color:#D73A49\">?:</span><span style=\"color:#032F62\"> \"Email is not provided\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">email</span><span style=\"color:#24292E\">); </span><span style=\"color:#6A737D\">// output: Email is not provided</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"optional-types-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\nrecord Person(int id, String name, Integer age, String email, List<String> availableFields) {\n    public Optional<String> getEmail() {\n        return Optional.ofNullable(email);\n    }\n\n    public Optional<Integer> getAge() {\n        return Optional.ofNullable(age);\n    }\n}\n\nclass Main {\n    public static void main(String[] args) throws JsonProcessingException {\n        String jsonInput = \"\"\"\n                {\n                    \"id\": 1,\n                    \"name\": \"John Doe\",\n                    \"age\": null\n                }\n                \"\"\";\n        ObjectMapper objectMapper = new ObjectMapper();\n        SimpleModule module = new SimpleModule();\n        module.addDeserializer(Person.class, new PersonDeserializer());\n        objectMapper.registerModule(module);\n\n        Person person = objectMapper.readValue(jsonInput, Person.class);\n\n        System.out.println(person.age()); // output: null\n\n        // optional type access\n        int age = person.getAge().orElse(-1);\n        System.out.println(age); // output: -1\n\n        // optional field access\n        System.out.println(person.availableFields().contains(\"email\")); // output: false\n        String emailValue = person.getEmail().isPresent()\n                ? person.email()\n                : \"Email is not provided\";\n        System.out.println(emailValue); // output: Email is not provided\n    }\n}\n\nclass PersonDeserializer extends StdDeserializer<Person> {\n    public PersonDeserializer() {\n        this(null);\n    }\n\n    public PersonDeserializer(Class<?> vc) {\n        super(vc);\n    }\n\n    @Override\n    public Person deserialize(JsonParser jsonParser,\n            DeserializationContext deserializationContext) throws IOException {\n        JsonNode node = jsonParser.getCodec().readTree(jsonParser);\n\n        List<String> availableFields = Arrays.asList(\"name\", \"age\", \"id\");\n        int id = node.get(\"id\").asInt();\n        String name = node.get(\"name\").asText();\n        Integer age = node.get(\"age\").asInt();\n        String email = null;\n\n        if (node.has(\"email\")) {\n            email = node.get(\"email\").asText();\n            availableFields.add(\"email\");\n        }\n\n        return new Person(id, name, age, email, availableFields);\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\nrecord Person(int id, String name, Integer age, String email, List<String> availableFields) {\n    public Optional<String> getEmail() {\n        return Optional.ofNullable(email);\n    }\n\n    public Optional<Integer> getAge() {\n        return Optional.ofNullable(age);\n    }\n}\n\nclass Main {\n    public static void main(String[] args) throws JsonProcessingException {\n        String jsonInput = &#x22;&#x22;&#x22;\n                {\n                    &#x22;id&#x22;: 1,\n                    &#x22;name&#x22;: &#x22;John Doe&#x22;,\n                    &#x22;age&#x22;: null\n                }\n                &#x22;&#x22;&#x22;;\n        ObjectMapper objectMapper = new ObjectMapper();\n        SimpleModule module = new SimpleModule();\n        module.addDeserializer(Person.class, new PersonDeserializer());\n        objectMapper.registerModule(module);\n\n        Person person = objectMapper.readValue(jsonInput, Person.class);\n\n        System.out.println(person.age()); // output: null\n\n        // optional type access\n        int age = person.getAge().orElse(-1);\n        System.out.println(age); // output: -1\n\n        // optional field access\n        System.out.println(person.availableFields().contains(&#x22;email&#x22;)); // output: false\n        String emailValue = person.getEmail().isPresent()\n                ? person.email()\n                : &#x22;Email is not provided&#x22;;\n        System.out.println(emailValue); // output: Email is not provided\n    }\n}\n\nclass PersonDeserializer extends StdDeserializer<Person> {\n    public PersonDeserializer() {\n        this(null);\n    }\n\n    public PersonDeserializer(Class<?> vc) {\n        super(vc);\n    }\n\n    @Override\n    public Person deserialize(JsonParser jsonParser,\n            DeserializationContext deserializationContext) throws IOException {\n        JsonNode node = jsonParser.getCodec().readTree(jsonParser);\n\n        List<String> availableFields = Arrays.asList(&#x22;name&#x22;, &#x22;age&#x22;, &#x22;id&#x22;);\n        int id = node.get(&#x22;id&#x22;).asInt();\n        String name = node.get(&#x22;name&#x22;).asText();\n        Integer age = node.get(&#x22;age&#x22;).asInt();\n        String email = null;\n\n        if (node.has(&#x22;email&#x22;)) {\n            email = node.get(&#x22;email&#x22;).asText();\n            availableFields.add(&#x22;email&#x22;);\n        }\n\n        return new Person(id, name, age, email, availableFields);\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.fasterxml.jackson.core.JsonParser;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.fasterxml.jackson.databind.DeserializationContext;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.fasterxml.jackson.databind.JsonNode;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.fasterxml.jackson.databind.deser.std.StdDeserializer;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> com.fasterxml.jackson.databind.</span><span style=\"color:#D73A49\">module</span><span style=\"color:#24292E\">.SimpleModule;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.io.IOException;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.Arrays;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.List;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.Optional;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">record</span><span style=\"color:#6F42C1\"> Person</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">int</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> name</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">Integer</span><span style=\"color:#E36209\"> age</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> email</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">List</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#E36209\">String</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\"> availableFields</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> Optional</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String</span><span style=\"color:#D73A49\">></span><span style=\"color:#6F42C1\"> getEmail</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> Optional.</span><span style=\"color:#6F42C1\">ofNullable</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">email</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> Optional</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">Integer</span><span style=\"color:#D73A49\">></span><span style=\"color:#6F42C1\"> getAge</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> Optional.</span><span style=\"color:#6F42C1\">ofNullable</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">age</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) throws JsonProcessingException {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String jsonInput </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#B31D28;font-style:italic\">                {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"id\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"name\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    \"age\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#D73A49\"> null</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                \"\"\"</span><span style=\"color:#B31D28;font-style:italic\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ObjectMapper objectMapper </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> ObjectMapper</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        SimpleModule </span><span style=\"color:#D73A49\">module</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> SimpleModule</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        module</span><span style=\"color:#24292E\">.</span><span style=\"color:#6F42C1\">addDeserializer</span><span style=\"color:#24292E\">(Person.class, </span><span style=\"color:#D73A49\">new</span><span style=\"color:#E36209\"> PersonDeserializer</span><span style=\"color:#24292E\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        objectMapper.</span><span style=\"color:#6F42C1\">registerModule</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">module</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Person person </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> objectMapper.</span><span style=\"color:#6F42C1\">readValue</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">jsonInput</span><span style=\"color:#24292E\">, Person.class);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(person.</span><span style=\"color:#6F42C1\">age</span><span style=\"color:#24292E\">()); </span><span style=\"color:#6A737D\">// output: null</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // optional type access</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        int</span><span style=\"color:#24292E\"> age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> person.</span><span style=\"color:#6F42C1\">getAge</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">orElse</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">-</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">age</span><span style=\"color:#24292E\">); </span><span style=\"color:#6A737D\">// output: -1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // optional field access</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(person.</span><span style=\"color:#6F42C1\">availableFields</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">contains</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"email\"</span><span style=\"color:#24292E\">)); </span><span style=\"color:#6A737D\">// output: false</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String emailValue </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> person.</span><span style=\"color:#6F42C1\">getEmail</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">isPresent</span><span style=\"color:#24292E\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                ?</span><span style=\"color:#24292E\"> person.</span><span style=\"color:#6F42C1\">email</span><span style=\"color:#24292E\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                :</span><span style=\"color:#032F62\"> \"Email is not provided\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">emailValue</span><span style=\"color:#24292E\">); </span><span style=\"color:#6A737D\">// output: Email is not provided</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> PersonDeserializer</span><span style=\"color:#6F42C1\"> extends</span><span style=\"color:#6F42C1\"> StdDeserializer</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#6F42C1\">Person</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#6F42C1\"> PersonDeserializer</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">        this</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">null</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#6F42C1\"> PersonDeserializer</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">Class</span><span style=\"color:#D73A49\">&#x3C;?></span><span style=\"color:#E36209\"> vc</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">        super</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">vc</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @Override</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> Person </span><span style=\"color:#6F42C1\">deserialize</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">JsonParser</span><span style=\"color:#E36209\"> jsonParser</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">            DeserializationContext</span><span style=\"color:#E36209\"> deserializationContext</span><span style=\"color:#24292E\">) throws IOException {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        JsonNode node </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> jsonParser.</span><span style=\"color:#6F42C1\">getCodec</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">readTree</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">jsonParser</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        List</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> availableFields </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> Arrays.</span><span style=\"color:#6F42C1\">asList</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"name\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"age\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"id\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        int</span><span style=\"color:#24292E\"> id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> node.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"id\"</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">asInt</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String name </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> node.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"name\"</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">asText</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Integer age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> node.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"age\"</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">asInt</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String email </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> null</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> (node.</span><span style=\"color:#6F42C1\">has</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"email\"</span><span style=\"color:#24292E\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            email </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> node.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"email\"</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">asText</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            availableFields.</span><span style=\"color:#6F42C1\">add</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"email\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> Person</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">name</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">age</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">email</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">availableFields</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"optional-types":{"frontmatter":{"title":"Model optionality","description":"In data-oriented programming, where data is at the forefront, modeling optionality provides a powerful mechanism to express the presence or absence of data in a concise and type-safe manner. <br><br>Optional typing allows indicating when a value may be absent or nullable, while optional fields provide flexibility in representing varying data states. <br><br> Ballerina has built-in support for optional types and fields, eliminating the risk of null pointer exceptions and related bugs. In Java, handling optional types and fields typically involves using external libraries or annotations, which can introduce additional complexity and potential for errors.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/data-oriented-programming/model-optionality","image":""},"content":"","code":""},"pattern-matching-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\nconst switchStatus = \"ON\";\n\nfunction matchValue(anydata value, boolean isObstructed,\n                float powerPercentage) returns string {\n    // The value of the `val` variable is matched against the given value match patterns.\n    match value {\n        1 if !isObstructed => {\n            // This block will execute if `value` is 1 and `isObstructed` is false.\n            return \"Move forward\";\n        }\n        // `|` is used to match more than one value.\n        2|3 => {\n            // This block will execute if `value` is either 2 or 3.\n            return \"Turn\";\n        }\n        4 if 25.0 < powerPercentage => {\n            // This block will execute if `value` is 4 and `25.0 < powerPercentage` is true.\n            return \"Increase speed\";\n        }\n        \"STOP\" => {\n            // This block will execute if `value` is \"STOP\".\n            return \"STOP\";\n        }\n        switchStatus => {\n            // This block will execute if `value` is equal \n            // to the value of the `switchStatus` constant.\n            return \"Switch ON\";\n        }\n        // Destructuring a tuple with type checking\n        [var x, var y] if x is decimal && y is decimal => {\n            return string `Maneuvering to x: ${x.toString()} and y: ${y.toString()\n                            } coordinates`;\n        }\n        // Destructuring a map and recursively matching with optional argument\n        {x: var a, y: var b, ...var rest} => {\n            string optionalArg = matchValue(rest, isObstructed, powerPercentage);\n            return string `Maneuvering to x: ${a.toString()} and y: ${b.toString()\n                            } coordinates with ${optionalArg}`;\n        }\n        _ => {\n            // This block will execute for any other unmatched value.\n            return \"Invalid instruction\";\n        }\n    }\n}\n\npublic function main() {\n    string output = matchValue([-2.516d, 51.409d], false, 0.0);\n    io:println(output);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\nconst switchStatus = &#x22;ON&#x22;;\n\nfunction matchValue(anydata value, boolean isObstructed,\n                float powerPercentage) returns string {\n    // The value of the &#x60;val&#x60; variable is matched against the given value match patterns.\n    match value {\n        1 if !isObstructed => {\n            // This block will execute if &#x60;value&#x60; is 1 and &#x60;isObstructed&#x60; is false.\n            return &#x22;Move forward&#x22;;\n        }\n        // &#x60;|&#x60; is used to match more than one value.\n        2|3 => {\n            // This block will execute if &#x60;value&#x60; is either 2 or 3.\n            return &#x22;Turn&#x22;;\n        }\n        4 if 25.0 < powerPercentage => {\n            // This block will execute if &#x60;value&#x60; is 4 and &#x60;25.0 < powerPercentage&#x60; is true.\n            return &#x22;Increase speed&#x22;;\n        }\n        &#x22;STOP&#x22; => {\n            // This block will execute if &#x60;value&#x60; is &#x22;STOP&#x22;.\n            return &#x22;STOP&#x22;;\n        }\n        switchStatus => {\n            // This block will execute if &#x60;value&#x60; is equal \n            // to the value of the &#x60;switchStatus&#x60; constant.\n            return &#x22;Switch ON&#x22;;\n        }\n        // Destructuring a tuple with type checking\n        [var x, var y] if x is decimal &#x26;&#x26; y is decimal => {\n            return string &#x60;Maneuvering to x: ${x.toString()} and y: ${y.toString()\n                            } coordinates&#x60;;\n        }\n        // Destructuring a map and recursively matching with optional argument\n        {x: var a, y: var b, ...var rest} => {\n            string optionalArg = matchValue(rest, isObstructed, powerPercentage);\n            return string &#x60;Maneuvering to x: ${a.toString()} and y: ${b.toString()\n                            } coordinates with ${optionalArg}&#x60;;\n        }\n        _ => {\n            // This block will execute for any other unmatched value.\n            return &#x22;Invalid instruction&#x22;;\n        }\n    }\n}\n\npublic function main() {\n    string output = matchValue([-2.516d, 51.409d], false, 0.0);\n    io:println(output);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">const </span><span style=\"color:#005CC5\">switchStatus</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"ON\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> matchValue</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">anydata</span><span style=\"color:#E36209\"> value</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">boolean</span><span style=\"color:#E36209\"> isObstructed</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">                float</span><span style=\"color:#E36209\"> powerPercentage</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // The value of the `val` variable is matched against the given value match patterns.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    match</span><span style=\"color:#24292E\"> value {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        1</span><span style=\"color:#D73A49\"> if</span><span style=\"color:#D73A49\"> !</span><span style=\"color:#24292E\">isObstructed </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is 1 and `isObstructed` is false.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Move forward\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // `|` is used to match more than one value.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        2</span><span style=\"color:#D73A49\">|</span><span style=\"color:#005CC5\">3</span><span style=\"color:#D73A49\"> =></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is either 2 or 3.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Turn\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        4</span><span style=\"color:#D73A49\"> if</span><span style=\"color:#005CC5\"> 25.0</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#24292E\"> powerPercentage </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is 4 and `25.0 &#x3C; powerPercentage` is true.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Increase speed\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"STOP\"</span><span style=\"color:#D73A49\"> =></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is \"STOP\".</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"STOP\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        switchStatus </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute if `value` is equal </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // to the value of the `switchStatus` constant.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Switch ON\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Destructuring a tuple with type checking</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        [</span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> x, </span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> y] </span><span style=\"color:#D73A49\">if</span><span style=\"color:#24292E\"> x </span><span style=\"color:#D73A49\">is</span><span style=\"color:#005CC5\"> decimal</span><span style=\"color:#D73A49\"> &#x26;&#x26;</span><span style=\"color:#24292E\"> y </span><span style=\"color:#D73A49\">is</span><span style=\"color:#005CC5\"> decimal</span><span style=\"color:#D73A49\"> =></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `Maneuvering to x: ${</span><span style=\"color:#24292E\">x</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span><span style=\"color:#032F62\">} and y: ${</span><span style=\"color:#24292E\">y</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                            } coordinates`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Destructuring a map and recursively matching with optional argument</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        {x</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> a, y</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> b, </span><span style=\"color:#D73A49\">...</span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> rest} </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> optionalArg </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> matchValue</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">rest</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">isObstructed</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">powerPercentage</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `Maneuvering to x: ${</span><span style=\"color:#24292E\">a</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span><span style=\"color:#032F62\">} and y: ${</span><span style=\"color:#24292E\">b</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                            } coordinates with ${</span><span style=\"color:#24292E\">optionalArg</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        _ </span><span style=\"color:#D73A49\">=></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This block will execute for any other unmatched value.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#032F62\"> \"Invalid instruction\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> output </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> matchValue</span><span style=\"color:#24292E\">([</span><span style=\"color:#D73A49\">-</span><span style=\"color:#005CC5\">2.516</span><span style=\"color:#24292E\">d, </span><span style=\"color:#005CC5\">51.409</span><span style=\"color:#24292E\">d], </span><span style=\"color:#005CC5\">false</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">0.0</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">output</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"pattern-matching-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport java.util.Map;\n\nclass Main {\n    static final String switchStatus = \"ON\";\n\n    public static String matchValue(Object value, boolean isObstructed,\n            float powerPercentage) {\n        switch (value) {\n            case Integer i -> {\n                if (i == 1 && !isObstructed) {\n                    return \"Move forward\";\n                }\n                if (i == 2 || i == 3) {\n                    return \"Turn\";\n                }\n                if (i == 4 && powerPercentage > 25.0) {\n                    return \"Increase speed\";\n                }\n                return \"Invalid instruction\";\n            }\n            case String str -> {\n                if (str.equals(\"STOP\")) {\n                    return \"STOP\";\n                }\n                if (str.equals(switchStatus)) {\n                    return \"Switch ON\";\n                }\n                return \"Invalid instruction\";\n            }\n            case double[] arr -> {\n                if (arr.length == 2) {\n                    return \"Maneuvering to x: \" + arr[0]\n                            + \" and y: \" + arr[1] + \" coordinates\";\n                } else {\n                    return \"Invalid instruction\";\n                }\n            }\n            case Record record -> {\n                double a = record.x;\n                double b = record.y;\n                Map<String, Object> rest = record.rest;\n                String optionalArg = matchValue(rest, isObstructed, powerPercentage);\n                return \"Maneuvering to x: \" + a + \" and y: \" + b +\n                        \" coordinates with \" + optionalArg;\n            }\n            default -> {\n                return \"Invalid instruction\";\n            }\n        }\n    }\n\n    record Record(double x, double y, Map<String, Object> rest) {}\n\n    public static void main(String[] args) {\n        String output = matchValue(new double[] { 2.516, 51.409 }, false, 0.0f);\n        System.out.println(output);\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import java.util.Map;\n\nclass Main {\n    static final String switchStatus = &#x22;ON&#x22;;\n\n    public static String matchValue(Object value, boolean isObstructed,\n            float powerPercentage) {\n        switch (value) {\n            case Integer i -> {\n                if (i == 1 &#x26;&#x26; !isObstructed) {\n                    return &#x22;Move forward&#x22;;\n                }\n                if (i == 2 || i == 3) {\n                    return &#x22;Turn&#x22;;\n                }\n                if (i == 4 &#x26;&#x26; powerPercentage > 25.0) {\n                    return &#x22;Increase speed&#x22;;\n                }\n                return &#x22;Invalid instruction&#x22;;\n            }\n            case String str -> {\n                if (str.equals(&#x22;STOP&#x22;)) {\n                    return &#x22;STOP&#x22;;\n                }\n                if (str.equals(switchStatus)) {\n                    return &#x22;Switch ON&#x22;;\n                }\n                return &#x22;Invalid instruction&#x22;;\n            }\n            case double[] arr -> {\n                if (arr.length == 2) {\n                    return &#x22;Maneuvering to x: &#x22; + arr[0]\n                            + &#x22; and y: &#x22; + arr[1] + &#x22; coordinates&#x22;;\n                } else {\n                    return &#x22;Invalid instruction&#x22;;\n                }\n            }\n            case Record record -> {\n                double a = record.x;\n                double b = record.y;\n                Map<String, Object> rest = record.rest;\n                String optionalArg = matchValue(rest, isObstructed, powerPercentage);\n                return &#x22;Maneuvering to x: &#x22; + a + &#x22; and y: &#x22; + b +\n                        &#x22; coordinates with &#x22; + optionalArg;\n            }\n            default -> {\n                return &#x22;Invalid instruction&#x22;;\n            }\n        }\n    }\n\n    record Record(double x, double y, Map<String, Object> rest) {}\n\n    public static void main(String[] args) {\n        String output = matchValue(new double[] { 2.516, 51.409 }, false, 0.0f);\n        System.out.println(output);\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.Map;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    static </span><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> String switchStatus </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"ON\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static String </span><span style=\"color:#6F42C1\">matchValue</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">Object</span><span style=\"color:#E36209\"> value</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">boolean</span><span style=\"color:#E36209\"> isObstructed</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            float</span><span style=\"color:#E36209\"> powerPercentage</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">        switch </span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">value</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            case Integer i </span><span style=\"color:#D73A49\">-></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                if</span><span style=\"color:#24292E\"> (i </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#D73A49\"> &#x26;&#x26;</span><span style=\"color:#D73A49\"> !</span><span style=\"color:#24292E\">isObstructed) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    return</span><span style=\"color:#032F62\"> \"Move forward\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                if</span><span style=\"color:#24292E\"> (i </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 2</span><span style=\"color:#D73A49\"> ||</span><span style=\"color:#24292E\"> i </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 3</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    return</span><span style=\"color:#032F62\"> \"Turn\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                if</span><span style=\"color:#24292E\"> (i </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 4</span><span style=\"color:#D73A49\"> &#x26;&#x26;</span><span style=\"color:#24292E\"> powerPercentage </span><span style=\"color:#D73A49\">></span><span style=\"color:#005CC5\"> 25.0</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    return</span><span style=\"color:#032F62\"> \"Increase speed\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#032F62\"> \"Invalid instruction\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            case String str </span><span style=\"color:#D73A49\">-></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                if</span><span style=\"color:#24292E\"> (str.</span><span style=\"color:#6F42C1\">equals</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"STOP\"</span><span style=\"color:#24292E\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    return</span><span style=\"color:#032F62\"> \"STOP\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                if</span><span style=\"color:#24292E\"> (str.</span><span style=\"color:#6F42C1\">equals</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">switchStatus</span><span style=\"color:#24292E\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    return</span><span style=\"color:#032F62\"> \"Switch ON\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#032F62\"> \"Invalid instruction\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            case double[] arr </span><span style=\"color:#D73A49\">-></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                if</span><span style=\"color:#24292E\"> (arr.length </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 2</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    return</span><span style=\"color:#032F62\"> \"Maneuvering to x: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> arr[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                            +</span><span style=\"color:#032F62\"> \" and y: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> arr[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">] </span><span style=\"color:#D73A49\">+</span><span style=\"color:#032F62\"> \" coordinates\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                } </span><span style=\"color:#D73A49\">else</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    return</span><span style=\"color:#032F62\"> \"Invalid instruction\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            case Record </span><span style=\"color:#D73A49\">record</span><span style=\"color:#D73A49\"> -></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                double a </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\">.x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                double b </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\">.y;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                Map</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String, Object</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> rest </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\">.rest;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                String optionalArg </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> matchValue</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">rest</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">isObstructed</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">powerPercentage</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#032F62\"> \"Maneuvering to x: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> a </span><span style=\"color:#D73A49\">+</span><span style=\"color:#032F62\"> \" and y: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> b </span><span style=\"color:#D73A49\">+</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                        \" coordinates with \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> optionalArg;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            default</span><span style=\"color:#D73A49\"> -></span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#032F62\"> \"Invalid instruction\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    record</span><span style=\"color:#6F42C1\"> Record</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">double</span><span style=\"color:#E36209\"> x</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">double</span><span style=\"color:#E36209\"> y</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">Map</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">Object</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\"> rest</span><span style=\"color:#24292E\">) {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String output </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> matchValue</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">new</span><span style=\"color:#E36209\"> double</span><span style=\"color:#24292E\">[] { </span><span style=\"color:#005CC5\">2.516</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">51.409</span><span style=\"color:#24292E\"> }, </span><span style=\"color:#005CC5\">false</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">0.0</span><span style=\"color:#24292E\">f);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">output</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"pattern-matching":{"frontmatter":{"title":"Pattern matching","description":"Pattern matching empowers developers to effortlessly extract pertinent data from intricate patterns and execute precise operations based on the data's structure and content. Both Ballerina and Java offer the ability to handle complex data structures concisely and expressively using pattern matching techniques.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/data-oriented-programming/pattern-matching","image":""},"content":"","code":""},"record-type-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"\n```\nimport ballerina/io;\n\nenum UserType {\n    ADMIN,\n    GUEST,\n    MEMBER\n};\n\ntype User record {|\n    int id;\n    string name;\n    UserType userType = GUEST;\n|};\n\npublic function main() {\n    User user = {id: 1, name: \"John Doe\"};\n    io:println(string `User '${user.name}' with id '${user.id}' as '${user.userType\n                        }' created successfully`);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\nenum UserType {\n    ADMIN,\n    GUEST,\n    MEMBER\n};\n\ntype User record {|\n    int id;\n    string name;\n    UserType userType = GUEST;\n|};\n\npublic function main() {\n    User user = {id: 1, name: &#x22;John Doe&#x22;};\n    io:println(string &#x60;User &#x27;${user.name}&#x27; with id &#x27;${user.id}&#x27; as &#x27;${user.userType\n                        }&#x27; created successfully&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">enum</span><span style=\"color:#6F42C1\"> UserType</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    ADMIN</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    GUEST</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    MEMBER</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> User</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    UserType userType </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> GUEST;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    User user </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `User '${</span><span style=\"color:#24292E\">user</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">name</span><span style=\"color:#032F62\">}' with id '${</span><span style=\"color:#24292E\">user</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">id</span><span style=\"color:#032F62\">}' as '${</span><span style=\"color:#24292E\">user</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">userType</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                        }' created successfully`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"record-type-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"\n```\nenum UserType {\n    ADMIN,\n    CUSTOMER,\n    GUEST\n}\n\nrecord User(int id, String name, UserType userType) {\n    public User(int id, String name) {\n        this(id, name, UserType.GUEST);\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        User customer = new User(1, \"John Doe\");\n        System.out.printf(\"User '%s' with id '%s' as '%s' created successfully\",\n                customer.name(), customer.id(), customer.userType());\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"enum UserType {\n    ADMIN,\n    CUSTOMER,\n    GUEST\n}\n\nrecord User(int id, String name, UserType userType) {\n    public User(int id, String name) {\n        this(id, name, UserType.GUEST);\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        User customer = new User(1, &#x22;John Doe&#x22;);\n        System.out.printf(&#x22;User &#x27;%s&#x27; with id &#x27;%s&#x27; as &#x27;%s&#x27; created successfully&#x22;,\n                customer.name(), customer.id(), customer.userType());\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">enum</span><span style=\"color:#6F42C1\"> UserType</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    ADMIN</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    CUSTOMER</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    GUEST</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">record</span><span style=\"color:#6F42C1\"> User</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">int</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> name</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">UserType</span><span style=\"color:#E36209\"> userType</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#6F42C1\"> User</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">int</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> name</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">        this</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">name</span><span style=\"color:#24292E\">, UserType.GUEST);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        User customer </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> User</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"John Doe\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">printf</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"User '%s' with id '%s' as '%s' created successfully\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                customer.</span><span style=\"color:#6F42C1\">name</span><span style=\"color:#24292E\">(), customer.</span><span style=\"color:#6F42C1\">id</span><span style=\"color:#24292E\">(), customer.</span><span style=\"color:#6F42C1\">userType</span><span style=\"color:#24292E\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"record-type":{"frontmatter":{"title":"Model data as data","description":"Data-oriented programming encourages representing data in its pure form. Ballerina and Java provide records, which is a language construct that simplifies this pure data representation. While Java has recently enhanced its capabilities to support this approach, Ballerina has been fundamentally architected to facilitate data-oriented programming from its inception.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/data-oriented-programming/model-data-as-data","image":""},"content":" ","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"stream-type-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype SensorData record {|\n    string sensorName;\n    string timestamp;\n    float temperature;\n    float humidity;\n|};\n\npublic function main(string filePath = \"sensor_data.csv\") returns error? {\n    // Read file as a stream which will be lazily evaluated\n    stream<SensorData, error?> sensorDataStrm = check io:fileReadCsvAsStream(filePath);\n    map<float> ecoSenseAvg = check map from var {sensorName, temperature} in sensorDataStrm\n        // if sensor reading is faulty; stops processing the file \n        let float tempInCelcius = check convertTemperatureToCelcius(sensorName, temperature)\n        group by sensorName\n        select [sensorName, avg(tempInCelcius)];\n    io:println(ecoSenseAvg);\n}\n\nfunction convertTemperatureToCelcius(string sensorName, float temperature) returns float|error {\n    if temperature < 0.0 || temperature > 10000.0 {\n        return error(string `Invalid kelvin temperature value in sensor: ${sensorName}`);\n    }\n    return temperature - 273.15;\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\ntype SensorData record {|\n    string sensorName;\n    string timestamp;\n    float temperature;\n    float humidity;\n|};\n\npublic function main(string filePath = &#x22;sensor_data.csv&#x22;) returns error? {\n    // Read file as a stream which will be lazily evaluated\n    stream<SensorData, error?> sensorDataStrm = check io:fileReadCsvAsStream(filePath);\n    map<float> ecoSenseAvg = check map from var {sensorName, temperature} in sensorDataStrm\n        // if sensor reading is faulty; stops processing the file \n        let float tempInCelcius = check convertTemperatureToCelcius(sensorName, temperature)\n        group by sensorName\n        select [sensorName, avg(tempInCelcius)];\n    io:println(ecoSenseAvg);\n}\n\nfunction convertTemperatureToCelcius(string sensorName, float temperature) returns float|error {\n    if temperature < 0.0 || temperature > 10000.0 {\n        return error(string &#x60;Invalid kelvin temperature value in sensor: ${sensorName}&#x60;);\n    }\n    return temperature - 273.15;\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> SensorData</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> sensorName;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> timestamp;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> temperature;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> humidity;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> filePath</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"sensor_data.csv\"</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Read file as a stream which will be lazily evaluated</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    stream&#x3C;</span><span style=\"color:#24292E\">SensorData, </span><span style=\"color:#D73A49\">error?></span><span style=\"color:#24292E\"> sensorDataStrm </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadCsvAsStream</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">filePath</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">float</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> ecoSenseAvg </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> map</span><span style=\"color:#D73A49\"> from</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> {sensorName, temperature} </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> sensorDataStrm</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // if sensor reading is faulty; stops processing the file </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        let</span><span style=\"color:#005CC5\"> float</span><span style=\"color:#24292E\"> tempInCelcius </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> convertTemperatureToCelcius</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">sensorName</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">temperature</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        group</span><span style=\"color:#D73A49\"> by</span><span style=\"color:#24292E\"> sensorName</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        select</span><span style=\"color:#24292E\"> [sensorName, </span><span style=\"color:#6F42C1\">avg</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">tempInCelcius</span><span style=\"color:#24292E\">)];</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">ecoSenseAvg</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> convertTemperatureToCelcius</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> sensorName</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">float</span><span style=\"color:#E36209\"> temperature</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> float</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> temperature </span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#005CC5\"> 0.0</span><span style=\"color:#D73A49\"> ||</span><span style=\"color:#24292E\"> temperature </span><span style=\"color:#D73A49\">></span><span style=\"color:#005CC5\"> 10000.0</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Invalid kelvin temperature value in sensor: ${</span><span style=\"color:#24292E\">sensorName</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    return</span><span style=\"color:#24292E\"> temperature </span><span style=\"color:#D73A49\">-</span><span style=\"color:#005CC5\"> 273.15</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"stream-type":{"frontmatter":{"title":"Model data streams","description":"In data-oriented programming, efficient handling and processing of large amounts of data is vital. Ballerina's built-in stream type enables developers to process data on-demand, apply transformations, filters, and aggregations, and facilitates seamless integration with other data processing operations.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/model-data-streams/main.bal","image":""},"content":"","code":""},"table-type-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\n// Define a type for tabular data\ntype Employee record {|\n    readonly int id;\n    string name;\n    readonly string department;\n    int salary;\n|};\n\n// Create an in-memory table with compound keys\ntable<Employee> key(id, department) employeeTable = table [\n    {id: 1, name: \"John Doe\", department: \"Engineering\", salary: 5000},\n    {id: 2, name: \"Jane Smith\", department: \"Sales\", salary: 4000}\n];\n\npublic function main() {\n    // Add an employee to the table\n    employeeTable.add({id: 3, name: \"William Smith\", department: \"Engineering\", salary: 4500});\n\n    // Adding duplicate record, throws KeyAlreadyExist error\n    // employeeTable.add({id: 2, name: \"Jane Smith\", department: \"Sales\", salary: 5000});\n\n    // Putting duplicate record, overrides the existing value\n    employeeTable.put({id: 2, name: \"Jane Smith\", department: \"Sales\", salary: 5000});\n\n    // Retrieve an employee using the compound key\n    Employee? employee = employeeTable[1, \"Engineering\"];\n    if (employee is Employee) {\n        io:println(\"Employee Found: \" + employee.name);\n    } else {\n        io:println(\"Employee Not Found\");\n    }\n\n    // Calculate the total salary in the Engineering department\n    int totalSalary = from var {department, salary} in employeeTable\n        where department == \"Engineering\"\n        collect int:sum(salary);\n    io:println(string `Total Salary in Engineering Department: ${totalSalary}`);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\n// Define a type for tabular data\ntype Employee record {|\n    readonly int id;\n    string name;\n    readonly string department;\n    int salary;\n|};\n\n// Create an in-memory table with compound keys\ntable<Employee> key(id, department) employeeTable = table [\n    {id: 1, name: &#x22;John Doe&#x22;, department: &#x22;Engineering&#x22;, salary: 5000},\n    {id: 2, name: &#x22;Jane Smith&#x22;, department: &#x22;Sales&#x22;, salary: 4000}\n];\n\npublic function main() {\n    // Add an employee to the table\n    employeeTable.add({id: 3, name: &#x22;William Smith&#x22;, department: &#x22;Engineering&#x22;, salary: 4500});\n\n    // Adding duplicate record, throws KeyAlreadyExist error\n    // employeeTable.add({id: 2, name: &#x22;Jane Smith&#x22;, department: &#x22;Sales&#x22;, salary: 5000});\n\n    // Putting duplicate record, overrides the existing value\n    employeeTable.put({id: 2, name: &#x22;Jane Smith&#x22;, department: &#x22;Sales&#x22;, salary: 5000});\n\n    // Retrieve an employee using the compound key\n    Employee? employee = employeeTable[1, &#x22;Engineering&#x22;];\n    if (employee is Employee) {\n        io:println(&#x22;Employee Found: &#x22; + employee.name);\n    } else {\n        io:println(&#x22;Employee Not Found&#x22;);\n    }\n\n    // Calculate the total salary in the Engineering department\n    int totalSalary = from var {department, salary} in employeeTable\n        where department == &#x22;Engineering&#x22;\n        collect int:sum(salary);\n    io:println(string &#x60;Total Salary in Engineering Department: ${totalSalary}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Define a type for tabular data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Employee</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    readonly</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    readonly</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> department;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> salary;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Create an in-memory table with compound keys</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">table&#x3C;</span><span style=\"color:#24292E\">Employee</span><span style=\"color:#D73A49\">></span><span style=\"color:#D73A49\"> key</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">id</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">department</span><span style=\"color:#24292E\">) employeeTable </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> table</span><span style=\"color:#24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    {id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"John Doe\"</span><span style=\"color:#24292E\">, department</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Engineering\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 5000</span><span style=\"color:#24292E\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    {id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Jane Smith\"</span><span style=\"color:#24292E\">, department</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Sales\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 4000</span><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Add an employee to the table</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeTable.</span><span style=\"color:#6F42C1\">add</span><span style=\"color:#24292E\">({id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"William Smith\"</span><span style=\"color:#24292E\">, department</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Engineering\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 4500</span><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Adding duplicate record, throws KeyAlreadyExist error</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // employeeTable.add({id: 2, name: \"Jane Smith\", department: \"Sales\", salary: 5000});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Putting duplicate record, overrides the existing value</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    employeeTable.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">({id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2</span><span style=\"color:#24292E\">, name</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Jane Smith\"</span><span style=\"color:#24292E\">, department</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Sales\"</span><span style=\"color:#24292E\">, salary</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 5000</span><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Retrieve an employee using the compound key</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Employee</span><span style=\"color:#D73A49\">?</span><span style=\"color:#24292E\"> employee </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> employeeTable[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"Engineering\"</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> (employee </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> Employee) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Employee Found: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> employee.name);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    } </span><span style=\"color:#D73A49\">else</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Employee Not Found\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Calculate the total salary in the Engineering department</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> totalSalary </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> from</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> {department, salary} </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> employeeTable</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        where</span><span style=\"color:#24292E\"> department </span><span style=\"color:#D73A49\">==</span><span style=\"color:#032F62\"> \"Engineering\"</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        collect</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">sum</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">salary</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Total Salary in Engineering Department: ${</span><span style=\"color:#24292E\">totalSalary</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"table-type":{"frontmatter":{"title":"Model tabular data","description":"Tabular data modeling empowers developers to effectively organize, process, and manipulate structured data, leading to more modular, maintainable, and efficient data-oriented programs.<br><br>Ballerina, with its built-in `table` data type, provides native support for modeling and manipulating tabular data, allowing you to define records as values and associate them with unique keys.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/data-oriented-programming/model-tabular-data/main.bal","image":""},"content":"","code":""},"type-constraints-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/constraint;\nimport ballerina/http;\nimport ballerina/io;\n\ntype User record {\n    @constraint:String {\n        minLength: 1,\n        maxLength: 8\n    }\n    string username;\n    @constraint:String {\n        pattern: re `^[\\S]{4,}$`\n    }\n    string password;\n};\n\nservice / on new http:Listener(9090) {\n    resource function post user(User user) returns http:Created {\n        io:println(string `User ${user.username} signed up successfully`);\n        return http:CREATED;\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/constraint;\nimport ballerina/http;\nimport ballerina/io;\n\ntype User record {\n    @constraint:String {\n        minLength: 1,\n        maxLength: 8\n    }\n    string username;\n    @constraint:String {\n        pattern: re &#x60;^[\\S]{4,}$&#x60;\n    }\n    string password;\n};\n\nservice / on new http:Listener(9090) {\n    resource function post user(User user) returns http:Created {\n        io:println(string &#x60;User ${user.username} signed up successfully&#x60;);\n        return http:CREATED;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/constraint;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> User</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @</span><span style=\"color:#005CC5\">constraint</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">String</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        minLength</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        maxLength</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> username;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @</span><span style=\"color:#005CC5\">constraint</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">String</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        pattern</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> re</span><span style=\"color:#24292E\"> `</span><span style=\"color:#D73A49\">^</span><span style=\"color:#005CC5\">[</span><span style=\"color:#D73A49\">\\S</span><span style=\"color:#005CC5\">]</span><span style=\"color:#D73A49\">{4,}$</span><span style=\"color:#24292E\">`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> password;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">9090</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> user</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">User</span><span style=\"color:#E36209\"> user</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Created {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `User ${</span><span style=\"color:#24292E\">user</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">username</span><span style=\"color:#032F62\">} signed up successfully`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CREATED;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"type-constraints-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.Pattern;\nimport jakarta.validation.constraints.Size;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Collections;\nimport java.util.stream.Collectors;\n\n@SpringBootApplication\n@RestController\npublic class Main {\n    @PostMapping(\"/user\")\n    public ResponseEntity<String> handleRequest(@Valid @RequestBody User user) {\n        return ResponseEntity.ok(\"User \" + user.username() + \" signed up successfully\");\n    }\n\n    public static void main(String[] args) {\n        SpringApplication app = new SpringApplication(Main.class);\n        app.setDefaultProperties(Collections.singletonMap(\"server.port\", \"9090\"));\n        app.run(args);\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<String> handleException(MethodArgumentNotValidException ex) {\n        String errorMessage = ex.getBindingResult().getFieldErrors().stream()\n                .map(this::getViolationMessage)\n                .collect(Collectors.joining(\", \"));\n        return ResponseEntity.badRequest().body(\"Payload validation failed: \" + errorMessage);\n    }\n\n    private String getViolationMessage(FieldError fieldError) {\n        String fieldName = fieldError.getField();\n        String constraintName = fieldError.getCode();\n        return String.format(\"Validation failed for '%s:%s'\", fieldName, constraintName);\n    }\n\n    record User(\n            @Size(min = 1, max = 8,\n                    message = \"Username is not valid\") String username,\n            @Pattern(regexp = \"^[\\\\S]{4,}$\",\n                    message = \"Password should be greater than 4\") String password\n    ) {}\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import jakarta.validation.Valid;\nimport jakarta.validation.constraints.Pattern;\nimport jakarta.validation.constraints.Size;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Collections;\nimport java.util.stream.Collectors;\n\n@SpringBootApplication\n@RestController\npublic class Main {\n    @PostMapping(&#x22;/user&#x22;)\n    public ResponseEntity<String> handleRequest(@Valid @RequestBody User user) {\n        return ResponseEntity.ok(&#x22;User &#x22; + user.username() + &#x22; signed up successfully&#x22;);\n    }\n\n    public static void main(String[] args) {\n        SpringApplication app = new SpringApplication(Main.class);\n        app.setDefaultProperties(Collections.singletonMap(&#x22;server.port&#x22;, &#x22;9090&#x22;));\n        app.run(args);\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<String> handleException(MethodArgumentNotValidException ex) {\n        String errorMessage = ex.getBindingResult().getFieldErrors().stream()\n                .map(this::getViolationMessage)\n                .collect(Collectors.joining(&#x22;, &#x22;));\n        return ResponseEntity.badRequest().body(&#x22;Payload validation failed: &#x22; + errorMessage);\n    }\n\n    private String getViolationMessage(FieldError fieldError) {\n        String fieldName = fieldError.getField();\n        String constraintName = fieldError.getCode();\n        return String.format(&#x22;Validation failed for &#x27;%s:%s&#x27;&#x22;, fieldName, constraintName);\n    }\n\n    record User(\n            @Size(min = 1, max = 8,\n                    message = &#x22;Username is not valid&#x22;) String username,\n            @Pattern(regexp = &#x22;^[\\\\S]{4,}$&#x22;,\n                    message = &#x22;Password should be greater than 4&#x22;) String password\n    ) {}\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> jakarta.validation.Valid;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> jakarta.validation.constraints.Pattern;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> jakarta.validation.constraints.Size;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.boot.SpringApplication;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.http.ResponseEntity;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.validation.FieldError;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.web.bind.MethodArgumentNotValidException;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.web.bind.</span><span style=\"color:#D73A49\">annotation</span><span style=\"color:#24292E\">.ExceptionHandler;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.web.bind.</span><span style=\"color:#D73A49\">annotation</span><span style=\"color:#24292E\">.PostMapping;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.web.bind.</span><span style=\"color:#D73A49\">annotation</span><span style=\"color:#24292E\">.RequestBody;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.springframework.web.bind.</span><span style=\"color:#D73A49\">annotation</span><span style=\"color:#24292E\">.RestController;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.Collections;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.</span><span style=\"color:#D73A49\">stream</span><span style=\"color:#24292E\">.Collectors;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">@</span><span style=\"color:#005CC5\">SpringBootApplication</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">@</span><span style=\"color:#005CC5\">RestController</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @</span><span style=\"color:#6F42C1\">PostMapping</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"/user\"</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> ResponseEntity</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String</span><span style=\"color:#D73A49\">></span><span style=\"color:#6F42C1\"> handleRequest</span><span style=\"color:#24292E\">(@</span><span style=\"color:#005CC5\">Valid</span><span style=\"color:#24292E\"> @</span><span style=\"color:#005CC5\">RequestBody</span><span style=\"color:#005CC5\"> User</span><span style=\"color:#E36209\"> user</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> ResponseEntity.</span><span style=\"color:#6F42C1\">ok</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"User \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#24292E\"> user.</span><span style=\"color:#6F42C1\">username</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">+</span><span style=\"color:#032F62\"> \" signed up successfully\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        SpringApplication app </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> SpringApplication</span><span style=\"color:#24292E\">(Main.class);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        app.</span><span style=\"color:#6F42C1\">setDefaultProperties</span><span style=\"color:#24292E\">(Collections.</span><span style=\"color:#6F42C1\">singletonMap</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"server.port\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"9090\"</span><span style=\"color:#24292E\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        app.</span><span style=\"color:#6F42C1\">run</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    @</span><span style=\"color:#6F42C1\">ExceptionHandler</span><span style=\"color:#24292E\">(MethodArgumentNotValidException.class)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> ResponseEntity</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String</span><span style=\"color:#D73A49\">></span><span style=\"color:#6F42C1\"> handleException</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">MethodArgumentNotValidException</span><span style=\"color:#E36209\"> ex</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String errorMessage </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> ex.</span><span style=\"color:#6F42C1\">getBindingResult</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">getFieldErrors</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">stream</span><span style=\"color:#24292E\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                .</span><span style=\"color:#6F42C1\">map</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">this:</span><span style=\"color:#24292E\">:getViolationMessage)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                .</span><span style=\"color:#6F42C1\">collect</span><span style=\"color:#24292E\">(Collectors.</span><span style=\"color:#6F42C1\">joining</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\", \"</span><span style=\"color:#24292E\">));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> ResponseEntity.</span><span style=\"color:#6F42C1\">badRequest</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">body</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Payload validation failed: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> errorMessage</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    private</span><span style=\"color:#24292E\"> String </span><span style=\"color:#6F42C1\">getViolationMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">FieldError</span><span style=\"color:#E36209\"> fieldError</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String fieldName </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> fieldError.</span><span style=\"color:#6F42C1\">getField</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String </span><span style=\"color:#005CC5\">constraintName</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> fieldError.</span><span style=\"color:#6F42C1\">getCode</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> String.</span><span style=\"color:#6F42C1\">format</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Validation failed for '%s:%s'\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">fieldName</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">constraintName</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    record</span><span style=\"color:#6F42C1\"> User</span><span style=\"color:#24292E\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            @</span><span style=\"color:#005CC5\">Size</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">min</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">max</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#005CC5\"> 8</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">                    message</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"Username is not valid\"</span><span style=\"color:#24292E\">) </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> username</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            @</span><span style=\"color:#005CC5\">Pattern</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">regexp</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"^[</span><span style=\"color:#005CC5\">\\\\</span><span style=\"color:#032F62\">S]{4,}$\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">                    message</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"Password should be greater than 4\"</span><span style=\"color:#24292E\">) </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> password</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    ) {}</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"type-constraints":{"frontmatter":{"title":"Data validation at the boundary","description":"Boundary data validation is crucial for data-oriented programming. It ensures only valid and reliable data enters the system, improving data integrity, downstream processing, and security. <br><br>Ballerina, with its built-in language features, handles data validation automatically. In Java, libraries like Hibernate Validator and Apache Commons Validator provide tools for enforcing validation rules.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/data-oriented-programming/data-validation","image":""},"content":"","code":""},"union-types-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\n\ntype Circle record {|\n   float radius;\n|};\n\ntype Rectangle record {|\n   float width;\n   float height;\n|};\n\ntype Shape Circle|Rectangle;\n\nfunction calculateArea (Shape shape) returns float {\n   if shape is Circle {\n       return float:PI * shape.radius * shape.radius;\n   }\n   return shape.width * shape.height;\n};\n\npublic function main() {\n   io:println(calculateArea({radius: 10}));\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\n\ntype Circle record {|\n   float radius;\n|};\n\ntype Rectangle record {|\n   float width;\n   float height;\n|};\n\ntype Shape Circle|Rectangle;\n\nfunction calculateArea (Shape shape) returns float {\n   if shape is Circle {\n       return float:PI * shape.radius * shape.radius;\n   }\n   return shape.width * shape.height;\n};\n\npublic function main() {\n   io:println(calculateArea({radius: 10}));\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Circle</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">   float</span><span style=\"color:#24292E\"> radius;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Rectangle</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">   float</span><span style=\"color:#24292E\"> width;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">   float</span><span style=\"color:#24292E\"> height;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Shape</span><span style=\"color:#D73A49\"> Circle|Rectangle</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> calculateArea</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">Shape</span><span style=\"color:#E36209\"> shape</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> float</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">   if</span><span style=\"color:#24292E\"> shape </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> Circle {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">       return</span><span style=\"color:#005CC5\"> float</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">PI * shape.radius * shape.radius;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">   }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">   return</span><span style=\"color:#24292E\"> shape.width </span><span style=\"color:#D73A49\">*</span><span style=\"color:#24292E\"> shape.height;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">   io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">calculateArea</span><span style=\"color:#24292E\">({radius</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 10</span><span style=\"color:#24292E\">}));</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"union-types-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nsealed interface Shape permits Circle, Rectangle {}\n\nrecord Circle(double radius) implements Shape {}\n\nrecord Rectangle(double width, double height) implements Shape {}\n\nclass Main {\n    public static double calculateArea(Shape shape) {\n        switch (shape) {\n            case Circle circle:\n                return Math.PI * circle.radius() * circle.radius();\n            case Rectangle rectangle:\n                return rectangle.width() * rectangle.height();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(calculateArea(new Circle(10)));\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"sealed interface Shape permits Circle, Rectangle {}\n\nrecord Circle(double radius) implements Shape {}\n\nrecord Rectangle(double width, double height) implements Shape {}\n\nclass Main {\n    public static double calculateArea(Shape shape) {\n        switch (shape) {\n            case Circle circle:\n                return Math.PI * circle.radius() * circle.radius();\n            case Rectangle rectangle:\n                return rectangle.width() * rectangle.height();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(calculateArea(new Circle(10)));\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#24292E\">sealed interface Shape permits Circle, Rectangle {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">record</span><span style=\"color:#6F42C1\"> Circle</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">double</span><span style=\"color:#E36209\"> radius</span><span style=\"color:#24292E\">) implements Shape {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">record</span><span style=\"color:#6F42C1\"> Rectangle</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">double</span><span style=\"color:#E36209\"> width</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">double</span><span style=\"color:#E36209\"> height</span><span style=\"color:#24292E\">) implements Shape {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static double </span><span style=\"color:#6F42C1\">calculateArea</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">Shape</span><span style=\"color:#E36209\"> shape</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">        switch </span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">shape</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            case Circle circle</span><span style=\"color:#D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#24292E\"> Math.PI </span><span style=\"color:#D73A49\">*</span><span style=\"color:#24292E\"> circle.</span><span style=\"color:#6F42C1\">radius</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">*</span><span style=\"color:#24292E\"> circle.</span><span style=\"color:#6F42C1\">radius</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            case Rectangle rectangle</span><span style=\"color:#D73A49\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#24292E\"> rectangle.</span><span style=\"color:#6F42C1\">width</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">*</span><span style=\"color:#24292E\"> rectangle.</span><span style=\"color:#6F42C1\">height</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">calculateArea</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">new</span><span style=\"color:#E36209\"> Circle</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">10</span><span style=\"color:#24292E\">)));</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"union-types":{"frontmatter":{"title":"Model choices as discriminate unions","description":"Modeling choices play a crucial role in achieving code-data separation in data-oriented programming, leading to modular, maintainable, and extensible code that can handle diverse data variants in a unified and type-safe manner. <br><br>Both Java and Ballerina provide mechanisms to model choices as discriminate unions. Java uses interfaces or abstract classes along with class hierarchies and method overrides to represent the variants and their behaviors. On the other hand, Ballerina offers built-in support for discriminate unions with a concise and language-integrated syntax.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/data-oriented-programming/model-choices","image":""},"content":"","code":""},"xml-support-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"```\nimport ballerina/io;\nimport ballerina/xmldata;\n\n// Define a SOAP payload\nxml soapPayload =\n    xml `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n            <soapenv:Body>\n                <person>\n                    <name>John Doe</name>\n                    <age>30</age>\n                    <address>\n                        <city>New York</city>\n                        <country>USA</country>\n                    </address>\n                </person>\n            </soapenv:Body>\n        </soapenv:Envelope>`;\n\nxmlns \"http://schemas.xmlsoap.org/soap/envelope/\" as ns;\n\ntype address record {|\n    string city;\n    string country;\n|};\n\npublic function main() returns error? {\n    // Extract the SOAP payload\n    xml xmlPayload = soapPayload/**/<ns:Body>;\n    io:println(xmlPayload);\n\n    // Navigate to the subcontext and extract the data\n    xml person = xmlPayload/<person>;\n\n    string name = (person/<name>).data();\n    string age = (person/<age>).data();\n    string city = (person/**/<city>).data();\n\n    // Extract the sub-xml and convert it to a record\n    address address = check xmldata:fromXml(person/<address>);\n    string country = address.country;\n\n    io:println(string `Name: ${name}, Age: ${age}, City: ${city}, Country: ${country}`);\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/io;\nimport ballerina/xmldata;\n\n// Define a SOAP payload\nxml soapPayload =\n    xml &#x60;<soapenv:Envelope xmlns:soapenv=&#x22;http://schemas.xmlsoap.org/soap/envelope/&#x22;>\n            <soapenv:Body>\n                <person>\n                    <name>John Doe</name>\n                    <age>30</age>\n                    <address>\n                        <city>New York</city>\n                        <country>USA</country>\n                    </address>\n                </person>\n            </soapenv:Body>\n        </soapenv:Envelope>&#x60;;\n\nxmlns &#x22;http://schemas.xmlsoap.org/soap/envelope/&#x22; as ns;\n\ntype address record {|\n    string city;\n    string country;\n|};\n\npublic function main() returns error? {\n    // Extract the SOAP payload\n    xml xmlPayload = soapPayload/**/<ns:Body>;\n    io:println(xmlPayload);\n\n    // Navigate to the subcontext and extract the data\n    xml person = xmlPayload/<person>;\n\n    string name = (person/<name>).data();\n    string age = (person/<age>).data();\n    string city = (person/**/<city>).data();\n\n    // Extract the sub-xml and convert it to a record\n    address address = check xmldata:fromXml(person/<address>);\n    string country = address.country;\n\n    io:println(string &#x60;Name: ${name}, Age: ${age}, City: ${city}, Country: ${country}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/xmldata;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Define a SOAP payload</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">xml</span><span style=\"color:#24292E\"> soapPayload </span><span style=\"color:#D73A49\">=</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    xml</span><span style=\"color:#032F62\"> `&#x3C;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            &#x3C;soapenv:Body></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                &#x3C;person></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    &#x3C;name>John Doe&#x3C;/name></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    &#x3C;age>30&#x3C;/age></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    &#x3C;address></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                        &#x3C;city>New York&#x3C;/city></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                        &#x3C;country>USA&#x3C;/country></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                    &#x3C;/address></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                &#x3C;/person></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            &#x3C;/soapenv:Body></span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        &#x3C;/soapenv:Envelope>`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">xmlns</span><span style=\"color:#032F62\"> \"http://schemas.xmlsoap.org/soap/envelope/\"</span><span style=\"color:#D73A49\"> as</span><span style=\"color:#24292E\"> ns;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> address</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> city;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> country;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Extract the SOAP payload</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    xml</span><span style=\"color:#24292E\"> xmlPayload </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> soapPayload</span><span style=\"color:#D73A49\">/**/&#x3C;</span><span style=\"color:#24292E\">ns</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Body</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">xmlPayload</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Navigate to the subcontext and extract the data</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    xml</span><span style=\"color:#24292E\"> person </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> xmlPayload</span><span style=\"color:#D73A49\">/&#x3C;</span><span style=\"color:#24292E\">person</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">person</span><span style=\"color:#D73A49\">/&#x3C;</span><span style=\"color:#E36209\">name</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">data</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">person</span><span style=\"color:#D73A49\">/&#x3C;</span><span style=\"color:#E36209\">age</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">data</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> city </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">person</span><span style=\"color:#D73A49\">/**/&#x3C;</span><span style=\"color:#E36209\">city</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">data</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Extract the sub-xml and convert it to a record</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    address address </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> xmldata</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fromXml</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">person</span><span style=\"color:#D73A49\">/&#x3C;</span><span style=\"color:#E36209\">address</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> country </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> address.country;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Name: ${</span><span style=\"color:#24292E\">name</span><span style=\"color:#032F62\">}, Age: ${</span><span style=\"color:#24292E\">age</span><span style=\"color:#032F62\">}, City: ${</span><span style=\"color:#24292E\">city</span><span style=\"color:#032F62\">}, Country: ${</span><span style=\"color:#24292E\">country</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"xml-support-java":{"frontmatter":{"title":"Java","description":"","url":"","image":""},"content":"```\nimport org.modelmapper.ModelMapper;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.Iterator;\nimport javax.xml.namespace.NamespaceContext;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.xpath.*;\n\nclass Main {\n    // Define a SOAP payload\n    final static String soapPayload =\n            \"\"\"\n            <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n                <soapenv:Body>\n                    <person>\n                        <name>John Doe</name>\n                        <age>30</age>\n                        <address>\n                            <city>New York</city>\n                            <country>USA</country>\n                        </address>\n                    </person>\n                </soapenv:Body>\n            </soapenv:Envelope>\"\"\";\n\n    public record Address(String city, String country) {\n        public Address() {\n            this(null, null);\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        // Parse the SOAP payload\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setNamespaceAware(true);\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        Document document = builder.parse(new ByteArrayInputStream(soapPayload.getBytes()));\n\n        // Create an XPath instance\n        XPath xpath = XPathFactory.newInstance().newXPath();\n        NamespaceContext nsContext = new NamespaceContext() {\n            public String getNamespaceURI(String prefix) {\n                if (prefix.equals(\"soapenv\")) {\n                    return \"http://schemas.xmlsoap.org/soap/envelope/\";\n                }\n                return null;\n            }\n\n            public String getPrefix(String namespaceURI) {\n                return null;\n            }\n\n            public Iterator<String> getPrefixes(String namespaceURI) {\n                return null;\n            }\n        };\n        xpath.setNamespaceContext(nsContext);\n\n        // Navigate to SOAP payload and extract the data using XPath\n        String soapPayloadExpression = \"/*/soapenv:Body\";\n        Node soapPayloadNode = (Node) xpath\n                .evaluate(soapPayloadExpression, document, XPathConstants.NODE);\n\n        String personPath = \"./person\";\n        Node personNode = (Node) xpath.evaluate(personPath, soapPayloadNode,\n                XPathConstants.NODE);\n\n        String name = (String) xpath.evaluate(\"name\", personNode,\n                XPathConstants.STRING);\n        String age = (String) xpath.evaluate(\"age\", personNode,\n                XPathConstants.STRING);\n        String city = (String) xpath.evaluate(\"*/city\", personNode,\n                XPathConstants.STRING);\n\n        // Extract the sub-xml and convert it to a record\n        String addressPath = \"./address\";\n        Node addressNode = (Node) xpath.evaluate(addressPath, personNode,\n                XPathConstants.NODE);\n        Address address = new ModelMapper().map(addressNode, Address.class);\n        String country = address.country();\n\n        System.out.println(\"Name: \" + name + \", Age: \" + age\n                + \", City: \" + city + \", Country: \" + country);\n    }\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import org.modelmapper.ModelMapper;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.Iterator;\nimport javax.xml.namespace.NamespaceContext;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.xpath.*;\n\nclass Main {\n    // Define a SOAP payload\n    final static String soapPayload =\n            &#x22;&#x22;&#x22;\n            <soapenv:Envelope xmlns:soapenv=&#x22;http://schemas.xmlsoap.org/soap/envelope/&#x22;>\n                <soapenv:Body>\n                    <person>\n                        <name>John Doe</name>\n                        <age>30</age>\n                        <address>\n                            <city>New York</city>\n                            <country>USA</country>\n                        </address>\n                    </person>\n                </soapenv:Body>\n            </soapenv:Envelope>&#x22;&#x22;&#x22;;\n\n    public record Address(String city, String country) {\n        public Address() {\n            this(null, null);\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        // Parse the SOAP payload\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setNamespaceAware(true);\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        Document document = builder.parse(new ByteArrayInputStream(soapPayload.getBytes()));\n\n        // Create an XPath instance\n        XPath xpath = XPathFactory.newInstance().newXPath();\n        NamespaceContext nsContext = new NamespaceContext() {\n            public String getNamespaceURI(String prefix) {\n                if (prefix.equals(&#x22;soapenv&#x22;)) {\n                    return &#x22;http://schemas.xmlsoap.org/soap/envelope/&#x22;;\n                }\n                return null;\n            }\n\n            public String getPrefix(String namespaceURI) {\n                return null;\n            }\n\n            public Iterator<String> getPrefixes(String namespaceURI) {\n                return null;\n            }\n        };\n        xpath.setNamespaceContext(nsContext);\n\n        // Navigate to SOAP payload and extract the data using XPath\n        String soapPayloadExpression = &#x22;/*/soapenv:Body&#x22;;\n        Node soapPayloadNode = (Node) xpath\n                .evaluate(soapPayloadExpression, document, XPathConstants.NODE);\n\n        String personPath = &#x22;./person&#x22;;\n        Node personNode = (Node) xpath.evaluate(personPath, soapPayloadNode,\n                XPathConstants.NODE);\n\n        String name = (String) xpath.evaluate(&#x22;name&#x22;, personNode,\n                XPathConstants.STRING);\n        String age = (String) xpath.evaluate(&#x22;age&#x22;, personNode,\n                XPathConstants.STRING);\n        String city = (String) xpath.evaluate(&#x22;*/city&#x22;, personNode,\n                XPathConstants.STRING);\n\n        // Extract the sub-xml and convert it to a record\n        String addressPath = &#x22;./address&#x22;;\n        Node addressNode = (Node) xpath.evaluate(addressPath, personNode,\n                XPathConstants.NODE);\n        Address address = new ModelMapper().map(addressNode, Address.class);\n        String country = address.country();\n\n        System.out.println(&#x22;Name: &#x22; + name + &#x22;, Age: &#x22; + age\n                + &#x22;, City: &#x22; + city + &#x22;, Country: &#x22; + country);\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.modelmapper.ModelMapper;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.w3c.dom.Document;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> org.w3c.dom.Node;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.io.ByteArrayInputStream;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> java.util.Iterator;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> javax.</span><span style=\"color:#005CC5\">xml</span><span style=\"color:#24292E\">.namespace.NamespaceContext;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> javax.</span><span style=\"color:#005CC5\">xml</span><span style=\"color:#24292E\">.parsers.DocumentBuilder;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> javax.</span><span style=\"color:#005CC5\">xml</span><span style=\"color:#24292E\">.parsers.DocumentBuilderFactory;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> javax.</span><span style=\"color:#005CC5\">xml</span><span style=\"color:#24292E\">.xpath.*;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">class</span><span style=\"color:#6F42C1\"> Main</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Define a SOAP payload</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> static String soapPayload </span><span style=\"color:#D73A49\">=</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            \"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            &#x3C;soapenv:Envelope xmlns:soapenv=\"</span><span style=\"color:#24292E\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6A737D\">//schemas.xmlsoap.org/soap/envelope/\"></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                &#x3C;</span><span style=\"color:#24292E\">soapenv</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Body</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    &#x3C;</span><span style=\"color:#24292E\">person</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                        &#x3C;</span><span style=\"color:#24292E\">name</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">John Doe</span><span style=\"color:#D73A49\">&#x3C;/</span><span style=\"color:#24292E\">name</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                        &#x3C;</span><span style=\"color:#24292E\">age</span><span style=\"color:#D73A49\">></span><span style=\"color:#005CC5\">30</span><span style=\"color:#D73A49\">&#x3C;/</span><span style=\"color:#24292E\">age</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                        &#x3C;</span><span style=\"color:#24292E\">address</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                            &#x3C;</span><span style=\"color:#24292E\">city</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">New York</span><span style=\"color:#D73A49\">&#x3C;/</span><span style=\"color:#24292E\">city</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                            &#x3C;</span><span style=\"color:#24292E\">country</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">USA</span><span style=\"color:#D73A49\">&#x3C;/</span><span style=\"color:#24292E\">country</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                        &#x3C;/</span><span style=\"color:#24292E\">address</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    &#x3C;/</span><span style=\"color:#24292E\">person</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                &#x3C;/</span><span style=\"color:#24292E\">soapenv</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Body</span><span style=\"color:#D73A49\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            &#x3C;/</span><span style=\"color:#24292E\">soapenv</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Envelope</span><span style=\"color:#D73A49\">></span><span style=\"color:#032F62\">\"\"\"</span><span style=\"color:#B31D28;font-style:italic\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#6F42C1\"> Address</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> city</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> country</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        public</span><span style=\"color:#6F42C1\"> Address</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1\">            this</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">null</span><span style=\"color:#24292E\">, </span><span style=\"color:#D73A49\">null</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    public</span><span style=\"color:#24292E\"> static void </span><span style=\"color:#6F42C1\">main</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">args</span><span style=\"color:#24292E\">) throws Exception {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Parse the SOAP payload</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        DocumentBuilderFactory factory </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> DocumentBuilderFactory.</span><span style=\"color:#6F42C1\">newInstance</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        factory.</span><span style=\"color:#6F42C1\">setNamespaceAware</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">true</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        DocumentBuilder builder </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> factory.</span><span style=\"color:#6F42C1\">newDocumentBuilder</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Document document </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> builder.</span><span style=\"color:#6F42C1\">parse</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">new</span><span style=\"color:#E36209\"> ByteArrayInputStream</span><span style=\"color:#24292E\">(soapPayload.</span><span style=\"color:#6F42C1\">getBytes</span><span style=\"color:#24292E\">()));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Create an XPath instance</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        XPath xpath </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> XPathFactory.</span><span style=\"color:#6F42C1\">newInstance</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">newXPath</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        NamespaceContext nsContext </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> NamespaceContext</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            public</span><span style=\"color:#24292E\"> String </span><span style=\"color:#6F42C1\">getNamespaceURI</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> prefix</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                if</span><span style=\"color:#24292E\"> (prefix.</span><span style=\"color:#6F42C1\">equals</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"soapenv\"</span><span style=\"color:#24292E\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    return</span><span style=\"color:#032F62\"> \"http://schemas.xmlsoap.org/soap/envelope/\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#D73A49\"> null</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            public</span><span style=\"color:#24292E\"> String </span><span style=\"color:#6F42C1\">getPrefix</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> namespaceURI</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#D73A49\"> null</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            public</span><span style=\"color:#24292E\"> Iterator</span><span style=\"color:#D73A49\">&#x3C;</span><span style=\"color:#24292E\">String</span><span style=\"color:#D73A49\">></span><span style=\"color:#6F42C1\"> getPrefixes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">String</span><span style=\"color:#E36209\"> namespaceURI</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#D73A49\"> null</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        xpath.</span><span style=\"color:#6F42C1\">setNamespaceContext</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">nsContext</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Navigate to SOAP payload and extract the data using XPath</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String soapPayloadExpression </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"/*/soapenv:Body\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Node soapPayloadNode </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">Node</span><span style=\"color:#24292E\">) xpath</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                .</span><span style=\"color:#6F42C1\">evaluate</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">soapPayloadExpression</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">document</span><span style=\"color:#24292E\">, XPathConstants.NODE);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String personPath </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"./person\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Node personNode </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">Node</span><span style=\"color:#24292E\">) xpath.</span><span style=\"color:#6F42C1\">evaluate</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">personPath</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">soapPayloadNode</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                XPathConstants.NODE);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String name </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">) xpath.</span><span style=\"color:#6F42C1\">evaluate</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"name\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">personNode</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                XPathConstants.STRING);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String age </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">) xpath.</span><span style=\"color:#6F42C1\">evaluate</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"age\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">personNode</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                XPathConstants.STRING);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String city </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">String</span><span style=\"color:#24292E\">) xpath.</span><span style=\"color:#6F42C1\">evaluate</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"*/city\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">personNode</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                XPathConstants.STRING);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Extract the sub-xml and convert it to a record</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String addressPath </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"./address\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Node addressNode </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">Node</span><span style=\"color:#24292E\">) xpath.</span><span style=\"color:#6F42C1\">evaluate</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">addressPath</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">personNode</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                XPathConstants.NODE);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Address address </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> ModelMapper</span><span style=\"color:#24292E\">().</span><span style=\"color:#6F42C1\">map</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">addressNode</span><span style=\"color:#24292E\">, Address.class);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        String country </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> address.</span><span style=\"color:#6F42C1\">country</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        System.out.</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Name: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> name</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#032F62\"> \", Age: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> age</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                +</span><span style=\"color:#032F62\"> \", City: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> city</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#032F62\"> \", Country: \"</span><span style=\"color:#D73A49\"> +</span><span style=\"color:#E36209\"> country</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"xml-support":{"frontmatter":{"title":"XML support","description":"XML is a structured markup language that offers a flexible and extensible approach for representing data. <br><br>Ballerina's XML native support enables seamless parsing, generation, and manipulation of XML data, facilitating integration with XML-based systems and protocols in data-oriented programming. Java developers can utilize third-party libraries to achieve similar XML handling capabilities.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/data-oriented-programming/xml-support","image":""},"content":"","code":""}}},"__N_SSG":true}