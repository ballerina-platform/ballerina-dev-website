{"pageProps":{"frontmatter":{"layout":"ballerina-style-guide-left-nav-pages-swanlake","title":"Annotations, documentation and comments","description":"The Ballerina Style Guide aims at maintaining a standard coding style among the Ballerina community. The Ballerina code formatting tools are based on this guide.","keywords":"ballerina, programming language, ballerina style guide, annotations, comments","permalink":"/learn/style-guide/annotations-documentation-and-comments/","active":"annotations-documentation-and-comments","intro":"The sections below include the coding conventions with respect to annotations, documentation, and comments."},"content":"\n## Annotations\n* Do not have spaces around the `@` symbol.\n* Indent annotations to align them with the starting position of the owner (statement or definition).\n* Each annotation attribute (i.e., key-value pairs) can be expanded and block indented on its own line or kept as inline fields.\n\n    **Example,**\n\n    ```ballerina\n    // Function annotations are aligned with the starting position of the function.\n    @test:Config {\n        before: beforeFunc,\n        after: afterFunc\n    }\n    function testFunction() {\n        io:println(\"I'm in test function!\");\n        test:assertTrue(true, msg = \"Failed!\");\n    }\n    ```\n\n* If an annotation is empty, place it in a single line and \n  do not have spaces between both braces.\n  \n    **Example,**\n\n    ```ballerina\n    @test:Config\n    ```\n\n* If you are annotating a parameter or a return type, the annotation should be added inline to the parameter or the return type.\n  \n    **Example,**\n    \n    ```ballerina\n    annotation validated on parameter, return;\n\n    // Parameter annotation.\n    public function secureFunction1(@validated string secureInName, int secureInId, string insecureIn) {\n        ...\n    }\n\n    public function secureFunction2(string secureInName,\n        @validated int secureInId, string insecureIn) {\n        ...\n    }\n\n    // Return type annotation.\n    public function taintedReturn1() returns @validated string {\n        ...\n    }\n\n    public function taintedReturn2() returns\n        @validated string {\n        ...\n    }\n    ```\n\n## Comments\n  \n* Add a single space between the `//` and the content.\n* If the comment is in its own line, then indent it considering its context (i.e., top-level or in a block).\n  \n    **Example,**\n\n    ```ballerina\n    // This is a top-level comment.\n\n    function func1() {\n        // This is a block-level comment. \n        int x = 10;\n    }\n\n    function func2() {\n        if valid {\n            if active {\n                // This is a nested if block-level comment.\n                string a = \"hello\";\n            }\n        }\n    }\n    ```\n\n* If the comment is in line with the code, add a space before it.\n\n    **Example,**\n\n    ```ballerina\n    type People record {}; // Inline comment\n\n    function func1() {\n        int a = 0; // Inline comment\n    }\n    ```\n\n## Documentation\n* Always, indent them to align with the starting position of the owner.\n* Add a space after the `#` symbol.\n* Add an empty line after the description.\n\n    **Example,**\n\n    ```ballerina\n    # Description.\n    #\n    # + value - value input parameter \n    # + return - return a integer value\n    function getValue(int value) returns int {\n        return value;\n    }\n    ```\n\n* Add only one space after the parameter marker (`+`), divider (`-`), and `return`.\n* Begin the param identifier and description with a single space.\n\n    **Example,**\n  \n    ```ballerina\n    # Description.\n    #\n    # + value - Parameter description\n    # + return - Return value description\n    function getValue(int value) returns int {\n        ...\n    }\n\n    # Description.\n    service / on new http:Listener(8080) {\n        # Description.\n        #\n        # + caller - Parameter description.\n        # + request - Parameter description.\n        resource function get greeting(http:Caller caller, http:Request request) {\n            ...\n        }\n    }\n    ```\n\n* For record type definitions add the description above the type definition.\n* Similarly, for each field add the description above the field definition.\n* Don't leave empty lines between the description and the corresponding definition.\n\n    **Example,**\n\n    ```ballerina\n    # Represents a user.\n    type User record {|\n        # Id of the user\n        int id;\n        # Name of the user\n        string name;\n        # Whether the user is a member\n        boolean isMember;\n    |};\n    ```\n\n* If the fields have annotations, you could introduce empty lines in between field definitions to improve readability.\n\n    **Example,**\n\n    ```ballerina\n    # Represents a user with metadata.\n    type UserWithMetadata record {|\n        # Id of the user\n        @constraint:Int {\n            maxDigits: 10\n        }\n        int id;\n\n        # Name of the user\n        @constraint:String {\n            minLength: 5,\n            maxLength: 20\n        }\n        string name;\n\n        # Address of the user\n        @constraint:String {\n            minLength: 20,\n            maxLength: 100\n        }\n        string address;\n    |};\n    ```\n\n<div class=\"cGitButtonContainer\"><p data-button=\"iGitStarText\">\"Star\"</p><p data-button=\"iGitWatchText\">\"Watch\"</p></div>\n\n\n<style> #tree-expand-all , #tree-collapse-all, .cTocElements {display:none;} .cGitButtonContainer {padding-left: 40px;display: none;} </style>\n","id":"annotations-documentation-and-comments","sub":"source-code-dependencies","third":"style-guide","slug":"source-code-dependencies/style-guide/annotations-documentation-and-comments","codes":"[[-621909743,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Function annotations are aligned with the starting position of the function.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">test</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Config</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    before</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> beforeFunc,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    after</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> afterFunc</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> testFunction</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"I'm in test function!\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    test</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">assertTrue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">true</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">msg</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"Failed!\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-426244342,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">test</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Config</span></span></code></pre>\"],[1454430757,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">annotation</span><span style=\\\"color:#24292E\\\"> validated </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> parameter</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">return</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Parameter annotation.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> secureFunction1</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">validated</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#E36209\\\"> secureInName</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> secureInId</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> insecureIn</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> secureFunction2</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> secureInName</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">validated</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#E36209\\\"> secureInId</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> insecureIn</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Return type annotation.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> taintedReturn1</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> @validated </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> taintedReturn2</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @validated </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[396486553,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// This is a top-level comment.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> func1</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // This is a block-level comment. </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> x </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 10</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> func2</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    if</span><span style=\\\"color:#24292E\\\"> valid {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> active {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">            // This is a nested if block-level comment.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            string</span><span style=\\\"color:#24292E\\\"> a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"hello\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[882312389,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> People</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {}; </span><span style=\\\"color:#6A737D\\\">// Inline comment</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> func1</span><span style=\\\"color:#24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> a </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">; </span><span style=\\\"color:#6A737D\\\">// Inline comment</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2143426931,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Description.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">value</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">value input parameter </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">return a integer value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> getValue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> value</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> value;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1689139718,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Description.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">value</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Parameter description</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Return value description</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> getValue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> value</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Description.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> / </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Description.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">caller</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Parameter description.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">request</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Parameter description.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Caller caller, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1151733219,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a user.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> User</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Id of the user</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Name of the user</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Whether the user is a member</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> isMember;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[724017328,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a user with metadata.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> UserWithMetadata</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Id of the user</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">constraint</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxDigits</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 10</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Name of the user</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">constraint</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        minLength</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxLength</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 20</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Address of the user</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">constraint</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        minLength</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 20</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxLength</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 100</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> address;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"]]"},"__N_SSG":true}