{"pageProps":{"frontmatter":{"layout":"ballerina-left-nav-release-notes","title":"1.2.0","permalink":"/downloads/1.2.x-release-notes/1.2.0/","active":"1.2.0","redirect_from":null},"content":"\n## Overview of jBallerina 1.2.0\n\njBallerina 1.2.0 is the first major release of 2020 and it includes a\nnew set of features and significant improvements to the compiler,\nruntime, standard library, and developer tooling. It is based on the\n2020R1 version of the Language Specification.\n\n## Highlights\n\n-   Redesigned XML, Stream and Query support\n-   Based on a stable language specification: 2020R1\n-   Significant reduction in overall compilation time\n-   Added cookies and trailer support in HTTP\n-   Revamped `cache` module\n-   Redesigned oneof field and map field support in gRPC and added\n    client retry support for gRPC blocking unary calls\n-   Added custom serializer/deserializer and Avro support in the Kafka\n    connector\n-   Introduced new Database connectors\n-   Introduced new client connectors (email, Slack, and Azure\n    time-series)\n-   Support to mock functions when writing tests\n-   Test and code coverage report\n-   New tool to generate Ballerina bindings for Java APIs\n-   Several critical bug fixes\n\n## What’s new in jBallerina 1.2.0?\n\n### Language\n\nThe language implementation is based on the stable language\nspecification version 2020R1. This implementation introduces a new set\nof features aimed at making integration further easier for the user. In\naddition to that, the XML and Lock implementations are out of their\npreview/experimental status.\n\nIn addition to new features, this release also includes critical bug\nfixes and fixes done to align the implementation with the language\nspecification. Some of these changes are backward incompatible. For a\ncomplete list of changes done since 1.1.0, see the\n`Language changes since jBallerina 1.1.0` section.\n\n#### New XML design\n\nThis release introduces a revamped XML support along with XPath-like\nquery syntax allowing easy and safe manipulation of XML data.\n\n##### XML navigation expression\n\nXML step expressions allow to query the children of an XML element or\nchildren of members of an XML sequence.\n\n```ballerina\nxml x = xml `<root>\n                 <person>\n                     <name>\n                         <fname>William</fname>\n                         <lname>Martin</lname>\n                     </name>\n                 </person>\n                 <person>\n                     <name>\n                         <fname>David</fname>\n                         <lname>Taylor</lname>\n                     </name>\n                 </person>\n                 <person>\n                     <name>\n                         <fname>Daniel</fname>\n                         <lname>Wilson</lname>\n                     </name>\n                 </person>\n             </root>`;\n\n// Select all children items, which are XML elements.\nxml allElementChildren = x/<*>;\n\n// Match first-level children with element name `person`.\n// Then, match the second level with element name `name`\n// and the third level with element name `fname`.\nxml fnameItems = x/<person>/<name>/<fname>;\n\n// Select all descendants, which match element name `fname`.\nxml fnameDescendents = x/**/<fname>;\n\n// Select all children items of `x`.\nxml allChildren = x/*;\n```\n\nXML filter expression allows filtering an XML sequence by an element\nname.\n\n```ballerina\nxml x = xml `<root>\n                <rectangle length=\"5\" width=\"10\"/>\n                <rectangle length=\"5\" width=\"5\"/>\n                <circle radius=\"2\"/>\n                <square side=\"6\"/>\n            </root>`;\n\nxml rectangles = x/*.<rectangle>;\n```\n\n##### XML attribute access\n\n```ballerina\nxmlns \"www.ballerina.io/ns\" as ns;\nxml val = xml `<element type=\"fixed\" ns:count=\"2></element>`;\nstring|error 'type = val.'type;\nstring|error count = val.ns:count;\n```\n\nXML attribute access is now lax typed. This means that compile-time type\nchecking is relaxed and moved to runtime. Accessing a non-existent\nattribute or using field access expression on a non-XML element item\nwill result in an error being returned. If optional field access syntax\nis used, then nil will be returned instead of an error when the field is\nnot available. Attributes with namespace prefix are accessed using the\n`value.prefix:attrName` syntax where the XML prefix must be declared in\nthe scope.\n\n```ballerina\nxml val = xml `<element type=\"fixed\"></element>`;\nstring|error nonEx = val.nonExsistent; // result in error\nstring|error? nonExOptional = val?.nonExsistent; // result in nil\n```\n\n#### New language-integrated query design\n\n##### Query expression\n\nA query expression provides a language-integrated query feature using\nSQL-like syntax.\n\nIn its most basic form, a query expression consists of four kinds of\nclauses: `from`, `let`, `where`, and `select`. The first clause must be\na `from` clause and the last clause must be a `select` clause. The\nresult of the query expression is a list. In this basic form, a query\nexpression is just a list comprehension.\n\nThe `from` clause works similarly to a foreach statement. It creates an\niterator from an iterable value and then binds variables to each value\nreturned by the iterator. The `where` clause is a `boolean` expression,\nwhich can refer to variables bound by the `from` clause; when the\n`where` expression evaluates to `false`, the iteration skips following\nclauses. The `let` clause binds variables. The `select` clause is\nevaluated for each iteration; the result of the query expression is a\nlist whose members are the result of the `select` clause.\n\n```ballerina\nPerson[] outputPersonList =\n       from var person in personList\n       let string depName = \"WSO2\", string replaceName = \"Alexander\"\n       where person.deptAccess == \"A\" && person.firstName == \"Alex\"\n       select {\n              firstName: replaceName,\n              lastName: person.lastName,\n              deptAccess: depName\n       };\n```\n\nAs of now, query expressions are supported by lists and streams.\n\n##### Query action\n\nThe clauses in the query pipeline of a query action are executed in the\nsame way as the clauses in the query pipeline of a query expression. The\nquery action is executed as follows. For each input frame `f` emitted by\nthe query pipeline, execute the block-statement with `f` in the scope.\n\n```ballerina\n    error? result = from var student in studentList\n                    where student.score > 1.0\n                    do {\n                        FullName fullName = {\n                            firstName: student.firstName, \n                            lastName: student.lastName\n                        };\n                        nameList.push(fullName);\n                    };\n```\n\n#### New streams design\n\nA stream is an object-like value that can generate a sequence of values.\nThere is also a value associated with the completion of the generation\nof the sequence, which is either nil, indication of the generation of\nthe sequence being completed successfully, or an error.\n\nA stream supports two primitive operations: a next operation and a close\noperation. The next operation has the same semantics as the next method\non the `Iterator` abstract object type. The close operation informs the\nstream that there will be no more next operations and thus allows the\nstream to release resources used by the stream.\n\nA stream is iterable. A stream of type `stream<T, C>` has value type `T`\nand completion type `C`. Calling the next method on the iterator created\nfor an iteration has the same effect as performing the next operation on\nthe stream. The stream does not keep a copy of the sequence of values\nreturned by the next operation. Any subsequent iteration operation on\nthe same stream will not generate further values so the iteration\nsequence for iterations other than the first will be the empty sequence.\n\nThe stream type provides methods (more precisely functions in the\n`lang.stream` library) similar to list: - map - foreach - filter -\nreduce - iterator\n\nThe `map()` and `filter()` methods return streams and work lazily.\nIterable basic types would have a `toStream()` method to convert to a\nstream; these should handle mutation similarly to iterators; as of now,\nit supports only for arrays.\n\n```ballerina\nstream<Person, error> personStream = getPersonStream();\nstream<Person, error> filteredPersonStream = personStream.filter(function (Person person) returns boolean {\n   return person.age > 100 && person.name != \"James\";\n});\n```\n\n#### Expression-bodied functions\n\nThis release introduces expression-bodied functions whose body is a\nsingle expression. The expression function body takes the form `=> E;`,\nwhere `E` is any expression. It is equivalent to the block function\nbody, `{ return E; }`. The following is an example where a `Person`\nrecord is mapped to an `Employee` record using an expression-bodied\nfunction.\n\n```ballerina\nfunction toEmployee(Person p, string pos) returns Employee => {\n    name: p.fname + \" \" + p.lname,\n    designation: pos\n};\n```\n\n#### Let expressions\n\nThis release introduces let expression. It takes the form\n`let T B = E1 in E2`, where `E1` is evaluated resulting in a value `v`.\nThe typed binding pattern `T B` is matched to `v`, causing assignments\nto the variables occurring in `B`. Then `E2` is evaluated with those\nvariables in scope; the resulting value is the result of the let\nexpression.\n\n```ballerina\nconst int globalVar = 2;\npublic function main() {\n    int b = let int x = 4, int y = 3 in x * y * globalVar; // b = 4 * 3 * 2 = 24\n}\n```\n\n#### Improved mapping constructor syntax\n\n##### Spread operator\n\nA mapping constructor expression can now have a spread field. A spread\nfield can be used with another mapping value `V` to include all of the\nfields in `V` when creating the new mapping value.\n\n```ballerina\ntype Foo record {|\n    string s;\n    decimal d;\n|};\n\ntype Bar record {|\n    string s;\n    int i;\n    decimal...;\n|};\n\npublic function main() {\n    Foo f = {s: \"test str\", d: 1.0};\n\n    // Spread field `...f` spreads the fields of `f` \n    // when creating the `Bar` value `b`. The required \n    // field `s` is provided via `f`. \n    // `b` will contain 3 fields; `s`, `i`, and `d`.\n    Bar b = {i: 1, ...f};\n}\n```\n\n##### Variable names as fields of mapping constructors\n\nA mapping constructor expression can also contain just a variable name\n(`foo`) as a field. This is equivalent to the key-value pair field\n`foo: foo`. The name of the variable is considered the key while the\nvariable reference is considered the expression.\n\n```ballerina\ntype Employee record {|\n    string name;\n    string department;\n|};\n\npublic function main() {\n    string department = \"Finance\";\n\n    // The variable-name `department` is \n    // used as a field here.\n    Employee e = {name: \"Jo\", department};\n}\n```\n\n#### Improvements to metadata\n\n##### Deprecation syntax\n\nYou can now mark type definitions, functions, object methods, and\nconstants as deprecated using the `@deprecated` annotation. The compiler\nwill generate warnings if a you use a deprecated construct. If the\ndeprecated construct contains documentation, you need to add some\nadditional bit of documentation called `Deprecated` documentation. The\n`Deprecated` documentation should ideally include details on why the\nconstruct was deprecated and suitable alternate options, which should be\nused instead.\n\n```ballerina\n# Creates and returns a `Baz` object.\n#\n# # Deprecated\n# This function is deprecated due to undesired side effects since it relies on module-level\n# variables. Use the new and improved `newFoo()` function instead.\n@deprecated\npublic function foo() returns Baz {\n    // some logic which has side effects\n}\n```\n\n##### Metadata on record and object fields\n\nMetadata (documentation and annotations) are now allowed on record and\nobject fields.\n\n```ballerina\n// An annotation allowed on record fields.\nannotation foo on record field;\n\n// An annotation allowed on object fields.\nannotation bar on object field;\n\n// An annotation allowed on record and object fields.\nannotation baz on field;\n\n# Docs for this record.\npublic type Rec record {\n\n    # Docs for this field.\n    @foo\n    @baz\n    string s;\n};\n\n# Docs for this object.\npublic type Obj object {\n\n    # Docs for this field.\n    @bar\n    @baz\n    int i = 0;\n};\n```\n\n#### Lang Library\n\n##### Builtin sub types of basic types\n\nLang Library modules provide a new set of built-in types. Each such\nbuilt-in type that is a sub type of a basic type `B` is provided by the\n`lang.B` module. The following are the built-in types provided by the\nlang library modules.\n\n-   Module `ballerina/lang.int`\n\n    -   `Unsigned8`\n    -   `Signed8`\n    -   `Unsigned16`\n    -   `Signed16`\n    -   `Unsigned32`\n    -   `Signed32`\n-   Module `ballerina/lang.string`\n\n    -   `Char`\n-   Module `ballerina/lang.xml`\n\n    -   `Element`\n    -   `ProcessingInstruction`\n    -   `Comment`\n    -   `Text`\n\n```ballerina\nimport ballerina/lang.'int;\nimport ballerina/lang.'string;  \n\npublic function main() {\n    'int:Unsigned8 number = 200;\n    'string:Char char = \"A\";\n}\n```\n\n##### Redesigned `lang.xml` module\n\nThe XML lang module has been revamped to work with the `Element`,\n`Comment`, `ProcessingInstructions` and `Text` XML built-in types.\nPreviously, functions such as `getChildren()` and `getElementName()`,\nwhich are specific to an XML element type were allowed to be called on\nthe `xml` type and if they were called on non-element items, it used to\nresult in runtime errors. With `xml` built-in sub type improvements,\nthese functions are statically type checked and only allowed on the\nbuilt-in sub type `Element`. The same applies to other built-in sub\ntypes and functions.\n\n```ballerina\nimport ballerina/lang.'xml as xmllib;\n\npublic function main() {\n     xmllib:Element element = <xmllib:Element> xml `<elem> hello </elem>`;\n     xml children = element.getChildren();\n}\n```\n\nThe functions `isElement()`, `isProcessingInstruction()`, `isComment()`\nand `isText()` have been removed. The same functionality can be achieved\nusing type testing as follows.\n\n```ballerina\nimport ballerina/lang.'xml;\npublic function main() {\n    xml cmnt = xml `<!-- hello from comment -->`;\n    boolean isComment = cmnt is 'xml:Comment;\n}\n```\n\nThe functions `appendChildren()` and `removeChildren()` have been\nremoved.\n\n##### The `lang.boolean` module\n\nThe newly-added lang library module for the `boolean` basic type\ncontains a function for parsing `string` values to `boolean` values. It\naccepts `”true”` or `”false”` in any combination of lower/upper case as\nwell as `”1”` and `”0”`, which evaluates to `true` and `false`\nrespectively. An error is returned for any other `string` value.\n\n```ballerina\nimport ballerina/lang.'boolean;\n\npublic function main() {\n    boolean|error b = 'boolean:fromString(\"true\");\n}\n```\n\n##### Enhanced `lang.int`, `lang.string`, `lang.array`, and `lang.map` modules\n\nThe above-mentioned lang library modules have been enhanced by adding\nnew API elements (e.g., constants and functions).\n\n-   `lang.int` module - Constants added: for max/min values of the `int`\n    type\n-   `lang.string` module - New functions added: `lastIndexOf()`,\n    `equalsIgnoreCaseAscii()`, `toCodePointInt()`, `fromCodePointInt()`\n-   `lang.array` module - New functions added: `lastIndexOf()`,\n    `toStream()`\n-   `lang.map` module - New functions added: `toArray()`,\n    `removeIfHasKey()`\n\n#### Backward incompatible improvements and bug fixes\n\n-   Listener variables are now final.\n-   The syntax for Unicode escapes in strings has changed from\n    `\\u[CodePoint]` to `\\u{CodePoint}` so as to align with ECMAScript.\n    Although this is an incompatible change, the previous syntax was not\n    implemented.\n-   The semantics of the `lock` statement has been changed. Now, it\n    acquires a single, program-wide, recursive mutex before executing a\n    lock statement and releases the mutex after completing the execution\n    of the lock statement.\n-   When a list constructor or a mapping constructor is used without a\n    contextually-expected type, now a tuple or a record type is inferred\n    rather than an array or a map type.\n-   The `x@` syntax for accessing the attributes of an XML element has\n    been removed.\n-   Now, member value assignment for a dynamic list adds filler values\n    if the required members are not already filled and the relevant\n    member type has a filler value.\n-   Functions with the same name were previously allowed in both the\n    module and the module’s tests. This is now disallowed and results in\n    a compilation error.\n-   Now, out of range index access of `xml` sequences result in empty\n    sequences rather than a panic. Using the `xml:get()` langlib method\n    with an out of range index results in a panic.\n\n### Runtime\n\n#### Compilation time improvement\n\nThe compiler backend, which generates the Java bytecode for Ballerina\nprograms was rewritten to reduce the time taken for Java bytecode\ngeneration. This resulted in a significant reduction in overall\ncompilation time.\n\n#### The `@strand` annotation\n\nAs per the Ballerina language specification, new strands should belong\nto the same thread as the currently executing strand. Strands, which\nbelong to the same thread share the following characteristics.\n\n-   Only one strand can run simultaneously.\n-   The currently-running strand should yield to switch its thread to\n    execute another strand.\n-   Strands belonging to a particular thread are cooperatively\n    multitasked.\n-   All the strands created in a particular execution of a Ballerina\n    program will be executed sequentially by a single thread.\n\nIn some situations, it would be desirable to assign strands to different\nthreads. You can change this behavior with an annotation but such an\nannotation was not available in Ballerina releases prior to 1.2.0. This\nhas been a major spec deviation.\n\nA major revamp of our strand scheduler was done in this release to\naddress the spec deviation.\n\n### Standard library\n\n#### Enhanced `http` module\n\n##### Cookie support\n\nA new cookie API has been introduced for easily handling HTTP cookies.\nIt provides the following features: - Enable the server to read cookies\nfrom the request and write cookies to the response (in “Set-Cookie”\nheader). - Enable configuring the client to enable/disable cookies,\nenable/disable persistent cookies, and whether to block/unblock\nthird-party cookies. - Add persistent cookies support and add support to\nplug custom persistent storages.\n\n##### Trailer support\n\nAdd support to create, read, update, and delete trailing headers in the\nresponse message. All existing header functions are changed to accept a\nfinite-typed variable. The default value is set as `leading`, which\nmeans by default, those functions apply to leading headers. In order to\napply trailer headers, you need to set the position as trailing as shown\nbelow.\n\n```ballerina\nstring trailerHeader = response.getHeader(\"foo\", position = \"trailing\");\n```\n\n##### Other changes\n\n-   In the previous versions, HTTP caching was enabled by default in the\n    HTTP client. With 1.2.0, HTTP caching is now disabled by default.\n\n#### Revamped `cache` module\n\n-   Introduced the Cache API v2.0.0, which introduces a `AbstractCache`\n    object, which can be used to implement custom caches and the\n    `AbstractEvictionPolicy` object, which can be used to implement\n    custom eviction algorithms. By default, this provides a `Cache`\n    object and `LruEvictionPolicy` object, which is an implementation of\n    the LRU eviction algorithm.\n-   Prevented concurrent modifications and improved the runtime\n    complexity to gain a better performance improvement compared to\n    v1.0.0.\n\n#### Enhanced `gRPC` module\n\n##### Redesigned `Oneof` field support\n\nThe `Oneof` fields in the protobuf definition are now mapped to optional\nfields in Ballerina. When you generate the code, the Ballerina record is\ngenerated with a new setter function for each field to restrict you from\nsetting more than one of those fields and a valid function.\n\nFor example,\n\n```ballerina\nmessage Person {\n  oneof identity {\n     string passportId = 1;\n     string nic = 2;\n  }\n}\n```\n\n```ballerina\npublic type Person record {|\n   string passportId?;\n   string nic?;\n|};\n\nfunction isValidPerson(Person a) returns boolean {\n   ...\n}\n\nfunction setPerson_PassportId(Person a, string passportId) {\n   ...\n}\n\nfunction setPerson_Nic(Person a, string nic) {\n   ...\n}\n```\n\n> **Note:** The previous `Oneof` design will not work from this release.\n> If you are currently using it, you need to regenerate the code from\n> the proto definition and change your code accordingly.\n\n##### Redesigned `map` field support\n\nThe map fields in the protobuf definition are now mapped to nested\nrecords in Ballerina.\n\nFor example,\n\n```ballerina\nmessage HelloRequest {\n    map<int32, string> tags = 4;\n}\n```\n\n```ballerina\npublic type HelloRequest record {|\n    record {| int key; string value; |}[] tags = [];\n|};\n```\n\n##### Added client retry support for unary blocking calls\n\nClient retry is only supported in unary blocking calls. This will be\nsupported in other messaging patterns in the future. Retry functionality\ncan be enabled using the following retry configuration.\n\n```ballerina\ngrpc:ClientConfiguration clientConfiguration = {\n   retryConfiguration: {\n       retryCount: 5,\n       intervalInMillis: 2000,\n       maxIntervalInMillis: 10000,\n       backoffFactor: 2,\n       errorTypes: [grpc:INTERNAL_ERROR, grpc:UNAVAILABLE_ERROR]\n   }\n};\n```\n\n##### Other improvements\n\n-   Added Gzip compression support\n-   Improved the gRPC command to only create essentials in client and\n    service modes\n-   The `name` field in the `ServiceConfig` annotation is now used to\n    set the Service name. This is to support dynamic service\n    registration.\n\n#### Enhanced `kafka` module\n\nBallerina Kafka is redesigned and version 2.0.0 is released. This has\nbreaking changes hence older code may not work.\n\n##### Breaking changes\n\n-   `kafka:ConsumerConfig` and `kafka:ProducerConfig` records are\n    renamed to `kafka:ConsumerConfiguration` and\n    `kafka:ProducerConfiguration` respectively to comply with the\n    Ballerina naming conventions.\n-   `send()` function of the `kafka:Producer` now accepts `anydata?` as\n    the `key` and `anydata` as the `value` types as opposed to the\n    existing `byte[]?` and `byte[]` respectively.\n-   `bootstrapServers` configuration is now a required parameter for\n    both the `kafka:ConsumerConfiguration` and\n    `kafka:ProducerConfiguration` records.\n\n##### Custom serializer/deserializer support\n\nThe Kafka module now supports a set of serializers and deserializers in\ncontrast to the existing `byte[]` data. The introduced serializers /\ndeserializers are:\n\n-   `byte[]`\n-   `string`\n-   `int`\n-   `float`\n-   `avro`\n-   `custom`\n\n##### Avro serializer/deserializer\n\nThe `kafka` module now supports Avro serialization/deserialization. This\nonly supports Kafka values yet. Key serialization support will be added\nlater. \n\n#### Enhanced `task` module\n\nThe Ballerina `task` module is enhanced with multiple attachment support.\n\n##### Breaking changes\n\nNamed arguments for task attachments will not work now. For example, the\nfollowing code will no longer compile.\n\n```ballerina\n    task:Scheduler timer = new({ intervalInMillis: 1000 });\n    Person person = { name: \"Sam\", age: 29 };\n    var attachResult = timer.attach(TimerService, attachment = p); \n```\n\nTo make it work, change it as follows.\n\n```ballerina\n    task:Scheduler timer = new({ intervalInMillis: 1000 });\n    Person person = { name: \"Sam\", age: 29 };\n    var attachResult = timer.attach(TimerService, person);\n```\n\n##### Multiple attachment support\n\nNow, you can pass any number of attachments to the `attach()` function.\nFor example,\n\n```ballerina\n    task:Scheduler timer = new({ intervalInMillis: 1000 });\n    Person person = { name: \"Sam\", age: 29 };\n    Account account = { number: 188008, balance: 1233.02 };\n    var attachResult = timer.attach(TimerService, person, account);\n```\n\n#### Deprecated `jdbc` module\n\nA new experimental J`jdbc2` module is introduced in the Ballerina 1.2\nrelease and it will be fully supported by the 1.3 release. The existing\n`jdbc` module will be removed later in the 1.3 release.\n\n#### Added observability support\n\nNow, Publishers and Subscribers of all messaging connectors(Kafka,\nRabbitMQ, and JMS) support observability.\n\n#### Organization name changes of connectors\n\n**Connector/module**|**old org**|**new org**\n:-----:|:-----:|:-----:\nJIRA|wso2/jira7|ballerina/jira7\nGoogleSpreadSheet|wso2/gsheets4|ballerinax/googleapis.sheets4\nTwilio|wso2/twilio|ballerinax/twilio\nFTP|wso2/ftp|ballerina/ftp\nRedis|wso2/redis|ballerina/redis\nJMS|wso2/jms|ballerina/java.jms\nMongoDB|wso2/mongodb|ballerina/mongodb\nGitHub|wso2/github4|ballerinax/github4\nSalesforce|wso2/sfdc46|ballerinax/sfdc46\nSOAP|wso2/soap|ballerina/soap\nGmail|wso2/gmail|ballerinax/googleapis.gmail\nAmazonSQS|wso2/amazonsqs|ballerinax/aws.sqs\nAmazonS3|wso2/amazons3|ballerinax/aws.s3\nJava|ballerinax/java|ballerina/java\nJava Arrays|ballerinax/java.arrays|ballerina/java.arrays\n\n#### Added new connectors\n\nThe following connectors are newly added in this release.\n\n-   Slack client connector\n-   Azure time-series client connector\n-   Email client connector\n-   Preview of new database connectors\n    -   JDBC connector\n    -   MySQL connector\n\n#### Revamped connectors\n\nThe following connectors are revamped in this release.\n\n-   Google sheets connector\n-   Salesforce connector\n\n### Deployment\n\n#### Docker annotations\n\nSupport for setting environment variables to the Docker image.\n\n```ballerina\n@docker:Config {\n    env:{\n        testVar1: \"value1\",\n        testVar2: \"value2\"\n    }\n}\n```\n\nThe default base image for the generated Docker images have changed to\n`ballerina/jre8:v1`. Also, now, Docker images can be generated for\n`main()` functions.\n\n```ballerina\n@docker:Config {}\npublic function main() {\n    io:println(\"Hello, World!\");\n}\n```\n\nAbility to generate Docker images by only adding the import as\n`import ballerina/docker as _`. This will generate the Docker images\nwith minimum configurations for services, listeners, and main functions.\n\n```ballerina\nimport ballerina/http;\nimport ballerina/docker as _;\n\nlistener http:Listener helloWorldEP = new(9090);\n\n@http:ServiceConfig {\n    basePath: \"/helloWorld\"\n}\nservice helloWorld on helloWorldEP {\n    resource function sayHello (http:Caller outboundEP, http:Request request) {\n        …\n        }\n}\n```\n\n#### Kubernetes annotations\n\n-   Support for setting a port for Kubernetes NodePort Service types is\n    provided.\n\n```ballerina\n@kubernetes:Service {\n    nodePort: 31100,\n    serviceType: \"NodePort\"\n}\n```\n\n-   Support for mounting the `ballerina.conf` file as a Kubernetes\n    Secret is provided.\n\n```ballerina\n@kubernetes:Secret {\n    conf: \"./conf/ballerina.conf\"\n}\n```\n\n-   Support for enabling Rolling Updates for Kubernetes Deployments is\n    provided.\n\n```ballerina\n@kubernetes:Deployment {\n    updateStrategy: {\n            strategyType: kubernetes:STRATEGY_ROLLING_UPDATE,\n            maxUnavailable: 3,\n            maxSurge: \"45%\"\n    }\n}\n```\n\n-   Ability to generate Kubernetes artifacts by only adding the import\n    as `import ballerina/docker as _` is provided. This will generate\n    the Kubernetes artifacts with minimum configurations for services,\n    listeners, and main functions.\n\n```ballerina\nimport ballerina/http;\nimport ballerina/kubernetes as _;\n\nlistener http:Listener helloWorldEP = new(9090);\n\n@http:ServiceConfig {\n    basePath: \"/helloWorld\"\n}\nservice helloWorld on helloWorldEP {\n    resource function sayHello (http:Caller outboundEP, http:Request request) {\n        ...\n    }\n}\n```\n\n#### Knative annotations\n\nA new `@knative:Service` annotation is introduced. It allows you to\ngenerate Knative Service artifacts for Knative.\n\n```ballerina\nimport ballerina/http;\nimport ballerina/knative;\n\n@knative:Service {}\n@http:ServiceConfig {\n    basePath: \"/helloWorld\"\n}\nservice helloWorld on new http:Listener(8080) {\n    resource function sayHello(http:Caller outboundEP, http:Request request) {\n        ...\n    }\n}\n```\n\n### Dev tools\n\n#### Ballerina Bindgen tool\n\nA CLI tool for generating Ballerina bridge code for Java APIs.\n\n> **Note:** The bindgen tool is still experimental.\n\nThis CLI tool could be used to generate Ballerina bridge code for Java\nAPIs. Here, Ballerina objects and the relevant Java interoperability\nmappings for specified Java classes will be auto-generated with the aim\nof providing a seamless coding experience to call existing Java code\nfrom Ballerina. These Ballerina bindings could be generated for Java\nclasses residing inside Java libraries (for which the classpaths needs\nto be provided) or for standard Java classes.\n\n**Command:**\n\n```bash\nballerina bindgen [(-cp|--classpath) <classpath>...]\n                  [(-o|--output) <output>]\n                  (<class-name>...)\n```\n\n**Options:** 1. `(-cp|--classpath) <classpath>...`: One or more\ncomma-delimited classpaths for obtaining the JAR files required for\ngenerating the Ballerina bindings. This is not needed if the Ballerina\nbridge code is to be generated for standard Java classes. 2.\n`(-o|--output) <output>`: Location for the generated Ballerina bridge\ncode. If this path is not specified, the output will be written to the\nsame directory from where the command is run. 3, `<class-name>...`: One\nor more space-separated fully-qualified Java class names for which the\nbridge code is to be generated.\n\n#### Testerina\n\n##### Function mocking support\n\nThe Ballerina test framework provides the capability to mock a function.\nBy using the mocking feature, you can easily mock a function in a module\nthat you are testing or a function of an imported module. This feature\nwill help you to test your Ballerina code independently from other\nmodules and functions. Function mocking is only supported for\nproject-based execution in v1.2.0.\n\nThe function specified with the `@test:Mock {}` annotation will be\nconsidered as a mock function, which gets triggered every time the\noriginal function is called. The original function that will be mocked\nshould be defined using the annotation parameters.\n\n##### Test report\n\nThe `ballerina build` and `ballerina test` commands now generate an HTML\nreport at the end of test execution. This would contain the total test\ncases executed, passes, failures, and skipped tests with project-level,\nmodule-level, and individual test details. The link to the test report\ncan be found at the end of the test execution.\n\n##### Code coverage\n\nIntroduced the `--code-coverage` flag for `ballerina build` and\n`ballerina test` commands. When the flag is provided, an additional\nsection with code coverage details will be displayed in the test report.\nThis would contain coverage details at project-level, module-level, and\nof individual files.\n\n> **Note:** This is only supported with project-based execution in\n> v1.2.0.\n\n### IDE plugins & language server\n\n#### `Go to Definition` support for standard library content\n\nYou can go to [The Standard\nlibrary](/1.2/learn/api-docs/ballerina/) content\nsuch as functions, action invocations, types, etc. by executing the\n`Go to Definition` action.\n\n#### New code actions\n\n-   All imports are optimized\n-   Abstract functions are implemented\n\n#### Dynamic configuration updates support\n\nNow, you do not need to restart the IDE make the user configurations\neffective.\n\n### List of issues fixed for 1.2.0\n\nA complete list of issues fixed for 1.2.0 can be found\n[here](https://github.com/ballerina-platform/ballerina-lang/issues?q=is%3Aissue+milestone%3A%22Ballerina+1.2.0%22+is%3Aclosed).\n","id":"1.2.0"},"__N_SSG":true}