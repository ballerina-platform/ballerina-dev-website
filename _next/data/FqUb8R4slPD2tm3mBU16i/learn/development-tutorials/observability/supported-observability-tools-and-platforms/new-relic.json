{"pageProps":{"frontmatter":{"title":"Observe metrics and tracing using New Relic","description":"See how Ballerina supports observability by exposing itself via metrics and tracing to New Relic.","keywords":"ballerina, observability, metrics, tracing, new relic","permalink":"/learn/supported-observability-tools-and-platforms/new-relic/","active":"new-relic","intro":"Users can observe Ballerina programs with [New Relic](https://newrelic.com/), which is an observability platform designed to help organizations monitor, analyze, and troubleshoot their applications, infrastructure, and digital experiences in real-time. Both metrics and tracing in Ballerina can be viewed with New Relic."},"content":"\nThe sample [shop service](/learn/overview-of-ballerina-observability/#example-observe-a-ballerina-service) will be used in this guide. Follow the steps given below to observe Ballerina tracing and metrics in New Relic.\n\n## Step 1 - Create a New Relic account and  an API key\n\nSign up and Generate an API Key in New Relic.\n\nTo configure the API key in Newrelic:\n> Go to **Profile -> API keys -> Insights Insert key -> Insert keys** to create an account in New Relic.\n\n## Step 2 - Import Ballerina New Relic extension\n\nTo include the New Relic extension into the executable, the `ballerinax/newrelic` module needs to be imported into your Ballerina project `main.bal` file.\n\n```ballerina\nimport ballerinax/newrelic as _;\n```\n\nNew Relic extension has an `Opentelemetry GRPC Span Exporter` which will push tracing data as batches to the New Relic server endpoint (https://otlp.nr-data.net:4317) in opentelemetry format.\n\nNew Relic extension pushes metrics in New Relic metric format to the New Relic server endpoint (https://metric-api.newrelic.com/metric/v1).\n\n## Step 3 - Configure Ballerina runtime configurations\n\nTracing and metrics can be enabled in your Ballerina project using configurations similar to the following in your `Config.toml` file.\n\n```toml\n[ballerina.observe]\ntracingEnabled=true\ntracingProvider=\"newrelic\"\nmetricsEnabled=true\nmetricsReporter=\"newrelic\"\n\n[ballerinax.newrelic]\napiKey=\"<NEW_RELIC_LICENSE_KEY>\"    # Mandatory Configuration.\ntracingSamplerType=\"const\"          # Optional Configuration. Default value is 'const'\ntracingSamplerParam=1               # Optional Configuration. Default value is 1\ntracingReporterFlushInterval=15000  # Optional Configuration. Default value is 15000 milliseconds\ntracingReporterBufferSize=10000     # Optional Configuration. Default value is 10000\nmetricReporterFlushInterval=15000   # Optional Configuration. Default value is 15000 milliseconds\nmetricReporterClientTimeout=10000   # Optional Configuration. Default value is 10000 milliseconds\nisTraceLoggingEnabled=false         # Optional Configuration. Default value is false\nisPayloadLoggingEnabled=false       # Optional Configuration. Default value is false\n\n[ballerinax.newrelic.additionalAttributes]      # Optional Configuration. Add custom attributes (key & value pair) to metrics\nkey1 = \"<VALUE_1>\"\nkey2 = \"<VALUE_2>\"\n```\n\nUsers can also configure multiple API keys for different New Relic user accounts as given below.\n\n```toml\n[ballerinax.newrelic]\napiKey=[\"<NEW_RELIC_LICENSE_KEY_1>\", \"<NEW_RELIC_LICENSE_KEY_2>\"]\n```\n\n>**Tip:** User can configure the environment variable `BALLERINA_NEW_RELIC_API_KEY` instead of apiKey in `Config.toml`. If both are configured, apiKey in `Config.toml` will be overwritten by the environment variable value.\n> Environment variable can be configured for either a single user or multiple users.\n> \n> For a single user account:\n> - Linux/Unix: `export BALLERINA_NEW_RELIC_API_KEY=\"<NEW_RELIC_LICENSE_KEY>\"`\n> - Windows: `set BALLERINA_NEW_RELIC_API_KEY=\"<NEW_RELIC_LICENSE_KEY>\"`\n>\n> For multiple user accounts:\n> - Linux/Unix: `export BALLERINA_NEW_RELIC_API_KEY=\"<NEW_RELIC_LICENSE_KEY_1>,<NEW_RELIC_LICENSE_KEY_2>\"`\n> - Windows: `set BALLERINA_NEW_RELIC_API_KEY=\"<NEW_RELIC_LICENSE_KEY_1>,<NEW_RELIC_LICENSE_KEY_2>\"`\n> \n> **Note:** When specifying multiple API keys in the environment variable, separate each key with a comma (`,`) and do not include spaces between the keys. Any leading or trailing whitespace around each key will be trimmed automatically. For example:\n> - `export BALLERINA_NEW_RELIC_API_KEY=\"key1,key2,key3\"`\n> - `export BALLERINA_NEW_RELIC_API_KEY=\"key1, key2 , key3\"` (spaces will be trimmed)\n\nThe table below provides the descriptions of each configuration option and possible values that can be assigned.\n\nConfiguration key | Description                                                                                   | Default value | Possible values \n--- |-----------------------------------------------------------------------------------------------| --- | --- \nballerinax.newrelic. apiKey | API key generated by the user in the New Relic platform. **This configuration is mandatory.** | `None` | \nballerinax.newrelic. tracingSamplerType | Type of the sampling methods used in the New Relic tracer.                                    | const | `const`, `probabilistic`, or `ratelimiting`.\nballerinax.newrelic. tracingSamplerParam | It is a floating value. Based on the sampler type, the effect of the sampler param varies     | 1.0 | For `const` `0` (no sampling) or `1` (sample all spans), for `probabilistic` `0.0` to `1.0`, for `ratelimiting` any positive integer (rate per second).\nballerinax.newrelic. tracingReporterFlushInterval | The New Relic tracing client will be sending the spans to the agent at this interval.         | 15000 | Any positive integer value.\nballerinax.newrelic. tracingReporterBufferSize | Queue size of the New Relic tracing client.                                                   | 10000 | Any positive integer value.\nballerinax.newrelic. metricReporterFlushInterval | The New Relic client will be sending the metrics to the agent at this interval.               | 15000 | Any positive integer value.\nballerinax.newrelic. metricReporterClientTimeout | Queue size of the New Relic metric client.                                                    | 10000 | Any positive integer value.\n\n\n## Step 4 - Run the Ballerina service\n\nWhen Ballerina observability is enabled, the Ballerina runtime collects tracing and metrics data and both metrics and traces will be published to New Relic.\n\nRun the following command to start the Ballerina service.\n\n```\n$ bal run\n\nCompiling source\n\nRunning executable\n\nballerina: started publishing traces to New Relic on https://otlp.nr-data.net:4317\nballerina: started publishing metrics to New Relic on https://metric-api.newrelic.com/metric/v1\n```\n\n## Step 5 - Send requests\n \nSend requests to <http://localhost:8090/shop/products>.\n\nExample cURL commands:\n\n```\n$ curl -X GET http://localhost:8090/shop/products\n```\n```\n$ curl -X POST http://localhost:8090/shop/product \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"id\": 4, \n    \"name\": \"Laptop Charger\", \n    \"price\": 50.00\n}'\n```\n```\n$ curl -X POST http://localhost:8090/shop/order \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"productId\": 1, \n    \"quantity\": 1\n}'\n```\n```\n$ curl -X GET http://localhost:8090/shop/order/0\n```\n\n## Step 6 - View metrics on the New Relic platform\n\nYou can view the metrics that were published to the New Relic platform in the New Relic query builder. You can view the metrics query data in graphical format, as shown below.\n\n![New Relic metric Query Builder](/learn/images/newrelic-metric-query-builder.png \"New Relic metric Query Builder\")\n\nYou can create a dashboard from the metrics provided by Ballerina in the New Relic platform.\n\n## Step 7 - View tracing on the New Relic platform\n\nYou can view the traces that were published to the New Relic platform in New Relic traces. \n\n![Ballerina traces on New Relic](/learn/images/newrelic-tracing.png \"Ballerina traces on New Relic\")\n\n![Span tags on New Relic](/learn/images/newrelic-span-tags.png \"Span tags on New Relic\")\n","id":"new-relic","sub":"observability","third":"supported-observability-tools-and-platforms","slug":"observability/supported-observability-tools-and-platforms/new-relic","codes":"[[-1941155575,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/newrelic </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> _;</span></span></code></pre>\"],[-32848146,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">observe</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingEnabled=</span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingProvider=</span><span style=\\\"color:#032F62\\\">\\\"newrelic\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsEnabled=</span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsReporter=</span><span style=\\\"color:#032F62\\\">\\\"newrelic\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">newrelic</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">apiKey=</span><span style=\\\"color:#032F62\\\">\\\"&#x3C;NEW_RELIC_LICENSE_KEY>\\\"</span><span style=\\\"color:#6A737D\\\">    # Mandatory Configuration.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingSamplerType=</span><span style=\\\"color:#032F62\\\">\\\"const\\\"</span><span style=\\\"color:#6A737D\\\">          # Optional Configuration. Default value is 'const'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingSamplerParam=</span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#6A737D\\\">               # Optional Configuration. Default value is 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingReporterFlushInterval=</span><span style=\\\"color:#005CC5\\\">15000</span><span style=\\\"color:#6A737D\\\">  # Optional Configuration. Default value is 15000 milliseconds</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingReporterBufferSize=</span><span style=\\\"color:#005CC5\\\">10000</span><span style=\\\"color:#6A737D\\\">     # Optional Configuration. Default value is 10000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricReporterFlushInterval=</span><span style=\\\"color:#005CC5\\\">15000</span><span style=\\\"color:#6A737D\\\">   # Optional Configuration. Default value is 15000 milliseconds</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricReporterClientTimeout=</span><span style=\\\"color:#005CC5\\\">10000</span><span style=\\\"color:#6A737D\\\">   # Optional Configuration. Default value is 10000 milliseconds</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">isTraceLoggingEnabled=</span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#6A737D\\\">         # Optional Configuration. Default value is false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">isPayloadLoggingEnabled=</span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#6A737D\\\">       # Optional Configuration. Default value is false</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">newrelic</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">additionalAttributes</span><span style=\\\"color:#24292E\\\">]      </span><span style=\\\"color:#6A737D\\\"># Optional Configuration. Add custom attributes (key &#x26; value pair) to metrics</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">key1 = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;VALUE_1>\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">key2 = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;VALUE_2>\\\"</span></span></code></pre>\"],[-1424390718,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">newrelic</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">apiKey=[</span><span style=\\\"color:#032F62\\\">\\\"&#x3C;NEW_RELIC_LICENSE_KEY_1>\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;NEW_RELIC_LICENSE_KEY_2>\\\"</span><span style=\\\"color:#24292E\\\">]</span></span></code></pre>\"]]"},"__N_SSG":true}