{"pageProps":{"samples":{"bring-text-alive-with-openai-chats":{"frontmatter":{"title":"Bring text alive with the chat, completions, edits, and moderation APIs of Azure and OpenAI","description":"Azure and OpenAIâ€™s text manipulation APIs allow you to bring text alive and program them easily. Ballerina connectors for these APIs give you type safe, structured ways to build applications quickly.","url":"","image":""},"code":""},"concurrency-simplified-for-ai-development":{"frontmatter":{"title":"Concurrency simplified for AI development","description":"Ballerina's concurrency model is ideal for writing API-powered AI applications. Its sequence diagrams and concurrency control capabilities make it easy to manage and visualize complex operations leading to more efficient and reliable AI solutions.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/create_and_send_customized_greeting_cards_using_openai/service.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"fork {\n    // Generate greeting text and design in parallel\n    worker greetingWorker returns string|error? {\n        string prompt = \n            string &#x60;Generate a greeting for a/an ${occasion}\n                .${&#x22;\\n&#x22;}Special notes: ${specialNotes}&#x60;;\n        text:CreateCompletionRequest textPrompt = {\n            prompt,\n            model: &#x22;text-davinci-003&#x22;,\n            max_tokens: 100\n        };\n        text:CreateCompletionResponse completionRes = \n            check openaiText->/completions.post(textPrompt);\n        return completionRes.choices[0].text;\n    }\n    worker imageWorker returns string|error? {\n        string prompt = string &#x60;Greeting card design for ${occasion}, ${specialNotes}&#x60;;\n        images:CreateImageRequest imagePrompt = {\n            prompt\n        };\n        images:ImagesResponse imageRes = \n            check openaiImages->/images/generations.post(imagePrompt);\n        return imageRes.data[0].url;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">fork</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Generate greeting text and design in parallel</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    worker</span><span style=\"color:#24292E\"> greetingWorker </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#032F62\"> `Generate a greeting for a/an ${</span><span style=\"color:#24292E\">occasion</span><span style=\"color:#032F62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                .${\"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"}Special notes: ${</span><span style=\"color:#24292E\">specialNotes</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest textPrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            prompt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> openaiText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">textPrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    worker</span><span style=\"color:#24292E\"> imageWorker </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `Greeting card design for ${</span><span style=\"color:#24292E\">occasion</span><span style=\"color:#032F62\">}, ${</span><span style=\"color:#24292E\">specialNotes</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateImageRequest imagePrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            prompt</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ImagesResponse imageRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> openaiImages</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">images</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">generations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">imagePrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> imageRes.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].url;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"create-ai-powered-apis":{"frontmatter":{"title":"Create AI-powered APIs, automations, and event handlers","description":"Effortlessly tackle any AI-powered API integration by leveraging the network abstractions of Ballerina to create APIs, automations, and event handlers for your applications.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/question_answering_based_on_context_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service / on new http:Listener(8080) {\n\n    map<string> documents = {};\n    map<float[]> docEmbeddings = {};\n\n    function init() returns error? {\n        sheets:Range range = check gSheets->getRange(sheetId, sheetName, &#x22;A2:B&#x22;);\n\n        //Populate the dictionaries with the content and embeddings for each doc.\n        foreach any[] row in range.values {\n            string title = <string>row[0];\n            string content = <string>row[1];\n            self.documents[title] = content;\n            self.docEmbeddings[title] = check getEmbedding(string &#x60;${title} ${&#x22;\\n&#x22;} ${\n                                                                   content}&#x60;);\n        }\n    }\n\n    resource function get answer(string question) returns string?|error {\n        string prompt = check constructPrompt(question, self.documents, \n                        self.docEmbeddings);\n        text:CreateCompletionRequest prmt = {\n            prompt: prompt,\n            model: &#x22;text-davinci-003&#x22;\n        };\n        text:CreateCompletionResponse completionRes = \n            check openAIText->/completions.post(prmt);\n        return completionRes.choices[0].text;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> documents </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">float</span><span style=\"color:#24292E\">[]</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> docEmbeddings </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    function</span><span style=\"color:#6F42C1\"> init</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        sheets</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Range range </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gSheets</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getRange</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">sheetId</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">sheetName</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"A2:B\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        //Populate the dictionaries with the content and embeddings for each doc.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        foreach </span><span style=\"color:#24292E\">any[] row </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> range.values {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> title </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">row[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> content </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">row[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            self</span><span style=\"color:#24292E\">.documents[title] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> content;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            self</span><span style=\"color:#24292E\">.docEmbeddings[title] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> getEmbedding</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `${</span><span style=\"color:#24292E\">title</span><span style=\"color:#032F62\">} ${\"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"} ${</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                                                                   content</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> answer</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> question</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">?|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> constructPrompt</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">question</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">self</span><span style=\"color:#24292E\">.documents, </span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">                        self</span><span style=\"color:#24292E\">.docEmbeddings);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest prmt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> prompt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">prmt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"create-images-with-dall-e":{"frontmatter":{"title":"Create images with DALL-E and Stable Diffusion","description":"Stable Diffusion and OpenAIâ€™s DALL-E image APIs generate or edit images with text based instructions. The power of the Ballerina library makes uploading, downloading and processing images a breeze.","url":"","image":""},"code":""},"dalle1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n    sheets:Client gSheets = check new ({auth: {token: googleAccessToken}});\n    images:Client openAIImages = check new ({auth: {token: openAIToken}});\n    drive:Client gDrive = check new ({auth: {token: googleAccessToken}});\n\n    sheets:Column range = check gSheets->getColumn(sheetId, sheetName, &#x22;A&#x22;);\n    foreach var cell in range.values {\n        string prompt = cell.toString();\n        images:CreateImageRequest imagePrompt = {\n            prompt,\n            response_format: &#x22;b64_json&#x22;\n        };\n        images:ImagesResponse imageRes = \n            check openAIImages->/images/generations.post(imagePrompt);\n        string? encodedImage = imageRes.data[0].b64_json;\n        if encodedImage is () {\n            return error(string &#x60;Failed to generate image for prompt: ${prompt}&#x60;);\n        }\n        \n        // Decode the Base64 string and store image in Google Drive\n        byte[] imageBytes = check array:fromBase64(encodedImage);\n        _ = check gDrive->uploadFileUsingByteArray(imageBytes, \n                            string &#x60;${cell}.png&#x60;, gDriveFolderId);\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    sheets</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client gSheets </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: googleAccessToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIImages </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    drive</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client gDrive </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: googleAccessToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    sheets</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Column range </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gSheets</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getColumn</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">sheetId</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">sheetName</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"A\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    foreach </span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> cell </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> range.values {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> cell.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateImageRequest imagePrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            prompt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            response_format</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"b64_json\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ImagesResponse imageRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> openAIImages</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">images</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">generations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">imagePrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? encodedImage </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> imageRes.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].b64_json;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> encodedImage </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Failed to generate image for prompt: ${</span><span style=\"color:#24292E\">prompt</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Decode the Base64 string and store image in Google Drive</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        byte</span><span style=\"color:#24292E\">[] imageBytes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> array</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fromBase64</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">encodedImage</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gDrive</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">uploadFileUsingByteArray</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">imageBytes</span><span style=\"color:#24292E\">, </span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">                            string</span><span style=\"color:#032F62\"> `${</span><span style=\"color:#24292E\">cell</span><span style=\"color:#032F62\">}.png`</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">gDriveFolderId</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"dalle2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service / on new http:Listener(9090) {\n    resource function post products() returns int|error {\n        // Get the product details from the last inserted row of the Google Sheet.\n        sheets:Range range = check gsheets->getRange(googleSheetId, &#x22;Sheet1&#x22;, &#x22;A2:F&#x22;);\n        var [name, benefits, features, productType] = getProduct(range);\n\n        // Generate a product description from OpenAI for a given product name.\n        text:CreateCompletionRequest textPrompt = {\n            prompt: string &#x60;generate a product descirption in 250 words about ${name}&#x60;,\n            model: &#x22;text-davinci-003&#x22;,\n            max_tokens: 100\n        };\n\n        text:CreateCompletionResponse completionRes = \n            check openAIText->/completions.post(textPrompt);\n\n        // Generate a product image from OpenAI for the given product.\n        images:CreateImageRequest imagePrmt = {\n            prompt: string &#x60;${name}, \n            ${benefits}, \n            ${features}&#x60;\n        };\n        images:ImagesResponse imageRes = \n            check openAIImages->/images/generations.post(imagePrmt);\n\n        // Create a product in Shopify.\n        shopify:CreateProduct product = {\n            product: {\n                title: name,\n                body_html: completionRes.choices[0].text,\n                tags: features,\n                product_type: productType,\n                images: [{src: imageRes.data[0].url}]\n            }\n        };\n        shopify:ProductObject prodObj = check shopify->createProduct(product);\n        int? pid = prodObj?.product?.id;\n        if pid is () {\n            return error(&#x22;Error in creating product in Shopify&#x22;);\n        }\n        return pid;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">9090</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> products</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Get the product details from the last inserted row of the Google Sheet.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        sheets</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Range range </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gsheets</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getRange</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">googleSheetId</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"Sheet1\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"A2:F\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        var</span><span style=\"color:#24292E\"> [name, benefits, features, productType] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> getProduct</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">range</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Generate a product description from OpenAI for a given product name.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest textPrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`generate a product descirption in 250 words about ${</span><span style=\"color:#24292E\">name</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">textPrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Generate a product image from OpenAI for the given product.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateImageRequest imagePrmt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`${</span><span style=\"color:#24292E\">name</span><span style=\"color:#032F62\">}, </span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            ${</span><span style=\"color:#24292E\">benefits</span><span style=\"color:#032F62\">}, </span></span>\n<span class=\"line\"><span style=\"color:#032F62\">            ${</span><span style=\"color:#24292E\">features</span><span style=\"color:#032F62\">}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ImagesResponse imageRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> openAIImages</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">images</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">generations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">imagePrmt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Create a product in Shopify.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        shopify</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateProduct product </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            product</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                title</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                body_html</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                tags</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> features,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                product_type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> productType,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [{</span><span style=\"color:#6F42C1\">src</span><span style=\"color:#24292E\">: imageRes.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].url}]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        shopify</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ProductObject prodObj </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> shopify</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">createProduct</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">product</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        int</span><span style=\"color:#24292E\">? pid </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> prodObj?.product?.id;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> pid </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Error in creating product in Shopify\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> pid;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"dalle3":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"type GreetingDetails record {|\n    string occasion;\n    string recipientEmail;\n    string emailSubject;\n    string specialNotes?;\n|};\n\nservice / on new http:Listener(8080) {\n    resource function post greetingCard(@http:Payload GreetingDetails req) returns error? {\n        string occasion = req.occasion;\n        string specialNotes = req.specialNotes ?: &#x22;&#x22;;\n\n        fork {\n            // Generate greeting text and design in parallel\n            worker greetingWorker returns string|error? {\n                text:CreateCompletionRequest textPrompt = {\n                    prompt: string &#x60;Generate a greeting for a/an ${\n                                    occasion}.${&#x22;\\n&#x22;}Special notes: ${specialNotes}&#x60;,\n                    model: &#x22;text-davinci-003&#x22;,\n                    max_tokens: 100\n                };\n                text:CreateCompletionResponse completionRes = \n                    check openAIText->/completions.post(textPrompt);\n                return completionRes.choices[0].text;\n            }\n            worker imageWorker returns string|error? {\n                images:CreateImageRequest imagePrompt = {\n                    prompt: string &#x60;Greeting card design for ${occasion}, ${\n                                    specialNotes}&#x60;\n                };\n                images:ImagesResponse imageRes = \n                    check openAIImages->/images/generations.post(imagePrompt);\n                return imageRes.data[0].url;\n            }\n        }\n\n        record {|\n            string|error? greetingWorker;\n            string|error? imageWorker;\n        |} resutls = wait {greetingWorker, imageWorker};\n\n        string? greeting = check resutls.greetingWorker;\n        string? imageURL = check resutls.imageWorker;\n        if greeting !is string || imageURL !is string {\n            return error(&#x22;Error while generating greeting card&#x22;);\n        }\n\n        // Send an email with the greeting and the image using the email connector\n        gmail:MessageRequest messageRequest = {\n            recipient: req.recipientEmail,\n            subject: req.emailSubject,\n            messageBody: string &#x60;<p>${greeting}</p> <br/> <img src=&#x22;${imageURL}&#x22;>&#x60;,\n            contentType: gmail:TEXT_HTML\n        };\n        _ = check gmail->sendMessage(messageRequest, userId = &#x22;me&#x22;);\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> GreetingDetails</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> occasion;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> recipientEmail;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> emailSubject;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> specialNotes?;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> greetingCard</span><span style=\"color:#24292E\">(@</span><span style=\"color:#005CC5\">http</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">Payload</span><span style=\"color:#E36209\"> GreetingDetails</span><span style=\"color:#E36209\"> req</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> occasion </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> req.occasion;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> specialNotes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> req.specialNotes </span><span style=\"color:#D73A49\">?:</span><span style=\"color:#032F62\"> \"\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        fork</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // Generate greeting text and design in parallel</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            worker</span><span style=\"color:#24292E\"> greetingWorker </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest textPrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                    prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Generate a greeting for a/an ${</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                                    occasion</span><span style=\"color:#032F62\">}.${\"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"}Special notes: ${</span><span style=\"color:#24292E\">specialNotes</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                    model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                    max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">textPrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            worker</span><span style=\"color:#24292E\"> imageWorker </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateImageRequest imagePrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                    prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Greeting card design for ${</span><span style=\"color:#24292E\">occasion</span><span style=\"color:#032F62\">}, ${</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                                    specialNotes</span><span style=\"color:#032F62\">}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                images</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ImagesResponse imageRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                    check</span><span style=\"color:#24292E\"> openAIImages</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">images</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">generations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">imagePrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#24292E\"> imageRes.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].url;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? greetingWorker;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? imageWorker;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        |</span><span style=\"color:#24292E\">} resutls </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> wait</span><span style=\"color:#24292E\"> {greetingWorker, imageWorker};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? greeting </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> resutls.greetingWorker;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? imageURL </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> resutls.imageWorker;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> greeting </span><span style=\"color:#D73A49\">!is</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\"> ||</span><span style=\"color:#24292E\"> imageURL </span><span style=\"color:#D73A49\">!is</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Error while generating greeting card\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Send an email with the greeting and the image using the email connector</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        gmail</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">MessageRequest messageRequest </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            recipient</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> req.recipientEmail,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            subject</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> req.emailSubject,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            messageBody</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`&#x3C;p>${</span><span style=\"color:#24292E\">greeting</span><span style=\"color:#032F62\">}&#x3C;/p> &#x3C;br/> &#x3C;img src=\"${</span><span style=\"color:#24292E\">imageURL</span><span style=\"color:#032F62\">}\">`</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            contentType</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> gmail:TEXT_HTML</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gmail</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">sendMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">messageRequest</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">userId</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"me\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"dalle4":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(*EmailDetails emailDetails) returns error? {\n    fork {\n        worker poemWorker returns string|error? {\n            text:CreateCompletionRequest textPrompt = {\n                prompt: string &#x60;Generate a creative poem on the topic ${emailDetails.topic}.&#x60;,\n                model: &#x22;text-davinci-003&#x22;,\n                max_tokens: 1000\n            };\n            text:CreateCompletionResponse completionRes = \n                check openAIText->/completions.post(textPrompt);\n            return completionRes.choices[0].text;\n        }\n\n        worker imageWorker returns byte[]|error {\n            stabilityai:TextToImageRequestBody payload = \n                {text_prompts: [{&#x22;text&#x22;: emailDetails.topic, &#x22;weight&#x22;: 1}]};\n            stabilityai:ImageRes listResult = \n                check stabilityAI->/v1/generation/stable\\-diffusion\\-v1/\n                text\\-to\\-image.post(payload);\n            string? imageBytesString = listResult.artifacts[0].&#x27;base64;\n            if imageBytesString is () {\n                return error(&#x22;Image byte string is empty.&#x22;);\n            }\n            byte[] imageBytes = imageBytesString.toBytes();\n            var decodedImage = check mime:base64Decode(imageBytes);\n            if decodedImage !is byte[] {\n                return error(&#x22;Error in decoding the image byte string.&#x22;);\n            }\n            return decodedImage;\n        }\n    }\n\n    record {|\n        string|error? poemWorker;\n        byte[]|error imageWorker;\n    |} results = wait {poemWorker, imageWorker};\n\n    string? poem = check results.poemWorker;\n    byte[]? image = check results.imageWorker;\n    if poem !is string || image !is byte[] {\n        return error(&#x22;Error while generating the poem and the image.&#x22;);\n    }\n\n    io:Error? fileWrite = io:fileWriteBytes(&#x22;./image.png&#x22;, image);\n    if fileWrite is io:Error {\n        return error(&#x22;Error while writing the image to a file.&#x22;);\n    }\n\n    string messageBody = poem.trim();\n    string:RegExp r = re &#x60;\\n&#x60;;\n    messageBody = r.replaceAll(messageBody, &#x22;<br>&#x22;);\n\n    gmail:MessageRequest messageRequest = {\n        recipient: emailDetails.recipientEmail,\n        subject: emailDetails.topic,\n        messageBody,\n        contentType: gmail:TEXT_HTML,\n        inlineImagePaths: [{imagePath: &#x22;./image.png&#x22;, mimeType: &#x22;image/png&#x22;}]\n    };\n    _ = check gmail->sendMessage(messageRequest, userId = &#x22;me&#x22;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(*</span><span style=\"color:#E36209\">EmailDetails</span><span style=\"color:#E36209\"> emailDetails</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    fork</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        worker</span><span style=\"color:#24292E\"> poemWorker </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest textPrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Generate a creative poem on the topic ${</span><span style=\"color:#24292E\">emailDetails</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">topic</span><span style=\"color:#032F62\">}.`</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1000</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">textPrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        worker</span><span style=\"color:#24292E\"> imageWorker </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> byte</span><span style=\"color:#24292E\">[]</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            stabilityai</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">TextToImageRequestBody payload </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                {text_prompts</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [{</span><span style=\"color:#032F62\">\"text\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> emailDetails.topic, </span><span style=\"color:#032F62\">\"weight\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">}]};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            stabilityai</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ImageRes listResult </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                check</span><span style=\"color:#24292E\"> stabilityAI</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">v1</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">generation</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">stable\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#24292E\">diffusion\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#24292E\">v1</span><span style=\"color:#D73A49\">/</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                text\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#24292E\">to\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#24292E\">image.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">payload</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\">? imageBytesString </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> listResult.artifacts[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].'base64;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            if</span><span style=\"color:#24292E\"> imageBytesString </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Image byte string is empty.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            byte</span><span style=\"color:#24292E\">[] imageBytes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> imageBytesString.</span><span style=\"color:#6F42C1\">toBytes</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            var</span><span style=\"color:#24292E\"> decodedImage </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> mime</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">base64Decode</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">imageBytes</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            if</span><span style=\"color:#24292E\"> decodedImage </span><span style=\"color:#D73A49\">!is</span><span style=\"color:#005CC5\"> byte</span><span style=\"color:#24292E\">[] {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">                return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Error in decoding the image byte string.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> decodedImage;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? poemWorker;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        byte</span><span style=\"color:#24292E\">[]</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> imageWorker;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    |</span><span style=\"color:#24292E\">} results </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> wait</span><span style=\"color:#24292E\"> {poemWorker, imageWorker};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? poem </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> results.poemWorker;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    byte</span><span style=\"color:#24292E\">[]? image </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> results.imageWorker;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> poem </span><span style=\"color:#D73A49\">!is</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\"> ||</span><span style=\"color:#24292E\"> image </span><span style=\"color:#D73A49\">!is</span><span style=\"color:#005CC5\"> byte</span><span style=\"color:#24292E\">[] {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Error while generating the poem and the image.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Error? fileWrite </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileWriteBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"./image.png\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">image</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> fileWrite </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Error {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Error while writing the image to a file.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> messageBody </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> poem.</span><span style=\"color:#6F42C1\">trim</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">RegExp r </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> re</span><span style=\"color:#24292E\"> `</span><span style=\"color:#D73A49\">\\n</span><span style=\"color:#24292E\">`;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    messageBody </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> r.</span><span style=\"color:#6F42C1\">replaceAll</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">messageBody</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"&#x3C;br>\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    gmail</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">MessageRequest messageRequest </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        recipient</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> emailDetails.recipientEmail,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        subject</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> emailDetails.topic,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        messageBody,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        contentType</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> gmail:TEXT_HTML,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        inlineImagePaths</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [{</span><span style=\"color:#6F42C1\">imagePath</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"./image.png\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#6F42C1\">mimeType</span><span style=\"color:#24292E\">: </span><span style=\"color:#032F62\">\"image/png\"</span><span style=\"color:#24292E\">}]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gmail</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">sendMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">messageRequest</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">userId</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#032F62\"> \"me\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"effort1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service /slack on new http:Listener(8080) {\n    map<ChatMessage[]> chatHistory = {};\n\n    resource function post events(http:Request request) returns Response|error {\n        if !check verifyRequest(request) {\n            return error(&#x22;Request verification failed&#x22;);\n        }\n\n        map<string> params = check request.getFormParams();\n\n        string? channelName = params[&#x22;channel_name&#x22;];\n        string? requestText = params[&#x22;text&#x22;];\n        if channelName is () || requestText is () {\n            return error(&#x22;Invalid values in the request parameters for channel_name or text&#x22;);\n        }\n\n        ChatMessage[] history = self.chatHistory[channelName] ?:\n                            [{\n                                role: SYSTEM, \n                                content: &#x22;You are an AI slack bot to assist with user questions.&#x22;\n                            }];\n        history.push({role: USER, content: requestText});\n\n        chat:Inline_response_200 completion = \n            check azureOpenAI->/deployments/[deploymentId]/chat/completions.post(\n                API_VERSION, {messages: history}\n            );\n\n        chat:Inline_response_200_message? response = completion.choices[0].message;\n        string? responseText = response?.content;\n        if response is () || responseText is () {\n            return error(&#x22;Error in response generation&#x22;);\n        }\n\n        history.push({role: ASSISTANT, content: response.content});\n\n        // Limit history to 25 messages to preserve token limit.\n        if history.length() > MAX_MESSAGES {\n            history = history.slice(history.length() - MAX_MESSAGES);\n        }\n        self.chatHistory[channelName] = history;\n\n        return {response_type: &#x22;in_channel&#x22;, text: responseText};\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#6F42C1\"> /slack</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#24292E\">ChatMessage[]</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> chatHistory </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> events</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Request request) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Response</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#D73A49\"> !check</span><span style=\"color:#6F42C1\"> verifyRequest</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Request verification failed\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        map&#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> params </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> request.</span><span style=\"color:#6F42C1\">getFormParams</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? channelName </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> params[</span><span style=\"color:#032F62\">\"channel_name\"</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? requestText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> params[</span><span style=\"color:#032F62\">\"text\"</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> channelName </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () </span><span style=\"color:#D73A49\">||</span><span style=\"color:#24292E\"> requestText </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Invalid values in the request parameters for channel_name or text\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ChatMessage[] history </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> self</span><span style=\"color:#24292E\">.chatHistory[channelName] </span><span style=\"color:#D73A49\">?:</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                            [{</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                                role</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> SYSTEM, </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                                content</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"You are an AI slack bot to assist with user questions.\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                            }];</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        history.</span><span style=\"color:#6F42C1\">push</span><span style=\"color:#24292E\">({role</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> USER, content</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> requestText});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Inline_response_200 completion </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> azureOpenAI</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">deployments</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">[deploymentId]</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">chat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">                API_VERSION</span><span style=\"color:#24292E\">, {messages</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> history}</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        chat</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Inline_response_200_message? response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> completion.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].message;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\">? responseText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> response?.content;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> response </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () </span><span style=\"color:#D73A49\">||</span><span style=\"color:#24292E\"> responseText </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Error in response generation\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        history.</span><span style=\"color:#6F42C1\">push</span><span style=\"color:#24292E\">({role</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> ASSISTANT, content</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> response.content});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Limit history to 25 messages to preserve token limit.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> history.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> MAX_MESSAGES {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            history </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> history.</span><span style=\"color:#6F42C1\">slice</span><span style=\"color:#24292E\">(history.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">-</span><span style=\"color:#E36209\"> MAX_MESSAGES</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        self</span><span style=\"color:#24292E\">.chatHistory[channelName] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> history;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> {response_type</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"in_channel\"</span><span style=\"color:#24292E\">, text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> responseText};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"effort2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service / on new http:Listener(8080) {\n    function init() returns error? {\n        sheets:Range range = check gSheets->getRange(sheetId, sheetName, &#x22;A2:B&#x22;);\n        pinecone:Vector[] vectors = [];\n\n        foreach any[] row in range.values {\n            string title = <string>row[0];\n            string content = <string>row[1];\n            float[] vector = check getEmbedding(string &#x60;${title} ${&#x22;\\n&#x22;} ${content}&#x60;);\n            vectors[vectors.length()] = \n                {id: title, values: vector, metadata: {&#x22;content&#x22;: content}};\n        }\n\n        pinecone:UpsertResponse response = \n            check pineconeClient->/vectors/upsert.post({vectors, namespace: NAMESPACE});\n        if response.upsertedCount != range.values.length() {\n            return error(&#x22;Failed to insert embedding vectors to pinecone.&#x22;);\n        }\n        io:println(&#x22;Successfully inserted embedding vectors to pinecone.&#x22;);\n    }\n\n    resource function get answer(string question) returns string?|error {\n        string prompt = check constructPrompt(question);\n        text:CreateCompletionRequest prmt = {\n            prompt: prompt,\n            model: &#x22;text-davinci-003&#x22;,\n            max_tokens: 2000\n        };\n        text:CreateCompletionResponse completionRes = check openAIText->/completions.post(prmt);\n        return completionRes.choices[0].text;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    function</span><span style=\"color:#6F42C1\"> init</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        sheets</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Range range </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> gSheets</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getRange</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">sheetId</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">sheetName</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"A2:B\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        pinecone</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Vector[] vectors </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        foreach </span><span style=\"color:#24292E\">any[] row </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> range.values {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> title </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">row[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> content </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">row[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            float</span><span style=\"color:#24292E\">[] vector </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> getEmbedding</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `${</span><span style=\"color:#24292E\">title</span><span style=\"color:#032F62\">} ${\"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"} ${</span><span style=\"color:#24292E\">content</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            vectors[vectors.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">()] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                {id</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> title, values</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> vector, metadata</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span><span style=\"color:#032F62\">\"content\"</span><span style=\"color:#24292E\">: content}};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        pinecone</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">UpsertResponse response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> pineconeClient</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">vectors</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">upsert.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">({vectors, namespace</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> NAMESPACE});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> response.upsertedCount </span><span style=\"color:#D73A49\">!=</span><span style=\"color:#24292E\"> range.values.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to insert embedding vectors to pinecone.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Successfully inserted embedding vectors to pinecone.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> answer</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> question</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#D73A49\">?|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> constructPrompt</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">question</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest prmt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> prompt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2000</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">prmt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"effortlessly-create-impactful-business":{"frontmatter":{"title":"Effortlessly create impactful business use cases","description":"Take advantage of Ballerina's OpenAI, Azure, and VectorDB connectors to craft powerful solutions like Slack bots and Q&A bots that enhance customer engagement and optimize business operations.","url":"","image":""},"code":""},"fine-tune-models-with-your-own-data":{"frontmatter":{"title":"Fine-tune models with your data to create your own models","description":"OpenAIâ€™s fine tuning API lets you create a model that understands your world. Use Ballerinaâ€™s ability to easily integrate business APIs and systems to take your business data to fine-tune it and make that available for your business.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/finetune_openai_models/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n    finetunes:Client openAIFineTunes = check new ({auth: {token: openAIToken}});\n\n    finetunes:CreateFileRequest fileRequest = {\n        file: {\n            fileContent: check io:fileReadBytes(TRAIN_DATA_FILE_PATH),\n            fileName: TRAIN_DATA_FILE_NAME\n        },\n        purpose: &#x22;fine-tune&#x22;\n    };\n    finetunes:OpenAIFile fileResponse = check openAIFineTunes->/files.post(fileRequest);\n    io:println(string &#x60;Training file uploaded successfully with ID: ${fileResponse.id}&#x60;);\n\n    finetunes:CreateFineTuneRequest fineTuneRequest = {\n        training_file: fileResponse.id,\n        model: &#x22;ada&#x22;,\n        n_epochs: 4\n    };\n    finetunes:FineTune fineTuneResponse = \n        check openAIFineTunes->/fine\\-tunes.post(fineTuneRequest);\n    io:println(string &#x60;Fine-tune job started successfully with ID: ${\n                       fineTuneResponse.id}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIFineTunes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateFileRequest fileRequest </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            fileContent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io:</span><span style=\"color:#6F42C1\">fileReadBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">TRAIN_DATA_FILE_PATH</span><span style=\"color:#24292E\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            fileName</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> TRAIN_DATA_FILE_NAME</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        purpose</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"fine-tune\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">OpenAIFile fileResponse </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIFineTunes</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">files.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">fileRequest</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Training file uploaded successfully with ID: ${</span><span style=\"color:#24292E\">fileResponse</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">id</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateFineTuneRequest fineTuneRequest </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        training_file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> fileResponse.id,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"ada\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        n_epochs</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 4</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    finetunes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">FineTune fineTuneResponse </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIFineTunes</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">fine\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#24292E\">tunes.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">fineTuneRequest</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Fine-tune job started successfully with ID: ${</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                       fineTuneResponse</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">id</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"libraries-for-ai-operations":{"frontmatter":{"title":"Libraries for AI operations","description":"Built-in mathematical operations such as distance measures, optimizations, etc. are a common building block in AI use cases.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/compare_similarity_between_two_texts_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n\n    final embeddings:Client openAIEmbeddings = check new ({auth: {token: openAIToken}});\n\n    string text1 = &#x22;What are you thinking?&#x22;;\n    string text2 = &#x22;What is on your mind?&#x22;;\n\n    embeddings:CreateEmbeddingRequest embeddingReq = {\n        model: &#x22;text-embedding-ada-002&#x22;,\n        input: [text1, text2]\n    };\n    embeddings:CreateEmbeddingResponse embeddingRes = \n        check openAIEmbeddings->/embeddings.post(embeddingReq);\n\n    float[] text1Embedding = embeddingRes.data[0].embedding;\n    float[] text2Embedding = embeddingRes.data[1].embedding;\n    float similarity = vector:cosineSimilarity(text1Embedding, text2Embedding);\n    io:println(&#x22;The similarity between the given two texts : &#x22;, similarity);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> embeddings</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIEmbeddings </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> text1 </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"What are you thinking?\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> text2 </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"What is on your mind?\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    embeddings</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEmbeddingRequest embeddingReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-embedding-ada-002\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        input</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [text1, text2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    embeddings</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEmbeddingResponse embeddingRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIEmbeddings</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">embeddings.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">embeddingReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\">[] text1Embedding </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> embeddingRes.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].embedding;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\">[] text2Embedding </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> embeddingRes.data[</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">].embedding;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    float</span><span style=\"color:#24292E\"> similarity </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> vector</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">cosineSimilarity</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">text1Embedding</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">text2Embedding</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"The similarity between the given two texts : \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">similarity</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"music1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string audioURL, string toLanguage) returns error? {\n    // Creates a HTTP client to download the audio file\n    http:Client audioEP = check new (audioURL);\n    http:Response httpResp = check audioEP->/get();\n    byte[] audioBytes = check httpResp.getBinaryPayload();\n    check io:fileWriteBytes(AUDIO_FILE_PATH, audioBytes);\n\n    // Creates a request to translate the audio file to text (English)\n    audio:CreateTranslationRequest translationsReq = {\n        file: {fileContent: check io:fileReadBytes(AUDIO_FILE_PATH), fileName: AUDIO_FILE},\n        model: &#x22;whisper-1&#x22;\n    };\n\n    // Translates the audio file to text (English)\n    audio:Client openAIAudio = check new ({auth: {token: openAIToken}});\n    audio:CreateTranscriptionResponse transcriptionRes = \n        check openAIAudio->/audio/translations.post(translationsReq);\n    io:println(&#x22;Audio text in English: &#x22;, transcriptionRes.text);\n\n    // Creates a request to translate the text from English to another language\n    text:CreateCompletionRequest completionReq = {\n        model: &#x22;text-davinci-003&#x22;,\n        prompt: string &#x60;Translate the following text from English to ${\n                        toLanguage} : ${transcriptionRes.text}&#x60;,\n        temperature: 0.7,\n        max_tokens: 256,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0\n    };\n\n    // Translates the text from English to another language\n    text:Client openAIText = check new ({auth: {token: openAIToken}});\n    text:CreateCompletionResponse completionRes = \n        check openAIText->/completions.post(completionReq);\n    string? translatedText = completionRes.choices[0].text;\n\n    if translatedText is () { \n        return error(&#x22;Failed to translate the given audio.&#x22;);    \n    } \n    io:println(&#x22;Translated text: &#x22;, translatedText);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> audioURL</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> toLanguage</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a HTTP client to download the audio file</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client audioEP </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">audioURL</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Response httpResp </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> audioEP</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    byte</span><span style=\"color:#24292E\">[] audioBytes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> httpResp.</span><span style=\"color:#6F42C1\">getBinaryPayload</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileWriteBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">audioBytes</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to translate the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranslationRequest translationsReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {fileContent: </span><span style=\"color:#D73A49\">check</span><span style=\"color:#24292E\"> io:</span><span style=\"color:#6F42C1\">fileReadBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">), fileName</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> AUDIO_FILE},</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"whisper-1\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Translates the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIAudio </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranscriptionResponse transcriptionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIAudio</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">audio</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">translations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">translationsReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Audio text in English: \"</span><span style=\"color:#24292E\">, transcriptionRes.text);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to translate the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest completionReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Translate the following text from English to ${</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                        toLanguage</span><span style=\"color:#032F62\">} : ${</span><span style=\"color:#24292E\">transcriptionRes</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">text</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        temperature</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0.7</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 256</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        top_p</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        frequency_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        presence_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Translates the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">completionReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? translatedText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> translatedText </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () { </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to translate the given audio.\"</span><span style=\"color:#24292E\">);    </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    } </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Translated text: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">translatedText</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"music2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string podcastURL) returns error? {\n    // Creates a HTTP client to download the audio file\n    http:Client podcastEP = check new (podcastURL);\n    http:Response httpResp = check podcastEP->/get();\n    byte[] audioBytes = check httpResp.getBinaryPayload();\n    check io:fileWriteBytes(AUDIO_FILE_PATH, audioBytes);\n\n    // Creates a request to translate the audio file to text (English)\n    audio:CreateTranscriptionRequest transcriptionsReq = {\n        file: {\n            fileContent: (check io:fileReadBytes(AUDIO_FILE_PATH)).slice(0, BINARY_LENGTH), \n            fileName: AUDIO_FILE\n        },\n        model: &#x22;whisper-1&#x22;\n    };\n\n    // Converts the audio file to text (English) using OpenAI speach to text API\n    audio:Client openAIAudio = check new ({auth: {token: openAIToken}});\n    audio:CreateTranscriptionResponse transcriptionsRes = \n        check openAIAudio->/audio/transcriptions.post(transcriptionsReq);\n    io:println(&#x22;Text from the audio :&#x22;, transcriptionsRes.text);\n\n    // Creates a request to summarize the text\n    text:CreateCompletionRequest textCompletionReq = {\n        model: &#x22;text-davinci-003&#x22;,\n        prompt: string &#x60;Summarize the following text to 100 characters : ${\n                        transcriptionsRes.text}&#x60;,\n        temperature: 0.7,\n        max_tokens: 256,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0\n    };\n\n    // Summarizes the text using OpenAI text completion API\n    text:Client openAIText = check new ({auth: {token: openAIToken}});\n    text:CreateCompletionResponse completionRes = \n        check openAIText->/completions.post(textCompletionReq);\n    \n    string? summerizedText = completionRes.choices[0].text;    \n    if summerizedText is () {\n\t    return error(&#x22;Failed to summarize the given audio.&#x22;);\n    }\n    io:println(&#x22;Summarized text: &#x22;, summerizedText);\n\n    // Tweet it out!\n    twitter:Client twitter = check new (twitterConfig);\n    var tweet = check twitter->tweet(summerizedText);\n    io:println(&#x22;Tweet: &#x22;, tweet);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> podcastURL</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a HTTP client to download the audio file</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client podcastEP </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">podcastURL</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Response httpResp </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> podcastEP</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    byte</span><span style=\"color:#24292E\">[] audioBytes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> httpResp.</span><span style=\"color:#6F42C1\">getBinaryPayload</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileWriteBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">audioBytes</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to translate the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranscriptionRequest transcriptionsReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            fileContent</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> (</span><span style=\"color:#D73A49\">check</span><span style=\"color:#E36209\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">)).</span><span style=\"color:#6F42C1\">slice</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">BINARY_LENGTH</span><span style=\"color:#24292E\">), </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            fileName</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> AUDIO_FILE</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"whisper-1\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Converts the audio file to text (English) using OpenAI speach to text API</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIAudio </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranscriptionResponse transcriptionsRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIAudio</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">audio</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">transcriptions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">transcriptionsReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Text from the audio :\"</span><span style=\"color:#24292E\">, transcriptionsRes.text);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to summarize the text</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest textCompletionReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Summarize the following text to 100 characters : ${</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                        transcriptionsRes</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">text</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        temperature</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0.7</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 256</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        top_p</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        frequency_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        presence_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Summarizes the text using OpenAI text completion API</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">textCompletionReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    </span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? summerizedText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> summerizedText </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\t    return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to summarize the given audio.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Summarized text: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">summerizedText</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Tweet it out!</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    twitter</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client twitter </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">twitterConfig</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    var</span><span style=\"color:#24292E\"> tweet </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> twitter</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">tweet</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">summerizedText</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Tweet: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">tweet</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"openai1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string filePath) returns error? {\n    text:Client openAIText = check new ({auth: {token: openAIToken}});\n\n    string fileContent = check io:fileReadString(filePath);\n    io:println(string &#x60;Content: ${fileContent}&#x60;);\n\n    text:CreateCompletionRequest textPrompt = {\n        prompt: string &#x60;Summarize:\\n&#x22; ${fileContent}&#x60;,\n        model: &#x22;text-davinci-003&#x22;,\n        max_tokens: 2000\n    };\n    text:CreateCompletionResponse completionRes = \n        check openAIText->/completions.post(textPrompt);\n    string? summary = completionRes.choices[0].text;\n\n    if summary is () { \n        return error(&#x22;Failed to summarize the given text.&#x22;);    \n    } \n    io:println(string &#x60;Summary: ${summary}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> filePath</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> fileContent </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadString</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">filePath</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Content: ${</span><span style=\"color:#24292E\">fileContent</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest textPrompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Summarize:</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\" ${</span><span style=\"color:#24292E\">fileContent</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2000</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">textPrompt</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? summary </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> summary </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () { </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to summarize the given text.\"</span><span style=\"color:#24292E\">);    </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    } </span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Summary: ${</span><span style=\"color:#24292E\">summary</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"openai2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string filePath) returns error? {\n    http:RetryConfig retryConfig = {\n        interval: 5, // Initial retry interval in seconds.\n        count: 3, // Number of retry attempts before stopping.\n        backOffFactor: 2.0 // Multiplier of the retry interval.\n    };\n    final text:Client openAIText = check new ({auth: {token: openAIToken}, retryConfig});\n\n    text:CreateEditRequest editReq = {\n        input: check io:fileReadString(filePath),\n        instruction: &#x22;Fix grammar and spelling mistakes.&#x22;,\n        model: &#x22;text-davinci-edit-001&#x22;\n    };\n    text:CreateEditResponse editRes = check openAIText->/edits.post(editReq);\n    string? text = editRes.choices[0].text;\n\n    if text is () { \n        return error(&#x22;Failed to correct grammar and spelling in the given text.&#x22;);\n    }\n    io:println(string &#x60;Corrected: ${text}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> filePath</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">RetryConfig retryConfig </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        interval</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 5</span><span style=\"color:#24292E\">, </span><span style=\"color:#6A737D\">// Initial retry interval in seconds.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        count</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3</span><span style=\"color:#24292E\">, </span><span style=\"color:#6A737D\">// Number of retry attempts before stopping.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        backOffFactor</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2.0</span><span style=\"color:#6A737D\"> // Multiplier of the retry interval.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}, </span><span style=\"color:#E36209\">retryConfig</span><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEditRequest editReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        input</span><span style=\"color:#D73A49\">:</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io:</span><span style=\"color:#6F42C1\">fileReadString</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">filePath</span><span style=\"color:#24292E\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        instruction</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Fix grammar and spelling mistakes.\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-edit-001\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEditResponse editRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">edits.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">editReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? text </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> editRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> text </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () { </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to correct grammar and spelling in the given text.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Corrected: ${</span><span style=\"color:#24292E\">text</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"openai3":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main() returns error? {\n    // Get information on upcoming and recently released movies from TMDB\n    final themoviedb:Client moviedb = check new themoviedb:Client({apiKey: moviedbApiKey});\n    themoviedb:InlineResponse2001 upcomingMovies = check moviedb->getUpcomingMovies();\n\n    // Generate a creative tweet using Azure OpenAI   \n    string prompt = &#x22;Instruction: Generate a creative and short tweet &#x22; +\n        &#x22;below 250 characters about the following &#x22; +\n        &#x22;upcoming and recently released movies. Movies: &#x22;;\n    foreach int i in 1 ... NO_OF_MOVIES {\n        prompt += string &#x60;${i}. ${upcomingMovies.results[i - 1].title} &#x60;;\n    }\n\n    text:Deploymentid_completions_body completionsBody = {\n        prompt,\n        max_tokens: MAX_TOKENS\n    };\n    final text:Client azureOpenAI = check new (\n        config = {auth: {apiKey: openAIToken}},\n        serviceUrl = serviceUrl\n    );\n    text:Inline_response_200 completion = \n        check azureOpenAI->/deployments/[deploymentId]/completions.post(\n            API_VERSION, completionsBody\n        );\n    string? tweetContent = completion.choices[0].text;\n\n    if tweetContent is () {\n        return error(&#x22;Failed to generate a tweet on upcoming and recently released movies.&#x22;);\n    }\n\n    if tweetContent.length() > MAX_TWEET_LENGTH {\n        return error(&#x22;The generated tweet exceeded the maximum supported character length.&#x22;);\n    }\n\n    // Tweet it out!\n    final twitter:Client twitter = check new (twitterConfig);\n    twitter:Tweet tweet = check twitter->tweet(tweetContent);\n    io:println(&#x22;Tweet: &#x22;, tweet.text);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Get information on upcoming and recently released movies from TMDB</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> themoviedb</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client moviedb </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> themoviedb</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">Client</span><span style=\"color:#24292E\">({apiKey</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> moviedbApiKey});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    themoviedb</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">InlineResponse2001 upcomingMovies </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> moviedb</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">getUpcomingMovies</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Generate a creative tweet using Azure OpenAI   </span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> prompt </span><span style=\"color:#D73A49\">=</span><span style=\"color:#032F62\"> \"Instruction: Generate a creative and short tweet \"</span><span style=\"color:#D73A49\"> +</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"below 250 characters about the following \"</span><span style=\"color:#D73A49\"> +</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"upcoming and recently released movies. Movies: \"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    foreach </span><span style=\"color:#005CC5\">int</span><span style=\"color:#24292E\"> i </span><span style=\"color:#D73A49\">in</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#D73A49\"> ...</span><span style=\"color:#24292E\"> NO_OF_MOVIES {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        prompt </span><span style=\"color:#D73A49\">+=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `${</span><span style=\"color:#24292E\">i</span><span style=\"color:#032F62\">}. ${</span><span style=\"color:#24292E\">upcomingMovies</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">results</span><span style=\"color:#032F62\">[</span><span style=\"color:#24292E\">i</span><span style=\"color:#D73A49\"> -</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#032F62\">].</span><span style=\"color:#24292E\">title</span><span style=\"color:#032F62\">} `</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Deploymentid_completions_body completionsBody </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        prompt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> MAX_TOKENS</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client azureOpenAI </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">        config</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> {auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {apiKey: openAIToken}},</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">        serviceUrl</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> serviceUrl</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Inline_response_200 completion </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> azureOpenAI</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">deployments</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">[deploymentId]</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">            API_VERSION</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">completionsBody</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        );</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? tweetContent </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> completion.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> tweetContent </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Failed to generate a tweet on upcoming and recently released movies.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> tweetContent.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> MAX_TWEET_LENGTH {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"The generated tweet exceeded the maximum supported character length.\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Tweet it out!</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> twitter</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client twitter </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">twitterConfig</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    twitter</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Tweet tweet </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> twitter</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">tweet</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">tweetContent</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Tweet: \"</span><span style=\"color:#24292E\">, tweet.text);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"simplify-vector-database-management":{"frontmatter":{"title":"Simplify vector database management","description":"Ballerina comes with built-in connectors for vector databases, which are a common building block in AI use cases that support the storage and retrieval of high-dimensional vectors.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/answer_questions_using_vector_search_weaviate/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service / on new http:Listener(8080) {\n    resource function get answer(string question) returns weaviate:JsonObject|error? {\n        // Retrieve OpenAI embeddings for the input question\n        embeddings:CreateEmbeddingResponse embeddingResponse = check openai->/embeddings.post({\n                model: MODEL,\n                input: question\n            }\n        );\n        float[] vector = embeddingResponse.data[0].embedding;\n\n        // Querying Weaviate for the closest vector using GraphQL\n        string graphQLQuery = string &#x60;{\n                                    Get {\n                                        ${CLASS_NAME} (\n                                        nearVector: {\n                                            vector: ${vector.toString()}\n                                            }\n                                            limit: 1\n                                        ){\n                                        question\n                                        answer\n                                        _additional {\n                                            certainty,\n                                            id\n                                            }\n                                        }\n                                    }\n                                }&#x60;;\n\n        weaviate:GraphQLResponse results = check weaviate->/graphql.post({query: graphQLQuery});\n\n        return results.data;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> answer</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> question</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> weaviate</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">JsonObject</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Retrieve OpenAI embeddings for the input question</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        embeddings</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEmbeddingResponse embeddingResponse </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openai</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">embeddings.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> MODEL,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                input</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> question</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        );</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        float</span><span style=\"color:#24292E\">[] vector </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> embeddingResponse.data[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].embedding;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Querying Weaviate for the closest vector using GraphQL</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> graphQLQuery </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `{</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                    Get {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        ${</span><span style=\"color:#24292E\">CLASS_NAME</span><span style=\"color:#032F62\">} (</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        nearVector: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            vector: ${</span><span style=\"color:#24292E\">vector</span><span style=\"color:#032F62\">.</span><span style=\"color:#6F42C1\">toString</span><span style=\"color:#032F62\">()</span><span style=\"color:#032F62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            limit: 1</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        ){</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        question</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        answer</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        _additional {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            certainty,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            id</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                            }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                        }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                    }</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                                }`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        weaviate</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">GraphQLResponse results </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> weaviate</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">graphql.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">({query</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> graphQLQuery});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> results.data;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"transcribe-speech-or-music-with-whisper":{"frontmatter":{"title":"Transcribe speech or music with Whisper","description":"OpenAIâ€™s Whisper API makes speech and music computable! Easily transcribe speech or music in any language into text. The power of the Ballerina library makes manipulating audio files and processing the results trivially simple.","url":"","image":""},"code":""},"trivial-hosting-in-wso2-choreo-ipaas":{"frontmatter":{"title":"(Extra!) Trivial hosting in WSO2 Choreo","description":"Manual integrations? Scheduled integrations (cron jobs)? Triggered integrations? Integrations as APIs? No problem! Write the code, attach the repo to WSO2 Choreo, and let it do the rest.","url":"https://wso2.com/choreo/integration/","image":"images/choreo-ipaas-image-v2.png"},"code":""},"why-is-ballerina-the-way-you-should-write-ai-applications":{"frontmatter":{"title":"Why is Ballerina the way you should write AI applications?","description":"For many years Python, a wonderful language, has been the de facto choice for data analytics, data science, and machine learning. But using LLMs to add AI to business applications is not about those problems anymore but more about prompt engineering, fine-tuning, calling APIs offered by hosted LLMs, chaining LLMs, and combining them with other APIs.<br/><br/>\nBallerina is your best choice for writing modern cloud-native applications that incorporate LLM-powered AI! ","url":"https://github.com/ballerina-guides/ai-samples/blob/main/convert_audio_to_text_and_translate_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string audioURL, string translatingLanguage) returns error? {\n    // Creates a HTTP client to download the audio file\n    http:Client audioEP = check new (audioURL);\n    http:Response httpResp = check audioEP->/get();\n    byte[] audioBytes = check httpResp.getBinaryPayload();\n    check io:fileWriteBytes(AUDIO_FILE_PATH, audioBytes);\n\n    // Creates a request to translate the audio file to text (English)\n    audio:CreateTranslationRequest translationsReq = {\n        file: {fileContent: check io:fileReadBytes(AUDIO_FILE_PATH), fileName: AUDIO_FILE},\n        model: &#x22;whisper-1&#x22;\n    };\n\n    // Translates the audio file to text (English)\n    audio:Client openAIAudio = check new ({auth: {token: openAIKey}});\n    audio:CreateTranscriptionResponse transcriptionRes = \n        check openAIAudio->/audio/translations.post(translationsReq);\n    io:println(&#x22;Audio text in English: &#x22;, transcriptionRes.text);\n\n    // Creates a request to translate the text from English to another language\n    text:CreateCompletionRequest completionReq = {\n        model: &#x22;text-davinci-003&#x22;,\n        prompt: string &#x60;Translate the following text from English to ${\n                        translatingLanguage} : ${transcriptionRes.text}&#x60;,\n        temperature: 0.7,\n        max_tokens: 256,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0\n    };\n\n    // Translates the text from English to another language\n    text:Client openAIText = check new ({auth: {token: openAIKey}});\n    text:CreateCompletionResponse completionRes = \n        check openAIText->/completions.post(completionReq);\n    string translatedText = check completionRes.choices[0].text.ensureType();\n    io:println(&#x22;Translated text: &#x22;, translatedText);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> audioURL</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> translatingLanguage</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a HTTP client to download the audio file</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client audioEP </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">audioURL</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Response httpResp </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> audioEP</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    byte</span><span style=\"color:#24292E\">[] audioBytes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> httpResp.</span><span style=\"color:#6F42C1\">getBinaryPayload</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileWriteBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">audioBytes</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to translate the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranslationRequest translationsReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        file</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {fileContent: </span><span style=\"color:#D73A49\">check</span><span style=\"color:#24292E\"> io:</span><span style=\"color:#6F42C1\">fileReadBytes</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">AUDIO_FILE_PATH</span><span style=\"color:#24292E\">), fileName</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> AUDIO_FILE},</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"whisper-1\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Translates the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIAudio </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIKey}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    audio</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateTranscriptionResponse transcriptionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIAudio</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">audio</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">translations.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">translationsReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Audio text in English: \"</span><span style=\"color:#24292E\">, transcriptionRes.text);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Creates a request to translate the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionRequest completionReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-003\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        prompt</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> string </span><span style=\"color:#032F62\">`Translate the following text from English to ${</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                        translatingLanguage</span><span style=\"color:#032F62\">} : ${</span><span style=\"color:#24292E\">transcriptionRes</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">text</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        temperature</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0.7</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        max_tokens</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 256</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        top_p</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        frequency_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        presence_penalty</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Translates the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIKey}});</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateCompletionResponse completionRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">completions.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">completionReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> translatedText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> completionRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text.</span><span style=\"color:#6F42C1\">ensureType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Translated text: \"</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">translatedText</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"write-robust-api-powered-ai-applications":{"frontmatter":{"title":"Write robust API-powered AI applications","description":"Take on the unpredictable world of distributed systems with the built-in language features and Ballerina library features. Writing robust API-powered AI applications is now a breeze for every developer, no matter the challenges!","url":"https://github.com/ballerina-guides/ai-samples/blob/main/correct_grammar_and_spelling_in_text_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public function main(string filePath) returns error? {\n    http:RetryConfig retryConfig = {\n        interval: 5, // Initial retry interval in seconds.\n        count: 3, // Number of retry attempts before stopping.\n        backOffFactor: 2.0 // Multiplier of the retry interval.\n    };\n    final text:Client openAIText = check new ({auth: {token: openAIToken}, retryConfig});\n\n    text:CreateEditRequest editReq = {\n        input: check io:fileReadString(filePath),\n        instruction: &#x22;Fix grammar and spelling mistakes.&#x22;,\n        model: &#x22;text-davinci-edit-001&#x22;\n    };\n    text:CreateEditResponse editRes = check openAIText->/edits.post(editReq);\n    string text = check editRes.choices[0].text.ensureType();\n    io:println(string &#x60;Corrected: ${text}&#x60;);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> filePath</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">RetryConfig retryConfig </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        interval</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 5</span><span style=\"color:#24292E\">, </span><span style=\"color:#6A737D\">// Initial retry interval in seconds.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        count</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3</span><span style=\"color:#24292E\">, </span><span style=\"color:#6A737D\">// Number of retry attempts before stopping.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        backOffFactor</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2.0</span><span style=\"color:#6A737D\"> // Multiplier of the retry interval.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    final</span><span style=\"color:#24292E\"> text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client openAIText </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> ({auth</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {token: openAIToken}, </span><span style=\"color:#E36209\">retryConfig</span><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEditRequest editReq </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        input</span><span style=\"color:#D73A49\">:</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io:</span><span style=\"color:#6F42C1\">fileReadString</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">filePath</span><span style=\"color:#24292E\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        instruction</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Fix grammar and spelling mistakes.\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        model</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"text-davinci-edit-001\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    text</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">CreateEditResponse editRes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> openAIText</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">edits.</span><span style=\"color:#6F42C1\">post</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">editReq</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> text </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> editRes.choices[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].text.</span><span style=\"color:#6F42C1\">ensureType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Corrected: ${</span><span style=\"color:#24292E\">text</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"}}},"__N_SSG":true}