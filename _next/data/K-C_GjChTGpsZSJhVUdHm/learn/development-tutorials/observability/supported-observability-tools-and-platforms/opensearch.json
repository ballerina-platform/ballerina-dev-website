{"pageProps":{"frontmatter":{"title":"Observe metrics, traces and logs using OpenSearch","description":"See how Ballerina supports observability by exposing itself via metrics, traces and logs to OpenSearch.","keywords":"ballerina, observability, metrics, traces, logs, opensearch","permalink":"/learn/supported-observability-tools-and-platforms/opensearch/","active":"opensearch","intro":"Users can observe Ballerina programs with [OpenSearch](https://opensearch.org/), which is a community-driven, Apache 2.0-licensed open-source search and analytics suite that makes it easy to ingest, search, visualize, and analyze data. It provides a highly scalable system for providing fast access and response to large volumes of data with an integrated visualization tool, OpenSearch Dashboards, that makes it easy for users to explore their data."},"content":"\nThe sample [shop service](/learn/overview-of-ballerina-observability/#example-observe-a-ballerina-service) will be used in this guide.\n\nFollow the steps given below to view Ballerina metrics, traces and logs in OpenSearch.\n\n## Step 1 - Set up OpenSearch\n\nThis section focuses on configuring OpenSearch with Docker as a quick installation.\n\n1. Download and unzip the [opensearch-observability-dashboard.zip](https://github.com/ballerina-platform/module-ballerina-observe/releases/download/v1.0.0-opensearch-dashboard/opensearch-observability-dashboard.zip) in your local machine.\n   \n   The `opensearch-observability-dashboard` directory structure should look like this:\n\n   ```\n   ├── config\n   │   ├── dashboards\n   │   │   └── opensearch_dashboards.yml\n   │   ├── data-prepper\n   │   │   └── pipelines.yaml\n   │   ├── fluent-bit\n   │   │   ├── fluent-bit.conf\n   │   │   ├── parsers.conf\n   │   │   └── scripts\n   │   │       └── scripts.lua\n   │   └── .env\n   ├── logs\n   │   └── ballerina\n   ├── setup\n   │   ├── opensearch-dashboards-template.ndjson\n   │   └── index-template-request.json\n   └── docker-compose.yml\n   ```\n\n2. Update `OPENSEARCH_INITIAL_ADMIN_PASSWORD` in the `path/to/opensearch-observability-dashboard/config/.env` file.\n   ```env\n   OPENSEARCH_INITIAL_ADMIN_PASSWORD=<PASSWORD> # Password for the OpenSearch admin user\n   ```\n    \n   This password will be used to access the OpenSearch server.\n\n3. Navigate to the `path/to/opensearch-observability-dashboard` directory and run `docker compose` to start the OpenSearch server.\n   ``` \n   docker compose -f docker-compose.yml up -d\n   ```\n\n## Step 2 - Set up Ballerina application for observability\n\n1. Open the `main.bal` file in the Ballerina package and add the following imports.\n\n   ```ballerina\n   import ballerinax/metrics.logs as _;\n   import ballerinax/jaeger as _;\n   ```\n   \n2. Create the `Config.toml` file in the package directory to set the runtime configurations as follows.\n\n   ```toml\n   [ballerina.observe]\n   metricsLogsEnabled = true\n   tracingEnabled = true\n   tracingProvider = \"jaeger\"\n    \n   [ballerinax.jaeger]\n   agentHostname = \"localhost\"\n   agentPort = 4317\n   samplerType = \"const\"\n   samplerParam = 1.0\n   reporterFlushInterval = 2000\n   reporterBufferSize = 1000\n    \n   [ballerinax.metrics.logs]\n   logFilePath = \"<PATH>/<TO>/opensearch-observability-dashboard/logs/ballerina/<NAME_FOR_SERVICE>/app.log\"\n   ```\n       \n   Update the `logFilePath` with the path to openSearch observability dashboard logs directory, \n   which is `path/to/opensearch-observability-dashboard/logs/ballerina/<NAME_FOR_SERVICE>/app.log`.\n\n   These configurations enable metrics, logs, and traces in the Ballerina application and configure the Jaeger exporter.\n\n   The table below provides the descriptions of each configuration option and possible values that can be assigned.\n\n   | Configuration key | Description | Default value | Possible values |\n   |---|---|---|---|\n   | ballerinax.jaeger. agentHostname | Hostname of the Jaeger agent | localhost | IP or hostname of the Jaeger agent. Can be localhost if running on same node as Ballerina. |\n   | ballerinax.jaeger. agentPort | Port of the Jaeger agent | 4317 | The port on which the Jaeger agent is listening. |\n   | ballerinax.jaeger. samplerType | Type of sampling methods used in Jaeger tracer | const | `const`, `probabilistic`, or `ratelimiting` |\n   | ballerinax.jaeger. samplerParam | Floating value parameter for sampler | 1.0 | **const**: `0` (no sampling) or `1` (sample all)<br>**probabilistic**: `0.0` to `1.0`<br>**ratelimiting**: positive integer (rate/sec) |\n   | ballerinax.jaeger. reporterFlushInterval | Interval for sending spans to agent | 2000 | Any positive integer value |\n   | ballerinax.jaeger. reporterBufferSize | Queue size of Jaeger client | 1000 | Any positive integer value |\n   | ballerinax.metrics.logs. logFilePath | Path to application log file | `none` | `PATH/TO/opensearch-observability-dashboard/logs/ballerina/<SERVICE_NAME>/app.log` |\n\n## Step 3 - Run the Ballerina service\n\nWhen Ballerina observability is enabled, the Ballerina runtime collects metrics, logs, and traces.\n\nRun the following command to start the Ballerina service.\n\n```\n$ bal run\n\nCompiling source\n\nRunning executable\n\nballerina: started publishing traces to Jaeger on localhost:4317\n```\n\n## Step 4 - Send requests\nSend requests to <http://localhost:8090/shop>.\n\nExample cURL commands:\n\n```\n$ curl -X GET http://localhost:8090/shop/products\n```\n```\n$ curl -X POST http://localhost:8090/shop/product \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"id\": 4, \n    \"name\": \"Laptop Charger\", \n    \"price\": 50.00\n}'\n```\n```\n$ curl -X POST http://localhost:8090/shop/order \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"productId\": 1, \n    \"quantity\": 1\n}'\n```\n```\n$ curl -X GET http://localhost:8090/shop/order/0\n```\n\n## Step 5 - View distributed tracing on OpenSearch dashboard\n\nOpen the OpenSearch Dashboard in your browser at <http://localhost:5601> and log in using the admin credentials you set up in the `.env` file.\nUse the username `admin` and the password you set for `OPENSEARCH_INITIAL_ADMIN_PASSWORD`.\n\nNavigate to the **Traces** tab under **Observability** section.\n\nThe image below is a sample tracing information you can see in OpenSearch.\n\n![OpenSearch traces Dashboard](/learn/images/opensearch-traces-dashboard.png \"OpenSearch traces Dashboard\")\n\n![Span details in OpenSearch](/learn/images/span-details-opensearch.png \"Span details in OpenSearch\") \n\nThe service map shows the relationship between different services in the system.\n\n![Service map in OpenSearch](/learn/images/service-map-opensearch.png \"Service map in OpenSearch\")\n\n![Service details in OpenSearch](/learn/images/service-details-opensearch.png \"Service details in OpenSearch\")\n\n## Step 6 - View metrics on OpenSearch dashboard\n\nOpen the OpenSearch Dashboard in your browser at <http://localhost:5601> and navigate to the \"Dashboards\" tab under \"OpenSearch Dashboards\" section.\n\nThen click on the \"Integration metrics dashboard\" to view the metrics.\n\n![OpenSearch metrics dashboard](/learn/images/opensearch-metrics-dashboard-overall.png \"OpenSearch metrics dashboard\")\n\n![OpenSearch metrics summary](/learn/images/opensearch-metrics-dashboard-summary.png \"OpenSearch metrics summary\")\n\n## Step 7 - View logs on OpenSearch dashboard\n\nOpen the OpenSearch Dashboard in your browser at <http://localhost:5601> and navigate to the \"Dashboards\" tab under \"OpenSearch Dashboards\" section.\n\nThen click on the \"Integration logs dashboard\" to view the integration logs.\n\n![OpenSearch logs dashboard](/learn/images/opensearch-logs-dashboard-overall.png \"OpenSearch logs dashboard\")\n\n![OpenSearch logs view](/learn/images/opensearch-logs-dashboard-logs-view.png \"OpenSearch logs view\")\n","id":"opensearch","sub":"observability","third":"supported-observability-tools-and-platforms","slug":"observability/supported-observability-tools-and-platforms/opensearch","codes":"[[948916875,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>OPENSEARCH_INITIAL_ADMIN_PASSWORD=&#x3C;PASSWORD> # Password for the OpenSearch admin user</span></span></code></pre>\"],[-1234804970,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/metrics.logs </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> _;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/jaeger </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> _;</span></span></code></pre>\"],[-432077780,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">observe</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsLogsEnabled = </span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingEnabled = </span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingProvider = </span><span style=\\\"color:#032F62\\\">\\\"jaeger\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">jaeger</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">agentHostname = </span><span style=\\\"color:#032F62\\\">\\\"localhost\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">agentPort = </span><span style=\\\"color:#005CC5\\\">4317</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">samplerType = </span><span style=\\\"color:#032F62\\\">\\\"const\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">samplerParam = </span><span style=\\\"color:#005CC5\\\">1.0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">reporterFlushInterval = </span><span style=\\\"color:#005CC5\\\">2000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">reporterBufferSize = </span><span style=\\\"color:#005CC5\\\">1000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">metrics</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">logs</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">logFilePath = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;PATH>/&#x3C;TO>/opensearch-observability-dashboard/logs/ballerina/&#x3C;NAME_FOR_SERVICE>/app.log\\\"</span></span></code></pre>\"]]"},"__N_SSG":true}