{"pageProps":{"frontmatter":{"title":"Observe tracing using Jaeger","description":"See how Ballerina supports observability by exposing itself via tracing to Jaeger.","keywords":"ballerina, observability, tracing, jaeger","permalink":"/learn/supported-observability-tools-and-platforms/jaeger/","active":"jaeger","intro":"Users can configure Ballerina to support distributed tracing with [Jaeger](https://www.jaegertracing.io/), which is one of the open-source and distributed tracing platforms used worldwide. Ballerina provides tracing data in OpenTelemetry format."},"content":"\nThe sample [shop service](/learn/overview-of-ballerina-observability/#example-observe-a-ballerina-service) will be used in this guide. Follow the steps given below to observe Ballerina tracing in Jaeger.\n\n## Step 1 - Set up Jaeger\n\nYou can configure Ballerina to support distributed tracing with Jaeger. This section focuses on configuring Jaeger with Docker as a quick installation.\n\n>**Tip:** There are many possible ways to deploy Jaeger. For more information, see <a href=\"https://www.jaegertracing.io/docs/deployment/\" target=\"_blank\">Jaeger Deployment</a>.\n> The easiest option is to use executable binaries listed in <a href=\"https://www.jaegertracing.io/download/\" target=\"_blank\">Downloads</a>.\n\nInstall Jaeger via Docker and start the Docker container by executing the command below.\n\n```\n$ docker run -d -p 13133:13133 -p 16686:16686 -p 4317:4317 jaegertracing/opentelemetry-all-in-one\n```\n\n## Step 2 - Import Ballerina Jaeger extension\n\nTo include the Jaeger extension into the executable, the `ballerinax/jaeger` module needs to be imported into your Ballerina project `main.bal` file.\n\n```ballerina\nimport ballerinax/jaeger as _;\n```\n\nJaeger extension has an `Opentelemetry GRPC Span Exporter` which will push tracing data as batches to the Jaeger server endpoint (default - http://localhost:4317) in opentelemetry format.\n\n## Step 3 - Configure Ballerina runtime configurations\n\nTracing can be enabled in your Ballerina project using configurations similar to the following in your `Config.toml` file.\n\n```toml\n[ballerina.observe]\ntracingEnabled=true\ntracingProvider=\"jaeger\"\n\n[ballerinax.jaeger]\nagentHostname=\"localhost\"\nagentPort=4317\nsamplerType=\"const\"\nsamplerParam=1.0\nreporterFlushInterval=2000\nreporterBufferSize=1000\n```\n\nThe table below provides the descriptions of each configuration option and possible values that can be assigned.\n\nConfiguration key | Description | Default value | Possible values \n--- | --- | --- | --- \nballerinax.jaeger. agentHostname | Hostname of the Jaeger agent | localhost | IP or hostname of the Jaeger agent. If it is running on the same node as Ballerina, it can be localhost. \nballerinax.jaeger. agentPort | Port of the Jaeger agent | 4317 | The port on which the Jaeger agent is listening.\nballerinax.jaeger. samplerType | Type of the sampling methods used in the Jaeger tracer. | const | `const`, `probabilistic`, or `ratelimiting`.\nballerinax.jaeger. samplerParam | It is a floating value. Based on the sampler type, the effect of the sampler param varies | 1.0 | For `const` `0` (no sampling) or `1` (sample all spans), for `probabilistic` `0.0` to `1.0`, for `ratelimiting` any positive integer (rate per second).\nballerinax.jaeger. reporterFlushInterval | The Jaeger client will be sending the spans to the agent at this interval. | 2000 | Any positive integer value.\nballerinax.jaeger. reporterBufferSize | Queue size of the Jaeger client. | 1000 | Any positive integer value.\n\n## Step 4 - Run the Ballerina service\n\nWhen Ballerina observability is enabled, the Ballerina runtime collects tracing data and traces will be published to Jaeger.\n\nRun the following command to start the Ballerina service.\n\n```\n$ bal run\n\nCompiling source\n\nRunning executable\n\nballerina: started publishing traces to Jaeger on localhost:4317\n```\n\n## Step 5 - Send requests\n \nSend requests to <http://localhost:8090/shop/products>.\n\nExample cURL commands:\n\n```\n$ curl -X GET http://localhost:8090/shop/products\n```\n```\n$ curl -X POST http://localhost:8090/shop/product \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"id\": 4, \n    \"name\": \"Laptop Charger\", \n    \"price\": 50.00\n}'\n```\n```\n$ curl -X POST http://localhost:8090/shop/order \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"productId\": 1, \n    \"quantity\": 1\n}'\n```\n```\n$ curl -X GET http://localhost:8090/shop/order/0\n```\n\n## Step 6 - View distributed tracing on the Jaeger server\n\nGo to <http://localhost:16686> and load the web UI of Jaeger to make sure it is functioning properly. You can select the service for which you need tracing information find traces.\n\nThe image below is the sample tracing information you can see in Jaeger.\n    \n![Jaeger tracing Dashboard](/learn/images/jaeger-tracing-dashboard.png \"Jaeger tracing Dashboard\")\n\n![Span details in Jaeger](/learn/images/span-details-jaeger.png \"Span details in Jaeger\")\n\n","id":"jaeger","sub":"observability","third":"supported-observability-tools-and-platforms","slug":"observability/supported-observability-tools-and-platforms/jaeger","codes":"[[-2085663108,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/jaeger </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> _;</span></span></code></pre>\"],[-2109807954,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">observe</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingEnabled=</span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingProvider=</span><span style=\\\"color:#032F62\\\">\\\"jaeger\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">jaeger</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">agentHostname=</span><span style=\\\"color:#032F62\\\">\\\"localhost\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">agentPort=</span><span style=\\\"color:#005CC5\\\">4317</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">samplerType=</span><span style=\\\"color:#032F62\\\">\\\"const\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">samplerParam=</span><span style=\\\"color:#005CC5\\\">1.0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">reporterFlushInterval=</span><span style=\\\"color:#005CC5\\\">2000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">reporterBufferSize=</span><span style=\\\"color:#005CC5\\\">1000</span></span></code></pre>\"]]"},"__N_SSG":true}