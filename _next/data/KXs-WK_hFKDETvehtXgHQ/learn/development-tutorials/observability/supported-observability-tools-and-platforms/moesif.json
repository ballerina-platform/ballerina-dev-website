{"pageProps":{"frontmatter":{"title":"Observe metrics, traces and logs using Moesif","description":"See how Ballerina supports observability by exposing itself via metrics, traces and logs to Moesif.","keywords":"ballerina, observability, metrics, traces, logs, moesif","permalink":"/learn/supported-observability-tools-and-platforms/moesif/","active":"moesif","intro":"Users can observe Ballerina programs with [Moesif](https://www.moesif.com/), which is a powerful API analytics and monetization platform that helps businesses understand, debug, and monetize their API usage. It provides comprehensive API observability with real-time monitoring, behavioral analytics, and AI-powered insights to track customer API adoption and usage patterns.\n"},"content":"\nThe sample [shop service](/learn/overview-of-ballerina-observability/#example-observe-a-ballerina-service) will be used in this guide.\n\nFollow the steps given below to view Ballerina metrics, traces and logs in Moesif.\n\n## Step 1 - Create a Moesif account and get an application ID\n\nAfter you log into Moesif Portal, get your `Moesif Application ID` during the onboarding steps.\n`Application ID` can be accessed by following the below steps from Moesif Portal after logging in.\n\n> Go to Account -> Settings -> API keys -> Collector Application ID.\n\n## Step 2 - Set up Ballerina application for publishing traces and metrics to Moesif\n\n1. Create the sample [shop service](/learn/overview-of-ballerina-observability/#example-observe-a-ballerina-service).\n2. Open the `main.bal` file in the Ballerina package and add the following imports.\n\n   ```ballerina\n   import ballerinax/moesif as _;\n   ```\n   \n3. Create the `Config.toml` file in the package directory to set the runtime configurations.\n4. To enable the extension and publish traces to Moesif, add the following to the `Config.toml`.\n\n   ```toml\n   [ballerina.observe]\n   tracingEnabled=true\n   tracingProvider=\"moesif\"\n      \n   [ballerinax.moesif]\n   applicationId = \"<MOESIF_APPLICATION_ID>\"    # Mandatory Configuration.\n   reporterBaseUrl = \"https://api.moesif.net\"   # Optional Configuration. Default value is 'https://api.moesif.net'\n   tracingReporterFlushInterval = 1000          # Optional Configuration. Default value is 1000\n   tracingReporterBufferSize = 10000            # Optional Configuration. Default value is 10000\n   isTraceLoggingEnabled = false                # Optional Configuration. Default value is false\n   isPayloadLoggingEnabled = false              # Optional Configuration. Default value is false\n   ```\n\n5. To enable metrics publishing, add the following to the `Config.toml`.\n   \n   ```toml\n   [ballerina.observe]\n   metricsEnabled=true\n   metricsReporter=\"moesif\"\n   \n   [ballerinax.moesif]\n   applicationId = \"<MOESIF_APPLICATION_ID>\"     # Mandatory Configuration.\n   reporterBaseUrl = \"https://api.moesif.net\"   # Optional Configuration. Default value is 'https://api.moesif.net'\n   metricsReporterFlushInterval = 15000         # Optional Configuration. Default value is 15000\n   metricsReporterClientTimeout = 10000         # Optional Configuration. Default value is 10000\n   isTraceLoggingEnabled = false                # Optional Configuration. Default value is false\n   isPayloadLoggingEnabled = false              # Optional Configuration. Default value is false\n   \n   # Additional attributes for metrics\n   [ballerinax.moesif.additionalAttributes]\n   key1 = \"value1\"\n   key2 = \"value2\"\n   ```\n6. Replace `<MOESIF_APPLICATION_ID>` with the application ID obtained in **Step 1**.\n\nThe table below provides the descriptions of each configuration option and possible values that can be assigned.\n\n| Configuration key                              | Description                                                                 | Default value | Possible values                      |\n|------------------------------------------------|-----------------------------------------------------------------------------|-------------------------|--------------------------------------|\n| ballerina.observe.tracingEnabled               | Enables or disables the collection of trace data.                           | `false`       | `true` or `false`                    |\n| ballerina.observe.tracingProvider              | Specifies Moesif as the tracing provider.                                   | `none`        | `\"moesif\"`                           |\n| ballerina.observe.metricsEnabled               | Enables or disables the collection of metrics data.                         | `false`       | `true` or `false`                    |\n| ballerina.observe.metricsReporter              | Specifies Moesif as the metrics reporter.                                   | `none`        | `\"moesif\"`                           |\n| ballerinax.moesif.applicationId                | Moesif application ID used for authentication. **Mandatory configuration.** | `none`        | A valid Moesif application ID string |\n| ballerinax.moesif.reporterBaseUrl              | The base URL of the Moesif API.                                             | `https://api.moesif.net` | Any valid Moesif API endpoint URL    |\n| ballerinax.moesif.tracingReporterFlushInterval | Interval (in milliseconds) for flushing trace data to Moesif.               | `1000`        | Any positive integer value           |\n| ballerinax.moesif.tracingReporterBufferSize    | Maximum buffer size for trace data before sending to Moesif.                | `10000`       | Any positive integer value           |\n| ballerinax.moesif.metricsReporterFlushInterval | Interval (in milliseconds) for flushing metrics data to Moesif.             | `15000`       | Any positive integer value           |\n| ballerinax.moesif.metricsReporterClientTimeout | Timeout (in milliseconds) for the metrics reporter client requests.         | `10000`       | Any positive integer value           |\n| ballerinax.moesif.isTraceLoggingEnabled        | Enables or disables trace logging for debugging purposes.                   | `false`       | `true` or `false`                    |\n| ballerinax.moesif.isPayloadLoggingEnabled      | Enables or disables payload logging for debugging purposes.                 | `false`       | `true` or `false`                    |\n| ballerinax.moesif.additionalAttributes         | Additional key-value attributes to include with metrics reporting.          | `none`        | Any valid set of key-value pairs.<br/>e.g., `key1=\"value1\", key2=\"value2\"` |\n\nThese configurations enable traces and metrics publishing for the Ballerina application and configure the Moesif exporter.\n\n## Step 3 - Publish Ballerina application logs to Moesif\n\nThis setup leverages `Fluent Bit` to forward logs to an `OTEL Collector`, which then sends the logs to Moesif’s log endpoint.\n\n> Ballerina → Fluent Bit → OTEL Collector → Moesif\n\n1. Copy the following configs into a local directory to set up containerized log publishing.\n\n   ```\n   .\n   ├── docker-compose.yaml\n   ├── fluent-bit.conf\n   └── otelcol.yaml\n   ```\n\n   * **docker-compose.yaml** – Container setup for Fluent Bit and OTEL Collector.\n   * **fluent-bit.conf** – Reads Ballerina logs and forwards them.\n   * **otelcol.yaml** – Processes logs and sends to Moesif.\n\n   **docker-compose.yaml**\n   \n   Update the `<ballerina-log-path>` with the log storage location, and `<MOESIF_APPLICATION_ID>` with the \n   application ID obtained in **Step 1**.\n   \n   ```yaml\n   services:\n     otelcol:\n       image: otel/opentelemetry-collector-contrib:0.132.0\n       container_name: otelcol\n       command: [\"--config\", \"/etc/otelcol.yaml\"]\n       environment:\n         MOESIF_APP_ID: \"<MOESIF_APPLICATION_ID>\"\n       ports:\n         - \"4317:4317\"\n         - \"4318:4318\"\n       volumes:\n         - ./otelcol.yaml:/etc/otelcol.yaml:ro\n       networks:\n         - otelnet\n   \n     fluent-bit:\n       image: fluent/fluent-bit:3.0\n       container_name: fluent-bit\n       depends_on:\n         - otelcol\n       ports:\n         - \"2020:2020\"\n       volumes:\n         - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro\n         # Mount the local log directory into the container\n         - <ballerina-log-path>:/app/logs:ro\n       networks:\n         - otelnet\n   \n   networks:\n     otelnet:\n       driver: bridge\n   ```\n   \n   **fluent-bit.conf**\n   \n   ```conf\n   [SERVICE]\n       Flush         1\n       Log_Level     debug\n       Daemon        off\n       HTTP_Server   On\n       HTTP_Listen   0.0.0.0\n       HTTP_Port     2020\n   \n   # Read logs from local Ballerina app\n   [INPUT]\n       Name              tail\n       Path              /app/logs/app.log\n       Tag               ballerina.*\n       Read_from_Head    true\n       Skip_Long_Lines   On\n       Skip_Empty_Lines  On\n       Refresh_Interval  1\n   \n   # Add metadata\n   [FILTER]\n       Name         modify\n       Match        ballerina.*\n       Add          service.name ballerina-service\n       Add          deployment.environment prod\n   \n   # Convert to OTEL format and send to collector\n   [OUTPUT]\n       Name          opentelemetry\n       Match         ballerina.*\n       Host          otelcol\n       Port          4318\n       Logs_uri      /v1/logs\n       Log_response_payload True\n       Tls           Off\n       Tls.verify    Off\n   \n   # Debug output to see what's being processed\n   [OUTPUT]\n       Name          stdout\n       Match         ballerina.*\n       Format        json_lines\n   ```\n   \n   **otelcol.yaml**\n   \n   Update the `<MOESIF_APPLICATION_ID>` with the application ID obtained in **Step 1**.\n   \n   ```yaml\n   receivers:\n     otlp:\n       protocols:\n         grpc:\n           endpoint: \"0.0.0.0:4317\"\n         http:\n           endpoint: \"0.0.0.0:4318\"\n   \n   processors:\n     resource:\n       attributes:\n         - key: service.name\n           value: ballerina-service\n           action: upsert\n         - key: deployment.environment\n           value: prod\n           action: upsert\n   \n     transform/severity_from_message:\n       log_statements:\n         - context: log\n           statements:\n             # Set default severity to INFO for all logs first\n             - set(severity_number, 9) where body != nil\n             - set(severity_text, \"INFO\") where body != nil\n   \n             # Try to parse JSON body, but handle parsing errors gracefully\n             - set(cache[\"is_json\"], false)\n             - set(cache[\"is_json\"], true) where body != nil and IsMatch(body, \"^\\\\s*\\\\{\")\n             \n             # For JSON logs, parse and extract level\n             - set(cache[\"parsed_body\"], ParseJSON(body)) where cache[\"is_json\"] == true\n             \n             # Override with specific levels based on JSON level field\n             - set(severity_number, 1) where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"TRACE\"\n             - set(severity_text, \"TRACE\") where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"TRACE\"\n             - set(severity_number, 5) where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"DEBUG\"\n             - set(severity_text, \"DEBUG\") where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"DEBUG\"\n             - set(severity_number, 9) where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"INFO\"\n             - set(severity_text, \"INFO\") where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"INFO\"\n             - set(severity_number, 13) where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"WARN\"\n             - set(severity_text, \"WARN\") where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"WARN\"\n             - set(severity_number, 17) where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"ERROR\"\n             - set(severity_text, \"ERROR\") where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"ERROR\"\n             - set(severity_number, 21) where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"FATAL\"\n             - set(severity_text, \"FATAL\") where cache[\"is_json\"] == true and cache[\"parsed_body\"][\"level\"] == \"FATAL\"\n   \n     batch: {}\n   \n   exporters:\n     # OTLP over HTTP to Moesif\n     otlphttp:\n       endpoint: \"https://api.moesif.net\"\n       logs_endpoint: \"https://api.moesif.net/v1/logs\"\n       headers:\n         X-Moesif-Application-Id: \"<MOESIF_APPLICATION_ID>\"\n       compression: none\n       timeout: 10s\n       sending_queue:\n         enabled: true\n         num_consumers: 2\n         queue_size: 512\n       retry_on_failure:\n         enabled: true\n         initial_interval: 1s\n         max_interval: 10s\n         max_elapsed_time: 0s\n   \n   service:\n     telemetry:\n       logs:\n         level: debug\n     pipelines:\n       logs:\n         receivers:  [otlp]\n         processors: [resource, transform/severity_from_message, batch]\n         exporters:  [otlphttp]\n   ```\n\n2. Run the above components stack using the following command.\n   `docker compose up`\n\n3. Create the `Config.toml` file in the package directory with the following content to log to a file in `json` format.\n\n   ```toml\n   [ballerina.log]\n   format = \"json\"\n\n   [[ballerina.log.destinations]]\n   # Replace /path/to/your/ballerina/logs with the absolute path to the Ballerina application's log directory\n   path = \"/path/to/your/ballerina/logs/app.log\"\n   ```\n\n## Step 4 - Run the Ballerina service\n\nWhen Ballerina observability is enabled, the Ballerina runtime collects metrics, logs, and traces.\n\nRun the following command to start the Ballerina service.\n\n```\n$ bal run\n\nCompiling source\n\nRunning executable\n\nballerina: started publishing traces to Moesif HTTP endpoint at https://api.moesif.net/v1/traces\nballerina: started publishing metrics to Moesif endpoint: https://api.moesif.net/v1/actions/batch with 2 additional attributes\n```\n\n## Step 5 - Send requests\n\nSend requests to <http://localhost:8090/shop>.\n\nExample cURL commands:\n\n```\n$ curl -X GET http://localhost:8090/shop/products\n```\n```\n$ curl -X POST http://localhost:8090/shop/product \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"id\": 4, \n    \"name\": \"Laptop Charger\", \n    \"price\": 50.00\n}'\n```\n```\n$ curl -X POST http://localhost:8090/shop/order \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"productId\": 1, \n    \"quantity\": 1\n}'\n```\n```\n$ curl -X GET http://localhost:8090/shop/order/0\n```\n\n## Step 6 - Visualize the observability data in Moesif dashboards\n\nTraces, metrics, and logs are published to Moesif as events and can be explored in the Live Event Log for real-time monitoring.\nMoesif provides a set of pre-built dashboards that help visualize and analyze this data effectively. \nIn addition, custom dashboards can be created to gain deeper, domain-specific insights.\n\nThe following sample dashboards illustrate how different types of observability data can be monitored and analyzed.\n<br><br>\n**Traces Dashboard**\n<br>\nUsed to filter and view incoming requests. You can drill down into each request to track its related traces in detail.\n\n![Moesif traces dashboard](/learn/images/moesif-request-view.png)\n<br><br>\n**Metrics Dashboard**\n<br>\nProvides visibility into key performance indicators such as latency, throughput, and error rates.\n\n![Moesif metrics dashboard](/learn/images/moesif-metrics-view.png)\n<br><br>\n**Logs Dashboard**\n<br>\nDisplays log events captured from the application.\n\n![Moesif logs dashboard](/learn/images/moesif-logs-view.png)\n","id":"moesif","sub":"observability","third":"supported-observability-tools-and-platforms","slug":"observability/supported-observability-tools-and-platforms/moesif","codes":"[[-684382813,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/moesif </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> _;</span></span></code></pre>\"],[1978149242,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">observe</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingEnabled=</span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingProvider=</span><span style=\\\"color:#032F62\\\">\\\"moesif\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">moesif</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">applicationId = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;MOESIF_APPLICATION_ID>\\\"</span><span style=\\\"color:#6A737D\\\">    # Mandatory Configuration.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">reporterBaseUrl = </span><span style=\\\"color:#032F62\\\">\\\"https://api.moesif.net\\\"</span><span style=\\\"color:#6A737D\\\">   # Optional Configuration. Default value is 'https://api.moesif.net'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingReporterFlushInterval = </span><span style=\\\"color:#005CC5\\\">1000</span><span style=\\\"color:#6A737D\\\">          # Optional Configuration. Default value is 1000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingReporterBufferSize = </span><span style=\\\"color:#005CC5\\\">10000</span><span style=\\\"color:#6A737D\\\">            # Optional Configuration. Default value is 10000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">isTraceLoggingEnabled = </span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#6A737D\\\">                # Optional Configuration. Default value is false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">isPayloadLoggingEnabled = </span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#6A737D\\\">              # Optional Configuration. Default value is false</span></span></code></pre>\"],[1475250189,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">observe</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsEnabled=</span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsReporter=</span><span style=\\\"color:#032F62\\\">\\\"moesif\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">moesif</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">applicationId = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;MOESIF_APPLICATION_ID>\\\"</span><span style=\\\"color:#6A737D\\\">     # Mandatory Configuration.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">reporterBaseUrl = </span><span style=\\\"color:#032F62\\\">\\\"https://api.moesif.net\\\"</span><span style=\\\"color:#6A737D\\\">   # Optional Configuration. Default value is 'https://api.moesif.net'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsReporterFlushInterval = </span><span style=\\\"color:#005CC5\\\">15000</span><span style=\\\"color:#6A737D\\\">         # Optional Configuration. Default value is 15000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsReporterClientTimeout = </span><span style=\\\"color:#005CC5\\\">10000</span><span style=\\\"color:#6A737D\\\">         # Optional Configuration. Default value is 10000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">isTraceLoggingEnabled = </span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#6A737D\\\">                # Optional Configuration. Default value is false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">isPayloadLoggingEnabled = </span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#6A737D\\\">              # Optional Configuration. Default value is false</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Additional attributes for metrics</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">moesif</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">additionalAttributes</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">key1 = </span><span style=\\\"color:#032F62\\\">\\\"value1\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">key2 = </span><span style=\\\"color:#032F62\\\">\\\"value2\\\"</span></span></code></pre>\"],[-1730807477,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">services</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  otelcol</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    image</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">otel/opentelemetry-collector-contrib:0.132.0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    container_name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">otelcol</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    command</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"--config\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"/etc/otelcol.yaml\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    environment</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      MOESIF_APP_ID</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;MOESIF_APPLICATION_ID>\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    ports</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">\\\"4317:4317\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">\\\"4318:4318\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    volumes</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">./otelcol.yaml:/etc/otelcol.yaml:ro</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    networks</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">otelnet</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  fluent-bit</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    image</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">fluent/fluent-bit:3.0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    container_name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">fluent-bit</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    depends_on</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">otelcol</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    ports</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">\\\"2020:2020\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    volumes</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">      # Mount the local log directory into the container</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">&#x3C;ballerina-log-path>:/app/logs:ro</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    networks</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">otelnet</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">networks</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  otelnet</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    driver</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">bridge</span></span></code></pre>\"],[-1901594840,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>[SERVICE]</span></span>\\n<span class=\\\"line\\\"><span>    Flush         1</span></span>\\n<span class=\\\"line\\\"><span>    Log_Level     debug</span></span>\\n<span class=\\\"line\\\"><span>    Daemon        off</span></span>\\n<span class=\\\"line\\\"><span>    HTTP_Server   On</span></span>\\n<span class=\\\"line\\\"><span>    HTTP_Listen   0.0.0.0</span></span>\\n<span class=\\\"line\\\"><span>    HTTP_Port     2020</span></span>\\n<span class=\\\"line\\\"><span></span></span>\\n<span class=\\\"line\\\"><span># Read logs from local Ballerina app</span></span>\\n<span class=\\\"line\\\"><span>[INPUT]</span></span>\\n<span class=\\\"line\\\"><span>    Name              tail</span></span>\\n<span class=\\\"line\\\"><span>    Path              /app/logs/app.log</span></span>\\n<span class=\\\"line\\\"><span>    Tag               ballerina.*</span></span>\\n<span class=\\\"line\\\"><span>    Read_from_Head    true</span></span>\\n<span class=\\\"line\\\"><span>    Skip_Long_Lines   On</span></span>\\n<span class=\\\"line\\\"><span>    Skip_Empty_Lines  On</span></span>\\n<span class=\\\"line\\\"><span>    Refresh_Interval  1</span></span>\\n<span class=\\\"line\\\"><span></span></span>\\n<span class=\\\"line\\\"><span># Add metadata</span></span>\\n<span class=\\\"line\\\"><span>[FILTER]</span></span>\\n<span class=\\\"line\\\"><span>    Name         modify</span></span>\\n<span class=\\\"line\\\"><span>    Match        ballerina.*</span></span>\\n<span class=\\\"line\\\"><span>    Add          service.name ballerina-service</span></span>\\n<span class=\\\"line\\\"><span>    Add          deployment.environment prod</span></span>\\n<span class=\\\"line\\\"><span></span></span>\\n<span class=\\\"line\\\"><span># Convert to OTEL format and send to collector</span></span>\\n<span class=\\\"line\\\"><span>[OUTPUT]</span></span>\\n<span class=\\\"line\\\"><span>    Name          opentelemetry</span></span>\\n<span class=\\\"line\\\"><span>    Match         ballerina.*</span></span>\\n<span class=\\\"line\\\"><span>    Host          otelcol</span></span>\\n<span class=\\\"line\\\"><span>    Port          4318</span></span>\\n<span class=\\\"line\\\"><span>    Logs_uri      /v1/logs</span></span>\\n<span class=\\\"line\\\"><span>    Log_response_payload True</span></span>\\n<span class=\\\"line\\\"><span>    Tls           Off</span></span>\\n<span class=\\\"line\\\"><span>    Tls.verify    Off</span></span>\\n<span class=\\\"line\\\"><span></span></span>\\n<span class=\\\"line\\\"><span># Debug output to see what's being processed</span></span>\\n<span class=\\\"line\\\"><span>[OUTPUT]</span></span>\\n<span class=\\\"line\\\"><span>    Name          stdout</span></span>\\n<span class=\\\"line\\\"><span>    Match         ballerina.*</span></span>\\n<span class=\\\"line\\\"><span>    Format        json_lines</span></span></code></pre>\"],[1367545545,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">receivers</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  otlp</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    protocols</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      grpc</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        endpoint</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"0.0.0.0:4317\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      http</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        endpoint</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"0.0.0.0:4318\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">processors</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  resource</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    attributes</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#22863A\\\">key</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">service.name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        value</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">ballerina-service</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        action</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">upsert</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#22863A\\\">key</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">deployment.environment</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        value</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">prod</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        action</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">upsert</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  transform/severity_from_message</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    log_statements</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#22863A\\\">context</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">log</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        statements</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">          # Set default severity to INFO for all logs first</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_number, 9) where body != nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_text, \\\"INFO\\\") where body != nil</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">          # Try to parse JSON body, but handle parsing errors gracefully</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(cache[\\\"is_json\\\"], false)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(cache[\\\"is_json\\\"], true) where body != nil and IsMatch(body, \\\"^\\\\\\\\s*\\\\\\\\{\\\")</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">          # For JSON logs, parse and extract level</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(cache[\\\"parsed_body\\\"], ParseJSON(body)) where cache[\\\"is_json\\\"] == true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">          # Override with specific levels based on JSON level field</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_number, 1) where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"TRACE\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_text, \\\"TRACE\\\") where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"TRACE\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_number, 5) where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"DEBUG\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_text, \\\"DEBUG\\\") where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"DEBUG\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_number, 9) where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"INFO\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_text, \\\"INFO\\\") where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"INFO\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_number, 13) where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"WARN\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_text, \\\"WARN\\\") where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"WARN\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_number, 17) where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"ERROR\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_text, \\\"ERROR\\\") where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"ERROR\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_number, 21) where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"FATAL\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          - </span><span style=\\\"color:#032F62\\\">set(severity_text, \\\"FATAL\\\") where cache[\\\"is_json\\\"] == true and cache[\\\"parsed_body\\\"][\\\"level\\\"] == \\\"FATAL\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  batch</span><span style=\\\"color:#24292E\\\">: {}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">exporters</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">  # OTLP over HTTP to Moesif</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  otlphttp</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    endpoint</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"https://api.moesif.net\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    logs_endpoint</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"https://api.moesif.net/v1/logs\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    headers</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      X-Moesif-Application-Id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;MOESIF_APPLICATION_ID>\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    compression</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">none</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    timeout</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">10s</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    sending_queue</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      enabled</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      num_consumers</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      queue_size</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">512</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    retry_on_failure</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      enabled</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      initial_interval</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">1s</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      max_interval</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">10s</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      max_elapsed_time</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">0s</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">service</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  telemetry</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    logs</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      level</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">debug</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  pipelines</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    logs</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      receivers</span><span style=\\\"color:#24292E\\\">:  [</span><span style=\\\"color:#032F62\\\">otlp</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      processors</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">resource</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">transform/severity_from_message</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">batch</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      exporters</span><span style=\\\"color:#24292E\\\">:  [</span><span style=\\\"color:#032F62\\\">otlphttp</span><span style=\\\"color:#24292E\\\">]</span></span></code></pre>\"],[-1573884278,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">log</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">format = </span><span style=\\\"color:#032F62\\\">\\\"json\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">log</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">destinations</span><span style=\\\"color:#24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Replace /path/to/your/ballerina/logs with the absolute path to the Ballerina application's log directory</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">path = </span><span style=\\\"color:#032F62\\\">\\\"/path/to/your/ballerina/logs/app.log\\\"</span></span></code></pre>\"]]"},"__N_SSG":true}