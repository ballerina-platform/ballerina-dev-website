{"pageProps":{"frontmatter":{"title":"Observe metrics and tracing using DataDog","description":"See how Ballerina supports observability by exposing itself via metrics and tracing to DataDog.","keywords":"ballerina, observability, metrics, tracing, datadog","permalink":"/learn/supported-observability-tools-and-platforms/datadog/","active":"datadog","intro":"Users can observe Ballerina programs with [DataDog](https://www.datadoghq.com/), which is a comprehensive observability and monitoring platform for cloud-scale applications. It provides developers, IT operations teams, and business users with tools to monitor, troubleshoot, and optimize performance across their entire technology stack, including applications, servers, databases, and services. Both metrics and tracing in Ballerina can be viewed with DataDog."},"content":"\nThe sample [shop service](/learn/overview-of-ballerina-observability/#example-observe-a-ballerina-service) will be used in this guide. Follow the steps given below to observe Ballerina tracing and metrics in DataDog.\n\nCreate a new account in DataDog. Select a billing plan according to your needs (A free plan is also included).\n\nThen follow the steps below to set up your Datadog account to view metrics and tracing provided by Ballerina.\n\n## Step 1 - Create a DataDog account and  an API key\n\n1. Add Prometheus to the Integrations for your account\n\n   You need to add Prometheus in the Integrations. Please go to the **Integrations** tab and search for Prometheus.\n\n   ![Adding Prometheus in DataDog Integrations](/learn/images/datadog-add-prometheus.png \"Adding Prometheus in DataDog Integrations\")\n\n2. Create an API key\n\n    You need to create an API key for the DataDog agent. To create an API key,\n\n    > **Click Profile → Organization Settings → API keys**\n\n    ![Creating an API key in DataDog](/learn/images/datadog-creating-api-key.png \"Creating an API key in DataDog\")\n\n## Step 2 - Set up the DataDog agent\n\nAfter setting up your DataDog account, you need to set up a DataDog Agent in your instance.\n\nYou can follow this [documentation](https://docs.datadoghq.com/agent/?tab=Linux) to get started with the DataDog agent on your local machine.\n\nYou need to include the API key you generated in your DataDog account to `datadog.yaml` in the `datadog-agent/etc` folder.\n\nThen follow the steps below to configure metrics and tracing data publishing to DataDog.\n\n1. Add configuration for metrics\n\n    Once you add Prometheus by following step 1, you will get a guide to configure a DataDog agent in your instance.\n\n    ![Prometheus configurations for DataDog agent](/learn/images/datadog-agent-prometheus-configurations.png \"Prometheus configurations for DataDog agent\")\n\n    You can follow the instructions given in the above configuration to set up a DataDog agent.\n\n    A sample of the conf.yaml file which you should include in the prometheus.d folder can be found here.\n\n    ```yaml\n    init_config:\n\n    instances:\n      - prometheus_url: http://localhost:9797/metrics\n        namespace: ballerina\n        metrics:\n          - response_time_seconds_value\n          - response_time_seconds_max\n          - response_time_seconds_min \n          - response_time_seconds_mean  \n          - response_time_seconds_stdDev\n          - response_time_seconds\n          - response_time_nanoseconds_total_value\n          - requests_total_value\n          - response_errors_total_value \n          - inprogress_requests_value\n          - kafka_publishers_value\n          - kafka_consumers_value\n          - kafka_errors_value  \n        headers:\n        Accept: \"text/plain; version=0.0.4\"\n    ```\n\n2. Add configuration for tracing\n\n    You need to use the following configurations in the `datadog.yaml`.\n\n    To view traces in DataDog, we need to enable the APM (Application Performance Monitoring) in your DataDog agent.\n\n    ```yaml\n    apm_config:\n    enabled: true\n    ```\n\n    Ballerina uses OpenTelemetry to provide traces. Therefore, we need to set up OpenTelemetry configurations as follows.\n\n    ```yaml\n    otlp_config:\n        receiver:\n            protocols:\n                grpc:\n                endpoint: 0.0.0.0:4317\n    ```\n\n## Step 3 - Import Ballerina Prometheus and Jaeger extensions\n\nTo include the Prometheus and Jaeger extensions into the executable, the `ballerinax/prometheus` and `ballerinax/jaeger` modules need to be imported into your Ballerina project `main.bal` file.\n\n```ballerina\nimport ballerinax/prometheus as _;\nimport ballerinax/jaeger as _;\n```\n\nTo support Prometheus as the metrics reporter, an HTTP endpoint starts with the context of `/metrics` in default port 9797 when starting the Ballerina service.\n\nJaeger extension has an `Opentelemetry GRPC Span Exporter` which will push tracing data as batches to the endpoint (default - http://localhost:4317) in opentelemetry format.\n\n## Step 4 - Configure Ballerina runtime configurations\n\nTracing and metrics can be enabled in your Ballerina project using configurations similar to the following in your `Config.toml` file.\n\n```toml\n[ballerina.observe]\ntracingEnabled=true\ntracingProvider=\"jaeger\"\nmetricsEnabled=true\nmetricsReporter=\"prometheus\"\n\n[ballerinax.prometheus]\nport=9797\nhost=\"0.0.0.0\"\n\n[ballerinax.jaeger]\nagentHostname=\"localhost\"\nagentPort=4317\nsamplerType=\"const\"\nsamplerParam=1.0\nreporterFlushInterval=2000\nreporterBufferSize=1000\n```\n\nThe table below provides the descriptions of each configuration option and possible values that can be assigned.\n\nConfiguration key | Description | Default value | Possible values \n--- | --- | --- | --- \nballerinax.prometheus. port | The value of the port to which the '/metrics' service will bind. This service will be used by Prometheus to scrape the information of the Ballerina service. | `9797` | Any suitable value for port 0 - 0 - 65535. However, within that range, ports 0 - 1023 are generally reserved for specific purposes, therefore it is advisable to select a port without that range. \nballerinax.prometheus. host | The name of the host to which the '/metrics' service will bind. This service will be used by Prometheus to scrape the information of the Ballerina service. | `0.0.0.0` | IP or Hostname or 0.0.0.0 of the node in which the Ballerina service is running.\nballerinax.jaeger. agentHostname | Hostname of the Jaeger agent | localhost | IP or hostname of the Jaeger agent. If it is running on the same node as Ballerina, it can be localhost. \nballerinax.jaeger. agentPort | Port of the Jaeger agent | 4317 | The port on which the Jaeger agent is listening.\nballerinax.jaeger. samplerType | Type of the sampling methods used in the Jaeger tracer. | const | `const`, `probabilistic`, or `ratelimiting`.\nballerinax.jaeger. samplerParam | It is a floating value. Based on the sampler type, the effect of the sampler param varies | 1.0 | For `const` `0` (no sampling) or `1` (sample all spans), for `probabilistic` `0.0` to `1.0`, for `ratelimiting` any positive integer (rate per second).\nballerinax.jaeger. reporterFlushInterval | The Jaeger client will be sending the spans to the agent at this interval. | 2000 | Any positive integer value.\nballerinax.jaeger. reporterBufferSize | Queue size of the Jaeger client. | 1000 | Any positive integer value.\n\n## Step 5 - Run the Ballerina service\n\nWhen Ballerina observability is enabled, the Ballerina runtime collects tracing and metrics data and will be published to DataDog.\n\nRun the following command to start the Ballerina service.\n\n```\n$ bal run\n\nCompiling source\n\nRunning executable\n\nballerina: started Prometheus HTTP listener 0.0.0.0:9797\nballerina: started publishing traces to Jaeger on localhost:4317\n```\n\n## Step 6 - Send requests\n \nSend requests to <http://localhost:8090/shop/products>.\n\nExample cURL commands:\n\n```\n$ curl -X GET http://localhost:8090/shop/products\n```\n```\n$ curl -X POST http://localhost:8090/shop/product \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"id\": 4, \n    \"name\": \"Laptop Charger\", \n    \"price\": 50.00\n}'\n```\n```\n$ curl -X POST http://localhost:8090/shop/order \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"productId\": 1, \n    \"quantity\": 1\n}'\n```\n```\n$ curl -X GET http://localhost:8090/shop/order/0\n```\n\n## Step 7 - View metrics on DataDog\n\nYou can observe the metrics in the DataDog platform under the `Metrics` tab in the left navigation.\n\n![Metrics Explorer in DataDog](/learn/images/datadog-metrics-explorer.png \"Metrics Explorer in DataDog\")\n\nYou can add filters and use functions in the DataDog to visualize what you want with the metrics provided by Ballerina.\n\nBallerina provides a [dashboard](https://raw.githubusercontent.com/ballerina-platform/module-ballerinax-prometheus/refs/heads/main/metrics-dashboards/datadog/ballerina_metrics_dashboard.json) in the DataDog to observe metrics in Ballerina applications.\n\nYou can add a new dashboard in the DataDog under the `Dashboards` tab in the left navigation. After creating the new dashboard, go to the `Configure` tab in the dashboard. Import the `dashboard.json` file provided above.\n\n![Importing a dashboard json](/learn/images/datadog-importing-dashboard.png \"Importing a dashboard json\")\n\nThe Ballerina Dashboard in the DataDog will be displayed as below.\n\n![Ballerina Dashboard in DataDog](/learn/images/datadog-metrics-dashboard-1.png \"Ballerina Dashboard in DataDog\")\n![Ballerina Dashboard in DataDog](/learn/images/datadog-metrics-dashboard-2.png \"Ballerina Dashboard in DataDog\")\n\n## Step 8 - View tracing on DataDog\n\nTo view traces of the Ballerina application, go to **APM → Traces** in the DataDog.\n\n![Trace Explorer in DataDog](/learn/images/datadog-trace-explorer.png \"Trace Explorer in DataDog\")\n\nYou can filter the traces with the service name, resource, operation name, span kind, etc.\n\n![Filter traces in DataDog](/learn/images/datadog-filter-traces.png \"Filter traces in DataDog\")\n\nOnce you select a trace, you can get more information with the tags attached to the span.\n\n![Span tags for a given span](/learn/images/datadog-span-tags.png \"Span tags for a given span\")\n","id":"datadog","sub":"observability","third":"supported-observability-tools-and-platforms","slug":"observability/supported-observability-tools-and-platforms/datadog","codes":"[[-1555166655,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">init_config</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">instances</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  - </span><span style=\\\"color:#22863A\\\">prometheus_url</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">http://localhost:9797/metrics</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    namespace</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">ballerina</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    metrics</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">response_time_seconds_value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">response_time_seconds_max</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">response_time_seconds_min</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">response_time_seconds_mean</span><span style=\\\"color:#24292E\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">response_time_seconds_stdDev</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">response_time_seconds</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">response_time_nanoseconds_total_value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">requests_total_value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">response_errors_total_value</span><span style=\\\"color:#24292E\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">inprogress_requests_value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">kafka_publishers_value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">kafka_consumers_value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">kafka_errors_value</span><span style=\\\"color:#24292E\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    headers</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    Accept</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"text/plain; version=0.0.4\\\"</span></span></code></pre>\"],[-847100862,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">apm_config</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">enabled</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">true</span></span></code></pre>\"],[-910465930,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">otlp_config</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    receiver</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        protocols</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            grpc</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            endpoint</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">0.0.0.0:4317</span></span></code></pre>\"],[718680358,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/prometheus </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> _;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/jaeger </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> _;</span></span></code></pre>\"],[-1744411411,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">observe</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingEnabled=</span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">tracingProvider=</span><span style=\\\"color:#032F62\\\">\\\"jaeger\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsEnabled=</span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsReporter=</span><span style=\\\"color:#032F62\\\">\\\"prometheus\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">prometheus</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">port=</span><span style=\\\"color:#005CC5\\\">9797</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">host=</span><span style=\\\"color:#032F62\\\">\\\"0.0.0.0\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">jaeger</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">agentHostname=</span><span style=\\\"color:#032F62\\\">\\\"localhost\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">agentPort=</span><span style=\\\"color:#005CC5\\\">4317</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">samplerType=</span><span style=\\\"color:#032F62\\\">\\\"const\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">samplerParam=</span><span style=\\\"color:#005CC5\\\">1.0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">reporterFlushInterval=</span><span style=\\\"color:#005CC5\\\">2000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">reporterBufferSize=</span><span style=\\\"color:#005CC5\\\">1000</span></span></code></pre>\"]]"},"__N_SSG":true}