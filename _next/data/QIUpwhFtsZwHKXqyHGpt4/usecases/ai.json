{"pageProps":{"samples":{"bring-text-alive-with-openai-chats":{"frontmatter":{"title":"Bring text alive with the chat, completions, edits, and moderation APIs of Azure and OpenAI","description":"Azure and OpenAIâ€™s text manipulation APIs allow you to bring text alive and program them easily. Ballerina connectors for these APIs give you type safe, structured ways to build applications quickly.","url":"","image":""},"code":""},"concurrency-simplified-for-ai-development":{"frontmatter":{"title":"Concurrency simplified for AI development","description":"Ballerina's concurrency model is ideal for writing API-powered AI applications. Its sequence diagrams and concurrency control capabilities make it easy to manage and visualize complex operations leading to more efficient and reliable AI solutions.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/create_and_send_customized_greeting_cards_using_openai/service.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">fork</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Generate greeting text and design in parallel</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">worker</span><span style=\"color: #24292E\"> greetingWorker </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> prompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Generate a greeting for a/an ${</span><span style=\"color: #24292E\">occasion</span><span style=\"color: #032F62\">}</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                .${&quot;</span><span style=\"color: #005CC5\">\\n</span><span style=\"color: #032F62\">&quot;}Special notes: ${</span><span style=\"color: #24292E\">specialNotes</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest textPrompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            prompt,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">100</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openaiText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">textPrompt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">worker</span><span style=\"color: #24292E\"> imageWorker </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> prompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Greeting card design for ${</span><span style=\"color: #24292E\">occasion</span><span style=\"color: #032F62\">}, ${</span><span style=\"color: #24292E\">specialNotes</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateImageRequest imagePrompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            prompt</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">ImagesResponse imageRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openaiImages</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">images</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">generations.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">imagePrompt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> imageRes.data[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].url;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"create-ai-powered-apis":{"frontmatter":{"title":"Create AI-powered APIs, automations, and event handlers","description":"Effortlessly tackle any AI-powered API integration by leveraging the network abstractions of Ballerina to create APIs, automations, and event handlers for your applications.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/question_answering_based_on_context_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> / </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">8080</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">map&lt;</span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> documents </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {};</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">map&lt;</span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\">[]</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> docEmbeddings </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">init</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        sheets</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Range range </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> gSheets</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">getRange</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">sheetId</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">sheetName</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;A2:B&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">//Populate the dictionaries with the content and embeddings for each doc.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">foreach </span><span style=\"color: #24292E\">any[] row </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> range.values {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> title </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">row[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> content </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">row[</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.documents[title] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> content;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.docEmbeddings[title] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">getEmbedding</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`${</span><span style=\"color: #24292E\">title</span><span style=\"color: #032F62\">} ${&quot;</span><span style=\"color: #005CC5\">\\n</span><span style=\"color: #032F62\">&quot;} ${</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                                                   </span><span style=\"color: #24292E\">content</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">answer</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">question</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">?|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> prompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">constructPrompt</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">question</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.documents, </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                        </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.docEmbeddings);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest prmt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> prompt,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">prmt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"create-images-with-dall-e":{"frontmatter":{"title":"Create images with DALL-E and Stable Diffusion","description":"Stable Diffusion and OpenAIâ€™s DALL-E image APIs generate or edit images with text based instructions. Ballerinaâ€™s powerful standard library makes uploading, downloading and processing images a breeze.","url":"","image":""},"code":""},"dalle1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    sheets</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client gSheets </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: googleAccessToken}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIImages </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    drive</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client gDrive </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: googleAccessToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    sheets</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Column range </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> gSheets</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">getColumn</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">sheetId</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">sheetName</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;A&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">foreach </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> cell </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> range.values {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> prompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> cell.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateImageRequest imagePrompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            prompt,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            response_format</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;b64_json&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">ImagesResponse imageRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIImages</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">images</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">generations.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">imagePrompt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? encodedImage </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> imageRes.data[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].b64_json;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> encodedImage </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Failed to generate image for prompt: ${</span><span style=\"color: #24292E\">prompt</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Decode the Base64 string and store image in Google Drive</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[] imageBytes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> array</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fromBase64</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">encodedImage</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        _ </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> gDrive</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">uploadFileUsingByteArray</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">imageBytes</span><span style=\"color: #24292E\">, </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`${</span><span style=\"color: #24292E\">cell</span><span style=\"color: #032F62\">}.png`</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">gDriveFolderId</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"dalle2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> / </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">products</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">int</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Get the product details from the last inserted row of the Google Sheet.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        sheets</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Range range </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> gsheets</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">getRange</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">googleSheetId</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;Sheet1&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;A2:F&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> [name, benefits, features, productType] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">getProduct</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">range</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Generate a product description from OpenAI for a given product name.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest textPrompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`generate a product descirption in 250 words about ${</span><span style=\"color: #24292E\">name</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">100</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">textPrompt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Generate a product image from OpenAI for the given product.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateImageRequest imagePrmt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`${</span><span style=\"color: #24292E\">name</span><span style=\"color: #032F62\">}, </span></span>\n<span class=\"line\"><span style=\"color: #032F62\">            ${</span><span style=\"color: #24292E\">benefits</span><span style=\"color: #032F62\">}, </span></span>\n<span class=\"line\"><span style=\"color: #032F62\">            ${</span><span style=\"color: #24292E\">features</span><span style=\"color: #032F62\">}`</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">ImagesResponse imageRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIImages</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">images</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">generations.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">imagePrmt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Create a product in Shopify.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        shopify</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateProduct product </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            product</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                title</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> name,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                body_html</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                tags</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> features,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                product_type</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> productType,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [{</span><span style=\"color: #6F42C1\">src</span><span style=\"color: #24292E\">: imageRes.data[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].url}]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        shopify</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">ProductObject prodObj </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> shopify</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">createProduct</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">product</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\">? pid </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> prodObj?.product?.id;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> pid </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Error in creating product in Shopify&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> pid;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"dalle3":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">GreetingDetails</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> occasion;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> recipientEmail;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> emailSubject;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> specialNotes?;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> / </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">8080</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">greetingCard</span><span style=\"color: #24292E\">(@</span><span style=\"color: #005CC5\">http</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">Payload</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">GreetingDetails</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">req</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> occasion </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> req.occasion;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> specialNotes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> req.specialNotes </span><span style=\"color: #D73A49\">?:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">fork</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6A737D\">// Generate greeting text and design in parallel</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">worker</span><span style=\"color: #24292E\"> greetingWorker </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest textPrompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`Generate a greeting for a/an ${</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                    </span><span style=\"color: #24292E\">occasion</span><span style=\"color: #032F62\">}.${&quot;</span><span style=\"color: #005CC5\">\\n</span><span style=\"color: #032F62\">&quot;}Special notes: ${</span><span style=\"color: #24292E\">specialNotes</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">100</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">textPrompt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">worker</span><span style=\"color: #24292E\"> imageWorker </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateImageRequest imagePrompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`Greeting card design for ${</span><span style=\"color: #24292E\">occasion</span><span style=\"color: #032F62\">}, ${</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                    </span><span style=\"color: #24292E\">specialNotes</span><span style=\"color: #032F62\">}`</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                images</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">ImagesResponse imageRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIImages</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">images</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">generations.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">imagePrompt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> imageRes.data[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].url;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? greetingWorker;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? imageWorker;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">} resutls </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">wait</span><span style=\"color: #24292E\"> {greetingWorker, imageWorker};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? greeting </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> resutls.greetingWorker;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? imageURL </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> resutls.imageWorker;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> greeting </span><span style=\"color: #D73A49\">!is</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">||</span><span style=\"color: #24292E\"> imageURL </span><span style=\"color: #D73A49\">!is</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Error while generating greeting card&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Send an email with the greeting and the image using the email connector</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        gmail</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">MessageRequest messageRequest </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            recipient</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> req.recipientEmail,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            subject</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> req.emailSubject,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            messageBody</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`&lt;p&gt;${</span><span style=\"color: #24292E\">greeting</span><span style=\"color: #032F62\">}&lt;/p&gt; &lt;br/&gt; &lt;img src=&quot;${</span><span style=\"color: #24292E\">imageURL</span><span style=\"color: #032F62\">}&quot;&gt;`</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            contentType</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> gmail:TEXT_HTML</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        _ </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> gmail</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">sendMessage</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">messageRequest</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">userId</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;me&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"dalle4":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(*</span><span style=\"color: #E36209\">EmailDetails</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">emailDetails</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">fork</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">worker</span><span style=\"color: #24292E\"> poemWorker </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest textPrompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`Generate a creative poem on the topic ${</span><span style=\"color: #24292E\">emailDetails</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">topic</span><span style=\"color: #032F62\">}.`</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1000</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">textPrompt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">worker</span><span style=\"color: #24292E\"> imageWorker </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[]</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            stabilityai</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">TextToImageRequestBody payload </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                {text_prompts</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [{</span><span style=\"color: #032F62\">&quot;text&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> emailDetails.topic, </span><span style=\"color: #032F62\">&quot;weight&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">}]};</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            stabilityai</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">ImageRes listResult </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> stabilityAI</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">v1</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">generation</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">stable\\</span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\">diffusion\\</span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\">v1</span><span style=\"color: #D73A49\">/</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                text\\</span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\">to\\</span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\">image.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">payload</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? imageBytesString </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> listResult.artifacts[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].&#39;base64;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> imageBytesString </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Image byte string is empty.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[] imageBytes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> imageBytesString.</span><span style=\"color: #6F42C1\">toBytes</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> decodedImage </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> mime</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">base64Decode</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">imageBytes</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> decodedImage </span><span style=\"color: #D73A49\">!is</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[] {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Error in decoding the image byte string.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> decodedImage;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? poemWorker;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[]</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> imageWorker;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">} results </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">wait</span><span style=\"color: #24292E\"> {poemWorker, imageWorker};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? poem </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> results.poemWorker;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[]? image </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> results.imageWorker;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> poem </span><span style=\"color: #D73A49\">!is</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">||</span><span style=\"color: #24292E\"> image </span><span style=\"color: #D73A49\">!is</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[] {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Error while generating the poem and the image.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Error? fileWrite </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fileWriteBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;./image.png&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">image</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> fileWrite </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Error {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Error while writing the image to a file.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> messageBody </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> poem.</span><span style=\"color: #6F42C1\">trim</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">RegExp r </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> re </span><span style=\"color: #032F62\">`</span><span style=\"color: #005CC5\">\\n</span><span style=\"color: #032F62\">`</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    messageBody </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> r.</span><span style=\"color: #6F42C1\">replaceAll</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">messageBody</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;&lt;br&gt;&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    gmail</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">MessageRequest messageRequest </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        recipient</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> emailDetails.recipientEmail,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        subject</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> emailDetails.topic,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        messageBody,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        contentType</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> gmail:TEXT_HTML,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        inlineImagePaths</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [{</span><span style=\"color: #6F42C1\">imagePath</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;./image.png&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #6F42C1\">mimeType</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;image/png&quot;</span><span style=\"color: #24292E\">}]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    _ </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> gmail</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">sendMessage</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">messageRequest</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">userId</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;me&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"effort1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">/slack</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">8080</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">map&lt;</span><span style=\"color: #24292E\">ChatMessage[]</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> chatHistory </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">events</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Request request) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Response</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">!check</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">verifyRequest</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">request</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Request verification failed&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">map&lt;</span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> params </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> request.</span><span style=\"color: #6F42C1\">getFormParams</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? channelName </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> params[</span><span style=\"color: #032F62\">&quot;channel_name&quot;</span><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? requestText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> params[</span><span style=\"color: #032F62\">&quot;text&quot;</span><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> channelName </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">||</span><span style=\"color: #24292E\"> requestText </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Invalid values in the request parameters for channel_name or text&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        ChatMessage[] history </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.chatHistory[channelName] </span><span style=\"color: #D73A49\">?:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                            [{</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                                role</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> SYSTEM, </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                                content</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;You are an AI slack bot to assist with user questions.&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                            }];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        history.</span><span style=\"color: #6F42C1\">push</span><span style=\"color: #24292E\">({role</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> USER, content</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> requestText});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        chat</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Inline_response_200 completion </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> azureOpenAI</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">deployments</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">[deploymentId]</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">chat</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #E36209\">API_VERSION</span><span style=\"color: #24292E\">, {messages</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> history}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        chat</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Inline_response_200_message? response </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> completion.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].message;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? responseText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> response?.content;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> response </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">||</span><span style=\"color: #24292E\"> responseText </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Error in response generation&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        history.</span><span style=\"color: #6F42C1\">push</span><span style=\"color: #24292E\">({role</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> ASSISTANT, content</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> response.content});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Limit history to 25 messages to preserve token limit.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> history.</span><span style=\"color: #6F42C1\">length</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> MAX_MESSAGES {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            history </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> history.</span><span style=\"color: #6F42C1\">slice</span><span style=\"color: #24292E\">(history.</span><span style=\"color: #6F42C1\">length</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">MAX_MESSAGES</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.chatHistory[channelName] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> history;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> {response_type</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;in_channel&quot;</span><span style=\"color: #24292E\">, text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> responseText};</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"effort2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> / </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">8080</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">init</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        sheets</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Range range </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> gSheets</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">getRange</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">sheetId</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">sheetName</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;A2:B&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        pinecone</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Vector[] vectors </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">foreach </span><span style=\"color: #24292E\">any[] row </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> range.values {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> title </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">row[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> content </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">row[</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\">[] vector </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">getEmbedding</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`${</span><span style=\"color: #24292E\">title</span><span style=\"color: #032F62\">} ${&quot;</span><span style=\"color: #005CC5\">\\n</span><span style=\"color: #032F62\">&quot;} ${</span><span style=\"color: #24292E\">content</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            vectors[vectors.</span><span style=\"color: #6F42C1\">length</span><span style=\"color: #24292E\">()] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                {id</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> title, values</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> vector, metadata</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span><span style=\"color: #032F62\">&quot;content&quot;</span><span style=\"color: #24292E\">: content}};</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        pinecone</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">UpsertResponse response </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> pineconeClient</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">vectors</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">upsert.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">({vectors, namespace</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> NAMESPACE});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> response.upsertedCount </span><span style=\"color: #D73A49\">!=</span><span style=\"color: #24292E\"> range.values.</span><span style=\"color: #6F42C1\">length</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Failed to insert embedding vectors to pinecone.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Successfully inserted embedding vectors to pinecone.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">answer</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">question</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">?|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> prompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">constructPrompt</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">question</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest prmt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> prompt,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2000</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">prmt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"effortlessly-create-impactful-business":{"frontmatter":{"title":"Effortlessly create impactful business use cases","description":"Take advantage of Ballerina's OpenAI, Azure, and VectorDB connectors to craft powerful solutions like Slack bots and Q&A bots that enhance customer engagement and optimize business operations.","url":"","image":""},"code":""},"fine-tune-models-with-your-own-data":{"frontmatter":{"title":"Fine-tune models with your data to create your own models","description":"OpenAIâ€™s fine tuning API lets you create a model that understands your world. Use Ballerinaâ€™s ability to easily integrate business APIs and systems to take your business data to fine-tune it and make that available for your business.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/finetune_openai_models/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    finetunes</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIFineTunes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    finetunes</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateFileRequest fileRequest </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        file</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            fileContent</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io:</span><span style=\"color: #6F42C1\">fileReadBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">TRAIN_DATA_FILE_PATH</span><span style=\"color: #24292E\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            fileName</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> TRAIN_DATA_FILE_NAME</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        purpose</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;fine-tune&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    finetunes</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">OpenAIFile fileResponse </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIFineTunes</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">files.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">fileRequest</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Training file uploaded successfully with ID: ${</span><span style=\"color: #24292E\">fileResponse</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">id</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    finetunes</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateFineTuneRequest fineTuneRequest </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        training_file</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> fileResponse.id,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;ada&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        n_epochs</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">4</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    finetunes</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">FineTune fineTuneResponse </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIFineTunes</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">fine\\</span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\">tunes.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">fineTuneRequest</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Fine-tune job started successfully with ID: ${</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                       </span><span style=\"color: #24292E\">fineTuneResponse</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">id</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"libraries-for-ai-operations":{"frontmatter":{"title":"Libraries for AI operations","description":"Built-in mathematical operations such as distance measures, optimizations, etc. are a common building block in AI use cases.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/compare_similarity_between_two_texts_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> embeddings</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIEmbeddings </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> text1 </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;What are you thinking?&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> text2 </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;What is on your mind?&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    embeddings</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateEmbeddingRequest embeddingReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-embedding-ada-002&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        input</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [text1, text2]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    embeddings</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateEmbeddingResponse embeddingRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIEmbeddings</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">embeddings.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">embeddingReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\">[] text1Embedding </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> embeddingRes.data[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].embedding;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\">[] text2Embedding </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> embeddingRes.data[</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">].embedding;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> similarity </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> vector</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">cosineSimilarity</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">text1Embedding</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">text2Embedding</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;The similarity between the given two texts : &quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">similarity</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"music1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">audioURL</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">toLanguage</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a HTTP client to download the audio file</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client audioEP </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">audioURL</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Response httpResp </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> audioEP</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[] audioBytes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> httpResp.</span><span style=\"color: #6F42C1\">getBinaryPayload</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fileWriteBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">AUDIO_FILE_PATH</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">audioBytes</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a request to translate the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateTranslationRequest translationsReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        file</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {fileContent: </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io:</span><span style=\"color: #6F42C1\">fileReadBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">AUDIO_FILE_PATH</span><span style=\"color: #24292E\">), fileName</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> AUDIO_FILE},</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;whisper-1&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Translates the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIAudio </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateTranscriptionResponse transcriptionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIAudio</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">audio</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">translations.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">translationsReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Audio text in English: &quot;</span><span style=\"color: #24292E\">, transcriptionRes.text);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a request to translate the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest completionReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`Translate the following text from English to ${</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                        </span><span style=\"color: #24292E\">toLanguage</span><span style=\"color: #032F62\">} : ${</span><span style=\"color: #24292E\">transcriptionRes</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">text</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        temperature</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0.7</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">256</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        top_p</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        frequency_penalty</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        presence_penalty</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Translates the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">completionReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? translatedText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> translatedText </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () { </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Failed to translate the given audio.&quot;</span><span style=\"color: #24292E\">);    </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    } </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Translated text: &quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">translatedText</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"music2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">podcastURL</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a HTTP client to download the audio file</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client podcastEP </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">podcastURL</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Response httpResp </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> podcastEP</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[] audioBytes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> httpResp.</span><span style=\"color: #6F42C1\">getBinaryPayload</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fileWriteBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">AUDIO_FILE_PATH</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">audioBytes</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a request to translate the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateTranscriptionRequest transcriptionsReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        file</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            fileContent</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> (</span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fileReadBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">AUDIO_FILE_PATH</span><span style=\"color: #24292E\">)).</span><span style=\"color: #6F42C1\">slice</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">BINARY_LENGTH</span><span style=\"color: #24292E\">), </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            fileName</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> AUDIO_FILE</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;whisper-1&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Converts the audio file to text (English) using OpenAI speach to text API</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIAudio </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateTranscriptionResponse transcriptionsRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIAudio</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">audio</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">transcriptions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">transcriptionsReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Text from the audio :&quot;</span><span style=\"color: #24292E\">, transcriptionsRes.text);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a request to summarize the text</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest textCompletionReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`Summarize the following text to 100 characters : ${</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                        </span><span style=\"color: #24292E\">transcriptionsRes</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">text</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        temperature</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0.7</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">256</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        top_p</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        frequency_penalty</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        presence_penalty</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Summarizes the text using OpenAI text completion API</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">textCompletionReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? summerizedText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;    </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> summerizedText </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">\t    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Failed to summarize the given audio.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Summarized text: &quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">summerizedText</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Tweet it out!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    twitter</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client twitter </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">twitterConfig</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> tweet </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> twitter</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">tweet</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">summerizedText</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Tweet: &quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">tweet</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"openai1":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">filePath</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> fileContent </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fileReadString</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">filePath</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Content: ${</span><span style=\"color: #24292E\">fileContent</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest textPrompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`Summarize:</span><span style=\"color: #005CC5\">\\n</span><span style=\"color: #032F62\">&quot; ${</span><span style=\"color: #24292E\">fileContent</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2000</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">textPrompt</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? summary </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> summary </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () { </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Failed to summarize the given text.&quot;</span><span style=\"color: #24292E\">);    </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    } </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Summary: ${</span><span style=\"color: #24292E\">summary</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"openai2":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">filePath</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">RetryConfig retryConfig </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        interval</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">5</span><span style=\"color: #24292E\">, </span><span style=\"color: #6A737D\">// Initial retry interval in seconds.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        count</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">, </span><span style=\"color: #6A737D\">// Number of retry attempts before stopping.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        backOffFactor</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2.0</span><span style=\"color: #24292E\"> </span><span style=\"color: #6A737D\">// Multiplier of the retry interval.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}, </span><span style=\"color: #E36209\">retryConfig</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateEditRequest editReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        input</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io:</span><span style=\"color: #6F42C1\">fileReadString</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">filePath</span><span style=\"color: #24292E\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        instruction</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Fix grammar and spelling mistakes.&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-edit-001&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateEditResponse editRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">edits.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">editReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? text </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> editRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> text </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () { </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Failed to correct grammar and spelling in the given text.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Corrected: ${</span><span style=\"color: #24292E\">text</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"openai3":{"frontmatter":{"title":"","description":"","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Get information on upcoming and recently released movies from TMDB</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> themoviedb</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client moviedb </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> themoviedb</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">Client</span><span style=\"color: #24292E\">({apiKey</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> moviedbApiKey});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    themoviedb</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">InlineResponse2001 upcomingMovies </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> moviedb</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">getUpcomingMovies</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Generate a creative tweet using Azure OpenAI   </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> prompt </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Instruction: Generate a creative and short tweet &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">&quot;below 250 characters about the following &quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #032F62\">&quot;upcoming and recently released movies. Movies: &quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">foreach </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> i </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">...</span><span style=\"color: #24292E\"> NO_OF_MOVIES {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        prompt </span><span style=\"color: #D73A49\">+=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`${</span><span style=\"color: #24292E\">i</span><span style=\"color: #032F62\">}. ${</span><span style=\"color: #24292E\">upcomingMovies</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">results</span><span style=\"color: #032F62\">[</span><span style=\"color: #24292E\">i</span><span style=\"color: #032F62\"> </span><span style=\"color: #D73A49\">-</span><span style=\"color: #032F62\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #032F62\">].</span><span style=\"color: #24292E\">title</span><span style=\"color: #032F62\">} `</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Deploymentid_completions_body completionsBody </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        prompt,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> MAX_TOKENS</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client azureOpenAI </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #E36209\">config</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {apiKey: openAIToken}},</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #E36209\">serviceUrl</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> serviceUrl</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Inline_response_200 completion </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> azureOpenAI</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">deployments</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">[deploymentId]</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #E36209\">API_VERSION</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">completionsBody</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? tweetContent </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> completion.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> tweetContent </span><span style=\"color: #D73A49\">is</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Failed to generate a tweet on upcoming and recently released movies.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> tweetContent.</span><span style=\"color: #6F42C1\">length</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> MAX_TWEET_LENGTH {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;The generated tweet exceeded the maximum supported character length.&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Tweet it out!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> twitter</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client twitter </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">twitterConfig</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    twitter</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Tweet tweet </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> twitter</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">tweet</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">tweetContent</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Tweet: &quot;</span><span style=\"color: #24292E\">, tweet.text);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"simplify-vector-database-management":{"frontmatter":{"title":"Simplify vector database management","description":"Ballerina comes with built-in connectors for vector databases, which are a common building block in AI use cases that support the storage and retrieval of high-dimensional vectors.","url":"https://github.com/ballerina-guides/ai-samples/blob/main/answer_questions_using_vector_search_weaviate/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> / </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">8080</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">answer</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">question</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> weaviate</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">JsonObject</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\">? {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Retrieve OpenAI embeddings for the input question</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        embeddings</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateEmbeddingResponse embeddingResponse </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openai</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">embeddings.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> MODEL,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                input</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> question</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\">[] vector </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> embeddingResponse.data[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].embedding;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// Querying Weaviate for the closest vector using GraphQL</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> graphQLQuery </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`{</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                    Get {</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                        ${</span><span style=\"color: #24292E\">CLASS_NAME</span><span style=\"color: #032F62\">} (</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                        nearVector: {</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                            vector: ${</span><span style=\"color: #24292E\">vector</span><span style=\"color: #032F62\">.</span><span style=\"color: #6F42C1\">toString</span><span style=\"color: #032F62\">()</span><span style=\"color: #032F62\">}</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                            }</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                            limit: 1</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                        ){</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                        question</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                        answer</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                        _additional {</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                            certainty,</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                            id</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                            }</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                        }</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                    }</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                                }`</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        weaviate</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">GraphQLResponse results </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> weaviate</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">graphql.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">({query</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> graphQLQuery});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> results.data;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"transcribe-speech-or-music-with-whisper":{"frontmatter":{"title":"Transcribe speech or music with Whisper","description":"OpenAIâ€™s Whisper API makes speech and music computable! Easily transcribe speech or music in any language into text. Ballerinaâ€™s powerful standard library makes manipulating audio files and processing the results trivially simple.","url":"","image":""},"code":""},"trivial-hosting-in-wso2-choreo-ipaas":{"frontmatter":{"title":"(Extra!) Trivial hosting in WSO2 Choreo iPaaS","description":"Manual integrations? Scheduled integrations (cron jobs)? Triggered integrations? Integrations as APIs? No problem! Write the code, attach the repo to WSO2 Choreo, and let it do the rest.","url":"https://wso2.com/choreo/ipaas/","image":"images/choreo-ipaas-image-v2.png"},"code":""},"why-is-ballerina-the-way-you-should-write-ai-applications":{"frontmatter":{"title":"Why is Ballerina the way you should write AI applications?","description":"For many years Python, a wonderful language, has been the de facto choice for data analytics, data science, and machine learning. But using LLMs to add AI to business applications is not about those problems anymore but more about prompt engineering, fine-tuning, calling APIs offered by hosted LLMs, chaining LLMs, and combining them with other APIs.<br/><br/>\nBallerina is your best choice for writing modern cloud-native applications that incorporate LLM-powered AI! ","url":"https://github.com/ballerina-guides/ai-samples/blob/main/convert_audio_to_text_and_translate_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">audioURL</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">translatingLanguage</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a HTTP client to download the audio file</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client audioEP </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">audioURL</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Response httpResp </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> audioEP</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[] audioBytes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> httpResp.</span><span style=\"color: #6F42C1\">getBinaryPayload</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fileWriteBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">AUDIO_FILE_PATH</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">audioBytes</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a request to translate the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateTranslationRequest translationsReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        file</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {fileContent: </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io:</span><span style=\"color: #6F42C1\">fileReadBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">AUDIO_FILE_PATH</span><span style=\"color: #24292E\">), fileName</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> AUDIO_FILE},</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;whisper-1&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Translates the audio file to text (English)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIAudio </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIKey}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    audio</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateTranscriptionResponse transcriptionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIAudio</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">audio</span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\">translations.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">translationsReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Audio text in English: &quot;</span><span style=\"color: #24292E\">, transcriptionRes.text);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Creates a request to translate the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionRequest completionReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-003&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        prompt</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`Translate the following text from English to ${</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">                        </span><span style=\"color: #24292E\">translatingLanguage</span><span style=\"color: #032F62\">} : ${</span><span style=\"color: #24292E\">transcriptionRes</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">text</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        temperature</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0.7</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        max_tokens</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">256</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        top_p</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        frequency_penalty</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        presence_penalty</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Translates the text from English to another language</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIKey}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateCompletionResponse completionRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">completions.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">completionReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> translatedText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> completionRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text.</span><span style=\"color: #6F42C1\">ensureType</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Translated text: &quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">translatedText</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"write-robust-api-powered-ai-applications":{"frontmatter":{"title":"Write robust API-powered AI applications","description":"Take on the unpredictable world of distributed systems with Ballerina's built-in language and standard library features. Writing robust API-powered AI applications is now a breeze for every developer, no matter the challenges!","url":"https://github.com/ballerina-guides/ai-samples/blob/main/correct_grammar_and_spelling_in_text_using_openai/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">filePath</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">RetryConfig retryConfig </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        interval</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">5</span><span style=\"color: #24292E\">, </span><span style=\"color: #6A737D\">// Initial retry interval in seconds.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        count</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">, </span><span style=\"color: #6A737D\">// Number of retry attempts before stopping.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        backOffFactor</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2.0</span><span style=\"color: #24292E\"> </span><span style=\"color: #6A737D\">// Multiplier of the retry interval.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client openAIText </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token: openAIToken}, </span><span style=\"color: #E36209\">retryConfig</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateEditRequest editReq </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        input</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io:</span><span style=\"color: #6F42C1\">fileReadString</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">filePath</span><span style=\"color: #24292E\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        instruction</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Fix grammar and spelling mistakes.&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        model</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;text-davinci-edit-001&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    text</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">CreateEditResponse editRes </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> openAIText</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">edits.</span><span style=\"color: #6F42C1\">post</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">editReq</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> text </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> editRes.choices[</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">].text.</span><span style=\"color: #6F42C1\">ensureType</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">println</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`Corrected: ${</span><span style=\"color: #24292E\">text</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"}}},"__N_SSG":true}