{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina Log Library\n\n_Authors_: @daneshk @MadhukaHarith92 @TharmiganK  \n_Reviewers_: @daneshk @ThisaruGuruge  \n_Created_: 2021/11/15  \n_Updated_: 2025/08/20  \n_Edition_: Swan Lake  \n\n## Introduction\n\nThis is the specification for the Log standard library of [Ballerina language](https://ballerina.io/), which provides APIs to log information when running applications.\n\nThe Log library specification has evolved and may continue to evolve in the future. The released versions of the specification can be found under the relevant Github tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the [Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback is always welcome. Any accepted proposal or any proposals under discussion can be found with the [Ballerina specification repository under `beps/lib-log`](https://github.com/ballerina-platform/ballerina-spec/tree/master/beps/lib-log).\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Logging](#2-logging)\n3. [Configure logging](#3-configure-logging)\n   * 3.1. [Configure root log level](#31-configure-root-log-level)\n   * 3.2. [Configure log format](#32-configure-log-format)\n   * 3.3. [Configure root log context](#33-configure-root-log-context)\n   * 3.4. [Configure root log destinations](#34-configure-root-log-destinations)\n4. [Contextual logging](#4-contextual-logging)\n   * 4.1. [Logger](#41-logger)\n   * 4.2. [Root logger](#42-root-logger)\n   * 4.3. [Child logger](#43-child-logger)\n     * 4.3.1. [Loggers with additional context](#431-loggers-with-additional-context)\n     * 4.3.2. [Loggers with unique logging configuration](#432-loggers-with-unique-logging-configuration)\n\n## 1. Overview\n\nThis specification elaborates on the functionalities available in the Log library. The Ballerina log module has four log levels with their priority in descending order as follows.\n\n1. `ERROR`\n2. `WARN`\n3. `INFO`\n4. `DEBUG`\n\n## 2. Logging\n\nThe Ballerina log module has 4 functions to log at the 4 levels; `printDebug()`, `printError()`, `printInfo()`, and `printWarn()`.\n\n```ballerina\nlog:printDebug(\"debug log\");\nlog:printError(\"error log\");\nlog:printInfo(\"info log\");\nlog:printWarn(\"warn log\");\n```\n\nOutput:\n\n```log\ntime=2025-08-20T08:49:05.482+05:30 level=DEBUG module=\"\" message=\"debug log\"\ntime=2025-08-20T08:49:05.483+05:30 level=ERROR module=\"\" message=\"error log\"\ntime=2025-08-20T08:49:05.484+05:30 level=INFO module=\"\" message=\"info log\"\ntime=2025-08-20T08:49:05.485+05:30 level=WARN module=\"\" message=\"warn log\"\n```\n\nOptionally, an error can be passed to the functions.\n\n```ballerina\nerror err = error(\"something went wrong!\", error(\"underlying issue\"), id = \"1234\");\nlog:printError(\"error log with cause\", err);\n```\n\nThis will print the error message along with the cause, stack trace and any other details added to the error.\n\nOutput:\n\n```log\ntime=2025-08-20T08:51:45.684+05:30 level=ERROR module=\"\" message=\"error log with cause\" error={\"causes\":[{\"message\":\"underlying issue\",\"detail\":{},\"stackTrace\":[{\"callableName\":\"main\",\"moduleName\":(),\"fileName\":\"test.bal\",\"lineNumber\":4}]}],\"message\":\"something went wrong!\",\"detail\":{\"id\":\"1234\"},\"stackTrace\":[{\"callableName\":\"main\",\"moduleName\":(),\"fileName\":\"test.bal\",\"lineNumber\":4}]}\n```\n\nUsers can pass any number of key/value pairs, which need to be displayed in the log message. The value can be of `anydata` type, a function pointer or a `PrintableRawTemplate`.\n\n```ballerina\nlog:printInfo(\"info log\", id = 845315, name = \"foo\", successful = true);\n\nlog:printInfo(\"info log\", current_time = isolated function() returns string { return time:utcToString(time:utcNow());});\n\nint id = 845315;\nstring name = \"foo\";\nlog:printInfo(`info log for id: ${id}`, ctx = `{name: ${name}}`);\n```\n\nOutput:\n\n```log\ntime=2025-08-20T08:53:29.973+05:30 level=INFO module=\"\" message=\"info log\" id=845315 name=\"foo\" successful=true\ntime=2025-08-20T08:53:29.987+05:30 level=INFO module=\"\" message=\"info log\" current_time=\"2025-08-20T03:23:29.989160Z\"\ntime=2025-08-20T08:53:29.998+05:30 level=INFO module=\"\" message=\"info log for id: 845315\" ctx=\"{name: foo}\"\n```\n\n## 3. Configure logging\n\n### 3.1. Configure root log level\n\nOnly the `INFO` and higher level logs are logged by default. The log level can be configured via a Ballerina configuration file.\n\nTo set the root logger log level to a different level (eg: `DEBUG`), place the entry given below in the `Config.toml` file.\n\n```toml\n[ballerina.log]\nlevel = \"DEBUG\"\n```\n\nEach module can also be assigned its own log level. To assign a log level to a module, provide the following entry in the `Config.toml` file.\n\n```toml\n[[ballerina.log.modules]]\nname = \"[ORG_NAME]/[MODULE_NAME]\"\nlevel = \"[LOG_LEVEL]\"\n```\n\n### 3.2. Configure log format\n\nBy default, log messages are logged to the console in the LogFmt format. To set the output format to JSON, place the entry given below in the `Config.toml` file.\n\n```toml\n[ballerina.log]\nformat = \"json\"\n```\n\nCurrently, only `json` and `logfmt` are supported as the log formats.\n\n### 3.3. Configure root log context\n\nThe root logger context can be configured in the `Config.toml` file. This context will be included in all log messages by default.\n\n```toml\n[ballerina.log]\nkeyValues = {env = \"prod\", nodeId = \"delivery-svc-001\"}\n```\n\n### 3.4. Configure root log destinations\n\nThe root logger destinations can be configured in the `Config.toml` file. This will determine where the log messages are sent.\n\nDestinations can be specified as `stderr`(standard error stream) or `stdout`(standard output stream) or a file destination. The default destination is `stderr`.\n\nThe file destination is defined as follows:\n\n```ballerina\npublic enum FileOutputMode {\n    TRUNCATE,\n    APPEND\n};\n\npublic type FileOutputDestination record {\n    readonly FILE 'type = FILE;\n    string path;\n    FileOutputMode mode = APPEND;\n};\n```\n\n> **Note**:\n>\n> - The file destination only supports file paths with `.log` extension.\n> - The file output mode can be configured to either `TRUNCATE` or `APPEND`. Both modes will create the file if it doesn't exist. But `TRUNCATE` will clear the file contents before writing, while `APPEND` will add to the existing contents.\n> - The `log:setOutputFile()` function can set the destination at runtime. But this function usage is deprecated and the destination files should be provided using the above configuration at startup.\n\nExample configuration:\n\n```toml\n[[ballerina.log.destinations]]\ntype = \"stderr\"\n\n[[ballerina.log.destinations]]\npath = \"./logs/app.log\"\n```\n\n## 4. Contextual logging\n\nThe Ballerina log module supports contextual logging, which allows developers to create new loggers, child loggers from a parent and loggers with additional context from the root logger.\n\n### 4.1. Logger\n\nLogger defines the front end of a log library that developers interact with. Developers can create new loggers by implementing this type.\n\n```ballerina\npublic type Logger isolated object {\n   # Prints debug logs.\n   #\n   # + msg - The message to be logged\n   # + 'error - The error struct to be logged\n   # + stackTrace - The error stack trace to be logged\n   # + keyValues - The key-value pairs to be logged\n   public isolated function printDebug(string|PrintableRawTemplate msg, error? 'error = (), error:StackFrame[]? stackTrace = (), *KeyValues keyValues);\n\n   # Prints info logs.\n   # \n   # + msg - The message to be logged\n   # + 'error - The error struct to be logged\n   # + stackTrace - The error stack trace to be logged\n   # + keyValues - The key-value pairs to be logged\n   public isolated function printInfo(string|PrintableRawTemplate msg, error? 'error = (), error:StackFrame[]? stackTrace = (), *KeyValues keyValues);\n\n   # Prints warn logs.\n   # \n   # + msg - The message to be logged\n   # + 'error - The error struct to be logged\n   # + stackTrace - The error stack trace to be logged\n   # + keyValues - The key-value pairs to be logged\n   public isolated function printWarn(string|PrintableRawTemplate msg, error? 'error = (), error:StackFrame[]? stackTrace = (), *KeyValues keyValues);\n\n   # Prints error logs.\n   # \n   # + msg - The message to be logged\n   # + 'error - The error struct to be logged\n   # + stackTrace - The error stack trace to be logged\n   # + keyValues - The key-value pairs to be logged\n   public isolated function printError(string|PrintableRawTemplate msg, error? 'error = (), error:StackFrame[]? stackTrace = (), *KeyValues keyValues);\n\n   # Creates a new child/derived logger with the given key-values.\n   #\n   # + keyValues - The key-value pairs to be added to the logger context\n   # + return - A new Logger instance with the given key-values added to its context\n   public isolated function withContext(*KeyValues keyValues) returns Logger|error;\n};\n```\n\n> **Note:** The Ballerina log module provides a function to process the PrintableRawTemplate to obtain the processed string. This can be used when implementing a logger from the above type.\n>\n> ```ballerina\n> public isolated function processTemplate(PrintableRawTemplate) returns string;\n> ```\n\n### 4.2. Root logger\n\nThe root logger is the default logger used for logging the messages. It can be configured using the configurations described in the [Configure logging](#3-configure-logging) section.\n\nAt runtime, the root logger can be accessed using the `log:root()` function.\n\n### 4.3. Child logger\n\nThere are two ways to create child loggers:\n\n- Create a child logger with just additional context (key-value pairs)\n- Create loggers with unique logging configuration\n\n#### 4.3.1. Loggers with additional context\n\nWhen creating a child logger with additional context, developers can add key-value pairs to enrich the logging information. This is particularly useful for including metadata such as user IDs, request IDs, or any other contextual information that can help in diagnosing issues.\n\n```ballerina\nlog:Logger parentLogger = log:root();\nlog:Logger childLogger = parentLogger.withContext(\"userId\": \"12345\", \"requestId\": \"abcde\");\n```\n\nIn the example above, the `childLogger` will inherit all configurations from the `parentLogger` while adding the specified key-value pairs to its context. This allows for more granular logging without losing the original logger's settings.\n\n```ballerina\nchildLogger.printInfo(\"User logged in\");\n```\n\nThe log message will now include the additional context, making it easier to trace the log entry back to the specific user and request.\n\n#### 4.3.2. Loggers with unique logging configuration\n\nCreating a logger from the root with different configurations provides flexibility for specific requirements. E.g., audit loggers and metrics loggers.\n\nAll these loggers inherit the initial context(key-value pairs) from the root logger, allowing them to maintain a consistent logging context while applying their unique configurations.\n\nThe following type defines the configuration options for a Ballerina logger:\n\n```ballerina\n# Configuration for the Ballerina logger\npublic type Config record {|\n    # Log format to use. Default is the logger format configured in the module level\n    LogFormat format = format;\n    # Log level to use. Default is the logger level configured in the module level\n    Level level = level;\n    # List of destinations to log to. Default is the logger destinations configured in the module level\n    readonly & OutputDestination[] destinations = destinations;\n    # Additional key-value pairs to include in the log messages. Default is the key-values configured in the module level\n    readonly & AnydataKeyValues keyValues = {...keyValues};\n|};\n```\n\nSample usage:\n\n```ballerina\nlog:Config auditLogConfig = {\n    level: log:INFO,\n    format: \"json\",\n    destinations: [{path: \"./logs/audit.log\"}]\n};\n\nlog:Logger auditLogger = log:fromConfig(auditLogConfig);\nauditLogger.printInfo(\"Hello World from the audit logger!\");\n```\n","codeSnippets":"[[558894138,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printDebug</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"debug log\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"error log\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"info log\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printWarn</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"warn log\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[760872956,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>time=2025-08-20T08:49:05.482+05:30 level=DEBUG module=\\\"\\\" message=\\\"debug log\\\"</span></span>\\n<span class=\\\"line\\\"><span>time=2025-08-20T08:49:05.483+05:30 level=ERROR module=\\\"\\\" message=\\\"error log\\\"</span></span>\\n<span class=\\\"line\\\"><span>time=2025-08-20T08:49:05.484+05:30 level=INFO module=\\\"\\\" message=\\\"info log\\\"</span></span>\\n<span class=\\\"line\\\"><span>time=2025-08-20T08:49:05.485+05:30 level=WARN module=\\\"\\\" message=\\\"warn log\\\"</span></span></code></pre>\"],[1525039532,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#24292E\\\"> err </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"something went wrong!\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"underlying issue\\\"</span><span style=\\\"color:#24292E\\\">), </span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"1234\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"error log with cause\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">err</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[1304949392,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>time=2025-08-20T08:51:45.684+05:30 level=ERROR module=\\\"\\\" message=\\\"error log with cause\\\" error={\\\"causes\\\":[{\\\"message\\\":\\\"underlying issue\\\",\\\"detail\\\":{},\\\"stackTrace\\\":[{\\\"callableName\\\":\\\"main\\\",\\\"moduleName\\\":(),\\\"fileName\\\":\\\"test.bal\\\",\\\"lineNumber\\\":4}]}],\\\"message\\\":\\\"something went wrong!\\\",\\\"detail\\\":{\\\"id\\\":\\\"1234\\\"},\\\"stackTrace\\\":[{\\\"callableName\\\":\\\"main\\\",\\\"moduleName\\\":(),\\\"fileName\\\":\\\"test.bal\\\",\\\"lineNumber\\\":4}]}</span></span></code></pre>\"],[-1406747106,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"info log\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 845315</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"foo\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">successful</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#D73A49\\\"> true</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"info log\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">current_time</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> { </span><span style=\\\"color:#D73A49\\\">return</span><span style=\\\"color:#24292E\\\"> time</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">utcToString</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">time</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">utcNow</span><span style=\\\"color:#24292E\\\">());});</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#24292E\\\"> id </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 845315</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"foo\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">`info log for id: ${</span><span style=\\\"color:#24292E\\\">id</span><span style=\\\"color:#032F62\\\">}`</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">ctx</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> `{name: ${</span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#032F62\\\">}}`</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-403837939,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>time=2025-08-20T08:53:29.973+05:30 level=INFO module=\\\"\\\" message=\\\"info log\\\" id=845315 name=\\\"foo\\\" successful=true</span></span>\\n<span class=\\\"line\\\"><span>time=2025-08-20T08:53:29.987+05:30 level=INFO module=\\\"\\\" message=\\\"info log\\\" current_time=\\\"2025-08-20T03:23:29.989160Z\\\"</span></span>\\n<span class=\\\"line\\\"><span>time=2025-08-20T08:53:29.998+05:30 level=INFO module=\\\"\\\" message=\\\"info log for id: 845315\\\" ctx=\\\"{name: foo}\\\"</span></span></code></pre>\"],[1901092762,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">log</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">level = </span><span style=\\\"color:#032F62\\\">\\\"DEBUG\\\"</span></span></code></pre>\"],[359750930,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">log</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">modules</span><span style=\\\"color:#24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">name = </span><span style=\\\"color:#032F62\\\">\\\"[ORG_NAME]/[MODULE_NAME]\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">level = </span><span style=\\\"color:#032F62\\\">\\\"[LOG_LEVEL]\\\"</span></span></code></pre>\"],[-978543668,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">log</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">format = </span><span style=\\\"color:#032F62\\\">\\\"json\\\"</span></span></code></pre>\"],[1799683190,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">log</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">keyValues = {env = </span><span style=\\\"color:#032F62\\\">\\\"prod\\\"</span><span style=\\\"color:#24292E\\\">, nodeId = </span><span style=\\\"color:#032F62\\\">\\\"delivery-svc-001\\\"</span><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-833561574,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> enum</span><span style=\\\"color:#6F42C1\\\"> FileOutputMode</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    TRUNCATE</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    APPEND</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> FileOutputDestination</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    readonly</span><span style=\\\"color:#24292E\\\"> FILE 'type </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> FILE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> path;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    FileOutputMode mode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> APPEND;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-376611629,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">log</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">destinations</span><span style=\\\"color:#24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">type = </span><span style=\\\"color:#032F62\\\">\\\"stderr\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">log</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">destinations</span><span style=\\\"color:#24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">path = </span><span style=\\\"color:#032F62\\\">\\\"./logs/app.log\\\"</span></span></code></pre>\"],[-600513123,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Logger</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # Prints debug logs.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">msg</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The message to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">'error</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The error struct to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">stackTrace</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The error stack trace to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">keyValues</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The key-value pairs to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> printDebug</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#E36209\\\">PrintableRawTemplate</span><span style=\\\"color:#E36209\\\"> msg</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#E36209\\\">?</span><span style=\\\"color:#24292E\\\"> 'error </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">error:</span><span style=\\\"color:#24292E\\\">StackFrame[]? stackTrace </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">KeyValues keyValues);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # Prints info logs.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">msg</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The message to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">'error</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The error struct to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">stackTrace</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The error stack trace to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">keyValues</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The key-value pairs to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#E36209\\\">PrintableRawTemplate</span><span style=\\\"color:#E36209\\\"> msg</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#E36209\\\">?</span><span style=\\\"color:#24292E\\\"> 'error </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">error:</span><span style=\\\"color:#24292E\\\">StackFrame[]? stackTrace </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">KeyValues keyValues);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # Prints warn logs.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">msg</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The message to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">'error</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The error struct to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">stackTrace</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The error stack trace to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">keyValues</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The key-value pairs to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> printWarn</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#E36209\\\">PrintableRawTemplate</span><span style=\\\"color:#E36209\\\"> msg</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#E36209\\\">?</span><span style=\\\"color:#24292E\\\"> 'error </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">error:</span><span style=\\\"color:#24292E\\\">StackFrame[]? stackTrace </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">KeyValues keyValues);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # Prints error logs.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">msg</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The message to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">'error</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The error struct to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">stackTrace</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The error stack trace to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">keyValues</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The key-value pairs to be logged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> printError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#E36209\\\">PrintableRawTemplate</span><span style=\\\"color:#E36209\\\"> msg</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">error</span><span style=\\\"color:#E36209\\\">?</span><span style=\\\"color:#24292E\\\"> 'error </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">error:</span><span style=\\\"color:#24292E\\\">StackFrame[]? stackTrace </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#24292E\\\">KeyValues keyValues);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # Creates a new child/derived logger with the given key-values.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">keyValues</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The key-value pairs to be added to the logger context</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">   # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A new Logger instance with the given key-values added to its context</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> withContext</span><span style=\\\"color:#24292E\\\">(*</span><span style=\\\"color:#E36209\\\">KeyValues</span><span style=\\\"color:#E36209\\\"> keyValues</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Logger</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1596728893,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#D73A49\\\"> public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> processTemplate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">PrintableRawTemplate</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#032F62\\\"> ```</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">### 4.2. Root logger</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">The root logger is the default logger used for logging the messages. It can be configured using the configurations described in the [Configure logging](#3-configure-logging) section.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">At runtime, the root logger can be accessed using the `</span><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">root</span><span style=\\\"color:#24292E\\\">()</span><span style=\\\"color:#032F62\\\">` function.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">### 4.3. Child logger</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">There are two ways to create child loggers:</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">- Create a child logger with just additional context (key-value pairs)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">- Create loggers with unique logging configuration</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">#### 4.3.1. Loggers with additional context</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">When creating a child logger with additional context, developers can add key-value pairs to enrich the logging information. This is particularly useful for including metadata such as user IDs, request IDs, or any other contextual information that can help in diagnosing issues.</span></span></code></pre>\"],[1188159955,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">childLogger.</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"User logged in\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-77806140,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Configuration for the Ballerina logger</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Config</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Log format to use. Default is the logger format configured in the module level</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    LogFormat format </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> format;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Log level to use. Default is the logger level configured in the module level</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Level level </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> level;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # List of destinations to log to. Default is the logger destinations configured in the module level</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#24292E\\\"> OutputDestination[] destinations </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> destinations;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Additional key-value pairs to include in the log messages. Default is the key-values configured in the module level</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#24292E\\\"> AnydataKeyValues keyValues </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#24292E\\\">keyValues};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1859165388,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Config auditLogConfig </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    level</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> log:INFO,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    format</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"json\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    destinations</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [{</span><span style=\\\"color:#6F42C1\\\">path</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"./logs/audit.log\\\"</span><span style=\\\"color:#24292E\\\">}]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Logger auditLogger </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">fromConfig</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">auditLogConfig</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">auditLogger.</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Hello World from the audit logger!\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"]]"},"__N_SSG":true}