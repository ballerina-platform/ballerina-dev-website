{"pageProps":{"frontmatter":{"layout":"ballerina-openapi-support-left-nav-pages-swanlake","title":"OpenAPI tool","description":"Check out how the Ballerina OpenAPI tool makes it easy for you to start developing a service documented in an OpenAPI contract.","keywords":"ballerina, programming language, openapi, open api, restful api","permalink":"/learn/openapi-tool/","active":"openapi-tool","intro":"The OpenAPI contract is a specification that creates a RESTful contract for APIs by detailing all of its resources and operations in a human and machine-readable format for easy development, discovery, and integration. Ballerina Swan Lake supports the OpenAPI contract version 3.0.0 onwards."},"content":" \n\nBallerina OpenAPI tool makes it easy for you to start the development of a service documented in an OpenAPI contract in Ballerina by generating a Ballerina service and client skeletons. It enables you to take the code-first API design approach by generating an OpenAPI contract for the given service implementation.\n\n## Usage\n\nThe Ballerina OpenAPI tool support provides the following capabilities.\n\n 1. Generate Ballerina service/client stubs from a given OpenAPI contract file using the CLI tool.\n 2. Export the OpenAPI definition from a given Ballerina service implementation using the CLI tool.\n 3. Validate the service implementation compliance with a provided OpenAPI contract using the OpenAPI annotation.\n  >**Info:** The OpenAPI compiler plugin allows you to validate a service implementation against an OpenAPI contract during the compile time. This plugin ensures that the implementation of a service does not deviate from its OpenAPI contract. \n\n### OpenAPI to Ballerina usage\n\nThe OpenAPI to Ballerina command supports several usages in the Ballerina OpenAPI tool as follows.\n\n```\n$ bal openapi [-i | --input] <openapi-contract-file-path> \n            [-o | --output] <output-location>\n            [--mode] <mode-type>\n            [--tags] <tag-names> \n            [--operations] <operation-names> \n            [-n | --nullable]\n            [--license] <license-file-path> \n            [--with-tests]\n            [--status-code-binding] [--mock] [--with-service-contract]\n            [--single-file] [--use-sanitized-oas]\n```\n\n### Ballerina to OpenAPI usage\n\nThe Ballerina to OpenAPI command supports several usages in the Ballerina OpenAPI tool as follows.\n\n```\n$ bal openapi [-i | --input] <ballerina-service-file-path> [--json]\n            [-s | --service] <current-service-name>\n            [-o | --output] <output-location>\n```\n\n## Command options\n\nThe below command-line arguments can be used with the command.\n\n### OpenAPI to Ballerina command options\n\nThe command-line arguments below can be used with the command for each particular purpose as described below. \n\n| Command option            | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                       | Mandatory/Optional |\n|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|\n| `-i \\| --input`           | The `openapi-contract-path` command option specifies the path of the OpenAPI contract file (e.g., `my-api.yaml` or `my-api.json`).                                                                                                                                                                                                                                                                                                                                | Mandatory          |\n| `-o \\| --output`          | The Ballerina files are generated at the same location from which the `bal openapi` command is executed. You can point to another directory location by using the `(-o\\|--output).` flag.                                                                                                                                                                                                                                                                         | Optional           |\n| `--mode`                  | Mode type can be either a service or client. The Ballerina service and client are generated according to the mode. Without the `--mode`, it generates both service and client stubs for the given OpenAPI contract.                                                                                                                                                                                                                                               | Optional           |\n| `--tags`                  | To generate the Ballerina client or service stub with a subset of tags defined in the OpenAPI contract, use the `--tags` option and specify the tags you need as specified in the OpenAPI definition.<br><br>**E.g.,** `bal openapi -i <openapi-contract>  [--tags < \"tag1\",\"tag2\">]`                                                                                                                                                                             | Optional           |\n| `--operations`            | To generate the Ballerina client or service stub with a subset of operations defined in the OpenAPI contract, use the `--operations` option and specify the operations you need as specified in the OpenAPI definition.<br><br>**E.g.,** `bal openapi -i <openapi-contract> [--operations <\"op1\", \"op2\">]`                                                                                                                                                        | Optional           |\n| `--license`               | To generate the Ballerina files with the given copyright or license header, you can use this `--license` flag with your copyright text.<br><br>**E.g.,** `bal openapi -i <openapi-contract> [--license <license-file-path>]`                                                                                                                                                                                                                                      | Optional           |\n| `-n \\|--nullable`         | If your OpenAPI contract includes JSON schema properties that are not marked as `nullable:true`, they may return as null in some responses. It results in a JSON schema to Ballerina record data binding error. If you suspect this can happen for any property, it is safe to generate all data types in the generated record with Ballerina nil support by turning on this flag.<br><br>**E.g.,** `bal openapi -i <openapi-contract> [-n \\|--nullable]`    | Optional           |\n| `--with-tests`            | It works with the client generation command and generates a boiler-plate test for all the remote methods of the generated client.                                                                                                                                                                                                                                                                                                                                 | Optional           |\n| `--client-methods`        | This option can be used in the client generation to select the client method type, which can be `resource` or `remote`. (The default option is `resource`).                                                                                                                                                                                                                                                                                                                                                                                           |  Optional         |\n| `--status-code-binding`   | This option can be used in the client generation to generate the client methods with status code response binding. | Optional |\n| `--mock`                  | This option can be used to switch client generation to generate a mock client for the given OpenAPI contract.  | Optional |\n|`--with-service-contract`  | This option can be used to generate the service contract type for the given OpenAPI contract. | Optional |\n| `--single-file`           | This option can be used to generate the Ballerina service or client with related types and utility functions in a single file. | Optional |\n| `--use-sanitized-oas`     | This is an experimental feature. This option enables service/client code generation by modifying the given OAS to follow Ballerina language best practices. | Optional |\n\n### Ballerina to OpenAPI command options\n\nThe command-line arguments below can be used with the command for each particular purpose as described below.\n\n| Command option    | Description                                                                                                                                                                                               | Mandatory/Optional |\n|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|\n| `-i \\|--input`    | The `ballerina-service-file-path` command option specifies the path of the Ballerina service file (e.g., `my-service.bal`).                                                                               | Mandatory          |\n| `--json`          | Generate the Ballerina service to OpenAPI output as JSON. The default is YAML.                                                                                                                            | Optional           |\n| `-s \\| --service` | This service name is used to identify the service that needs to be documented as an OpenAPI contract.                                                                                                | Optional           |\n| `-o\\|--output`    | Location of the generated OpenAPI contract. If this path is not specified, the output is written to the same directory from which the command is run.                                                | Optional           |\n\n## Generate Ballerina services from OpenAPI Contracts \n\nIf you are an API developer who prefers the **design-first approach**, you can use an existing or your OpenAPI definition to generate Ballerina services using the `bal openapi` CLI command as follows.\n\n### Generate service implementation for given OpenAPI contract\n\n```\n$ bal openapi -i <openapi-contract> --mode service\n```\n\nThe generated service can be used as a code template to start the service implementation.\n\nFor example,\n\n```\n$ bal openapi -i store.yaml --mode service\n```\n\nService implementations  representation\n\n```ballerina\nimport ballerina/http;\n\nlistener http:Listener ep0 = new (9090, config = {host: \"localhost\"});\n\nservice /store on ep0 {\n    resource function get store() returns Inventory|http:Accepted {\n        // logic here\n    }\n\n    resource function post store(Inventory payload) {\n        //logic here\n    }\n}\n```\n\nThis generates a Ballerina service in a file named `store_service.bal` and relevant schemas in a file named `types.bal` for the `store.yaml` OpenAPI contract as depicted below. The above command can be run from anywhere on the execution path. It is not mandatory to run it from within a Ballerina package.\n\n```\nThe service generation process is complete. The following files were created.\n-- store_service.bal\n-- types.bal\n```\n\n### Generate service contract object for given OpenAPI contract\n\nOpenAPI Specification (OAS) is a way to describe the service interface of REST APIs. Counterpart of this in Ballerina is service object types. This `--with-service-contract` is to enable code generation for the Ballerina service contract object type.\n\nFor example,\n\n```\n$ bal openapi -i store.yaml --mode service --with-service-contract\n```\n\nService contract object type representation,\n\n```ballerina\nimport ballerina/http;\n\n@http:ServiceConfig {basePath: \"/store\"}\ntype OASServiceType service object {\n    *http:ServiceContract;\n    resource function get store() returns Inventory|http:Accepted;\n    resource function post store(@http:Payload Inventory payload) returns http:Accepted|ErrorPayloadBadRequest;\n};\n```\n\nThis generates a Ballerina service in a file named `service_contract.bal` and relevant schemas in a file named `types.bal` for the `store.yaml` OpenAPI contract as depicted below. The above command can be run from anywhere on the execution path. It is not mandatory to run it from within a Ballerina package.\n\n```\nThe service generation process is complete. The following files were created.\n-- service_contract.bal\n-- types.bal\n```\n\n### Generate from tags\n\nTo generate the Ballerina service stub with a subset of tags defined in an OpenAPI contract, use the `--tags` option and specify the tags you need as specified in the OpenAPI definition.\n\n```\n$ bal openapi -i <openapi-contract> [--tags <\"tag1\",\"tag2\">]\n```\n\nFor example, \n\n```\n$ bal openapi -i hello.yaml --tags \"pets\", \"list\"\n```\n\nOnce you execute the command, only the operations related to the given tags get included in the generated service file.\n\n## Generate Ballerina service contract type from OpenAPI Contracts\n\nBy generating a service contract type directly from the OpenAPI contract, you can design services that are contract-compliant from the outset, following a service contract-first approach. \nIn addition, centralizing metadata within the service contract type results in a cleaner, more maintainable codebase.\n\nFor example, \n\n```\n$ bal openapi -i hello.yaml --mode service --with-service-contract\n```\n\n## Export OpenAPI contracts from Ballerina services\n\nIf you prefer to follow the **code-first approach**, you can convert your Ballerina service APIs into human-readable or machine-readable documents such as OpenAPI documents by using the Ballerina to OpenAPI CLI Tool as follows.\n\nExport the Ballerina service to an OpenAPI contract 3.0.0 definition. For the export to work properly, the input Ballerina service should be defined using the basic service and resource-level HTTP annotations.\n\n```\n$ bal openapi [-i | --input] <ballerina-service-file-path> [(-o | --output) <output-location>]\n```\n\nThe `ballerina-service-file-path` command option specifies the path of the ballerina service file (e.g., `my_api.bal`) and is mandatory.\n\nIf your Ballerina file includes multiple services, this command generates the OpenAPI contract for each service in the Ballerina file.\n\n>**Info:** With this command, you can use either the service contract object type or the service implementation to generate an OpenAPI contract.\n\n### Export in JSON format\n\nUse the `--json` flag If you need the Ballerina service to OpenAPI output in JSON. The default is YAML.\n\n```\n$ bal openapi -i <ballerina-resource-file> [--json]\n```\n\n### Export for a specific service\n\nIf you need to document an OpenAPI contract for only one given service (when there are multiple), use the following command, specifying the service name as the `absolute-resource-path`.\n\n```\n$ bal openapi -i <ballerina-resource-file> [-s|--service] <service-name>\n```\n\nFor example,\n\n```\n$ bal openapi -i helloService.bal\n```\n\nThis generates the OpenAPI contracts for the Ballerina services in the `hello_service.bal` Ballerina file.\n\n```\n$ bal openapi -i helloService.bal -s \"/hello\"\n```\n\nThis generates the OpenAPI contracts for the Ballerina service in the `hello_service.bal` Ballerina file\nof which the `absolute-resource-path` is `/hello`. \n\n### Export with a given metadata information\n\n#### Export with metadata using the `@openapi:ServiceInfo` annotation.\n\nYou can use the `@openapi:ServiceInfo` annotation for specifying the meta data such as title, description, email, contact information and version information of the OpenAPI contract as follows.\n\n```ballerina\n@openapi:ServiceInfo {\n    contract: \"/path/to/openapi.json|yaml\",\n    title: \"Store Management\",\n    version: \"0.1.0\"\n}    \n```\n\n>**Info:** These `contract`, `title`, `version` and all the other fields are all optional attributes and can be used as described below.\n\n| Field Name               | Description                                                                                                                                                                                                                                                                                                                                                           | Mandatory/Optional |\n|--------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|\n| `contract: string`       | A path to the OpenAPI contract as a string and the OpenAPI file can either be `.yaml` or `.json`. When you use the Ballerina to OpenAPI tool, it provides an attached OpenAPI contract as the output for a given service. If this attribute is not provided, then the tool generates an OpenAPI contract(OAS) contract for the given Ballerina file content.     | Optional           |\n| `title: string`          | You can use this to add the title of the `info` section in the generated OpenAPI contract. If this attribute is not provided, then the tool takes the absolute base path as the title to the OAS contract.                                                                                                                                                            | Optional           |\n| `version: string`        | You can use this to add the version of the `info` section in the generated OpenAPI contract. If this attribute is not provided, then the tool picks the Ballerina package version as the OAS version.                                                                                                                                                                 | Optional           |\n| `description: string`    | You can use this to add the description of the `info` section in the generated OpenAPI contract. Brief description of the API, outlining its purpose, features, and any other relevant details that help users understand what the API does and how to use it.                                                                                                        | Optional           |\n| `email: string`          | You can use this to add the email address to `contact` section in OpenAPI contract. This desribes email details for the API provider or support .                                                                                                                                                                                                                     | Optional           |\n| `contactName: string`    | You can use this attribute to add the name of the person or organization responsible for the API.                                                                                                                                                                                                                                                                     | Optional           |\n| `contactURL: string`     | You can use `contactURL` to add the URL to a web page with more information about the API, the provider, or support.                                                                                                                                                                                                                                                  | Optional           |\n| `termsOfService: string` | You can use this to add the URL details to the terms of service for the API.                                                                                                                                                                                                                                                                                          | Optional           |\n| `licenseName: string`    | The `licenseName` is used to add the name of the license under which the API is provided for `contact` section.                                                                                                                                                                                                                                                       | Optional           |\n| `licenseURL: string`     | You can use this to add the URL details regarding the full text of the license.                                                                                                                                                                                                                                                                                       | Optional           |\n\nFor example,\n\n**Ballerina service file with the OpenAPI annotation**\n\n```ballerina\n@openapi:ServiceInfo {\n    title: \"Store Management APIs\",\n    version: \"1.1.0\",\n    email: \"mark@abc.com\"\n}\nservice /greet on new http:Listener(9090) {\n...\n}\n```\n\n**Generated OpenAPI contract with the given details**\n\n```openapi\nopenapi: 3.0.1\ninfo:\n  title: Store Management APIs\n  version: 1.1.0\n  contact:\n    email: mark@abc.com\n...\n```\n\n#### Export with metadata using the `@openapi:ResourceInfo` annotation.\n\nYou can use the `@openapi:ResourceInfo` annotation for specifying the meta data such as operation id, summary, tags information and example details of the OpenAPI operation as follows. This annotation used to be attached with the resource functions.\n\n| Field Name      | Description                                                                                                                                                                                                                                                                                                                                                                     | Mandatory/Optional |\n|----------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|\n| `operationId: string` |  You can use this to update operation Id in particuler operation in OpenAPI contract(OAS) | Optional |\n| `summary: string` | This helps you to add summary for the particuler operation in OAS | Optional |\n| `tags: string[]` | Specifies the tag in the list map to the tags list in operation | Optional |  \n\nFor example,\n\n**Ballerina resource function with the OpenAPI annotation**\n\n```ballerina\n    @openapi:ResourceInfo {\n       operationId: \"createStoreData\"\n       summary: \"API for adding store amount\",\n       tags: [\"retail\", \"rate\"]\n    }\n    resource function post store(Inventory payload) returns string? {\n    }\n```\n\n**Generated OpenAPI contract with the given details**\n\n```yaml\n...\npaths:\n  /store:\n    post:\n      tags:\n      - retail\n      - rate\n      summary: API for adding store amount\n      operationId: createStoreData\n      requestBody:\n        content:\n          application/json:\n            schema:\n    ...\n```\n\n### Export with given examples information\n\nAn API specification can include examples for parameters, responses, schemas (data models), individual properties in\nschemas and request bodies. Following the below options, you can generate OAS with examples.\n\n#### Export example using `@openapi:ResourceInfo` annotation\n\n##### Add response examples\n\nHere, you need to provide example details according to the structure shown in the sample below.\n\n```ballerina\n@openapi:ResourceInfo {\n        ...\n        examples: {\n            \"response\": {\n                <status-code>: {\n                    \"examples\": {\n                        <media-type>: {\n                            <name-for-example>: {\n                                \"value\": {\n                                    ...\n                                }\n                            },\n                            <name-for-example>: {\n                                \"filePath\": <path>\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n...\n```\n\nStructure Explanation:\n 1. Examples Container: The **examples** key is a container for all example details related to responses.\n 2. Response Object: Inside **examples**, the **response** key groups examples that pertain to response status codes.\n 3. Status Code as Key: Under response, each key is a status code (e.g., \"200\").\n 4. MediaType as Key: Under each status code, the **examples** key contains another map where the keys are media types (e.g., \"application/json\").\n 5. Record with Example Details: \n    - For each media type, you can provide examples using either the **value** field or the **filePath** field.\n        - The **value** field is used to include the example inline.\n        - The **filePath** field is used to specify a .json file that contains the example.\n\n```ballerina\n...\nservice /convert on new http:Listener(9090) {\n...\n    @openapi:ResourceInfo {\n       operationId: \"getStoreData\",\n       examples: {\n            \"response\": {\n                \"200\": {\n                    \"examples\": {\n                        \"application/json\": {\n                            \"store01\": {\n                                \"value\": {\n                                    \"materials\": \"Wood\",\n                                    \"status\": \"InProgress\",\n                                    \"item\": \"Table\",\n                                    \"amount\": 120\n                                }\n                            },\n                            \"store02\": {\n                                \"filePath\": \"storeExamples.json\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    resource function get store() returns Inventory? {\n    }\n...\n}\n```\n\n**Generated OpenAPI contract with the given details**\n\n```yaml\npaths:\n  /store:\n    get:\n      operationId: getStoreData\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Inventory'\n              examples:\n                store01:\n                  value:\n                    materials: Wood\n                    status: InProgress\n                    item: Table\n                    amount: 120\n                store02:\n                  value:\n                    item: Table\n                    amount: 100\n                    materials: Plastic\n                    status: Done\n        \"202\":\n          description: Accepted\n```\n\n##### Add request body examples\n\nHere, you need to provide example details according to the structure shown in the sample below.\n\n```ballerina\n@openapi:ResourceInfo {\n        examples: {\n            \"requestBody\": {\n                <media-type>: {\n                    <name-for-example>: {\n                        \"filePath\": <file path>\n                    },\n                    <name-for-example>: {\n                        \"value\": {\n                            ...\n                        }\n                    }\n                }\n            }\n        }\n    }\n```\n\n 1. Examples Container: The **examples** key is a container for all example details related to request bodies.\n 2. Request Body Object: Inside examples, the **requestBody** key groups examples that pertain to request bodies.\n 3. MediaType as Key: Under **requestBody**, the key is the media type (e.g., \"application/json\").\n 4. Example Details: For each media type, examples can be provided using either the value field (for inline examples) or the filePath field (for external JSON files).\n\n```ballerina\n...\n@openapi:ResourceInfo {\n        examples: {\n            \"requestBody\": {\n                \"application/json\": {\n                    \"payloadStore01\": {\n                        \"filePath\": \"storeExamples.json\"\n                    },\n                    \"PayloadStore02\": {\n                        \"value\": {\n                            \"materials\": \"Wood\",\n                            \"status\": \"InProgress\",\n                            \"item\": \"Table\",\n                            \"amount\": 120\n                        }\n                    }\n                }\n            }\n        }\n    }\n    resource function post store(Inventory payload) {\n    }\n...\n```\n\n**Generated OpenAPI contract with the given details**\n\n```yaml\n...\npaths:\n /store:\n    post:\n      operationId: postStore\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Inventory'\n            examples:\n              payloadStore01:\n                value:\n                  item: Table\n                  amount: 100\n                  materials: Plastic\n                  status: Done\n              PayloadStore02:\n                value:\n                  materials: Wood\n                  status: InProgress\n                  item: Table\n                  amount: 120\n        required: true\n      responses:\n        \"202\":\n          description: Accepted\n...\n```\n\nAs explained in the example section, you can use this annotation for parameters, record fields, and record types.\n\n#### Export example using `@openapi:Example` annotation\n\nThis annotation is used to render a single example in the OpenAPI contract. It is attached to parameters, record types and record field.\n\n##### Ballerina code sample for object level example mapping\n\n```ballerina\n@openapi:Example {\n  value: {\n    id: 10,\n    name: \"Jessica Smith\"\n  }\n}\ntype User record {\n  int id;\n  string name\n}\n```\n\n**Generated OpenAPI contract with the given details**\n\n```\n...\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n      example:\n        id: 10\n        name: Jessica Smith\n...\n```\n\n##### Ballerina code sample for parameter level example mapping\n\n```ballerina\n...\nresource function get path(@openapi:Example{value: \"approved\"} \"approved\"|\"pending\"|\"closed\"|\"new\" status) {\n}\n...\n```\n\n**Generated OpenAPI contract with the given details**\n\n```yaml\n...\nparameters:\n  - in: query\n    name: status\n    schema:\n      type: string\n      enum: [approved, pending, closed, new]\n      example: approved\n...\n```\n\n##### Ballerina code sample for object property level example mapping\n\n```ballerina\ntype User record {\n   @openapi:Example { value: 1 }\n   int id;\n   @openapi:Example { value: \"Jessica Smith\" }\n   string name;\n}\n```\n\n**Generated OpenAPI contract with the given details**\n\n```yaml\ncomponents:\n  schemas:\n    User:    # Schema name\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1          # Property example\n        name:\n          type: string\n          example: Jessica Smith  # Property example\n```\n\n#### Export example using `@openapi:Examples` annotation\n\n>**Info:** This annotation is used to render list of examples in the OpenAPI contract. It is attached to parameters and record types.\n\n##### Ballerina code sample for object level examples mapping\n\n```yaml\n@openapi:Examples {\n  Jessica: { // Example 1\n    value: {\n       id: 10,\n       name: \"Jessica Smith\"\n    }\n  },\n  Ron: { // Example 2\n    value: {\n       id: 11,\n       name: \"Ron Stewart\"\n    }\n  } \n}\ntype User record {\n  int id;\n  string name\n}\n```\n\n**Generated OpenAPI contract with the given details**\n\n```yaml\n...\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n      examples:\n          Jessica:   # Example 1\n            value:\n              id: 10\n              name: Jessica Smith\n          Ron:       # Example 2\n            value:\n              id: 11\n              name: Ron Stewart\n...\n```\n\nAs explained in the example section, you can use this annotation for parameters, record fields, and record types.\n\n## Generate Ballerina clients from OpenAPI definitions\n\nThe client generated from an OpenAPI definition can be used in your applications to call the service defined in the OpenAPI file. If you want to generate only the Ballerina client, you can set the `mode` as the `client` when running the OpenAPI tool. \n\n>**Note:** Before generating your client using the command-line tool, please check if a pre-generated client for your API already exists in the <a href=\"https://central.ballerina.io/\" target=\"_blank\">Ballerina Central</a>. (If so, you can refer to the client's API documentation for more information on how to use the pre-generated client in your code.)\n\n```\n$ bal openapi -i <openapi-contract> --mode client\n```\n\nFor example, \n\n```\n$ bal openapi -i hello.yaml --mode client\n```\n\nThis generates a Ballerina client stub (`client.bal`), a util file (`utils.bal`) for the relevant utils methods related to the client stub, and a schemas file (`types.bal`) for the `hello.yaml` OpenAPI contract. The above command can be run from anywhere on the execution path. It is not mandatory to run it from within a Ballerina package.\n\n```\nClient generated successfully. The following files were created. \n-- client.bal\n-- types.bal\n-- utils.bal\n```\n\n### Generate with boiler-plate tests\n\nUse the `--with-tests` flag in the client mode to generate a Ballerina client with boilerplate test cases for all the remote methods available in it.\n\n```\n$ bal openapi -i <openapi-contract> [--mode client] [--with-tests]\n```\n\nFor example,\n\n```\n$ bal openapi -i hello.yaml --mode client --with-tests\n```\n\nIn addition to the above-mentioned generated file, this generates a `test.bal` file in the default client generation.\n\n### Generate with nillable types\n\n>**Info:** This is an optional flag in the OpenAPI to Ballerina command.\n\nIf your OpenAPI contract includes JSON schema properties that are not marked as **nullable:true**, they may be returned as null in some responses which results in a JSON schema to Ballerina record data binding error. If you suspect this can happen for any property, it is safe to generate all data types in the generated record with Ballerina nil support by turning this flag on.\n\n```\n$ bal openapi -i <openapi-contract> [-n |--nullable]\n```\n\n### Generate with a given method type\nUse the `--client-methods <resource|remote>` option to select the client method type, which can be `resource` or `remote`. (The default option is `resource`).\n\n```\n$ bal openapi -i <openapi-contract> --mode client --client-methods <resource|remote>\n```\n\n>**Info:** For more command options, see [OpenAPI to Ballerina CLI options](#openapi-to-ballerina-command-options).\n\n### Generate mock client using included example in OAS\n\nIntroduces mock client generation with examples directly from the OpenAPI contract. Picture a developer tasked with integrating a new API: you can now effortlessly generate \nmock clients with examples which you documented in the OAS, test and validate integrations, and then seamlessly replace the mock client with the actual one when ready for production.\n\n```\n$ bal openapi -i <openapi-contract> --mode client --mock\n```\n\nOpenAPI contract sample,\n\n```yaml\nopenapi: 3.0.1\n...\npaths:\n  /store:\n    get:\n      operationId: getStoreData\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Inventory'\n              examples:\n                store01:\n                  value:\n                    materials: Wood\n                    status: InProgress\n                    Item: Table\n                    amount: 120\n        \"202\":\n          description: Accepted\ncomponents:\n  schemas:\n    Inventory:\n      required:\n      - Item\n      - amount\n      - materials\n      - status\n      type: object\n      properties:\n        materials:\n          type: string\n        status:\n          type: string\n        Item:\n          type: string\n        amount:\n          type: integer\n          format: int64\n```\n\n**Generated mock client for the example provided under the response**\n\n```ballerina\npublic isolated client class Client {\n ...\n    resource isolated function get store(map<string|string[]> headers = {}) returns Inventory|error? {\n        return {\"materials\": \"Wood\", \"status\": \"InProgress\", \"Item\": \"Table\", \"amount\": 120};\n    }\n}\n```\n\n### Automate client generation\n\n#### Update the `Ballerina.toml` file with OpenAPI tool configurations\n\nAdding the following OpenAPI tool configurations to the `Ballerina.toml` file will generate a client during the package build. This eliminates the need to commit the generated code.\n\n> **Info:** It is mandatory to provide `id` and `filePath` attributes for the OpenAPI tool configurations. The other attributes are optional.\n\nThe following is an example of the tool configuration usage in the `Ballerina.toml`.\n\n```ballerina\n[[tool.openapi]]\nid = \"client01\"\nfilePath = \"./openapi.yaml\"\ntargetModule = \"delivery\"\noptions.mode = \"client\"\noptions.statusCodeBinding = true\noptions.tags = [\"tag1\", \"tag2\"]\noptions.operations = [\"op1\", \"op2\"]\noptions.nullable = true # (default value => false)\noptions.license = \"./license.txt\"\n```\n\nThe below tool configuration can be used.\n\n| Command option             | Description                                                                                                                                                                                                                                                                                                                                                                                                 | Mandatory/Optional |\n|----------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|\n| `filePath`                 | The `filePath` tool option specifies the path of the OpenAPI contract file (e.g., `my-api.yaml` or `my-api.json`).                                                                                                                                                                                                                                                                                          | Mandatory          |\n| `id`                       | Id for the generated module.                                                                                                                                                                                                                                                                                                                                                                                | Mandatory          |\n| `targetModule`             | The Ballerina files are generated at the given directory name in the Ballerina package.                                                                                                                                                                                                                                                                                                                     | Optional           |\n| `options.mode`             | The supported mode type is `client`. It generates client stubs for the given OpenAPI contract.                                                                                                                                                                                                                                                                                                              | Optional           |\n| `options.tags`             | To generate the Ballerina client stub with a subset of tags defined in the OpenAPI contract                                                                                                                                                                                                                                                                                                                 | Optional           |\n| `options.operations`       | To generate the Ballerina client stub with a subset of operations defined in the OpenAPI contract, use the `options.operations` option and specify the operations you need as specified in the OpenAPI definition.                                                                                                                                                                                          | Optional           |\n| `options.license`          | To generate the Ballerina files with the given copyright or license header, you can use this `options.license` option with the path to your copyright text.                                                                                                                                                                                                                                                 | Optional           |\n| `options.nullable`         | If your OpenAPI contract includes JSON schema properties that are not marked as `options.nullable=true`, they may return as null in some responses. It results in a JSON schema to Ballerina record data binding error. If you suspect this can happen for any property, it is safe to generate all data types in the generated record with Ballerina nil support by turning on this flag.             | Optional           |\n| `options.clientMethods`    | This option can be used in the client generation to select the client method type, which can be `resource` or `remote`. (The default option is `resource`).                                                                                                                                                                                                                                                 | Optional           |\n| `options.statusCodeBinding`| This option can be used in the client generation to generate the client methods with status code response binding.                                                                                                                                                                                                                                                                                          | Optional           |\n\n\n#### Update the Ballerina.toml file with OpenAPI tool configurations using OpenAPI CLI command\n\nExecuting the following OpenAPI `add` sub-command, along with the OpenAPI to Ballerina CLI options, will update the `Ballerina.toml` with OpenAPI tool configurations.\n\n```\n$ bal openapi add [-i | --input] <openapi-contract-file-path>\n                  [--id] <client-id>\n                  [--module] <target-module>\n                  [--package] <ballerina-package-path>\n```\n\nFor example,\n\n```\n$ bal openapi add -i <openapi-contract> --id <client_id> --module <target-module> --package <ballerina package path> --tags <\"tag1\",\"tag2\">\n```\n\n| Command option      | Description                                                                                                                                                                                                                                                                                                                                                                     | Mandatory/Optional |\n|----------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|\n| `-i \\| --input`   | The `-i\\|--input` command option specifies the path of the OpenAPI contract file (e.g., `my-api.yaml` or `my-api.json`).                                                                                                                                                                                                                                                                                                                                         | Mandatory          |\n| `--id`          | Id for the generated module | Mandatory          |\n| `--module`          | Module name for the generated client stub module (default will be generated directory)|  Optional        |\n| `-p \\|--package`    | The Ballerina package location to generate the Ballerina client or service stub.                                                                                                                                                                                                              |  Optional        |\n\n>**Info:** For more command options, see [OpenAPI to Ballerina CLI options](#openapi-to-ballerina-command-options).\n\n## Publish your client\n\nTo see your new client in Ballerina central in the future, follow the steps below to send a GitHub Pull Request to the WSO2 `openapi-connectors` repository to publish it.\n\n1. Fork and clone the <a href=\"https://github.com/ballerina-platform/openapi-connectors\" target=\"_blank\">`openapi-connectors`</a> repository. Connectors generated from the Ballerina OpenAPI tool are managed in this repository.\n\n2. Open the cloned repository and navigate to the `/openapi` directory.\n\n3. Run the `bal new <connector_name> -t lib` command to create a new Ballerina package. \n\n4. Copy the [generated files](#generate-ballerina-clients-from-openapi-definitions) (i.e., `client.bal`, `types.bal`, and `utils.bal`) into the `<connector_name>` directory. \n\n5. Run the `bal build` command to check whether the newly-generated connector is compiling successfully. \n\n6. Run the necessary unit tests to verify the functionality of the generated connector.\n\n7. Add the license header at the top of each `.bal` file. \n\n8. Add the <a href=\"https://github.com/ballerina-platform/ballerina-extended-library/discussions/77\" target=\"_blank\">`Package.md`</a> and <a href=\"https://github.com/ballerina-platform/ballerina-extended-library/discussions/78\" target=\"_blank\">`Module.md`</a> files.\n\n9. Add a connector icon to the root of the connector. The icon needs to be a `.png` of 200x200 px size named as `icon.png`. \n\n10. Update the <a href=\"https://github.com/ballerina-platform/ballerina-extended-library/discussions/72\" target=\"_blank\">`Ballerina.toml` file</a>.\n\n11. Run the `./gradlew build` command. \n\n12. Push the changes and create a Pull Request to the master branch of the `openapi-connectors` repository.\n\n## Annotation reference\n\n### The `@openapi:ServiceInfo` annotation\n\nThe `@openapi:ServiceInfo` annotation supports several usages in the Ballerina OpenAPI tool.\n\n```ballerina\n@openapi:ServiceInfo {\n    contract: \"/path/to/openapi.json|yaml\",\n    tags: [\"store\"],\n    operations: [\"op1\", \"op2\"],\n    failOnErrors: true // (default value => true),\n    excludeTags: [\"pets\", \"user\"],\n    excludeOperations: [\"op1\", \"op2\"],\n    title: \"store\",\n    version: \"0.1.0\",\n    description: \"API system description\",\n    email: \"mark@abc.com\",\n    contactName: \"ABC compaby\",\n    contactURL: \"http://mock-api-contact\",\n    termsOfService: \"http://mock-api-doc\",\n    licenseName: \"ABC\",\n    licenseURL: \"http://abc-license.com\"\n    embed: true // (default value => false)\n}\nservice /greet on new http:Listener(9090) {\n   ...\n}\n```\n\nThe attributes of the annotation are optional and can be used for each particular purpose as described below.\n\n| Field Name                 | Description                                                                                                                                                                                                                                                                                                                               | Mandatory/Optional |\n|----------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------|\n| `contract: string`          | Provides a path to the OpenAPI contract as a string and the OpenAPI file can either be a `.yaml` or `.json`.                                                                                                                                                                                                                              | Mandatory         |\n| `tags: string[]`            | Specifies the tag in the list for the compiler to validate resources against operations that are tagged with it. If not specified, the compiler validates resources against all the operations defined in the OpenAPI contract.                                                                                                           | Optional          |\n| `operations: string[]`      | Contains a list of operation names that need to be validated against the resources in the service. If not specified, the compiler validates resources against all the operations defined in the OpenAPI contract. If both tags and operations are defined, it validates against the union set of the resources.                          | Optional          |\n| `excludeTags: string[]`     | Stores the tags that do not need to be validated. The annotation can not have both the `excludeTags` and `Tags` attributes at the same time.                                                                                                                                                                                              | Optional          |\n| `excludeOperations: string[]`| Specifies the operations that do not need to be validated.                                                                                                                                                                                                                                                                                | Optional          |\n| `failOnErrors: boolean`     | Turns off the validation when used with `false` in the annotation.                                                                                                                                                                                                                                                                        | Optional          |\n| `title: string`             | Adds the title of the `info` section in the generated OpenAPI contract.                                                                                                                                                                                                                                                                   | Optional          |\n| `version: string`           | Adds the version of the `info` section in the generated OpenAPI contract.                                                                                                                                                                                                                                                                 | Optional          |\n| `description: string`       | You can use this to add the description of the `info` section in the generated OpenAPI contract. A brief description of the API, outlining its purpose, features, and any other relevant details that help users understand what the API does and how to use it.                                                                            | Optional          |\n| `email: string`             | You can use this to add the email address to the `contact` section in the OpenAPI contract. This describes email details for the API provider or support.                                                                                                                                                                                 | Optional          |\n| `contactName: string`       | You can use this attribute to add the name of the person or organization responsible for the API.                                                                                                                                                                                                                                         | Optional          |\n| `contactURL: string`        | You can use `contactURL` to add the URL to a web page with more information about the API, the provider, or support.                                                                                                                                                                                                                      | Optional          |\n| `termsOfService: string`    | You can use this to add the URL details to the terms of service for the API.                                                                                                                                                                                                                                                              | Optional          |\n| `licenseName: string`       | You can use this to add the name of the license under which the API is provided.                                                                                                                                                                                                                                                          | Optional          |\n| `licenseURL: string`        | You can use this to add the URL details regarding the full text of the license.                                                                                                                                                                                                                                                           | Optional          |\n| `embed: string`             | Turns on generating OpenAPI documentation for the service for [introspection endpoint](https://ballerina.io/spec/http/#236-openapi-specification-resources) support when used with `true` in the annotation.                                                                                                                                                                                               | Optional          |\n","id":"openapi-tool","sub":"","third":"","slug":"openapi-tool","codes":"[[-1899523298,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener ep0 </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {host</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"localhost\\\"</span><span style=\\\"color:#24292E\\\">});</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /store</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> ep0 {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> store</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Inventory</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Accepted {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // logic here</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> store</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Inventory</span><span style=\\\"color:#E36209\\\"> payload</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        //logic here</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2065120675,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {basePath</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/store\\\"</span><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> OASServiceType</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ServiceContract;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> store</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Inventory</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Accepted;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> store</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">http</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Payload</span><span style=\\\"color:#E36209\\\"> Inventory</span><span style=\\\"color:#E36209\\\"> payload</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Accepted</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ErrorPayloadBadRequest;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[633372278,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contract</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/openapi.json|yaml\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    title</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Store Management\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    version:</span><span style=\\\"color:#032F62\\\"> \\\"0.1.0\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1455875747,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    title</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Store Management APIs\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    version:</span><span style=\\\"color:#032F62\\\"> \\\"1.1.0\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    email</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"mark@abc.com\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /greet</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-759064129,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>openapi: 3.0.1</span></span>\\n<span class=\\\"line\\\"><span>info:</span></span>\\n<span class=\\\"line\\\"><span>  title: Store Management APIs</span></span>\\n<span class=\\\"line\\\"><span>  version: 1.1.0</span></span>\\n<span class=\\\"line\\\"><span>  contact:</span></span>\\n<span class=\\\"line\\\"><span>    email: mark@abc.com</span></span>\\n<span class=\\\"line\\\"><span>...</span></span></code></pre>\"],[1941722809,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   operationId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"createStoreData\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   summary</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"API for adding store amount\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   tags</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"retail\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"rate\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> store</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Inventory</span><span style=\\\"color:#E36209\\\"> payload</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2050965848,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">paths</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  /store</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    post</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      tags</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">retail</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">rate</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      summary</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">API for adding store amount</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      operationId</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">createStoreData</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      requestBody</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        content</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          application/json</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            schema</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    ...</span></span></code></pre>\"],[-1130670933,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        examples</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">            \\\"response\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                &#x3C;</span><span style=\\\"color:#24292E\\\">status</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">code</span><span style=\\\"color:#D73A49\\\">>:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                    \\\"examples\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                        &#x3C;</span><span style=\\\"color:#24292E\\\">media</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">type</span><span style=\\\"color:#D73A49\\\">>:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                            &#x3C;</span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">for</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">example</span><span style=\\\"color:#D73A49\\\">>:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                                \\\"value\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                                    ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                            &#x3C;</span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">for</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">example</span><span style=\\\"color:#D73A49\\\">>:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                                \\\"filePath\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> &#x3C;path</span><span style=\\\"color:#D73A49\\\">></span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span></code></pre>\"],[-1577514314,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /convert</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       operationId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"getStoreData\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">       examples</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">            \\\"response\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                \\\"200\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                    \\\"examples\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                        \\\"application/json\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                            \\\"store01\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                                \\\"value\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                                    \\\"materials\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Wood\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                                    \\\"status\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"InProgress\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                                    \\\"item\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Table\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                                    \\\"amount\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 120</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                            \\\"store02\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                                \\\"filePath\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"storeExamples.json\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> store</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Inventory</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-129348547,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">paths</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  /store</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    get</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      operationId</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">getStoreData</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      responses</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"200\\\"</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          description</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Ok</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          content</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            application/json</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              schema</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                $ref</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">'#/components/schemas/Inventory'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              examples</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                store01</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  value</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    materials</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Wood</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    status</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">InProgress</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    item</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Table</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    amount</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">120</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                store02</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  value</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    item</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Table</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    amount</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">100</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    materials</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Plastic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    status</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Done</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"202\\\"</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          description</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Accepted</span></span></code></pre>\"],[1624530080,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        examples</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">            \\\"requestBody\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                &#x3C;</span><span style=\\\"color:#24292E\\\">media</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">type</span><span style=\\\"color:#D73A49\\\">>:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                    &#x3C;</span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">for</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">example</span><span style=\\\"color:#D73A49\\\">>:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                        \\\"filePath\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> &#x3C;file path</span><span style=\\\"color:#D73A49\\\">></span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                    &#x3C;</span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">for</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">example</span><span style=\\\"color:#D73A49\\\">>:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                        \\\"value\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                            ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span></code></pre>\"],[2122209903,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        examples</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">            \\\"requestBody\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                \\\"application/json\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                    \\\"payloadStore01\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                        \\\"filePath\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"storeExamples.json\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                    \\\"PayloadStore02\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                        \\\"value\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                            \\\"materials\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Wood\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                            \\\"status\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"InProgress\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                            \\\"item\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Table\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                            \\\"amount\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 120</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> store</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Inventory</span><span style=\\\"color:#E36209\\\"> payload</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span></code></pre>\"],[-1793900823,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">paths</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\"> /store</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    post</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      operationId</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">postStore</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      requestBody</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        content</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          application/json</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            schema</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              $ref</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">'#/components/schemas/Inventory'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            examples</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              payloadStore01</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                value</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  item</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Table</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  amount</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">100</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  materials</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Plastic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  status</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Done</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              PayloadStore02</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                value</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  materials</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Wood</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  status</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">InProgress</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  item</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Table</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  amount</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">120</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        required</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      responses</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"202\\\"</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          description</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Accepted</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">...</span></span></code></pre>\"],[-1519825352,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Example</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    id</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 10</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Jessica Smith\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> User</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">  int</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">  string</span><span style=\\\"color:#24292E\\\"> name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[937145176,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> path</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Example</span><span style=\\\"color:#24292E\\\">{value: </span><span style=\\\"color:#032F62\\\">\\\"approved\\\"</span><span style=\\\"color:#24292E\\\">} </span><span style=\\\"color:#032F62\\\">\\\"approved\\\"</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#032F62\\\">\\\"pending\\\"</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#032F62\\\">\\\"closed\\\"</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#032F62\\\">\\\"new\\\"</span><span style=\\\"color:#E36209\\\"> status</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">...</span></span></code></pre>\"],[193111585,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">parameters</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  - </span><span style=\\\"color:#22863A\\\">in</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">query</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">status</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    schema</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      enum</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">approved</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">pending</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">closed</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">new</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      example</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">approved</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">...</span></span></code></pre>\"],[-793030858,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> User</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   @</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Example</span><span style=\\\"color:#24292E\\\"> { value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   int</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   @</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Example</span><span style=\\\"color:#24292E\\\"> { value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Jessica Smith\\\"</span><span style=\\\"color:#24292E\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">   string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1458904955,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">components</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  schemas</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    User</span><span style=\\\"color:#24292E\\\">:    </span><span style=\\\"color:#6A737D\\\"># Schema name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      properties</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        id</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">integer</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          format</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">int64</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          example</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#6A737D\\\">          # Property example</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        name</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          example</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Jessica Smith</span><span style=\\\"color:#6A737D\\\">  # Property example</span></span></code></pre>\"],[-1969629379,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#032F62\\\">openapi:Examples {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  Jessica</span><span style=\\\"color:#24292E\\\">: { </span><span style=\\\"color:#032F62\\\">// Example 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    value</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">       id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">10</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">       name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Jessica Smith\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  Ron</span><span style=\\\"color:#24292E\\\">: { </span><span style=\\\"color:#032F62\\\">// Example 2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    value</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">       id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">11</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">       name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Ron Stewart\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">type User record {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">  int id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">  string name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1055113360,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">components</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  schemas</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    User</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      properties</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        id</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">integer</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        name</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      examples</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          Jessica</span><span style=\\\"color:#24292E\\\">:   </span><span style=\\\"color:#6A737D\\\"># Example 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            value</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">10</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Jessica Smith</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          Ron</span><span style=\\\"color:#24292E\\\">:       </span><span style=\\\"color:#6A737D\\\"># Example 2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            value</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">11</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Ron Stewart</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">...</span></span></code></pre>\"],[1098073549,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">openapi</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">3.0.1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">paths</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  /store</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    get</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      operationId</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">getStoreData</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      responses</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"200\\\"</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          description</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Ok</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          content</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">            application/json</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              schema</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                $ref</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">'#/components/schemas/Inventory'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">              examples</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                store01</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                  value</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    materials</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Wood</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    status</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">InProgress</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    Item</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Table</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">                    amount</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">120</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"202\\\"</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          description</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">Accepted</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">components</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  schemas</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    Inventory</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      required</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">Item</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">amount</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">materials</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#032F62\\\">status</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">      properties</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        materials</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        status</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        Item</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">        amount</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          type</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">integer</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">          format</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">int64</span></span></code></pre>\"],[-1037519608,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> client class</span><span style=\\\"color:#6F42C1\\\"> Client</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\"> ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> store</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#E36209\\\"> headers</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {}) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Inventory</span><span style=\\\"color:#D73A49\\\">|error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#032F62\\\">\\\"materials\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Wood\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"status\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"InProgress\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"Item\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Table\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"amount\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 120</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[237060759,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[tool.openapi]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">id </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"client01\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">filePath </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"./openapi.yaml\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">targetModule </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"delivery\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">options.mode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"client\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">options.statusCodeBinding </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">options.tags </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"tag1\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"tag2\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">options.operations </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"op1\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"op2\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">options.nullable </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> true</span><span style=\\\"color:#6A737D\\\"> # (default value => false)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">options.license </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"./license.txt\\\"</span></span></code></pre>\"],[-1227705200,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">openapi</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceInfo</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contract</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/openapi.json|yaml\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    tags</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"store\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    operations</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"op1\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"op2\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    failOnErrors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#6A737D\\\"> // (default value => true),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    excludeTags</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"pets\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"user\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    excludeOperations</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"op1\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"op2\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    title</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"store\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    version:</span><span style=\\\"color:#032F62\\\"> \\\"0.1.0\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    description</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"API system description\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    email</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"mark@abc.com\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contactName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ABC compaby\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contactURL</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://mock-api-contact\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    termsOfService</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://mock-api-doc\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    licenseName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ABC\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    licenseURL</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"http://abc-license.com\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    embed</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#6A737D\\\"> // (default value => false)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /greet</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}