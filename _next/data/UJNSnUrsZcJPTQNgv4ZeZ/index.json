{"pageProps":{"samples":{"consuming-services":"```\nimport ballerina/http;\nimport ballerinax/googleapis.sheets;\n\nconfigurable string githubPAT = ?;\nconfigurable string repository = \"ballerina-platform/ballerina-lang\";\nconfigurable string sheetsAccessToken = ?;\nconfigurable string spreadSheetId = ?;\nconfigurable string sheetName = \"Sheet1\";\n\ntype PR record {\n    string url;\n    string title;\n    string state;\n    string created_at;\n    string updated_at;\n};\n\npublic function main() returns error? {\n    http:Client github = check new (\"https://api.github.com/repos\");\n    map<string> headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n        \"Authorization\": \"token \" + githubPAT\n    };\n    PR[] prs = check github->/[repository]/pulls(headers);\n\n    sheets:Client gsheets = check new ({auth: {token: sheetsAccessToken}});\n    check gsheets->appendRowToSheet(spreadSheetId, sheetName,\n            [\"Issue\", \"Title\", \"State\", \"Created At\", \"Updated At\"]);\n\n    foreach var {url, title, state, created_at, updated_at} in prs {\n        check gsheets->appendRowToSheet(spreadSheetId, sheetName,\n                [url, title, state, created_at, updated_at]);\n    }\n}\n```","graphql-api":"```\nimport ballerina/graphql;\nimport ballerina/http;\nimport ballerinax/mysql;\nimport ballerinax/mysql.driver as _;\n\nconfigurable string user = ?;\nconfigurable string password = ?;\nconfigurable string host = ?;\nconfigurable int port = ?;\nconfigurable string database = ?;\nconfigurable string apiEndpoint = ?;\n\npublic type Album record {\n    string id;\n    string title;\n    string artist;\n    decimal price;\n    Currency currency = USD;\n};\n\npublic enum Currency {\n    USD,\n    LKR,\n    EUR,\n    GBP\n}\n\nservice / on new graphql:Listener(9000) {\n    private final mysql:Client db;\n    private final http:Client forex;\n    private final Currency baseCurrency = USD;\n\n    function init() returns error? {\n        self.db = check new (host, user, password, database, port);\n        self.forex = check new (apiEndpoint);\n    }\n\n    resource function get album(string id, Currency currency = USD) returns Album|error {\n        Album album = check self.db->queryRow(`SELECT * FROM Albums WHERE id=${id}`);\n        if currency != self.baseCurrency {\n            record {decimal rate;} exchange = check self.forex->/currencyConversion('from = self.baseCurrency, to = currency);\n            album.price = album.price * exchange.rate;\n            album.currency = currency;\n        }\n        return album;\n    }\n}\n```","grpc-api-proto":"```\nsyntax = \"proto3\";\n\nimport \"google/protobuf/wrappers.proto\";\nimport \"google/protobuf/empty.proto\";\n\nservice Albums {\n    rpc getAlbum(google.protobuf.StringValue)\n            returns (Album);\n    rpc addAlbum(Album) returns (Album);\n    rpc listAlbums(google.protobuf.Empty)\n            returns (stream Album);\n}\n\nmessage Album {\n    string id = 1;\n    string title = 2;\n    string artist = 3;\n    float price = 4;\n};\n```","grpc-api":"```\nimport ballerina/grpc;\n\nconfigurable int port = 9090;\n\nAlbum[] albums = [\n    {id: \"1\", title: \"Blue Train\", artist: \"John Coltrane\", price: 56.99},\n    {id: \"2\", title: \"Jeru\", artist: \"Gerry Mulligan\", price: 17.99},\n    {id: \"3\", title: \"No Count Sarah\", artist: \"Sarah Vaughan\", price: 39.99}\n];\n\n@grpc:Descriptor {\n    value: DESCRIPTOR_RECORD_STORE\n}\nservice \"Albums\" on new grpc:Listener(port) {\n    remote function getAlbum(string id) returns Album|error {\n        Album[] filteredAlbums = albums.filter(album => album.id == id);\n        if filteredAlbums.length() > 0 {\n            return filteredAlbums.pop();\n        }\n\n        return error grpc:NotFoundError(string `Cannot find the album for ID ${id}`);\n    }\n\n    remote function addAlbum(Album album) returns Album|error {\n        albums.push(album);\n        return album;\n    }\n\n    remote function listAlbums() returns stream<Album, error?>|error {\n        return albums.toStream();\n    }\n}\n```","kafka-consumer-producer":"```\nimport ballerinax/kafka;\n\nconfigurable string groupId = \"order-consumers\";\nconfigurable string orders = \"orders\";\nconfigurable string paymentSuccessOrders = \"payment-success-orders\";\nconfigurable decimal pollingInterval = 1;\nconfigurable string kafkaEndpoint = kafka:DEFAULT_URL;\n\npublic type Order readonly & record {|\n    int id;\n    string desc;\n    PaymentStatus paymentStatus;\n|};\n\npublic enum PaymentStatus {\n    SUCCESS,\n    FAIL\n}\n\nfinal kafka:ConsumerConfiguration consumerConfigs = {\n    groupId: groupId,\n    topics: [orders],\n    offsetReset: kafka:OFFSET_RESET_EARLIEST,\n    pollingInterval\n};\n\nservice on new kafka:Listener(kafkaEndpoint, consumerConfigs) {\n    private final kafka:Producer orderProducer;\n\n    function init() returns error? {\n        self.orderProducer = check new (kafkaEndpoint);\n    }\n\n    remote function onConsumerRecord(Order[] orders) returns error? {\n        check from Order 'order in orders\n            where 'order.paymentStatus == SUCCESS\n            do {\n                check self.orderProducer->send({\n                    topic: paymentSuccessOrders,\n                    value: 'order\n                });\n            };\n    }\n}\n```","restful-api":"```\nimport ballerina/http;\n\nconfigurable int port = 8080;\n\ntype Album readonly & record {|\n    string id;\n    string title;\n    string artist;\n    decimal price;\n|};\n\ntable<Album> key(id) albums = table [\n        {id: \"1\", title: \"Blue Train\", artist: \"John Coltrane\", price: 56.99},\n        {id: \"2\", title: \"Jeru\", artist: \"Gerry Mulligan\", price: 17.99},\n        {id: \"3\", title: \"Sarah Vaughan and Clifford Brown\", artist: \"Sarah Vaughan\", price: 39.99}\n    ];\n\nservice / on new http:Listener(port) {\n    resource function get albums() returns Album[] {\n        return albums.toArray();\n    }\n\n    resource function get albums/[string id]() returns Album|http:NotFound {\n        Album? album = albums[id];\n        if album is () {\n            return http:NOT_FOUND;\n        } else {\n            return album;\n        }\n    }\n\n    resource function post albums(@http:Payload Album album) returns Album {\n        albums.add(album);\n        return album;\n    }\n}\n```","working-with-data":"```\nimport ballerina/http;\nimport ballerina/io;\n\ntype Country record {\n    string country;\n    int population;\n    string continent;\n    int cases;\n    int deaths;\n};\n\n// Prints the top 10 countries having the highest case-fatality ratio.\npublic function main() returns error? {\n    http:Client diseaseEp = check new (\"https://disease.sh/v3\");\n    Country[] countries = check diseaseEp->/covid\\-19/countries;\n\n    json summary =\n        from var {country, continent, population, cases, deaths} in countries\n            where population >= 100000 && deaths >= 100\n            let decimal caseFatalityRatio = <decimal>deaths / <decimal>cases * 100\n            order by caseFatalityRatio descending\n            limit 10\n            select {country, continent, population, caseFatalityRatio};\n    io:println(summary);\n}\n```","working-with-databases":"```\nimport ballerina/http;\nimport ballerina/sql;\nimport ballerinax/mysql;\nimport ballerinax/mysql.driver as _;\n\nconfigurable string host = ?;\nconfigurable int port = ?;\nconfigurable string user = ?;\nconfigurable string password = ?;\nconfigurable string database = ?;\n\ntype Album record {|\n    string id;\n    string title;\n    string artist;\n    decimal price;\n|};\n\nservice / on new http:Listener(8080) {\n    private final mysql:Client db;\n\n    function init() returns error? {\n        self.db = check new (host, user, password, database, port);\n    }\n\n    resource function get albums() returns Album[]|error {\n        stream<Album, sql:Error?> albumStream = self.db->query(`SELECT * FROM Albums`);\n        return check from Album album in albumStream select album;\n    }\n\n    resource function get albums/[string id]() returns Album|http:NotFound|error {\n        Album|sql:Error result = self.db->queryRow(`SELECT * FROM Albums WHERE id = ${id}`);\n        if result is sql:NoRowsError {\n            return http:NOT_FOUND;\n        } else {\n            return result;\n        }\n    }\n\n    resource function post album(@http:Payload Album album) returns Album|error {\n        _ = check self.db->execute(`\n            INSERT INTO Albums (id, title, artist, price)\n            VALUES (${album.id}, ${album.title}, ${album.artist}, ${album.price});`);\n        return album;\n    }\n}\n```"}},"__N_SSG":true}