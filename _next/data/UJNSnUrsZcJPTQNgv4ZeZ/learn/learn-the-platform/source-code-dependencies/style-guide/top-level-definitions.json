{"pageProps":{"frontmatter":{"layout":"ballerina-style-guide-left-nav-pages-swanlake","title":"Top-level definitions","active":"top-level-definitions","permalink":"/learn/style-guide/top-level-definitions/","intro":"The sections below include the coding conventions with respect to top-level definitions.","redirect_from":["/learn/style-guide/definitions","/learn/coding-conventions/definitions","/learn/coding-conventions/top-level-definitions","/swan-lake/learn/coding-conventions/top-level-definitions/","/swan-lake/learn/coding-conventions/top-level-definitions","/learn/coding-conventions/top-level-definitions/","/learn/coding-conventions/top-level-definitions","/learn/user-guide/coding-conventions/top-level-definitions","/learn/user-guide/coding-conventions/top-level-definitions/","/learn/user-guide/code-organization/coding-conventions/top-level-definitions/","/learn/user-guide/code-organization/coding-conventions/top-level-definitions","/learn/user-guide/style-guide/coding-conventions/top-level-definitions","/learn/user-guide/style-guide/coding-conventions/top-level-definitions/","/learn/style-guide/top-level-definitions"]},"content":"\n## General practices\n\n* Do not indent the top-level definitions. \n  \n**Do's**\n\n```ballerina\n\nimport ballerina/http;\n\nconst int MIN_AGE = 20;\nint repetitions = 0;\n    \nservice / on ep1 {\n    ...\n}\n```\n\n**Don'ts**\n  \n```ballerina\n// This import is indented correctly.\nimport ballerina/http; \n    \n    const int MIN_AGE = 20; // Not indented correctly.\n    int repetitions = 0; // Not indented correctly.\n        \n// Not indented correctly.\nservice / on ep1 {\n    ...\n    }\n```\n\n## Import declaration\n\n* Do not keep spaces between the organization name, divider `/`, and module name.\n\n**Example,**\n\n```ballerina\nimport ballerina/http;\n```\n\n* Imports should be sorted alphabetically, first by the organization name and then by the module name.\n\n## Function definition\n* Do not keep spaces between the function name and the open parentheses `(` of the function signature.\n\n**Example,**\n\n```ballerina\nfunction func1() {\n}\n```\n\n* If the function needs to be split into new lines due to it exceeding the max line length, you can break lines from the parameter list by moving only a parameter value to a new line and indenting it with four spaces from the starting position of the function.\n    \n**Example,**\n\n```ballerina\nfunction getAddress(int value,\n    string name) returns (string|()) {\n    ...\n}\n```\n\n  - You can break before the `returns` keyword and indent it with four spaces from the starting position of the function.\n    \n**Example,**\n\n```ballerina\nfunction getAddress(int value, string name)\n    returns (string|()) {\n    ...\n}    \n```\n\n  - You can break after the `returns` keyword by moving the return value to a new line\n    and indenting it with four spaces from the starting position of the function.\n    \n**Example,**\n\n```ballerina\nfunction getAddress(int value, string name) returns\n    (string|()) {\n    ...\n}          \n```\n\n## Service definition\n\n* Keep the listener inline with the service signature.\n  \n**Example,**\n\n```ballerina\nservice / on new http:Listener(9090) {\n  ...\n}\n```\n\n* When formatting service-level method definitions, block indent each element and\n  follow the [Function definition](/learn/style-guide/top-level-definitions/#function-definition) formatting guidelines.\n  \n**Example,**\n\n```ballerina\nimport ballerina/http;\n\nservice / on new http:Listener(9090) {\n\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n    \n}\n```\n\n* Block indent each method definition, and field definition inside a service definition.\n \n## Class definition\n\n* Block indent each field definition, method definition and type inclusion on their own line.\n* The `init` method should be placed before all the other methods.\n* For method definitions in the class definition, follow the [Function definition](/learn/style-guide/top-level-definitions/#function-definition) formatting guidelines.\n\n**Example,**\n\n```ballerina\nclass Person {\n    public boolean isMarried = false;\n    int age;\n    string name;\n\n    function init(string name, int age = 0) {\n        self.age = age;\n        self.name = name;\n    }\n\n    function getName() returns string {\n        return self.name;\n    }\n\n    function setIsMarried(boolean isMarried) {\n        self.isMarried = isMarried;\n    }\n\n    function getIsMarried() returns boolean {\n        return self.isMarried;\n    }\n}\n```\n\n## Record definition\nBlock indent each of the field definitions (including the rest field) in their own line.\n\n**Example,**\n\n```ballerina\ntype Person record {\n    string name;\n    int...;\n}\n\n// or\n\ntype Person record {|\n    int id;\n    string name;\n|}\n```\n\n## Reference record or object\n* Do not keep spaces between the `*` and the object name or the record name.\n  \n**Example,**\n  \n```ballerina\n*Person;\n```\n* Also, block-indent.\n\n**Example:**\n\n```ballerina\ntype UserId record {\n    string id = \"\";\n};\n  \ntype User record {\n    *UserId; // Reference to UserId record.\n    string name = \"john\";\n    int age = 20;\n};\n\n// or\ntype Person object {\n    string name;\n\n    // Object function definitions.\n    function getName() returns string;\n};\n\nclass Employee {\n    *Person; // Reference to Person object type.\n\n    function init() {\n        self.name = \"John Doe\";\n    }\n\n    function getName() returns string {\n        return self.name;\n    }\n}\n```\n\n<div class=\"cGitButtonContainer\"><p data-button=\"iGitStarText\">\"Star\"</p><p data-button=\"iGitWatchText\">\"Watch\"</p></div>\n\n\n<style> #tree-expand-all , #tree-collapse-all, .cTocElements {display:none;} .cGitButtonContainer {padding-left: 40px;display: none;} </style>\n","id":"top-level-definitions","sub":"source-code-dependencies","third":"style-guide","slug":"source-code-dependencies/style-guide/top-level-definitions"},"__N_SSG":true}