{"pageProps":{"samples":{"ballerina-with-graalvm":{"frontmatter":{"title":"Ballerina and GraalVM fuel microservices with lightning-fast performance","description":"With this duo, your microservices will reach new heights of efficiency and responsiveness, leaving competitors in the dust. Ballerina's seamless integration with GraalVM harnesses the power of just-in-time compilation and native image generation, resulting in optimized execution and unparalleled performance. Stay ahead of the game with Ballerina and GraalVM, and experience microservices performance like never before.","url":"https://ballerina.io/learn/graalvm-executable-overview/","image":"images/graalvm-ballerina.png"},"code":""},"bottom-up-top-down":{"frontmatter":{"title":"Blend of top-down and bottom-up development","description":"Ballerina revolutionizes microservices development by offering unparalleled support for both top-down and bottom-up approaches. Developers can effortlessly design their microservices architecture with Ballerina's intuitive syntax and design tools, allowing for clear architectural vision and easier collaboration. Alternatively, they can build individual microservices with precision and speed, seamlessly integrating them into a cohesive architecture.","url":"https://wso2.com/ballerina/vscode/docs/design-the-application/design-using-the-architecture-view/","image":"images/architecture-view.png"},"code":""},"data-persistence":{"frontmatter":{"title":"Robust data persistence","description":"Ballerina's data persistence capabilities streamline microservices development by providing a simple, language-native approach to different data stores. With built-in connectors, Ballerina facilitates seamless communication with various data sources, reducing integration complexities. Also the bal persist CLI tool allows users to use the defined data model to generate client API to access the data in the given data store. This type-safe client API ensures data consistency and error handling, enhancing reliability. Ballerina's data orchestration features enable efficient data transformations and manipulation, crucial for microservices processing diverse data formats. Ballerina's robust data persistence capabilities empower microservices to efficiently manage and interact with data, simplifying development and ensuring data integrity in complex distributed systems.","url":"https://ballerina.io/learn/manage-data-persistence-with-bal-persist/","image":"images/bal-persist-diagram.png"},"code":""},"designed-for-failure":{"frontmatter":{"title":"Designed for failure","description":"By incorporating proven patterns and best practices, Ballerina equips you with the tools to proactively address failure scenarios, ensuring system stability and minimizing downtime and offering a revolutionary approach to microservices development that is inherently `designed for failure` with its built-in fault-tolerance mechanisms and circuit-breaking capabilities.","url":"https://ballerina.io/learn/by-example/http-circuit-breaker/","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"type Album readonly &#x26; record {\n    string title;\n    string artist;\n};\n\npublic function main() returns error? {\n    http:Client albumClient = check new (&#x22;localhost:9090&#x22;,\n        circuitBreaker = {\n            // The failure calculation window measures how long the circuit breaker keeps the\n            // statistics for the operations.\n            rollingWindow: {\n                // The period is in seconds for which the failure threshold is calculated.\n                timeWindow: 10,\n                // The granularity (in seconds) at which the time window slides.\n                // The rolling window is divided into buckets and slides by these increments.\n                bucketSize: 2,\n                // The minimum number of requests in the rolling window that trips the circuit.\n                requestVolumeThreshold: 0\n            },\n            // The threshold for request failures. When this threshold exceeds, the circuit trips.\n            // This is the ratio between failures and total requests. The ratio is calculated using\n            // the requests received within the given rolling window.\n            failureThreshold: 0.2,\n            // The period (in seconds) to wait before attempting to make another request to the upstream service.\n            resetTime: 10,\n            // HTTP response status codes that are considered as failures\n            statusCodes: [400, 404, 500]\n\n        }\n    );\n    Album[] payload = check albumClient->/albums;\n    io:println(payload);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Album</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#D73A49\"> &#x26;</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> artist;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client albumClient </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#032F62\">\"localhost:9090\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">        circuitBreaker</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // The failure calculation window measures how long the circuit breaker keeps the</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // statistics for the operations.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            rollingWindow</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">                // The period is in seconds for which the failure threshold is calculated.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                timeWindow</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 10</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">                // The granularity (in seconds) at which the time window slides.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">                // The rolling window is divided into buckets and slides by these increments.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                bucketSize</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">                // The minimum number of requests in the rolling window that trips the circuit.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                requestVolumeThreshold</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            },</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // The threshold for request failures. When this threshold exceeds, the circuit trips.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // This is the ratio between failures and total requests. The ratio is calculated using</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // the requests received within the given rolling window.</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">            failureThreshold</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 0.2</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // The period (in seconds) to wait before attempting to make another request to the upstream service.</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">            resetTime</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 10</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">            // HTTP response status codes that are considered as failures</span></span>\n<span class=\"line\"><span style=\"color:#E36209\">            statusCodes</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span><span style=\"color:#005CC5\">400</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">404</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">500</span><span style=\"color:#24292E\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Album[] payload </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> albumClient</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">albums;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">payload</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"devops-agility":{"frontmatter":{"title":"Accelerating DevOps agility","description":"Ballerina promotes DevOps practices by offering seamless integration with popular container platforms like Docker and Kubernetes. It supports containerization and provides native support for deployment on container orchestration platforms, facilitating efficient scaling and management of microservices.","url":"https://github.com/ballerina-platform/ballerina-distribution/blob/v2201.5.0/examples/c2c-k8s-deployment/Cloud.toml","image":"images/devops-agility.png"},"code":""},"http2-native":{"frontmatter":{"title":"Ballerina's native HTTP/2 support","description":"Revolutionize your microservices architecture with Ballerina's cutting-edge native support for HTTP/2. Say goodbye to latency and embrace lightning-fast communication between your services through the power of multiplexing. Experience optimal resource utilization and bandwidth efficiency with advanced features such as server push and stream prioritization.","url":"","image":"images/http2-ballerina.png"},"code":""},"integration-capabilities":{"frontmatter":{"title":"Powerful integration capabilities","description":"Unlocking the power of seamless integration, Ballerina shines with its exceptional capability to connect and interact with a vast array of external systems and services. With an extensive range of connectors at its disposal, Ballerina effortlessly integrates with databases, message brokers, web services, and more.","url":"https://ballerina.io/learn/by-example/kafka-service-consume-message/","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"public type Order readonly &#x26; record {\n    int orderId;\n    string productName;\n    decimal price;\n    boolean isValid;\n};\n\nlistener kafka:Listener orderListener = new (kafka:DEFAULT_URL, {\n    groupId: &#x22;order-group-id&#x22;,\n    topics: &#x22;order-topic&#x22;\n});\n\nservice on orderListener {\n\n    remote function onConsumerRecord(Order[] orders) returns error? {\n        // The set of orders received by the service are processed one by one.\n        check from Order &#x27;order in orders\n            where &#x27;order.isValid\n            do {\n                log:printInfo(string &#x60;Received valid order for ${&#x27;order.productName}&#x60;);\n            };\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> type</span><span style=\"color:#6F42C1\"> Order</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#D73A49\"> &#x26;</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> orderId;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> productName;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    boolean</span><span style=\"color:#24292E\"> isValid;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">listener</span><span style=\"color:#24292E\"> kafka</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Listener orderListener </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">kafka</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">DEFAULT_URL, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    groupId</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"order-group-id\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    topics</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"order-topic\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#24292E\"> orderListener {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    remote</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> onConsumerRecord</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">Order</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">orders</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // The set of orders received by the service are processed one by one.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#D73A49\"> from</span><span style=\"color:#24292E\"> Order 'order </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> orders</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            where</span><span style=\"color:#24292E\"> 'order.isValid</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            do</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                log</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">printInfo</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Received valid order for ${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">productName</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"msa-tracing":{"frontmatter":{"title":"Ballerina enables seamless monitoring of microservices","description":"Ballerina's tracing capabilities go beyond basic monitoring. With seamless integration with popular tracing frameworks like Jaeger and OpenTelemetry, developers can effortlessly instrument their microservices with tracing spans, enabling end-to-end tracing and analysis of complex transaction flows.","url":"https://ballerina.io/learn/observe-ballerina-programs/","image":"images/screenshots-collage-final-image-transparent-v5.png"},"code":""},"natively-concurrent":{"frontmatter":{"title":"Native support for concurrency","description":"Ballerina combines the benefits of static typing and native support for concurrency. By catching errors early during development, the language ensures greater reliability and stability in microservices systems. Additionally, Ballerina's concurrency support enables developers to handle concurrent operations efficiently, improving the performance and responsiveness of their microservices.","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/http;\n\ntype Person record {|\n    string name;\n    boolean employed;\n|};\n\ntype Summary record {|\n    int count;\n    int average;\n|};\n\nint[] tasks = [1, 4, 5, 2, 7, 4];\n\nservice on new http:Listener(8080) {\n    resource function post person\\-tasks(Person[] members) returns Summary {\n        return process(members, tasks);\n    }\n}\n\nfunction process(Person[] members, int[] tasks) returns Summary {\n    worker w1 {\n        Person[] employedMembers = from Person p in members where p.employed select p;\n        int count = employedMembers.length();\n        count -> w2;\n        count -> function;\n    }\n\n    worker w2 {\n        int total = int:sum(...tasks);\n        int employedCount = <- w1;\n        int avg = employedCount == 0 ? 0 : total / employedCount;\n        avg -> function;\n    }\n\n    int count = <- w1;\n    int average = <- w2;\n    return {count, average};\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Person</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    boolean</span><span style=\"color:#24292E\"> employed;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Summary</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> count;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> average;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">int</span><span style=\"color:#24292E\">[] tasks </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> [</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">4</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">5</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">2</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">7</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">4</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> person</span><span style=\"color:#24292E\">\\-tasks(</span><span style=\"color:#E36209\">Person</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">members</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Summary {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#6F42C1\"> process</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">members</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">tasks</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> process</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">Person</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">members</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">int</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">tasks</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Summary {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    worker</span><span style=\"color:#24292E\"> w1 {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Person[] employedMembers </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> from</span><span style=\"color:#24292E\"> Person p </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> members </span><span style=\"color:#D73A49\">where</span><span style=\"color:#24292E\"> p.employed </span><span style=\"color:#D73A49\">select</span><span style=\"color:#24292E\"> p;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        int</span><span style=\"color:#24292E\"> count </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> employedMembers.</span><span style=\"color:#6F42C1\">length</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        count </span><span style=\"color:#D73A49\">-></span><span style=\"color:#24292E\"> w2;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        count </span><span style=\"color:#D73A49\">-></span><span style=\"color:#D73A49\"> function</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    worker</span><span style=\"color:#24292E\"> w2 {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        int</span><span style=\"color:#24292E\"> total </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">sum</span><span style=\"color:#24292E\">(...</span><span style=\"color:#E36209\">tasks</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        int</span><span style=\"color:#24292E\"> employedCount </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;-</span><span style=\"color:#24292E\"> w1;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        int</span><span style=\"color:#24292E\"> avg </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> employedCount </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#D73A49\"> ?</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#D73A49\"> :</span><span style=\"color:#24292E\"> total / employedCount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        avg </span><span style=\"color:#D73A49\">-></span><span style=\"color:#D73A49\"> function</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> count </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;-</span><span style=\"color:#24292E\"> w1;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> average </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> &#x3C;-</span><span style=\"color:#24292E\"> w2;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    return</span><span style=\"color:#24292E\"> {count, average};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"network-awareness":{"frontmatter":{"title":"Network-awareness for seamless integration","description":"Microservices communicate extensively over networks, making integration a crucial aspect of their design. Ballerina shines in this area with its built-in network awareness. It seamlessly integrates with various protocols (HTTP, gRPC, and more) and data formats (JSON, XML) commonly used in microservices architectures.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/graphql_bookstore_service/main.bal","image":"images/network-awareness.png"},"code":""},"purposefully-built":{"frontmatter":{"title":"Purposefully crafted for microservices integration","description":"Ballerina is specifically engineered to thrive in the domain of distributed systems. Every facet of Ballerina, from its syntax to its constructs and abstractions, is thoughtfully designed to streamline the integration, development, deployment, and management of microservices.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/restful_api/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"configurable int port = 8080;\n\ntype Album readonly &#x26; record {|\n    string id;\n    string title;\n    string artist;\n    decimal price;\n|};\n\nservice / on new http:Listener(port) {\n    resource function get albums() returns Album[] {\n        return albums.toArray();\n    }\n\n    resource function get albums/[string id]() returns Album|http:NotFound {\n        Album? album = albums[id];\n        if album is () {\n            return http:NOT_FOUND;\n        } else {\n            return album;\n        }\n    }\n\n    resource function post albums(@http:Payload Album album) returns Album {\n        albums.add(album);\n        return album;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">configurable</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#24292E\"> port </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> 8080</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Album</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#D73A49\"> &#x26;</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> artist;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#E36209\">port</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> albums</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Album[] {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> albums.</span><span style=\"color:#6F42C1\">toArray</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> albums</span><span style=\"color:#24292E\">/[</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">]() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Album</span><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">NotFound {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Album</span><span style=\"color:#D73A49\">?</span><span style=\"color:#24292E\"> album </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> albums[id];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> album </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">NOT_FOUND;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        } </span><span style=\"color:#D73A49\">else</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> album;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> albums</span><span style=\"color:#24292E\">(@</span><span style=\"color:#005CC5\">http</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">Payload</span><span style=\"color:#E36209\"> Album</span><span style=\"color:#E36209\"> album</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Album {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        albums.</span><span style=\"color:#6F42C1\">add</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">album</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> album;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"smart-endpoints":{"frontmatter":{"title":"Smart endpoints, dumb pipes","description":"Ballerina enables developers to create smart endpoints that encapsulate business logic and functionality, making them capable of understanding and processing specific types of data. This allows for precise control and manipulation of the data flowing through the microservices, while keeping the communication infrastructure(the pipe or the protocol) simple and agnostic to the data being processed.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/graphql_bookstore_service/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"service class Book {\n    private final readonly &#x26; BookData bookData;\n\n    function init(BookData bookData) {\n        self.bookData = bookData.cloneReadOnly();\n    }\n\n    // resource functions represents smart endpoints\n    resource function get reviews() returns Review|error {\n        string isbn = self.bookData.isbn;\n        GoogleBook googleBook = check bookEp->/books/v1/volumes.get(q = string &#x60;isbn:${isbn}&#x60;);\n        return let var volInfo = googleBook.items[0].volumeInfo in {\n                averageRating: volInfo.averageRating,\n                ratingsCount: volInfo.ratingsCount,\n                maturityRating: volInfo.maturityRating\n            };\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">service class</span><span style=\"color:#6F42C1\"> Book</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    private</span><span style=\"color:#D73A49\"> final</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#D73A49\"> &#x26;</span><span style=\"color:#24292E\"> BookData bookData;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    function</span><span style=\"color:#6F42C1\"> init</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">BookData</span><span style=\"color:#E36209\"> bookData</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        self</span><span style=\"color:#24292E\">.bookData </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> bookData.</span><span style=\"color:#6F42C1\">cloneReadOnly</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // resource functions represents smart endpoints</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> reviews</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Review</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> isbn </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> self</span><span style=\"color:#24292E\">.bookData.isbn;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        GoogleBook googleBook </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> bookEp</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">books</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">v1</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">volumes.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">q</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `isbn:${</span><span style=\"color:#24292E\">isbn</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> let</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> volInfo </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> googleBook.items[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].volumeInfo </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                averageRating</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> volInfo.averageRating,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                ratingsCount</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> volInfo.ratingsCount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                maturityRating</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> volInfo.maturityRating</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"test-framework":{"frontmatter":{"title":"Harnessing Ballerina's test framework for success","description":"Ballerina's test framework is a powerful asset for microservices development, ensuring top-notch quality and reliability. With support for unit, integration, and functional testing, developers can cover all critical aspects of their microservices. The framework seamlessly integrates with Ballerina, eliminating complexity and enabling easy execution within the development environment.","url":"https://ballerina.io/learn/by-example/testerina-mocking-objects/","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"// Sends an email to the specified email addresses\n// and returns an error if found.\nfunction sendNotification(string[] emailIds) returns error? {\n    email:Message msg = {\n        &#x27;from: &#x22;builder@abc.com&#x22;,\n        subject: &#x22;Error Alert ...&#x22;,\n        to: emailIds,\n        body: &#x22;&#x22;\n    };\n    return smtpClient -> sendMessage(msg);\n}\n\n@test:Config { }\nfunction testSendNotification() {\n    smtpClient = test:mock(email:SmtpClient);\n    // Stubs the &#x60;send&#x60; method of the &#x60;mockSmtpClient&#x60; to do nothing.\n    // This is used for functions with an optional or no return type.\n    test:prepare(smtpClient).when(&#x22;sendMessage&#x22;).doNothing();\n    string[] emailIds = [&#x22;user1@test.com&#x22;, &#x22;user2@test.com&#x22;];\n    error? err = sendNotification(emailIds);\n    test:assertEquals(err, ());\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#6A737D\">// Sends an email to the specified email addresses</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// and returns an error if found.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> sendNotification</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#24292E\">[] </span><span style=\"color:#E36209\">emailIds</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    email</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Message msg </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        'from</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"builder@abc.com\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        subject</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"Error Alert ...\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        to</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> emailIds,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        body</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"\"</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    return</span><span style=\"color:#24292E\"> smtpClient </span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\"> sendMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">msg</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">@</span><span style=\"color:#005CC5\">test</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">Config</span><span style=\"color:#24292E\"> { }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> testSendNotification</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    smtpClient </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> test</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">mock</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">email</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">SmtpClient);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Stubs the `send` method of the `mockSmtpClient` to do nothing.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // This is used for functions with an optional or no return type.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    test</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">prepare</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">smtpClient</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">when</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"sendMessage\"</span><span style=\"color:#24292E\">).</span><span style=\"color:#6F42C1\">doNothing</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">[] emailIds </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> [</span><span style=\"color:#032F62\">\"user1@test.com\"</span><span style=\"color:#24292E\">, </span><span style=\"color:#032F62\">\"user2@test.com\"</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    error?</span><span style=\"color:#24292E\"> err </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> sendNotification</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">emailIds</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    test</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">assertEquals</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">err</span><span style=\"color:#24292E\">, ());</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"type-safe":{"frontmatter":{"title":"Type-safe","description":"Ballerina emphasizes type safety in inter-service communication. This enables compile-time checks, reducing errors and enhancing code quality. Additionally, it simplifies maintenance and acts as clear documentation for microservices. As a result, services interact seamlessly with precise data types, preventing data mismatches and ensuring robust communication between microservices in a type-safe manner, improving reliability and maintainability of the microservices architecture.","url":"","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"import ballerina/http;\n\ntype UserRecord record {\nstring userId;\nstring username;\nint age;\n};\n\n// In-memory store for user data\nmap<UserRecord> userStore = {};\n\n// HTTP service to manage users\nservice / on new http:Listener(8080) {\n\n    // UserRecord record type guarantees that the payload sent to user endpoint with a POST\n    // method is always of shape UserRecord\n    resource function post user(UserRecord user) returns json {\n        userStore[user.userId] = user;\n        json response = {&#x22;message&#x22;: &#x22;User created successfully&#x22;};\n        return response;\n    }\n\n    // UserRecord record type guarantees that the response sent back to client  with a GET\n    // method is always of shape UserRecord\n    resource function get user(string userId) returns UserRecord? {\n        UserRecord? user = userStore[userId];\n        return user;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> UserRecord</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">string</span><span style=\"color:#24292E\"> userId;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">string</span><span style=\"color:#24292E\"> username;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">int</span><span style=\"color:#24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// In-memory store for user data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">map&#x3C;</span><span style=\"color:#24292E\">UserRecord</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> userStore </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// HTTP service to manage users</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // UserRecord record type guarantees that the payload sent to user endpoint with a POST</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // method is always of shape UserRecord</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> user</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">UserRecord</span><span style=\"color:#E36209\"> user</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> json</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        userStore[user.userId] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> user;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        json</span><span style=\"color:#24292E\"> response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span><span style=\"color:#032F62\">\"message\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"User created successfully\"</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> response;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // UserRecord record type guarantees that the response sent back to client  with a GET</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // method is always of shape UserRecord</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> user</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> userId</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> UserRecord</span><span style=\"color:#D73A49\">?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        UserRecord</span><span style=\"color:#D73A49\">?</span><span style=\"color:#24292E\"> user </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> userStore[userId];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> user;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"}}},"__N_SSG":true}