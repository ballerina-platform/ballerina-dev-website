{"pageProps":{"frontmatter":{},"content":"<div class=\"release_notes\">\n   <h1>Overview of Ballerina 1.0.0</h1>\n   <p>Ballerina 1.0.0 is here! We would like you to try it out and give us feedback via our <a\n         href=\"https://ballerina-platform.slack.com/\">Slack channel</a>, <a\n         href=\"https://twitter.com/ballerinalang\">Twitter</a>, or <a\n         href=\"https://github.com/ballerina-platform/ballerina-lang\">Github</a>.\n      Ballerina 1.0.0 consists of improvements to the language syntax and semantics based on the stable language\n      specification version 2019R3 and new features and enhancements to the standard library modules and developer\n      tooling.</p>\n   <h1>Highlights</h1>\n   <ul>\n      <li>Based on a stable language specification: 2019R3</li>\n      <li>Introduces a brand new Ballerina compiler back-end that targets the JVM</li>\n      <li>Significant performance improvements over the previous Ballerina runtime (BVM)</li>\n      <li>Java interoperability (allows you to call Java code from Ballerina)</li>\n      <li>Major redesign of Ballerina developer tools</li>\n   </ul>\n   <h1>What&rsquo;s new in Ballerina 1.0.0</h1>\n   <h2>Language</h2>\n   <ul>\n      <li>\n         <p>A set of modules, which contain functions associated with the basic types have been introduced.\n            Collectively, these modules are referred to as the lang library. Each basic type has a corresponding lang\n            library module. Additionally, there is also the <code>lang.value</code> module, which holds functions common\n            for all the types. The following is the list of lang library modules.</p>\n      </li>\n      <li>\n         <p><code>ballerina/lang.value</code></p>\n      </li>\n      <li><code>ballerina/lang.array</code> for list types</li>\n      <li><code>ballerina/lang.decimal</code> for basic type <code>decimal</code></li>\n      <li><code>ballerina/lang.error</code> for basic type <code>error</code></li>\n      <li><code>ballerina/lang.float</code> for basic type <code>float</code></li>\n      <li><code>ballerina/lang.future</code> for basic type <code>future</code></li>\n      <li><code>ballerina/lang.int</code> for basic type <code>int</code></li>\n      <li><code>ballerina/lang.map</code> for mapping types</li>\n      <li><code>ballerina/lang.object</code> for basic type <code>object</code></li>\n      <li><code>ballerina/lang.stream</code> for basic type <code>stream</code></li>\n      <li><code>ballerina/lang.string</code> for basic type <code>string</code></li>\n      <li><code>ballerina/lang.table</code> for basic type <code>table</code></li>\n      <li><code>ballerina/lang.typedesc</code> for basic type <code>typedesc</code></li>\n      <li>\n         <p><code>ballerina/lang.xml</code> for basic type <code>xml</code></p>\n      </li>\n      <li>\n         <p>The basic type <code>handle</code> has been added. A <code>handle</code> value is a reference to storage\n            area of a Ballerina program that is managed externally. <code>Handle</code> values are useful only in\n            conjunction with functions that have external function bodies; in particular, a new handle value can be\n            created only by a function with an external function body.</p>\n      </li>\n      <li>\n         <p>The error reason is now optional if the reason can be inferred based on the contextually-expected type.</p>\n      </li>\n   </ul>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">type Detail record {\n   int code;\n};\n\nconst FOO = &quot;foo&quot;;\n\ntype FooError error&lt;FOO, Detail&gt;;\n\nFooError e1 = error(FOO, code = 3456);\nFooError e2 = error(code = 3456); // Also valid now, reason is set as &quot;foo&quot;\n</code></pre>\n\n   <ul>\n      <li>A unary operator <code>typeof</code> has been introduced to retrieve a typedesc value for the runtime type of\n         a value.</li>\n   </ul>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">typedesc t = typeof valueExpr;\n</code></pre>\n\n   <ul>\n      <li>A binary operator <code>.@</code> has been introduced to access annotation values at runtime.</li>\n   </ul>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">ballerina\n   annotation Foo annot on service;\n   typedesc t = typeof serviceValue;\n   Foo? fooAnnot = t.@annot;</code></pre>\n   <ul>\n      <li>\n         <p>Expressions are now allowed as default values for function parameters.</p>\n      </li>\n      <li>\n         <p>The concept of lax typing has been introduced allowing less stricter static typing for types identified as\n            lax. With lax typing, some of the static typing checks are moved to the runtime returning errors at runtime\n            instead. With this release, <code>json</code> and <code>map&lt;T&gt;</code> where <code>T</code> is lax are\n            considered as lax.</p>\n      </li>\n      <li>An optional field access operator <code>?.</code> has been introduced to access possibly-undefined mapping\n         members. Optional field access on lax types may return <code>error</code> if applied to a non-mapping value.\n      </li>\n   </ul>\n   <h2>Runtime</h2>\n   <p>This release introduces a brand new implementation (jBallerina) of the Ballerina language spec, which targets the\n      JVM. The jBallerina compiler produces an executable JAR file for a Ballerina program by directly transforming\n      Ballerina sources to Java bytecode. With jBallerina, the previous Ballerina runtime implementation (BVM) will be\n      deprecated and removed. jBallerina comes with significant performance improvements over the BVM.</p>\n   <h3>Java Interoperability</h3>\n   <p>Java interoperability is a key feature in jBallerina that allows you to call Java code from Ballerina. It also\n      enables you to embrace the capabilities of Ballerina for new projects while utilizing existing Java libraries that\n      you or your organization invested in for years.</p>\n   <h2>Project Structure &amp; Build Tools</h2>\n   <ul>\n      <li>Ballerina project structure should match the following.</li>\n   </ul>\n   <pre class=\"language-plaintext line-numbers basic\"><code class=\"language-plaintext\">project-name/\n- Ballerina.toml\n- src/\n-- mymodule/\n--- Module.md   &lt;- module-level documentation\n--- main.bal    &lt;- Contains the default main method.\n--- resources/  &lt;- resources for the module (available at runtime)\n--- tests/      &lt;- tests for this module (e.g. unit tests)\n---- main_test.bal  &lt;- test file for main\n---- resources/ &lt;- resources for these tests\n- target/       &lt;- directory for compile/build output\n-- bin/         &lt;- Executables will be created here\n-- balo/        &lt;- .balo files one per built module\n--- mymodule.balo  &lt;- balo object of module1\n-- caches/          &lt;- BIR, JAR cache directory\n\n</code></pre>\n\n   <ul>\n      <li>To create a new project with a hello world, use the <em>new</em> command. This initializes a new directory.\n      </li>\n   </ul>\n   <pre class=\"highlight line-numbers  language-bash\"><code class=\"  language-bash\">$ ballerina new &lt;project-name&gt;\n</code></pre>\n\n   <ul>\n      <li>To add a module, use the <em>add</em> command inside the project.</li>\n   </ul>\n   <pre class=\"highlight line-numbers  language-bash\"><code class=\"  language-bash\">$ ballerina add &lt;modulename&gt; [-t main|service]\n</code></pre>\n\n   <ul>\n      <li>To create an executable, use the <em>build</em> command.</li>\n   </ul>\n   <pre class=\"highlight line-numbers  language-bash\"><code class=\"  language-bash\">$ ballerina build\n</code></pre>\n\n   <ul>\n      <li>To run the executable, use the <em>run</em> command.</li>\n   </ul>\n   <pre class=\"highlight line-numbers  language-bash\"><code class=\"  language-bash\">$ ballerina run mymodule.jar\n</code></pre>\n\n   <h3>Ballerina Central</h3>\n   <ul>\n      <li>Supports pushing of Ballerina modules with embedded, dependent native Java libraries.</li>\n   </ul>\n   <h2>Standard Library</h2>\n   <ul>\n      <li>Revamp the NATS connector to support both NATS and Streaming Servers.</li>\n      <li>Introduce the standard library module-wise errors as a replacement for the builtin <code>error</code>.\n         e.g., Ballerina HTTP Error types include <code>http:ClientError</code>, <code>http:ListenerError</code>,\n         <code>http:ClientAuthError</code> etc.</li>\n      <li>Introduce capability to engage custom providers and handlers for inbound/outbound authentication.</li>\n      <li>Introduce OAuth2 inbound authentication.</li>\n      <li>Introduce own modules for different authentication mechanisms (JWT, LDAP, OAuth2 etc.).</li>\n      <li>Introduce prior knowledge support to the HTTP/2 client.</li>\n      <li>Add flow control support to HTTP/2 client and server.</li>\n      <li>Introduce XSLT transformation support.</li>\n      <li><code>ballerina/h2</code> and <code>ballerina/mysql</code> database client modules and the\n         <code>ballerina/sql</code> module have been discontinued. The <code>ballerinax/java.jdbc</code> client module\n         can be used to interact with relational databases.</li>\n      <li>The byte channel read API was updated to return only <code>byte[]|io:Error</code>.</li>\n      <li>Introduce out of the box support for messaging with Kafka.</li>\n      <li>RabbitMQ, JMS, Artemis, WebSub and LDAP modules are available through Ballerina Central.</li>\n      <li>APIs for performing file system operations such as creating files, creating directories, moving directories,\n         renaming files, fetching file metadata, copying files etc. are now available through the\n         <code>ballerina/file</code> module.</li>\n      <li>Most of the APIs of the <code>ballerina/encoding</code> module were removed since they are now supported via\n         the lang library.</li>\n      <li>Three new utility modules were introduced to manipulate built-in <code>string</code>, <code>json</code> and\n         <code>xml</code> types.</li>\n   </ul>\n   <h2>IDEs &amp; Language Server</h2>\n   <h3>IntelliJ IDEA Plugin</h3>\n   <ul>\n      <li>Introduce Ballerina home auto detection capability.</li>\n      <li>Introduce Ballerina sequence diagram view.</li>\n      <li>Revamp the debugger using a DAP (Debugger Adapter Protocol) client.</li>\n   </ul>\n   <h3>Tooling</h3>\n   <ul>\n      <li>Ballerina Formatter: Ballerina source formatting CLI tool.</li>\n      <li>OpenAPI to Ballerina generator CLI tool.</li>\n      <li>Ballerina to OpenAPI generator CLI tool.</li>\n      <li>OpenAPI validator compiler plugin.</li>\n      <li>Introduce Debug Adapter Protocol implementation.</li>\n   </ul>\n   <h1>Breaking Changes from 0.991.0</h1>\n   <h2>Breaking Language Changes</h2>\n   <h3>Builtin library</h3>\n   <p>The <code>ballerina/builtin</code> module has been removed. Some of the functionalities provided by the\n      <code>ballerina/builtin</code> library is now provided by the newly-added lang library.</p>\n   <ul>\n      <li>The <code>freeze()</code> builtin method has been replaced with the <code>cloneReadOnly()</code> lang library\n         function. <code>cloneReadOnly()</code> can be called only on variables of the type <code>anydata</code>. It\n         creates and returns a clone of the value that has been made immutable (for non-simple basic types).</li>\n   </ul>\n   <p>Previous Syntax</p>\n   <p><code>ballerina\n   map&lt;string&gt; m2 = m.freeze();</code></p>\n   <p>New Syntax</p>\n   <p><code>ballerina\n   map&lt;string&gt; m2 = m.cloneReadOnly();</code></p>\n   <ul>\n      <li>The <code>convert()</code> builtin method has been replaced with the <code>constructFrom()</code> lang library\n         function. <code>constructFrom()</code> can only be called on a type descriptor <code>T</code> where the\n         <code>T</code> is a subtype of <code>anydata</code>. It accepts an <code>anydata</code> value as an argument\n         and returns a value of the type <code>T</code> constructed using a deep copy of the provided argument. If the\n         construction fails, it returns an error.</li>\n   </ul>\n   <p>Previous Syntax</p>\n   <p><code>ballerina\n   json j = {name:\"tom\", age:2};\n   Person|error p = Person.convert(j);</code></p>\n   <p>New Syntax</p>\n   <p><code>ballerina\n   json j = {name:\"tom\", age:2};\n   Person|error p = Person.constructFrom(j);</code></p>\n   <ul>\n      <li>The following behaviours, which were previously associated with the <code>convert()</code> method is now\n         provided by the lang library functions of the relevant types.</li>\n      <li>\n         <p>Previously, <code>convert()</code> was used to parse string literals. Now, the <code>lang.int</code>,\n            <code>lang.float</code>, and <code>lang.decimal</code> modules have a <code>fromString()</code> function,\n            which accepts a string literal and parses it.</p>\n         <p>Previous Syntax</p>\n      </li>\n   </ul>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">int|error x = int.convert(&quot;100&quot;);\n</code></pre>\n\n   <pre><code>  New Syntax\n</code></pre>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">import ballerina/lang.'int; // Need to import `lang.int`\n\nint x = 'int:fromString(&quot;100&quot;);\n</code></pre>\n\n   <ul>\n      <li>\n         <p>Previously, when invoked on the <code>string</code> type descriptor, <code>convert()</code> returned a\n            string representation of the value. Now, the <code>lang.value</code> module provides a\n            <code>toString()</code> function, which returns a human-readable string representation of a value.</p>\n         <p>Previous Syntax</p>\n      </li>\n   </ul>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">json person = {&quot;name&quot;:&quot;John&quot;, &quot;age&quot;:25};\nstring|error str = string.convert(person);\n</code></pre>\n\n   <p>New Syntax</p>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">json person = {&quot;name&quot;:&quot;John&quot;, &quot;age&quot;:25};\nstring str = person.toString();\n</code></pre>\n\n   <ul>\n      <li>The <code>stamp()</code> method has been removed.</li>\n   </ul>\n   <h3>Maps and Records</h3>\n   <ul>\n      <li>The semantics of the <code>{</code>, <code>}</code> and <code>{|</code>, <code>|}</code> delimiters have\n         changed. A record type descriptor written using the <code>{|</code> and <code>|}</code> delimiters defines a\n         closed record type, which only accepts mapping values with the same fields as the ones described. A record type\n         descriptor written using the <code>{</code> and <code>}</code> delimiters define a record type, which\n         additionally allows pure type fields apart from the described fields, i.e., <code>record {}</code> is\n         equivalent to <code>record {| anydata…; |}</code>. </li>\n   </ul>\n   <p>Previous Syntax</p>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">// Open record with a field `a`. It additionally allows\n// `anydata|error` fields.\ntype Foo record {\n   string a;\n};\n\n// Open record with a field `a`. It additionally allows\n// `int` fields.\ntype Bar record {\n   string a;\n   int...;\n};\n\n// Closed record, which only allows a `string` field named `a`.\ntype Baz record {|\n   string a;\n|};\n\n</code></pre>\n\n   <p>New Syntax</p>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">// Open record with a field `a`. It additionally allows\n// `anydata` fields.\ntype Foo record {\n   string a;\n};\n\n// Open record with a field `a`. It additionally allows\n// only `int` fields.\ntype Bar record {|\n   string a;\n   int...;\n|};\n\n// Closed record, which only allows a `string` field named `a`.\n   type Baz record {|\n   string a;\n|};\n</code></pre>\n\n   <ul>\n      <li>The default record rest field type has been changed to <code>anydata</code> from <code>anydata|error</code>.\n      </li>\n      <li>The syntax to specify expressions as keys in the mapping constructor has changed. Now, expressions need to be\n         enclosed in <code>[]</code> (e.g., <code>[expr]</code>).</li>\n   </ul>\n   <p>Previous Syntax</p>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">map&lt;string&gt; m = { getString(): &quot;value&quot; };\n</code></pre>\n\n   <p>New Syntax</p>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">map&lt;string&gt; m = { [getString()]: &quot;value&quot; };\n</code></pre>\n\n   <ul>\n      <li>String literals can now be used as keys in the mapping constructor for a record. The key for a\n         <code>rest</code> field should either be a string literal or an expression in the mapping constructor (i.e.,\n         cannot be an identifier). </li>\n   </ul>\n   <p>Previous Syntax</p>\n   <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">type Foo record {\n   string bar;\n   int...;\n};\n\nFoo f = { bar: &quot;test string&quot;, qux: 1 }; // `qux` is a rest field\n</code></pre>\n\n   <p>New Syntax</p>\n   <<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">type Foo record {|\n   string bar;\n   int...;\n|};\n\nFoo f = { bar: &quot;test string&quot;, &quot;qux&quot;: 1 }; // `qux` is a rest field\n</code></pre>\n\n      <ul>\n         <li>Mapping values are now iterable as sequences of their members (values) instead of sequences of key-value\n            pairs. A lang library function <code>entries()</code> is available to retrieve an array of key-value pairs\n            for a mapping value.</li>\n      </ul>\n      <p>Previous Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">foreach (string, int) (k, v) in m {\n   io:println(&quot;Key:   &quot;, k);\n   io:println(&quot;Value: &quot;, v);\n}\n</code></pre>\n\n      <p>New Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">// Iterating values.\nforeach int v in m {\n   io:println(&quot;Value: &quot;, v);\n}\n\n// Iterating entries.\nforeach [string, int] [k, v] in m.entries() {\n   io:println(&quot;Key:   &quot;, k);\n   io:println(&quot;Value: &quot;, v);\n}\n</code></pre>\n\n      <h3>Arrays and Tuples</h3>\n      <ul>\n         <li>The requirement for array element types to have an implicit initial value to allow declaring\n            variable-length arrays has been removed. Instead, when a value is being added to the array at runtime, the\n            index is greater than the length of the list, and the element type does not have a filler value, it would\n            result in a panic. </li>\n      </ul>\n      <p>Previous Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">(int|string)[] arr = []; // Fails at compile time.\narr[1] = 1;\n</code></pre>\n\n      <p>New Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">(int|string)[] arr = [];\narr[1] = 1; // Fails at runtime.\n</code></pre>\n\n      <ul>\n         <li>Tuple types now use brackets instead of parentheses. </li>\n      </ul>\n      <p>Previous Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">(int, string) t = (1, &quot;hello world&quot;);\n</code></pre>\n\n      <p>New Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">[int, string] t = [1, &quot;hello world&quot;];\n</code></pre>\n\n      <ul>\n         <li>Tuple types now support rest descriptors. Therefore, the following syntax is valid now.</li>\n      </ul>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">[int, string, boolean...] t = [1, &quot;hello world&quot;, true, true];\n[int...] t3 = [1, 2];\n</code></pre>\n\n      <h3>Objects</h3>\n      <ul>\n         <li>Outside method definitions are no longer allowed for objects. All object function definitions need to be\n            specified within the object itself. The following syntax is invalid now.</li>\n      </ul>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">type Foo object {\n   int code = 0;\n\n   function printCode();\n};\n\nfunction Foo.printCode() {\n   // print code\n}\n</code></pre>\n\n      <h3>Functions and Methods</h3>\n      <ul>\n         <li>Now, arguments for required parameters of a function can also be passed as named arguments, while arguments\n            for defaultable parameters can be passed as positional arguments. To avoid ambiguities, all named arguments\n            need to be specified after the positional arguments.</li>\n         <li>Parameters of a function can now be marked <code>public</code> and only arguments can be passed by the name\n            to such parameters when invoking a function from an imported module. These arguments can still be passed as\n            positional arguments.</li>\n      </ul>\n      <h3>Error Type and Constructor</h3>\n      <ul>\n         <li>The error detail type must now belong to the <code>detail</code> type defined in the error lang library.\n         </li>\n      </ul>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">public type Detail record {|\n   string message?;\n   error cause?;\n   (anydata|error)...;\n|};\n</code></pre>\n\n      <ul>\n         <li>The error constructor now accepts <code>detail</code> fields as individual named arguments as opposed to\n            accepting a single mapping as the <code>detail</code> argument. </li>\n      </ul>\n      <p>Previous Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">Detail detail = { message: &quot;error message&quot;, code: 1100 };\nerror e = error(&quot;error reason&quot;, detail);\n</code></pre>\n\n      <p>New Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">error e = error(&quot;error reason&quot;, message = &quot;error message&quot;, code = 1100);\n</code></pre>\n\n      <h3>Annotations</h3>\n      <ul>\n         <li>Annotation declaration syntax and attachment points have been revised. Annotations can now be declared to\n            be available only at compile time (source only annotations) or at both compile-time and runtime.</li>\n      </ul>\n      <p>Previous Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">annotation&lt;service&gt; annot Foo;\n</code></pre>\n\n      <p>New Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">annotation Foo annot on service;\n</code></pre>\n\n      <h3>Expressions</h3>\n      <ul>\n         <li>Integer range expressions now return objects belonging to the iterable abstract object type instead of\n            lists (arrays).</li>\n         <li>Field access for records, objects, and JSON has changed. Field access can be used to access the fields of\n            an object or required fields of a record. Field access on a lax-typed variable\n            (<code>json|map&lt;json&gt;</code>) now returns <code>json|error</code>. The field access operator does not\n            lift nil now.</li>\n         <li>Member access is allowed with lists and subtypes of optional mappings. Nil lifting is supported in the\n            latter case.</li>\n         <li>The error lifting operator (<code>!</code>) has been removed. Error lifting now happens only with field or\n            optional field access for lax types.</li>\n         <li>Calls with <code>start</code> are now considered as actions. As a result, they are not allowed within\n            expressions.</li>\n         <li>Delimited identifier syntax has been changed.</li>\n      </ul>\n      <p>Previous Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">string ^&quot;1&quot; = &quot;identifier one&quot;;\nstring ^&quot;identifier two&quot; = &quot;identifier two&quot;;\n</code></pre>\n\n      <p>New Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">string '1 = &quot;identifier one&quot;;\nstring 'identifier\\ two = &quot;identifier two&quot;;\n</code></pre>\n\n      <ul>\n         <li>The <code>untaint</code> unary operator has been replaced by an annotation to mark a value as trusted.</li>\n      </ul>\n      <p>Previous Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">var untaintedValue = untaint taintedValue;\n</code></pre>\n\n      <p>New Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">var untaintedValue = &lt;@untainted&gt; taintedValue;\n</code></pre>\n\n      <ul>\n         <li>Concatenation with the + operator is no longer allowed between <code>string</code> values and values of\n            other basic types. The <code>.toString()</code> method can be used on any variable to retrieve the\n            <code>string</code> representation prior to concatenating. Alternatively, the string template expression can\n            also be used.</li>\n      </ul>\n      <p>Previously Syntax</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">int i = 1;\nstring s = &quot;Value: &quot; + i;\n</code></pre>\n\n      <p>Alternative I</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">int i = 1;\nstring s = &quot;Value: &quot; + i.toString();\n</code></pre>\n\n      <p>Alternative II</p>\n      <pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">int i = 1;\nstring s = string `Value: ${i}`;\n</code></pre>\n\n      <h1>JBallerina 1.0 - 2019R3 Specification Deviations</h1>\n      <h3>Lexical structure</h3>\n      <ul>\n         <li><code>QuotedIdentifier</code> supports only alphanumeric characters and &ldquo;.&rdquo; <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18720\">#18720</a>.</li>\n      </ul>\n      <h3>Values, Types and Variables.</h3>\n      <ul>\n         <li>Limited Singleton type support <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13410\">#13410</a>.</li>\n         <li>Limited constant support <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13944\">#13944</a>.</li>\n         <li><code>0.</code> syntax is not supported for floating point literals <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13168\">#13168</a>.</li>\n         <li>Cannot use a byte in an int context even though byte is a subtype of int <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/14366\">#14366</a>.</li>\n         <li>Hex floating point literals are allowed for Decimal values <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/14775\">#14775</a>.</li>\n         <li><code>StringNumericEscape</code> is not supported <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13180\">#13180</a>.</li>\n         <li>Direct table type descriptor is not implemented <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13170\">#13170</a>.</li>\n         <li>Defaultable and rest parameters are not supported with function pointers <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/10639\">#10639</a>.</li>\n         <li>Filler values for finite types are not supported <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13612\">#13612</a>.</li>\n         <li>Object initialization does not follow the initialization protocol outlined in the spec <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/15240\">#15240</a>.</li>\n         <li>Object __init() allows using self other than to access/modify a field when there are potentially\n            uninitialized fields <a href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17917\">#17917</a>.\n         </li>\n         <li>Default values of fields and default values of defaultable function parameters of abstract objects are not\n            available when referencing the objects in other objects <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18405\">#18405</a>.</li>\n         <li>Constraints are mandatory for future, stream and typedesc <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17922\">#17922</a>.</li>\n         <li>Inferred error type (<code>error&lt;*&gt;</code>) is not allowed <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18007\">#18007</a>.</li>\n         <li>Type narrowing does not happen with equality checks <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18167\">#18167</a>.</li>\n      </ul>\n      <h3>Expressions</h3>\n      <ul>\n         <li>Reference equality checks produce incorrect results for float NaN/NaN and -0.0/+0.0 <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/11913\">#11913</a>.</li>\n         <li>Constants cannot be used to specify the length of a fixed length array <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13162\">#13162</a>.</li>\n         <li>Incorrect type inferring for int-literals/floating-point-literals used in equality expressions <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13904\">#13904</a>.</li>\n         <li>Numeric conversion does not happen when casting to a finite type <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/14373\">#14373</a>.</li>\n         <li>The <code>typedesc</code> returned by <code>typeof</code> is not in line with the spec <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/15278\">#15278</a>.</li>\n         <li>Compilation fails for valid a mapping constructor when there is no contextually expected type <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17186\">#17186</a>.</li>\n         <li>Optional field access is not allowed on a union of record and map <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17942\">#17942</a>.</li>\n         <li>The rest arg is restricted to the rest parameter <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17943\">#17943</a>.</li>\n         <li>Integer division does not panic on overflow <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17969\">#17969</a>.</li>\n         <li>Certain floating point numerical comparisons with <code>NaN</code> return incorrect results <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17977\">#17977</a>.</li>\n         <li>Reference equality checks produce incorrect results for equal decimal values with different precision <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17984\">#17984</a>.</li>\n         <li>Interpolation should not be allowed in the value of a namespace attribute <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18938\">#18938</a>.</li>\n      </ul>\n      <h3>Actions and Statements</h3>\n      <ul>\n         <li>Local type definition statements are not supported <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17946\">#17946</a>.</li>\n         <li>Multiple receive action is not supported <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18163\">#18163</a>.</li>\n         <li>Final local variable declarations without an init expression are not supported <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/15044\">#15044</a>.</li>\n         <li>Match pattern lists with multiple match patterns (OR) are not supported for structured patterns <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13949\">#13949</a>.</li>\n         <li>Partial support for list, mapping and error match patterns <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/15962\">#15962</a>.</li>\n         <li>Compatible map to record assignment is not allowed <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17202\">#17202</a>.</li>\n         <li>List binding patterns don’t work with arrays <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17927\">#17927</a>.</li>\n         <li>Not all actions are allowed to be nested inside other actions <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/17993\">#17993</a>.</li>\n         <li>Inferred type for final variables declared with <code>var</code> is not the precise type <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18166\">#18166</a>.</li>\n         <li>Asynchronous send is not an action (currently a statement) <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18639\">#18639</a>.</li>\n      </ul>\n      <h3>Module-Level Declarations</h3>\n      <ul>\n         <li>Versioned imports are not supported <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/4087\">#4087</a>.</li>\n         <li>Listener declarations without the type-descriptors are not supported <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18200\">#18200</a>.</li>\n      </ul>\n      <h3>Module and Program Execution</h3>\n      <ul>\n         <li>A program exits even when there are listeners started (currently looks for services) <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18601\">#18601</a>.</li>\n      </ul>\n      <h3>Metadata</h3>\n      <ul>\n         <li>Annotation types (mapping types) are not restricted to <code>anydata</code> and thus, non-constant\n            annotation values are not constructed as readonly values <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/15533\">#15533</a>.</li>\n         <li>Annotation attachment is not supported for anonymous function expressions, local variable declaration\n            statements and local type definition statements <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18207\">#18207</a>.</li>\n         <li>An annotation is not available to to indicate that a newly created strand should be in a separate thread\n            from the current strand <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18001\">#18001</a>.</li>\n      </ul>\n      <h3>Lang Library</h3>\n      <ul>\n         <li>Creating an immutable clone of a container does not narrow its inherent type to a type that consists of\n            just its current shape <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/13189\">#13189</a>.</li>\n         <li>Use of stack-like methods and queue-like methods on fixed-length arrays/tuples is not checked at compile\n            time <a href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18662\">#18662</a>.</li>\n         <li>The lang.table module contains functions not defined in the specification <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18869\">#18869</a>.</li>\n         <li>The lang.xml module contains functions not defined in the specification <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18870\">#18870</a>.</li>\n         <li>The lang.map module functions which modify the value are disallowed on records <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18873\">#18873</a>.</li>\n         <li>The lang.array module functions which modify the value are disallowed on tuples <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18874\">#18874</a>.</li>\n      </ul>\n      <h3>Preview Features</h3>\n      <ul>\n         <li>XML access expressions are not defined in the spec. <a\n               href=\"https://github.com/ballerina-platform/ballerina-lang/issues/18875\">#18875</a>.</li>\n      </ul>\n</div>","id":"1.0.0"},"__N_SSG":true}