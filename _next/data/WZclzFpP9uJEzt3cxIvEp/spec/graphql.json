{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina GraphQL Library\n\n_Authors_: [@aashikam](https://github.com/aashikam) [@DimuthuMadushan](https://github.com/DimuthuMadushan) [@MohamedSabthar](https://github.com/MohamedSabthar) [@Nuvindu](https://github.com/Nuvindu) [@ThisaruGuruge](https://github.com/ThisaruGuruge) \\\n_Reviewers_: [@DimuthuMadushan](https://github.com/DimuthuMadushan) [@ldclakmal](https://github.com/ldclakmal) [@MohamedSabthar](https://github.com/MohamedSabthar) [@shafreenAnfar](https://github.com/shafreenAnfar) [@ThisaruGuruge](https://github.com/ThisaruGuruge) \\\n_Created_: 2022/01/06 \\\n_Updated_: 2024/08/06 \\\n_Edition_: Swan Lake \\\n_GraphQL Specification_: [October 2021](https://spec.graphql.org/October2021/)\n\n## Introduction\n\nThis is the specification for the GraphQL package of the [Ballerina language](https://ballerina.io), which provides GraphQL server functionalities to produce GraphQL APIs and GraphQL client functionalities to communicate with GraphQL APIs.\n\nThe GraphQL library specification has evolved and may continue to evolve in the future. The released versions of the specification can be found under the relevant GitHub tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the [Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the specification is stored under `/docs/proposals`. Proposals under discussion can be found with the label `type/proposal` on GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Components](#2-components)\n    * 2.1 [Listener](#21-listener)\n        * 2.1.1 [HTTP Listener](#211-http-listener)\n        * 2.1.2 [WebSocket Listener](#212-websocket-listener)\n        * 2.1.3 [Initializing the Listener Using Port Number](#213-initializing-the-listener-using-port-number)\n        * 2.1.4 [Initializing the Listener using an HTTP Listener](#214-initializing-the-listener-using-an-http-listener)\n        * 2.1.5 [Listener Configuration](#215-listener-configuration)\n    * 2.2 [Service](#22-service)\n        * 2.2.1 [Service Type](#221-service-type)\n        * 2.2.2 [Service Base Path](#222-service-base-path)\n        * 2.2.3 [Service Declaration](#223-service-declaration)\n        * 2.2.4 [Service Object Declaration](#224-service-object-declaration)\n        * 2.2.5 [Service Configuration](#225-service-configuration)\n    * 2.3 [Parser](#23-parser)\n    * 2.4 [Engine](#24-engine)\n    * 2.5 [Client](#25-client)\n        * 2.5.1 [Initializing the Client](#251-initializing-the-client)\n        * 2.5.2 [Executing Operations](#252-executing-operations)\n        * 2.5.3 [Client Data Binding](#253-client-data-binding)\n        * 2.5.4 [Client Configuration](#254-client-configuration)\n3. [Schema Generation](#3-schema-generation)\n    * 3.1 [Root Types](#31-root-types)\n        * 3.1.1 [The `Query` Type](#311-the-query-type)\n        * 3.1.2 [The `Mutation` Type](#312-the-mutation-type)\n        * 3.1.3 [The `Subscription` Type](#313-the-subscription-type)\n    * 3.2 [Wrapping Types](#32-wrapping-types)\n        * 3.2.1 [`NON_NULL` Type](#321-non_null-type)\n        * 3.2.2 [`LIST` Type](#322-list-type)\n    * 3.3 [Resource Methods](#33-resource-methods)\n        * 3.3.1 [Resource Accessor](#331-resource-accessor)\n        * 3.3.2 [Resource Name](#332-resource-name)\n        * 3.3.3 [Hierarchical Resource Path](#333-hierarchical-resource-path)\n    * 3.4 [Remote Methods](#34-remote-methods)\n        * 3.4.1 [Remote Method Name](#341-remote-method-name)\n    * 3.5 [Documentation](#35-documentation)\n4. [Types](#4-types)\n    * 4.1 [Scalars](#41-scalars)\n        * 4.1.1 [Int](#411-int)\n        * 4.1.2 [Float](#412-float)\n        * 4.1.3 [String](#413-string)\n        * 4.1.4 [Boolean](#414-boolean)\n        * 4.1.5 [ID](#415-id)\n    * 4.2 [Objects](#42-objects)\n        * 4.2.1 [Record Type as Object](#421-record-type-as-object)\n        * 4.2.2 [Service Type as Object](#422-service-type-as-object)\n    * 4.3 [Unions](#43-unions)\n    * 4.4 [Enums](#44-enums)\n    * 4.5 [Input Types](#45-input-types)\n        * 4.5.1 [Input Union Types](#451-input-union-types)\n        * 4.5.2 [Input Objects](#452-input-objects)\n        * 4.5.3 [Default Values](#453-default-values)\n    * 4.6 [Interfaces](#46-interfaces)\n        * 4.6.1 [Interfaces Implementing Interfaces](#461-interfaces-implementing-interfaces)\n5. [Directives](#5-directives)\n   * 5.1 [@skip](#51-skip)\n   * 5.2 [@include](#52-include)\n   * 5.3 [@deprecated](#53-deprecated)\n6. [Errors](#6-errors)\n    * 6.1 [Error Detail Record](#61-error-detail-record)\n        * 6.1.1 [Message](#611-message)\n        * 6.1.2 [Locations](#612-locations)\n        * 6.1.3 [Path](#613-path)\n    * 6.2 [Service Error Handling](#62-service-error-handling)\n        * 6.2.1 [Returning Errors](#621-returning-errors)\n        * 6.2.2 [Returning Errors and Nil Values](#622-returning-errors-and-nil-values)\n        * 6.2.3 [The `graphql:__addError` Function](#623-the-graphql__adderror-function)\n    * 6.3 [Client Error Handling](#63-client-error-handling)\n        * 6.3.1 [Request Error](#631-request-error)\n            * 6.3.1.1 [HTTP Error](#6311-http-error)\n            * 6.3.1.2 [Invalid Document Error](#6312-invalid-document-error)\n        * 6.3.2 [Payload Binding Error](#632-payload-binding-error)\n7. [Annotations](#7-annotations)\n    * 7.1 [Service Configuration](#71-service-configuration)\n        * 7.1.1 [Max Query Depth](#711-max-query-depth)\n        * 7.1.2 [Auth Configurations](#712-auth-configurations)\n        * 7.1.3 [Context Initializer Function](#713-context-initializer-function)\n        * 7.1.4 [CORS Configurations](#714-cors-configurations)\n        * 7.1.5 [GraphiQL Configurations](#715-graphiql-configurations)\n            * 7.1.5.1 [The `enabled` Field](#7151-the-enabled-field)\n            * 7.1.5.2 [The `path` Field](#7152-the-path-field)\n            * 7.1.5.3 [The `printUrl` Field](#7153-the-printurl-field)\n        * 7.1.6 [Service Interceptors](#716-service-interceptors)\n        * 7.1.7 [Introspection Configurations](#717-introspection-configurations)\n        * 7.1.8 [Constraint Configurations](#718-constraint-configurations)\n        * 7.1.9 [Operation-level Cache Configurations](#719-operation-level-cache-configurations)\n            * 7.1.9.1 [The `enabled` Field](#7191-the-enabled-field)\n            * 7.1.9.2 [The `maxAge` Field](#7192-the-maxage-field)\n            * 7.1.9.3 [The `maxSize` Field](#7193-the-maxsize-field)\n        * 7.1.10 [Query Complexity Configurations](#7110-query-complexity-configurations)\n            * 7.1.10.1 [The `maxComplexity` Field](#71101-the-maxcomplexity-field)\n            * 7.1.10.2 [The `defaultFieldComplexity` Field](#71102-the-defaultfieldcomplexity-field)\n            * 7.1.10.3 [The `warnOnly` Field](#71103-the-warnonly-field)\n    * 7.2 [Resource Configuration](#72-resource-configuration)\n        * 7.2.1 [Field Interceptors](#721-field-interceptors)\n        * 7.2.2 [Prefetch Method Name Configurations](#722-prefetch-method-name-configurations)\n        * 7.2.3 [Field-level Cache Configurations](#723-field-level-cache-configurations)\n        * 7.2.4 [Query Complexity Configurations](#724-query-complexity-configurations)\n    * 7.3 [Interceptor Configuration](#73-interceptor-configuration)\n        * 7.3.1 [Scope Configuration](#731-scope-configuration)\n    * 7.4 [ID Annotation](#74-id-annotation)\n8. [Security](#8-security)\n    * 8.1 [Service Authentication and Authorization](#81-service-authentication-and-authorization)\n        * 8.1.1 [Declarative Approach](#811-declarative-approach)\n            * 8.1.1.1 [Basic Authentication - File User Store](#8111-basic-authentication---file-user-store)\n            * 8.1.1.2 [Basic Authentication - LDAP User Store](#8112-basic-authentication---ldap-user-store)\n            * 8.1.1.3 [JWT Authentication](#8113-jwt-authentication)\n            * 8.1.1.4 [OAuth2](#8114-oauth2)\n        * 8.1.2 [Imperative Approach](#812-imperative-approach)\n            * 8.1.2.1 [Basic Authentication - File User Store](#8121-basic-authentication---file-user-store)\n            * 8.1.2.2 [Basic Authentication - LDAP User Store](#8122-basic-authentication---ldap-user-store)\n            * 8.1.2.3 [JWT Authentication](#8123-jwt-authentication)\n            * 8.1.2.4 [OAuth2](#8124-oauth2)\n    * 8.2 [Client Authentication and Authorization](#82-client-authentication-and-authorization)\n        * 8.2.1. [Basic Authentication](#821-basic-authentication)\n        * 8.2.2. [Bearer Token Authentication](#822-bearer-token-authentication)\n        * 8.2.3. [Self-Signed JWT Authentication](#823-self-signed-jwt-authentication)\n        * 8.2.4. [OAuth2](#824-oauth2)\n            * 8.2.4.1 [Client Credentials Grant Type](#8241-client-credentials-grant-type)\n            * 8.2.4.2 [Password Grant Type](#8242-password-grant-type)\n            * 8.2.4.3 [Refresh Token Grant Type](#8243-refresh-token-grant-type)\n            * 8.2.4.4 [JWT Bearer Grant Type](#8244-jwt-bearer-grant-type)\n    * 8.3 [SSL/TLS and Mutual SSL](#83-ssltls-and-mutual-ssl)\n        * 8.3.1 [Listener](#831-listener)\n            * 8.3.1.1 [SSL/TLS](#8311-ssltls)\n            * 8.3.1.2 [Mutual SSL](#8312-mutual-ssl)\n        * 8.3.2 [Client](#832-client)\n            * 8.3.2.1 [SSL/TLS](#8321-ssltls)\n            * 8.3.2.2 [Mutual SSL](#8322-mutual-ssl)\n9. [Tools](#9-tools)\n    * 9.1 [GraphiQL Client](#91-graphiql-client)\n10. [Advanced Features](#10-advanced-features)\n    * 10.1 [Context Object](#101-context-object)\n        * 10.1.1 [Context Methods](#1011-context-methods)\n            * 10.1.1.1 [Set Attribute in Context](#10111-set-attribute-in-context)\n            * 10.1.1.2 [Get Context Attribute](#10112-get-attribute-from-context)\n            * 10.1.1.3 [Remove Attribute from Context](#10113-remove-attribute-from-context)\n            * 10.1.1.4 [Register DataLoader in Context](#10114-register-dataloader-in-context)\n            * 10.1.1.5 [Get DataLoader from Context](#10115-get-dataloader-from-context)\n            * 10.1.1.6 [Invalidate Cache from Context](#10116-invalidate-cache-from-context)\n            * 10.1.1.7 [Invalidate All Caches from Context](#10117-invalidate-all-caches-from-context)\n        * 10.1.2 [Accessing the Context](#1012-accessing-the-context-object)\n        * 10.1.3 [Resolving Field Value](#1013-resolving-field-value)\n    * 10.2 [Field Object](#102-field-object)\n        * 10.2.1 [Field Object Methods](#1021-field-object-methods)\n            * 10.2.1.1 [Get Field Name](#10211-get-field-name)\n            * 10.2.1.2 [Get Field Alias](#10212-get-field-alias)\n            * 10.2.1.3 [Get Field Path](#10213-get-field-path)\n            * 10.2.1.4 [Get Subfield Names](#10214-get-subfield-names)\n            * 10.2.1.5 [Get Field Type](#10215-get-field-type)\n            * 10.2.1.6 [Get Subfields](#10216-get-subfields)\n            * 10.2.1.7 [Get Field Location](#10217-get-field-location)\n        * 10.2.2 [Accessing the Field Object](#1022-accessing-the-field-object)\n    * 10.3 [Interceptors](#103-interceptors)\n        * 10.3.1 [Interceptor Service Object](#1031-interceptor-service-object)\n        * 10.3.2 [Writing an Interceptor](#1032-writing-an-interceptor)\n        * 10.3.3 [Execution](#1033-execution)\n            * 10.3.3.1 [Service Interceptors](#10331-service-interceptors)\n            * 10.3.3.2 [Field Interceptors](#10332-field-interceptors)\n    * 10.4 [File Upload](#104-file-upload)\n        * 10.4.1 [File Upload Protocol](#1041-file-upload-protocol)\n        * 10.4.2 [`graphql:Upload` Type](#1042-the-graphqlupload-type)\n            * 10.4.2.1 [`fileName` Field](#10421-the-filename-field)\n            * 10.4.2.2 [`mimeType` Field](#10422-the-mimetype-field)\n            * 10.4.2.3 [`encoding` Field](#10423-the-encoding-field)\n            * 10.4.2.4 [`byteStream` Field](#10424-the-bytestream-field)\n        * 10.4.3 [File Upload Service](#1043-file-upload-service)\n            * 10.4.3.1 [File Upload Resolver](#10431-file-upload-resolver)\n    * 10.5 [Federation](#105-federation)\n        * 10.5.1 [Federated Subgraph](#1051-federated-subgraph)\n            * 10.5.1.1 [The `@subgraph:Subgraph` Annotation](#10511-the-subgraphsubgraph-annotation)\n            * 10.5.1.2 [The `@subgraph:Entity` Annotation](#10512-the-subgraphentity-annotation)\n            * 10.5.1.3 [The `subgraph:ReferenceResolver` Function Type](#10513-the-subgraphreferenceresolver-function-type)\n    * 10.6 [DataLoader](#106-dataloader)\n        * 10.6.1 [DataLoader API](#1061-dataloader-api)\n            * 10.6.1.1 [The `load` method](#10611-the-add-method)\n            * 10.6.1.2 [The `get` method](#10612-the-get-method)\n            * 10.6.1.3 [The `dispatch` method](#10613-the-dispatch-method)\n            * 10.6.1.4 [The `clearAll` method](#10614-the-clearall-method)\n        * 10.6.2 [The DefaultDataLoader](#1062-the-defaultdataloader)\n            * 10.6.2.1 [The `init` Method](#10621-the-init-method)\n                * 10.6.2.1.1 [The BatchLoadFunction](#106211-the-batchloadfunction)\n        * 10.6.3. [Engaging DataLoaders](#1063-engaging-dataloaders)\n            * 10.6.3.1 [Import `graphql.dataloader` Submodule](#10631-import-graphqldataloader-submodule)\n            * 10.6.3.2 [Register DataLoaders to Context via ContextInit Function](#10632-register-dataloaders-to-context-via-contextinit-function)\n            * 10.6.3.3 [Define the Corresponding `prefetch` Method](#10633-define-the-corresponding-prefetch-method)\n    * 10.7 [Caching](#107-caching)\n        * 10.7.1 [Server-side Caching](#1071-server-side-caching)\n            * 10.7.1.1 [Operation-level Caching](#10711-operation-level-caching)\n            * 10.7.1.2 [Field-level Caching](#10712-field-level-caching)\n            * 10.7.1.3 [Cache Invalidation](#10713-cache-invalidation)\n                * 10.7.1.3.1 [The `invalidate` Method](#107131-the-invalidate-method)\n                * 10.7.1.3.2 [The `invalidateAll` Method](#107132-the-invalidateall-method)\n    * 10.8 [Observability](#108-observability)\n        * 10.8.1 [Metrics](#1081-metrics)\n            * 10.8.1.1 [Operation Type](#10811-operation-type)\n            * 10.8.1.2 [Operation Name](#10812-operation-name)\n            * 10.8.1.3 [Field Name](#10813-field-name)\n            * 10.8.1.4 [Errors](#10814-errors)\n        * 10.8.2 [Tracing](#1082-tracing)\n        * 10.8.3 [Logging](#1083-logging)\n    * 10.9 [Document Validation](#109-document-validation)\n        * 10.9.1 [Query Complexity Validation](#1091-query-complexity-validation)\n            * 10.9.1.1 [Query Complexity Validation Configurations](#10911-configure-query-complexity-validation-for-a-graphql-service)\n                * 10.9.1.1.1 [The `maxComplexity` Field](#109111-the-maxcomplexity-field)\n                * 10.9.1.1.2 [The `defaultFieldComplexity` Field](#109112-the-defaultfieldcomplexity-field)\n                * 10.9.1.1.3 [The `warnOnly` Field](#109113-the-warnonly-field)\n            * 10.9.1.2 [Configure Query Complexity Validation for a Field](#10912-configure-query-complexity-validation-for-a-field)\n                * 10.9.1.2.1 [Record Field Complexity](#109121-record-field-complexity)\n                * 10.9.1.2.2 [List Field Complexity](#109122-list-field-complexity)\n                * 10.9.1.2.3 [Hierarchical Resource Paths Complexity](#109123-hierarchical-resource-paths-complexity)\n                * 10.9.1.2.4 [Interfaces and Objects Implementing Interfaces](#109124-interfaces-and-objects-implementing-interfaces)\n                * 10.9.1.2.5 [Introspection Query Complexities](#109125-introspection-query-complexities)\n            * 10.9.1.3 [Response for Invalid Document with Exceeding Max Query Complexity](#10913-response-for-invalid-document-with-exceeding-max-query-complexity)\n        * 10.9.2 [Query Depth Validation](#1092-query-depth-validation)\n            * 10.9.2.1 [Configure Query Depth Validation for a GraphQL Service](#10921-configure-query-depth-validation-for-a-graphql-service)\n                * 10.9.2.1.1 [The `maxDepth` Field](#109211-the-maxdepth-field)\n            * 10.9.2.2 [Response for Invalid Document with Exceeding Max Query Depth](#10922-response-for-invalid-document-with-exceeding-max-query-depth)\n        * 10.9.3 [Introspection](#1093-introspection)\n            * 10.9.3.1 [Response for Disabled Introspection](#10931-response-for-disabled-introspection)\n        * 10.9.4 [Constraint Validation](#1094-constraint-validation)\n            * 10.9.4.1 [Response for Invalid Document with Constraint Violation](#10941-response-for-invalid-document-with-constraint-violation)\n\n## 1. Overview\n\nThe Ballerina language provides first-class support for writing network-oriented programs. The GraphQL package uses these language constructs and creates the programming model to produce/consume GraphQL APIs.\n\nThe GraphQL package is designed to work with [GraphQL specification](https://spec.graphql.org). There are two main approaches when writing GraphQL APIs. The schema-first approach and the code-first approach. The Ballerina GraphQL package uses the code-first approach to write GraphQL APIs (which means no GraphQL schema is required to create a GraphQL service), while it also supports the schema-first approach through the Ballerina GraphQL CLI tool.\n\nIn addition to functional requirements, this library deals with none functional requirements such as security. Each requirement is discussed in detail in the coming sections.\n\n## 2. Components\n\nThis section describes the components of the Ballerina GraphQL package. To use the Ballerina GraphQL package, a user must import the Ballerina GraphQL package first.\n\n###### Example: Importing the GraphQL Package\n\n```ballerina\nimport ballerina/graphql;\n```\n\n### 2.1 Listener\n\n#### 2.1.1 HTTP Listener\n\nSince the GraphQL spec does not mandate an underlying client-server protocol, a GraphQL implementation can use any protocol underneath. The Ballerina GraphQL package, like most of the other implementations, uses HTTP as the protocol. The Ballerina GraphQL listener uses an HTTP listener to listen to incoming GraphQL requests through HTTP.\n\n#### 2.1.2 WebSocket Listener\n\nIf the schema contains the `Subscription` type (as described in [Subscription Type](#313-the-subscription-type)), The GraphQL listener will establish a new WebSocket listener to listen to incoming subscription requests.\n\nIn Ballerina, WebSocket is used as the communication protocol for GraphQL subscriptions as it is capable of dispatching data continuously while maintaining a persistent connection. Ballerina GraphQL utilizes the `graphql-transport-ws` (graphql-ws) WebSocket sub-protocol in subscriptions. If a WebSocket connection is established with the `graphql-transport-ws` sub-protocol, all subscription responses will be formatted according to the standard message structure outlined in the [specification](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md).\n\nA standard response includes JSON fields for `type`, `id`, and `payload`. The `type` field specifies the message type of the response. The `id` field is used to uniquely identify the client. The `payload` field includes the GraphQL response returned from the GraphQL engine. If a subscription request is sent without the `graphql-transport-ws` sub-protocol then the WebSocket handshake fails with an error.\n\n>**Note:** The Ballerina GraphQL subscription includes a default implementation for sending `ping` messages over a graphql-ws connection, and periodically checking for `pong` messages in response. By default, these messages are sent and checked every 15 seconds. If a `pong` message is not received within this time frame, the service will close the WebSocket connection.\n\nA Ballerina GraphQL listener can be declared as described below, honoring the Ballerina generic [listener declaration](https://ballerina.io/spec/lang/2021R1/#section_9.2.1).\n\n#### 2.1.3 Initializing the Listener Using Port Number\n\nIf a GraphQL listener is required to be listening to a port number, that port number must be provided as the first parameter of the listener constructor.\n\n###### Example: Initializing the Listener Using Port Number\n\n```ballerina\nlistener graphql:Listener graphqlListener = new (9090);\n```\n\n#### 2.1.4 Initializing the Listener using an HTTP Listener\n\nIf a GraphQL listener is required to listen to the same port as an existing [`http:Listener`](https://github.com/ballerina-platform/module-ballerina-http/blob/master/docs/spec/spec.md/#21-listener) object, that `http:Listener` object must be provided as the first parameter of the listener constructor.\n\n###### Example: Initializing the Listener using an HTTP Listener\n\n```ballerina\nlistener http:Listener httpListener = new (9090);\nlistener graphql:Listener graphqlListener = new (httpListener);\n```\n\n>**Note:**  The client does not need to explicitly create a `websocket:Listener` for subscriptions. If there is a subscription resolver in a service, the `graphql:Listener` will initiate a `websocket:Listener` over the same port used in the `http:Listener`.\n\n#### 2.1.5 Listener Configuration\n\nSince the GraphQL listener uses the `http:Listener` and the `websocket:Listener` as the underlying listeners, some additional configurations can be passed to these listeners, when creating a `graphql:Listener`. These configurations are defined in the `graphql:ListenerConfiguration` record.\n\n###### Example: Listener Configuration\n\n```ballerina\nlistener graphql:Listener graphqlListener = new (9090, timeout = 10);\n```\n\n>**Note:** If the GraphQL service includes subscription operations, the `httpVersion` of the `graphql:ListenerConfiguration` must be either `\"1.0\"` or `\"1.1\"`. Otherwise, this will cause a runtime error when attaching the service to the listener.\n\n### 2.2 Service\n\nThe `service` represents the GraphQL schema in the Ballerina GraphQL package. When a service is attached to a GraphQL listener, it is considered a GraphQL service. When a service is identified as a GraphQL service, it will be used to [Generate the Schema](#3-schema-generation). Attaching the same service to multiple listeners is not allowed, and will cause a compilation error.\n\n###### Example: Service\n\n```ballerina\nservice /graphql on new graphql:Listener(9090) {\n\n}\n```\n\nIn the above [example](#example-service), a GraphQL service is attached to a GraphQL listener. This is syntactic sugar to declare a service and attach it to a GraphQL listener.\n\n#### 2.2.1 Service Type\n\nThe following distinct service type is provided by the Ballerina GraphQL package that can be used by the users. It can be referred to as `graphql:Service`. Since the language support is yet to be implemented for the service typing, service validation is done using the Ballerina GraphQL compiler plugin.\n\n```ballerina\npublic type Service distinct service object {\n\n};\n```\n\n#### 2.2.2 Service Base Path\n\nThe base path is used to discover the GraphQL service to dispatch the requests. identifiers and string literals can be used as the base path, and it should be started with `/`. The base path is optional and if not provided, will be defaulted to `/`. If the base path contains any special characters, they should be escaped or defined as string literals.\n\n###### Example: Base Path\n\n```ballerina\nservice hello\\-graphql on new graphql:Listener(9090) {\n\n}\n```\n\n#### 2.2.3 Service Declaration\n\nThe [service declaration](https://ballerina.io/spec/lang/2021R1/#section_10.2.2) is syntactic sugar for creating a service. This is the most-used approach for creating a service.\n\n###### Example: Service Declaration\n\n```ballerina\nservice graphql:Service /graphql on new graphql:Listener(9090) {\n\n}\n```\n\n#### 2.2.4 Service Object Declaration\n\nA service can be instantiated using the service object. This approach provides full control of the service life cycle to the user. The listener life cycle methods can be used to handle this.\n\n###### Example: Service Object Declaration\n\n```ballerina\ngraphql:Service graphqlService = service object {\n    resource function get greeting() returns string {\n        return \"Hello, world!\";\n    }\n}\n\npublic function main() returns error? {\n    graphql:Listener graphqlListener = check new (9090);\n    check graphqlListener.attach(graphqlService, \"graphql\");\n    check graphqlListener.'start();\n    runtime:registerListener(graphqlListener);\n}\n```\n\n>**Note:** The service object declaration is only supported when the service object is defined in global scope. If the service object is defined anywhere else, the schema generation will fail. This is due to a known current limitation in the Ballerina language.\n\n#### 2.2.5 Service Configuration\n\nThe `graphql:ServiceConfiguration` annotation can be used to provide additional configurations to the GraphQL service. These configurations are described in the [Service Configuration](#71-service-configuration) section.\n\n### 2.3 Parser\n\nThe Ballerina GraphQL parser is responsible for parsing the incoming GraphQL documents. This will parse each document and then report any errors. If the document is valid, it will return a syntax tree.\n\n>**Note:** The Ballerina GraphQL parser is implemented as a separate module and is not exposed outside the Ballerina GraphQL package.\n\n### 2.4 Engine\n\nThe GraphQL engine acts as the main processing unit in the Ballerina GraphQL package. It connects all the other components in the Ballerina GraphQL service together.\n\nWhen a request is received by the GraphQL Listener, it dispatches the request to the GraphQL engine, where it extracts the document from the request, and then passes it to the parser. Then the parser will parse the document and return an error (if there is any) or the syntax tree to the engine. Then the engine will validate the document against the generated schema, and then if the document is valid, the engine will execute the document.\n\n### 2.5 Client\n\nThe GraphQL client can be used to connect to a GraphQL service and retrieve data. This client currently supports the `Query` and `Mutation` operations. The Ballerina GraphQL client uses HTTP as the underlying protocol to communicate with the GraphQL service.\n\n#### 2.5.1 Initializing the Client\n\nThe `graphql:Client` init method requires a valid URL and optional configuration to initialize the client.\n\n```ballerina\ngraphql:Client graphqlClient = check new (“http://localhost:9090/graphql”, {timeout: 10});\n```\n\n#### 2.5.2 Executing Operations\n\nThe graphql client provides `execute` API to execute graphql query and mutation operations. The `execute` method of `graphql:Client` takes a GraphQL document as the required argument and sends a request to the specified backend URL seeking a response. Further, the execute method could take the following optional arguments.\n\n* `variables` - A map containing the GraphQL variables. All the variables that may be required by the graphql document can be set via this `variables` argument.\n* `operationName` - The GraphQL operation name. If the document has more than one operation, then each operation must have a name. A single GraphQL request can only execute one operation; the operation name must be set if the document has more than one operation. Otherwise, the GraphQL server responds with an error.\n* `headers` - A map containing headers that may be required by the graphql server to execute each operation.\n\nThe method definition of the `execute` API is given below.\n\n```ballerina\nremote isolated function execute(string document, map<anydata>? variables = (), string? operationName = (),\n    map<string|string[]>? headers = (), typedesc<GenericResponseWithErrors|record {}|json> targetType = <>)\n    returns targetType|ClientError ;\n```\n\n#### 2.5.3 Client Data Binding\n\nWhen sending a GraphQL request to a GraphQL server using the Ballerina GraphQL client, the response can be data-bound. That means the user can define the expected shape of the GraphQL response by defining a type. The data type defined by the user should be a subtype of `graphql:GenericResponseWithErrors|record{}|json`. Otherwise, the data binding fails with an error.\n\n>**Note:** It is recommended to use the `graphql:GenericResponseWithErrors` or any subtype of it when retrieving a response using the `graphql:Client` using the `execute` method.\n\nWhen defining the expected type, nullable fields should be defined as a union of the field type and nil (`()`). A [Payload Binding Error](#632-payload-binding-error) can occur otherwise.\n\n###### Example: Handle Response with Data Binding\n\nThis example shows how to data-bind the response to a pre-defined type. Note how the `age` field is defined as a nullable field.\n\n```ballerina\ntype ProfileResponseWithErrors record {|\n    *graphql:GenericResponseWithErrors;\n    record {|Profile profile;|} data;\n|};\n\ntype Profile record {|\n    string name;\n    int? age;\n|};\n\npublic function main() returns error? {\n    graphql:Client graphqlClient = check new (\"localhost:9090/graphql\");\n    string document = \"{ profile(id: 100) {name age} }\";\n    ProfileResponseWithErrors response = check graphqlClient->execute(document);\n    string name = response.data.profile.name;\n    io:println(name);\n}\n```\n\nThe `execute` method can return errors when retrieving a response from a GraphQL API. For information about handling errors, check the section [Client Error Handling](#63-client-error-handling)\n\n#### 2.5.4 Client Configuration\n\nThe `graphql:Client` uses `http:Client` as its underlying implementation; this `http:Client` can be configured by providing the `graphql:ClientConfiguration` as an optional parameter via the `graphql:Client` init method.\n\n## 3. Schema Generation\n\nThe GraphQL schema is generated by analyzing the Ballerina service attached to the GraphQL listener. The Ballerina GraphQL package will walk through the service and the types related to the service to generate the complete GraphQL schema.\n\nWhen an incompatible type is used inside a GraphQL service, a compilation error will be thrown.\n\n### 3.1 Root Types\n\nRoot types are a special set of types in a GraphQL schema. These types are associated with an operation, which can be done on the GraphQL scheme. There are three root types.\n\n* `Query`\n* `Mutation`\n* `Subscription`\n\n#### 3.1.1 The `Query` Type\n\nThe `Query` type is the main root type in a GraphQL schema. It is used to query the schema. The `Query` must be defined for a GraphQL schema to be valid. In Ballerina, the service itself is the schema, and each `resource` method with the `get` accessor inside a GraphQL service is mapped to a field in the root `Query` type.\n\n###### Example: Adding a Field to the `Query` Type\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n>**Note:** Since the `Query` type must be defined in a GraphQL schema, a Ballerina GraphQL service must have at least one resource method with the `get` accessor. Otherwise, the service will cause a compilation error.\n\n#### 3.1.2 The `Mutation` Type\n\nThe `Mutation` type in a GraphQL schema is used to mutate the data. In Ballerina, each `remote` method inside the GraphQL service is mapped to a field in the root `Mutation` type. If no `remote` method is defined in the service, the generated schema will not have a `Mutation` type.\n\n###### Example: Adding a Field to the `Mutation` Type\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    remote function setName(string name) returns string {\n        //...\n    }\n}\n```\n\nAs per the [GraphQL specification](https://spec.graphql.org/June2018/#sec-Mutation), the `Mutation` type is expected to perform side effects on the underlying data system. Therefore, the mutation operations should be executed serially. This is ensured in the Ballerina GraphQL package. Each remote method invocation in a request is done serially, unlike the resource method invocations, which are executed in parallel.\n\n#### 3.1.3 The `Subscription` Type\n\nThe `Subscription` type in a GraphQL schema is used to continuously fetch data from a GraphQL service. In Ballerina, each `resource` method with the `subscribe` accessor inside a GraphQL service is mapped to a field in the root `Subscription` type. If the `resource` method has the `subscribe` accessor, it must return a `stream`. Otherwise, the compilation error will occur.\n\n###### Example: Adding a Field to the `Subscription` Type\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function subscribe greetings() returns stream<stream> {\n        return [\"Hello\", \"Hi\", \"Hello World!\"].toStream();\n    }\n}\n```\n\n### 3.2 Wrapping Types\n\nWrapping types are used to wrap the named types in GraphQL. A wrapping type has an underlying named type. There are two wrapping types defined in the GraphQL schema.\n\n#### 3.2.1 `NON_NULL` Type\n\n`NON_NULL` type is a wrapper type to denote that the resulting value will never be `null`. Ballerina types do not implicitly allow `nil`. Therefore, each type is inherently a `NON_NULL` type until specified explicitly otherwise. If a type is meant to be a nullable value, it should be unionized with `nil`.\n\n>**Note:** `nil` (represented by `()`) is the Ballerina's version of `null`.\n\nIn the following example, the type of the `name` field is `String!`. This means the `String` type is wrapped by the `NON_NULL` type.\n\n###### Example: NON_NULL Type\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get name returns string {\n        return \"Walter White\";\n    }\n}\n```\n\nTo make it a nullable type, it should be unionized with `?`. The following example shows the field `name` of the type `String`. This means the `name` field can have a `null` value.\n\n###### Example: Nullable Type\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get name returns string? {\n        return \"Walter White\";\n    }\n}\n```\n\n>**Note:** `?` is syntactic sugar for `|()`.\n\n#### 3.2.2 `LIST` Type\n\nThe list type represents a list of values of another type. Therefore, `LIST` is considered a wrapping type. In Ballerina, a `LIST` type is defined using an array. The following represents a field called `names` of the type of `LIST` of `String!` type.\n\n###### Example: LIST Type\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get names() returns string[] {\n        return [\"Walter White\", \"Jesse Pinkman\"];\n    }\n}\n```\n\n### 3.3 Resource Methods\n\nResource methods are a special kind of method in Ballerina. In the Ballerina GraphQL package, `resource` methods are used to define GraphQL object fields. The `resource` methods in a GraphQL service are validated at the compile-time.\n\n#### 3.3.1 Resource Accessor\n\nThe only allowed accessors in Ballerina GraphQL resource are, `get` and `subscribe`. Any other accessor usage will result in a compilation error.\n\n###### Example: Resource Accessor\n\n```ballerina\nresource function get greeting() returns string {\n    // ...\n}\n```\n\n###### Counter Example: Resource Accessor\n\n```ballerina\nresource function post greeting() returns string {\n    // ...\n}\n```\n\n#### 3.3.2 Resource Name\n\nAs the `resource` methods are mapped to a field of a GraphQL `Object` type, the resource name represents the name of the corresponding field.\n\n###### Example: Resource Name\n\n```ballerina\nresource function get greeting() returns string {\n    // ...\n}\n```\n\nIn the above example, the resource represents a field named `greeting` of type `String!`. Check [Types Section](#4-types) for more information on types and fields.\n\n#### 3.3.3 Hierarchical Resource Path\n\nGraphQL represents the data as a hierarchical structure. Ballerina resources provide different ways to define this structure. Hierarchical resource paths are one approach, which is also the simplest way.\n\nThe path of a resource can be defined hierarchically so that the schema generation can generate the types using the hierarchical path. When a service has resources with hierarchical resource paths, the first path segment and each intermediate path segment of a resource represent an `Object` type field. The GraphQL type represented by the return type of the `resource` method is assigned to the field represented by the leaf-level (final) path segment. Each intermediate type has the same name as the path segment. Therefore, the field name and the type name are the same for the intermediate path segments.\n\n###### Example: Hierarchical Resource Path\n\n```ballerina\nservice graphql:Service on new graphql:Listener(9090) {\n    resource function get profile/address/number() returns int {\n        return 308;\n    }\n\n    resource function get profile/address/street() returns string {\n        return \"Negra Arroyo Lane\";\n    }\n\n    resource function get profile/address/city() returns string {\n        return \"Albuquerque\";\n    }\n\n    resource function get profile/name() returns string {\n        return \"Walter White\";\n    }\n\n    resource function get profile/age() returns int {\n        return 52;\n    }\n}\n```\n\nThe above example shows how to use hierarchical resource paths to create a hierarchical data model. When the schema is generated using this service, the root `Query` operation has a single field, `profile`, as it is the only path segment at the top level. The type of this field is also `profile`, which is an `Object` type. This object type has three fields: `address`, `name`, and `age`. The type of the `address` field is also `Object` as it is an intermediate path segment (i.e. has child path segments). The name of this object type is `address`. It has three fields: the `number` (type `Int!`), the `street` (type `String!`), and the `city` (type `String!`). The `name` field is of type `String!`, and the `age` field is of type `Int!`. Check the [Types Section](#4-types) for more information on types and fields.\n\n### 3.4 Remote Methods\n\nThe `remote` methods are used to define the fields of the `Mutation` type in a GraphQL schema. Remote methods are validated at the compile-time.\n\n>**Note:** The `resource` and `remote` methods are called __*resolvers*__ in GraphQL terminology. Therefore, in this spec, sometimes the term __*resolver*__ is used to refer `resource` and `remote` methods.\n\n#### 3.4.1 Remote Method Name\n\nThe name of the `remote` method is the name of the corresponding GraphQL field in the `Mutation` type.\n\n### 3.5 Documentation\n\nA GraphQL schema can have documentation for the types, fields, enums, schema, etc.\n\nIn Ballerina, the Ballerina doc comments can be used to add documentation for the generated schema. Each comment belonging to a field, argument, or enum will be applied to the particular GraphQL schema member.\n\n###### Example: Documentation\n\n```ballerina\n# Service to query people database.\nservice on new graphql:Listener(9090) {\n\n    # Returns a profile with the given ID.\n    #\n    # + id - The ID of the profile\n    # + return - The profile with the given ID\n    resource function get profile(int id) returns Profile {\n        // ...\n    }\n}\n\n# Represents a profile.\n#\n# + id - The ID of the profile\n# + name - The name of the profile\n# + age - The age of the profile\npublic type Profile record {|\n    int id;\n    string name;\n    int age;\n|};\n```\n\nThis will generate the documentation for all the fields of the `Query` type including the field descriptions of the `Profile` type.\n\n>**Note:** When a field or an argument name contains Unicode characters or any other escape characters, they are unescaped when generating the schema.\n\n###### Example: Escaping Characters\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get 'type(string 'version) returns string {\n        return \"\";\n    }\n\n    resource function get name(string \\u{0076}ersion) returns string {\n        return \"\";\n    }\n}\n```\n\nThe above code will generate the following schema:\n\n```graphql\ntype Query {\n    type(version: String!): String!\n    name(version: String!): String!\n}\n```\n\n## 4. Types\n\nGraphQL type system is represented using a hierarchical structure. Type is the fundamental unit of any GraphQL schema.\n\n### 4.1 Scalars\n\nScalar types represent primitive leaf values in the GraphQL type system. The following built-in types are supported in the Ballerina GraphQL package. Scalar values are represented by the primitive types in Ballerina.\n\n#### 4.1.1 Int\n\nThe `Int` type is represented using the `int` type in Ballerina.\n\n#### 4.1.2 Float\n\nThe `Float` type is represented using the `float` type in Ballerina.\n\n>**Note:** When used as an input value type, both integer and float values are accepted as valid inputs.\n\n#### 4.1.3 String\n\nThe `String` type is represented using the `string` type in Ballerina. It can represent Unicode values.\n\n#### 4.1.4 Boolean\n\nThe `Boolean` type is represented using the `boolean` type in Ballerina.\n\n#### 4.1.5 ID\n\nThe `ID` scalar type represents a unique identifier, often used to re-fetch an object or as the key for a cache. The `ID` type is serialized in the same way as a `String`; however, it is not intended to be human-readable.\n\nIn Ballerina, the `ID` type is represented using the [`@graphql:ID` annotation](#74-id-annotation). The following Ballerina types are supported as `ID` types.\n\n* `int`\n* `string`\n* `float`\n* `decimal`\n* `uuid:Uuid` (From the `ballerina/uuid` module)\n\nWhen the `@graphql:ID` annotation is used, the generated schema will show the field type as `ID`, regardless of the actual type of the field.\n\n>**Note:** If the `@graphql:ID` annotation is used for a field, the values of those fields will always be serialized as strings.\n\n>**Note:** Applying a `@graphql:ID` annotation to an array indicates it as a list of `ID` elements.\n\n###### Example: ID Scalar Type\n\n```ballerina\nservice on new graphql:Listener(9090) {\n\n    resource function get profileById(@graphql:ID int id) returns Profile {\n        // ...\n    }\n\n    resource function get profileByIds(@graphql:ID int[] ids) returns Profile[] {\n        // ...\n    }\n\n    resource function get studentByStringId(@graphql:ID string id) returns Student {\n        // ...\n    }\n\n    resource function get studentByUuidId(@graphql:ID uuid:Uuid id) returns Student {\n        // ...\n    }\n}\n\npublic type Profile record {|\n    @graphql:ID int id;\n    string name;\n    int age;\n|};\n\npublic distinct service class Student {\n    final string id;\n    final string name;\n\n    function init(string id, string name) {\n        self.id = id;\n        self.name = name;\n    }\n\n    resource function get id() returns @graphql:ID string {\n        return self.id;\n    }\n\n    resource function get name() returns string {\n        return self.name;\n    }\n}\n```\n\nApart from the above types, the `decimal` type can also be used inside a GraphQL service, which will create the `Decimal` scalar type in the corresponding GraphQL schema.\n\n### 4.2 Objects\n\nObjects represent the intermediate levels of the type hierarchy. Objects can have a list of named fields, each of which has a specific type.\n\nIn Ballerina, a GraphQL object type can be represented using either a service type or a record type.\n\n#### 4.2.1 Record Type as Object\n\nA Ballerina record type can be used as an Object type in GraphQL. Each record field is mapped to a field in the GraphQL object and the type of the record field will be mapped to the type of the corresponding GraphQL field.\n\n>**Note:** A GraphQL object must have at least one field. Therefore, an empty record type cannot be used as an object type in GraphQL, and using an empty record type will result in a compilation error.\n\n###### Example: Record Type as Object\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n        return {name: \"Walter White\", age: 52};\n    }\n}\n\ntype Profile record {|\n    string name;\n    int age;\n|};\n```\n\n>**Note:** Even though anonymous record types are supported in Ballerina, they cannot be used as types in a GraphQL schema. This is because a type in a GraphQL schema must have a name. Therefore, if an anonymous record is used in a GraphQL service, it will result in a compilation error.\n\n>**Note:** Alias types of record types are not allowed to be used as object types in a GraphQL schema. If there is a need to utilize fields from an existing type repeatedly, ballerina type inclusion can be used.\n\n>**Hint:** Open records are supported in GraphQL services, but they do not make sense in the context of GraphQL since a GraphQL type cannot have dynamic fields. Therefore, it is recommended to use closed records in GraphQL services unless it is absolutely needed.\n\n#### 4.2.2 Service Type as Object\n\nA Ballerina service type can be used as an `Object` type in GraphQL. Similar to the `Query` type, each resource method inside a service type represents a field of the object.\n\nSince GraphQL only allows mutations at the top level and the `remote` methods are used to represent the `Mutation` type, any service type used to represent a GraphQL `Object` cannot have `remote` methods inside it.\n\n>**Note:** As per the GraphQL spec, only the root type can have `Mutation`s. Therefore, defining `remote` methods inside subsequent object types does not make any sense.\n\nThe `resource` methods in these service types can have input parameters. These input parameters are mapped to arguments in the corresponding field.\n\n>**Note:** The service types representing an `Object` can be either `distinct` or non-distinct type. But if a service type is used as a member of a `Union` type, they must be `distinct` service classes.\n\n###### Example: Service Type as Object\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n        return new (\"Walter White\", 52);\n    }\n}\n\nservice class Profile {\n    private final string name;\n    private final int age;\n\n    function init(string name, int age) {\n        self.name = name;\n        self.age = age;\n    }\n\n    resource function get name() returns string {\n        return self.name;\n    }\n\n    resource function get age() returns int {\n        return self.age;\n    }\n}\n```\n\n>**Note:** Although both the record and service type can be used to represent the `Object` type, using record type as `Object` has limitations. For example, a field represented as a record field can not have an input argument, as opposed to a field represented using a `resource` method in a service class.\n\n### 4.3 Unions\n\nGraphQL `Union` type represents an object that could be one of a list of possible GraphQL `Object` types but provides no guarantee for common fields in the member types. Ballerina has first-class support for union types. The Ballerina GraphQL package uses this feature to define `Union` types in a schema.\n\nIn Ballerina, only `distinct` `service` classes are supported as union-type members. The reason behind this is the difference between GraphQL and the Ballerina type systems. The Ballerina is a structurally-typed language whereas GraphQL is a nominally-typed language. The `distinct` types of Ballerina have similar behavior to nominal types. If one or more member type in a union type is not a `distinct` `service` class, a compilation error will occur.\n\n###### Example: Union Types\n\nIn the following example, two `distinct` service types are defined first, `Teacher` and `Student`. Then a `Union` type is defined using Ballerina syntax for defining union types. The resource method in the GraphQL service returns the union type.\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n        return new Teacher(\"Walter White\", \"Chemistry\");\n    }\n}\n\ndistinct service class Teacher {\n    private final string name;\n    private final string subject;\n\n    function init(string name, string subject) {\n        self.name = name;\n        self.subject = subject;\n    }\n\n    resource function get name() returns string {\n        return self.name;\n    }\n\n    resource function get subject() returns string {\n        return self.subject;\n    }\n}\n\ndistinct service class Student {\n    private final string name;\n    private final float gpa;\n\n    function init(string name, int gpa) {\n        self.name = name;\n        self.gpa = gpa;\n    }\n\n    resource function get name() returns string {\n        return self.name;\n    }\n\n    resource function get gpa() returns float {\n        return self.gpa;\n    }\n}\n\ntype Profile Teacher|Student; // Defining the union type\n```\n\n### 4.4 Enums\n\nIn GraphQL, the `Enum` type represents leaf values in the GraphQL schema, similar to the `Scalar` types. But the `Enum` types describe the set of possible values. In Ballerina, the `enum` type is used to define the `Enum` type in GraphQL.\n\n###### Example: Enums\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get direction() returns Direction {\n        return NORTH;\n    }\n}\n\nenum Direction {\n    NORTH,\n    EAST,\n    SOUTH,\n    WEST\n}\n```\n\n>**Note:** While it is possible to assign a `string` value to an `enum` member in the Ballerina language, the GraphQL specification does not support this behaviour. Therefore, it's not recommended to use `string` values for `enum` members when defining an `enum` type for use in a `graphql:Service`. Using `string` values for `enum` members may result in an invalid generated schema.\n\n### 4.5 Input Types\n\nIn GraphQL, a field can have zero or more input arguments. These arguments can be either a [`Scalar` type](#41-scalars), an [`Enum` type](#44-enums), or an [`INPUT_OBJECT` type](#452-input-objects).\n\n#### 4.5.1 Input Union Types\n\nAn input type can be a Ballerina union type, if and only if the union consists of one of the supported types and the other member type is `nil`. A union with nil means the input type is nullable. Any other union type will result in a compilation error.\n\n###### Example: Input Union Types\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get greet(string? name) returns string {\n        if name is string {\n            return string `Hello, ${name}`;\n        }\n        return \"Hello, world!\";\n    }\n}\n```\n\n###### Counter Example: Invalid Input Union Types\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get greeting(string|error name) returns string { // Results in a compilation error\n        return \"Hello, World!\"\n    }\n}\n```\n\n#### 4.5.2 Input Objects\n\nAlthough `Scalar` and `enum` types can be used as input and output types without a limitation, an object type can not be used as an input type and an output type at the same time. Therefore, separate kinds of objects are used to define input objects.\n\nIn Ballerina, a `record` type can be used as an input object. When a `record` type is used as the type of the input argument of a `resource` or `remote` method in a GraphQL service (or in a `resource` method in a `service` type returned from the GraphQL service), it is mapped to an `INPUT_OBJECT` type in GraphQL.\n\n>**Note:** A GraphQL input object must have at least one field. Therefore, an empty record type cannot be used as an input object type in GraphQL, and using an empty record type will result in a compilation error.\n\n>**Note:** Since GraphQL schema can not use the same type as an input and an output type when a record type is used as an input and an output, a compilation error will be thrown.\n\n>**Note:** Alias types of record types are not allowed to be used as input object types in a GraphQL schema. If there is a need to utilize fields from an existing type repeatedly, ballerina type inclusion can be used.\n\n###### Example: Input Objects\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get author(Book book) returns string {\n        return book.author;\n    }\n}\n\ntype Book record {|\n    string title;\n    string author;\n|};\n```\n\n#### 4.5.3 Default Values\n\nThe input arguments of a GraphQL field can have default values. In Ballerina, this is allowed by providing default values to input parameters of a `resource` or `remote` method that represents a GraphQL field. When a `resource` or `remote` method input parameter has a default value, it will be added to the generated GraphQL schema. Then, the input parameter can be omitted in the GraphQL document, even if the input type is `NON_NULL`.\n\n>**Note:** To generate a schema with a valid default value, remember to use either a literal value, a list constructor expression, or a mapping constructor expression for the default parameters or input object fields. The generated schema will use an empty string if the default value is not one of the mentioned types of expressions. Avoid using other types of expressions, such as variable assignment, as they may result in an invalid schema.\n\n###### Example: Default Values\n\n```ballerina\nresource function get greeting(string name = \"Stranger\") returns string {\n    return \"Hello, \" + name;\n}\n```\n\n### 4.6 Interfaces\n\nIn GraphQL, an interface can be used to define a set of common fields for objects. Then the `Object` types can implement the interface with the common fields and optionally, additional fields.\n\nIn Ballerina, `distinct` `service` objects can be used to define GraphQL interfaces. The other `distinct` `service` classes can be used to implement the interface. To implement an interface, the intended interface type should be added as an included type in the service types that implement the interface. All the service classes that are implementing the interface must provide the implementation for all resource methods declared in the interface, and they can define additional resource methods for additional fields.\n\n> **Note:** If an included service object type is not returning from a GraphQL `resource` or `remote` method, it will not be considered as an interface, even if it is included in another service type.\n\nNon-distinct `service` objects and `service` classes can not be used to define or implement GraphQL interfaces.\n\n>**Note**: In order to be recognized as GraphQL objects or interfaces, the Ballerina `service` `object`s and `service` `class`es must be defined within the same module as the GraphQL service.\n\n###### Example: Interfaces\n\n```ballerina\npublic type Profile distinct service object {\n    isolated resource function get name() returns string;\n};\n\n# Represents a Student as a class.\npublic isolated distinct service class Student {\n    *Profile;\n    final string name;\n    final int id;\n\n    isolated function init(string name, int id) {\n        self.name = name;\n        self.id = id;\n    }\n\n    isolated resource function get name() returns string {\n        return self.name;\n    }\n\n    isolated resource function get id() returns int {\n        return self.id;\n    }\n}\n\n# Represents a Teacher as a class.\npublic isolated distinct service class Teacher {\n    *Profile;\n    final string name;\n    final string subject;\n\n    isolated function init(string name, string subject) {\n        self.name = name;\n        self.subject = subject;\n    }\n\n    isolated resource function get name() returns string {\n        return self.name;\n    }\n\n    isolated resource function get subject() returns string {\n        return self.subject;\n    }\n}\n```\n\nIn the above example, the `Profile` object is an interface. The `Student` and `Teacher` classes are `Object` types that implement the `Profile` interface.\n\n###### Counter Example: Invalid Interfaces\n\n```ballerina\npublic type Profile service object {\n    resource function get name() returns string;\n};\n\npublic isolated service class Student {\n    *Profile;\n    final string name;\n    final int id;\n\n    isolated function init(string name, int id) {\n        self.name = name;\n        self.id = id;\n    }\n\n    isolated resource function get name() returns string {\n        return self.name;\n    }\n\n    isolated resource function get id() returns int {\n        return self.id;\n    }\n}\n\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n        return new Student(\"Walter White\", 52);\n    }\n}\n```\n\nThe above example results in a compilation error because the `Profile` object is not a `distinct` object, and the `Student` class is not a `distinct` class.\n\n#### 4.6.1 Interfaces Implementing Interfaces\n\nIn GraphQL, an interface can implement another interface. The implementing interface must define each field that is specified by the implemented interface. Interface definitions must not contain cyclic references nor implement themselves.\n\nIn Ballerina, `distinct` `service` objects can be included in other `distinct` `service` objects to achieve interface-implementing interface functionality. Including these interface objects, to itself or cyclically within other interface objects results in a compilation error.\n\nAn `Object` type that implements an interface must implement all the fields from that interface and its parent interfaces.\n\n###### Example: Interfaces Implementing Interfaces\n\n```ballerina\nservice on new graphql:Listener(9000) {\n    resource function get node() returns Node {\n        return new Image(\"001\", \"https://ballerina.io/images/ballerina-logo-white.svg\", \"logo\");\n    }\n}\n\npublic type Node distinct service object {\n    resource function get id() returns string;\n};\n\npublic type Resource distinct service object {\n    *Node;\n    resource function get url() returns string;\n};\n\npublic isolated distinct service class Image {\n    *Resource;\n\n    final string id;\n    final string url;\n    final string thumbnail;\n\n    isolated function init(string id, string url, string thumbnail) {\n        self.id = id;\n        self.url = url;\n        self.thumbnail = thumbnail;\n    }\n\n    isolated resource function get id() returns string {\n        return self.id;\n    }\n\n    isolated resource function get url() returns string {\n        return self.url;\n    }\n\n    isolated resource function get thumbnail() returns string {\n        return self.thumbnail;\n    }\n}\n```\n\nIn the above example, the `Node` and `Resource` objects are interfaces. The `Resource` interface implements the `Node` interface. The `Image` class is an `Object` type that implements the `Resource` interface. Since the `Image` object implements the `Resource` interface and the `Resource` interface implements the `Node` interface, the `Image` object must implement the fields from both interfaces.\n\n## 5. Directives\n\nBallerina GraphQL services support three default directives.\n\n### 5.1 @skip\n\nThe `@skip` directive is used to skip a field execution depending on a given condition. It can be used on a field, fragment spread, or inline fragment. The directive expects exactly one argument `if`, which is of type `Boolean!`.\n\nThe field is skipped if the value of the `if` argument is `true`.\n\n###### Example: @skip\n\nIn the following query, the `name` field will not be queried if the variable `skipName` is `true`.\n\n```graphql\nquery getProfile ($skipName: Boolean!) {\n    profile(id: 1) {\n        name @skip(if: $skipName)\n        age\n    }\n}\n```\n\n### 5.2 @include\n\nThe `@include` directive is used to include a field execution depending on a given condition. It can be used on a field, fragment spread, or inline fragment. The directive expects exactly one argument `if`, which is of type `Boolean!`.\n\nThe field is included if the value of the `if` argument is `true`.\n\n###### Example: @include\n\nIn the following query, the `name` field will be queried only if the variable `includeName` is `true`.\n\n```graphql\nquery getProfile ($includeName: Boolean!) {\n    profile(id: 1) {\n        name @include(if: $includeName)\n        age\n    }\n}\n```\n\n>**Note:** Neither the `@skip` nor the `@include` has precedence over the other. In the case that both the `@skip` and `@include` directives are provided on the same field or fragment, it will be queried only if the `@skip` condition is `false` and the `@include` condition is `true`. Stated conversely, the field or fragment will not be queried if either the `@skip` condition is `true` or the `@include` condition is `false`.\n\n### 5.3 Deprecated\n\nThe `@deprecated` directive is used to indicate a deprecated field on a type or a deprecated enum value. Deprecation can use a deprecation reason as a string, which is formatted using Markdown syntax.\n\nThe `@deprecated` directive has one argument, `reason`, which is of type `String`.\n\nThe Ballerina GraphQL package uses the Ballerina's in-built `@deprecated` annotation to deprecate a field (`resource`/`remote` methods or `record` fields) or an `enum` value. The deprecation reason can be provided as a part of the doc comment of the particular schema member.\n\n###### Example: Using the `@deprecated` Annotation\n\nThe following code shows how to mark a field and an enum value as deprecated with the deprecation reason.\n\n```ballerina\nimport ballerina/graphql;\n\nservice on new graphql:Listener(9090) {\n\n    # Greets back with a customized greeting with the provided name.\n    # + name - The name of the person to greet\n    # + return - The customized greeting message\n    # # Deprecated\n    # The `hello` field is deprecated. Use the `greeting` field instead of this.\n    @deprecated\n    resource function get hello(string name) returns string {\n        return \"Hello, \" + name;\n    }\n\n    # Return the name of the member\n    # + return - The full name of the member\n    resource function get name() returns Name {\n        return {first: \"John\", last: \"\"};\n    }\n\n    # Returns the current admission status of the pub.\n    # + return - The current admission status of the pub\n    resource function get status() returns Status {\n        return OPEN;\n    }\n}\n\n# Represents the different admission statuses of the pub.\npublic enum Status {\n    # Open for everyone\n    OPEN,\n    # Pub is closed\n    CLOSED,\n    # Only the members are allowed\n    MEMBERS_ONLY,\n    # Only the VIPs are allowed\n    VIP,\n    # A private party is being held, only invitees are allowed\n    # # Deprecated\n    # Private parties are no longer supported\n    @deprecated\n    PRIVATE_PARTY\n}\n\n# Represents the name of the member.\ntype Name record {|\n    # The first name\n    string first;\n    # The last name\n    # # Deprecated\n    # This field is deprecated\n    @deprecated\n    string last;\n|};\n```\n\nIn the above service, the generated schema will indicate that the `hello` field of the `Query` type, the `PRIVATE_PARTY` value of the `Status` enum type and the `last` field of the `Name` type are deprecated, with the reasons provided in the doc comments. (The reason will be the line after the `# # Deprecated` line.)\n\n## 6. Errors\n\n### 6.1 Error Detail Record\n\nThe `graphql:ErrorDetail` is used to describe an error (according to the [GraphQL specification](https://spec.graphql.org/October2021/#sec-Errors)) occurred in a GraphQL response. It contains the following fields.\n\n#### 6.1.1 Message\n\nThe `message` contains the error message from the particular error.\n\n#### 6.1.2 Locations\n\nThe `locations` field contains the locations of the GraphQL document associated with the error. There can be cases where more than one location can cause the error, therefore, this field is an array of locations. There are also cases where a location can not be associated with an error, therefore, this field is optional.\n\n##### 6.1.3 Path\n\nThe `path` field is an array of `Int` and `String`, that points to a particular path of the document tree associated with the error. This field will have a value only when a particular error has occurred at the execution phase. Therefore, this field is optional.\n\n##### 6.1.4 Extensions\n\nThe `extensions` field is an optional field containing a map with `string` keys. This can be used to send additional metadata related to the error.\n\n### 6.2 Service Error Handling\n\nA GraphQL service can return errors so that the client can handle them. The Ballerina errors types are used to return errors to the GraphQL client. The Ballerina GraphQL service will convert the Ballerina errors to GraphQL errors and send them to the client.\n\n#### 6.2.1 Returning Errors\n\nA Ballerina `resource` or `remote` method representing a GraphQL object field can return an error. When an error is returned, it will be added to the `errors` field in the GraphQL response. The shape of the error object is described in the [Error Detail Record](#61-error-detail-record) section.\n\nWhen an error is returned from a GraphQL resolver, the error message is added as the message of the error, and the location of the document that caused the error will be added to the `locations` field. The path of the error (from the root of the document) will be added as the path in the error response. Currently, the Ballerina GraphQL service __will not add__ any metadata in the `extensions` field.\n\nIf a resolver execution results in an error, the stacktrace of the error will be logged to the `stderr` of the server.\n\n###### Example: Returning Errors\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get greeting(string name) returns string|error {\n        if name == \"\" {\n            return error(\"Invalid name provided\");\n        }\n        return string`Hello ${name}`;\n    }\n}\n```\n\nThe above example shows how to return an error from a Ballerina GraphQL resource method.\n\nThe following document can be used to query the above GraphQL service.\n\n```graphql\n{\n    greeting(name: \"\")\n}\n```\n\nThe result of the above document is the following.\n\n```json\n{\n    \"errors\": [\n        {\n            \"message\": \"Invalid name provided\",\n            \"locations\": [\n                {\n                    \"line\": 2,\n                    \"column\": 4\n                }\n            ],\n            \"path\": [\n                \"greeting\"\n            ]\n        }\n    ],\n    \"data\": null\n}\n```\n\n#### 6.2.2 Returning Errors and Nil Values\n\nIf a `resource` or `remote` method representing a field of a GraphQL object returns an `error`, the corresponding field value under the `data` field will be `null` in the response, in addition to adding an entry in the `errors` field. In this case, if the [field type is `NON_NULL`](#321-non_null-type), the `null` value will be propagated to the upper levels until the `null` value is allowed. This might cause the whole `data` field to become `null`.\n\nTo avoid this, a method can optionally include `nil` type (denoted by `()` in Ballerina). When the method return type includes `nil`, the response is allowed to add `null` as the field value, thus it stops propagating the `null` value to upper levels.\n\n>**Note:** Making a field nullable should be a conscious decision made by the developer. This usually comes to the point on what is considered an error. In some use cases, partial data is considered valid. For example, when retrieving profile, the receiving the `name` field and not receiving the `age` field can be considered valid based on the use case. Similarly, receiving the `age` field, but not receiving the `name` field can be considered an `error`. In that case, the `age` field can be nullable, while the `name` field can be `NON_NULL` type.\n\n###### Example: Returning Errors with Nil Values\n\n```ballerina\nservice on new graphql:Listener(9090) {\n\n    resource function get profile(int id) returns Profile {\n        return new (\"Walter White\", 50);\n    }\n}\n\nservice class Profile {\n    resource function get name() returns string|error {\n        // Implementation\n    }\n\n    resource function get age() returns int|error? {\n        // Implementation\n    }\n}\n```\n\nIn the above example shows how the `name` field of the `Profile` object can return an `error`. But the return type does not include the `nil` type. Therefore, if this field returns an `error`, first, the `name` field will become `null`. Since the `name` field is `NON_NULL`, the value is propagated to the upper level, making the `profile` field `null` in the `data` field of the response. But the `profile` field is also wrapped with the `NON_NULL` type as the `profile` resource method does not include `nil` as the return type. Hence, the `null` value will be propagated further, making the whole `data` field `null`.\n\nSimilarly, the `age` field of the `Profile` object can return an `error` too. But it has `nil` as one of the possible return types (denoted by `?`: a syntactic sugar for `|()`). In this case, if an `error` is returned from the method, the `age` field of the `Profile` object will become `null`. Since it does allow `null` values (i.e. the type is not wrapped by `NON_NULL` type), the `null` value will not be propagated further. In such cases, the response can contain the `error` as well as the part of the `data` field.\n\n###### Example: Sample Response for Error Returned from a NON_NULL field\n\n```json\n{\n    \"errors\": [\n        {\n            \"message\":\"Error occurred while retrieving name\",\n            \"locations\": [\n                {\n                    \"line\": 1,\n                    \"column\": 20\n                }\n            ],\n            \"path\": [\"profile\", \"name\"]\n        }\n    ],\n    \"data\":null\n}\n```\n\n###### Example: Sample Response for Error Returned from a Nullable field\n\n```json\n{\n    \"errors\": [\n        {\n            \"message\":\"Error occurred while retrieving age\",\n            \"locations\": [\n                {\n                    \"line\":1,\n                    \"column\":25\n                }\n            ],\n            \"path\": [\"profile\", \"age\"]\n        }\n    ],\n    \"data\": {\n        \"profile\": {\n            \"name\":\"Walter White\",\n            \"age\":null\n        }\n    }\n}\n```\n\n#### 6.2.3 The `graphql:__addError` Function\n\nThe `graphql:__addError` function can be used to add a custom error to the response. This function accepts two parameters.\n\n1. [`graphql:Context`](#101-context-object) - The context of the GraphQL request.\n2. [`graphql:ErrorDetail`](#61-error-detail-record) - The details of the error.\n\n>**Note:** Using the `graphql:__addError` function is not recommended until it is absolutely necessary. It is recommended to return an error from the `resource`/`remote` method instead.\n\n###### Example: Using the `graphql:__addError` Function\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get greeting(graphql:Context context, graphql:Field 'field, string name) returns string? {\n        if name == \"\" {\n            graphql:ErrorDetail errorDetail = {\n                message: \"Invalid name provided\",\n                locations: ['field.getLocation()],\n                path: 'field.getPath(),\n                extensions: {\n                    code: \"INVALID_NAME\"\n                }\n            };\n            graphql:__addError(context, errorDetail);\n            return;\n        }\n        return string `Hello, ${name}!`;\n    }\n}\n```\n\n### 6.3 Client Error Handling\n\nThe response returned from the `execute` method of the GraphQL client can include errors. This section describes how to handle those errors on the Ballerina client side. All the errors that occurred during a GraphQL client operation are categorized as `graphql:ClientError` error type. All the other errors are subtypes of this error type.\n\n###### Example: Handle Client Error\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\");\nstring document = \"{ profile { name } }\";\nProfileResponse|graphql:ClientError response = graphqlClient->execute(document);\n\nif response is graphql:ClientError {\n    // Handle error\n}\n```\n\nThe above example shows how to capture the `graphql:ClientError`. This way all the errors that are returned are treated the same.\n\n#### 6.3.1 Request Error\n\nThere can be errors that occur during sending and validating a GraphQL request. These errors are categorized under the `graphql:RequestError` error type, which is a subtype of the `graphql:ClientError`.\n\n###### Example: Handle Request Error\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\");\nstring document = \"{ profile { name } }\";\nProfileResponse|graphql:ClientError response = graphqlClient->execute(document);\n\nif response is graphql:RequestError {\n    // Handle error\n}\n```\n\nThe above example shows how the `graphql:RequestError`s are handled separately.\n\n##### 6.3.1.1 HTTP Error\n\nWhen a network error has occurred while sending a request to the GraphQL API, those errors are captured by `graphql:HttpError` error type. These errors can be related to any HTTP-level error including invalid URLs, network-level failures, timeouts, etc. When the HTTP response has a body, it can be accessed by the `body` field of the details of the error.\n\n###### Example: Handle HTTP Error\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\");\nstring document = \"{ profile { name } }\";\nProfileResponse|graphql:ClientError response = graphqlClient->execute(document);\n\nif response is graphql:HttpError {\n    // Get response body\n    anydata body = response.detail().body;\n    // Handle error\n}\n```\n\nThe above example shows how the `graphql:HttpError`s are handled separately.\n\n##### 6.3.1.2 Invalid Document Error\n\nWhen the document sent to the GraphQL API is invalid, a validation error will be returned. These errors are captured by `graphql:InvalidDocumentError` error type. The `ErrorDetail` records are added to the `errors` field of the error detail so the details of the error can be retrieved.\n\n###### Example: Handle Invalid Document Error\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\");\nstring document = \"{ profile { name } }\";\nProfileResponse|graphql:ClientError response = graphqlClient->execute(document);\n\nif response is graphql:InvalidDocumentError {\n    // Get error details\n    graphql:ErrorDetail[]? errors = response.detail().errors;\n    // Handle error\n}\n```\n\nThe above example shows how the `graphql:InvalidDocumentError`s are handled separately.\n\n##### 6.3.2 Payload Binding Error\n\nAs described in the section [Client Data Binding](#253-client-data-binding), the response can be data-bound. When the data binding fails, a `graphql:PayloadBindingError` will be returned. This error can occur due to a mismatch between the shape of the expected type and the actual response from the GraphQL API. The `ErrorDetail` records are added to the `errors` field of the error detail so the details of the error can be retrieved.\n\n###### Example: Handle Payload Binding Error\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\");\nstring document = \"{ profile { name } }\";\nProfileResponse|graphql:ClientError response = graphqlClient->execute(document);\n\nif response is graphql:PayloadBindingError {\n    // Get error details\n    graphql:ErrorDetail[]? errors = response.detail().errors;\n    // Handle error\n}\n```\n\nThe above example shows how the `graphql:PayloadBindingError`s are handled separately.\n\n###### Example: GraphQL Client Error Handling\n\nThe following example demonstrates `graphql:Client` error handling and shows how to obtain GraphQL-specific errors returned by the graphql server.\n\n```ballerina\ntype ProfileResponse record {|\n    *graphql:GenericResponseWithErrors;\n    record {|Profile profile;|} data;\n|};\n\ntype Profile record {|\n    string name;\n    int age;\n|};\n\npublic function main() returns error? {\n    do {\n        graphql:Client graphqlClient = check new (\"localhost:9090/graphql\");\n        string document = \"{ profile { name } }\";\n        ProfileResponse response = check graphqlClient->execute(document);\n        io:println(response);\n    } on fail graphql:ClientError err {\n        handleErrors(err);\n    }\n}\n\nfunction handleErrors(graphql:ClientError clientError) {\n    if clientError is graphql:PayloadBindingError {\n        // Get error details\n        graphql:ErrorDetail[]? errors = clientError.detail().errors;\n        // Handle Payload Binding Error\n    } else if clientError is graphql:InvalidDocumentError {\n        // Get error details\n        graphql:ErrorDetail[]? errors = clientError.detail().errors;\n        // Handle error\n    } else if clientError is graphql:HttpError {\n        // Get response body\n        anydata body = response.detail().body;\n        // Handle error\n    }\n}\n```\n\n## 7. Annotations\n\n### 7.1 Service Configuration\n\nThe configurations stated in the `graphql:ServiceConfig`, are used to change the behavior of a particular GraphQL service. These configurations are applied to the service.\n\nThis annotation consists of the following fields.\n\n#### 7.1.1 Max Query Depth\n\nThe `maxQueryDepth` field is used to provide a limit on the depth of an incoming request.\n\n###### Example: Setting Max Query Depth\n\n```ballerina\n@graphql:ServiceConfig {\n    maxQueryDepth: 3\n}\nservice on new graphql:Listener(9090) {\n\n}\n```\n\n#### 7.1.2 Auth Configurations\n\nThe `auth` field is used to provide configurations related to authentication and authorization for the GraphQL API. The [Security](#8-security) section will explain this configuration in detail.\n\n#### 7.1.3 Context Initializer Function\n\nThe `contextInit` field is used to provide a method to initialize the [`graphql:Context` object](#101-context-object). It is called per each request to create a `graphql:Context` object.\n\nThe context initializer function can return an error if the validation is failed. In such cases, the request will not proceed, and an error will be returned immediately.\n\nFollowing is the function template for the `contextInit` function.\n\n```ballerina\nisolated function (http:RequestContext requestContext, http:Request request) returns graphql:Context|error {}\n```\n\nWhen `contextInit` is not provided, a default function will be set as the value of the field. The default function definition is below.\n\n```ballerina\nisolated function initDefaultContext(http:RequestContext requestContext, http:Request request) returns Context|error {\n    return new;\n}\n```\n\nThe `contextInit` function can be provided inline, or as a function pointer.\n\n###### Example: Provide Context Initializer Function Inline\n\n```ballerina\n@graphql:ServiceConfig {\n    contextInit: isolated function(http:RequestContext requestContext, http:Request request) returns graphql:Context|error {\n        // ...\n    }\n}\n```\n\n###### Example: Provide Context Initializer Function as a Function Pointer\n\n```ballerina\nisolated function initContext(http:RequestContext requestContext, http:Request request) returns graphql:Context|error {\n    // ...\n}\n\n@graphql:ServiceConfig {\n    contextInit: initContext\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n>**Note:** The init function has `http:RequestContext` and `http:Request` objects as inputs. These objects are passed into the function when a request is received. The HTTP headers and the request context can be used to perform additional validations to a request before proceeding to the GraphQL validations. This can be useful to validate the HTTP request before performing the GraphQL operations. The [Imperative Approach in Security](#812-imperative-approach) section will discuss this in detail.\n\n#### 7.1.4 CORS Configurations\n\nThe `cors` field is used to configure CORS configurations for the GraphQL service.\n\n###### Example: CORS Configurations\n\n```ballerina\n@graphql:ServiceConfig {\n    cors: {\n        allowOrigins: [\"http://www.wso2.com\", \"http://www.ballerina.io\"],\n        allowCredentials: false,\n        allowHeaders: [\"CORELATION_ID\"],\n        exposeHeaders: [\"X-CUSTOM-HEADER\"],\n        maxAge: 84900\n    }\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n#### 7.1.5 GraphiQL Configurations\n\nThe `graphiql` field is used to provide the GraphiQL client configuration to enable the GraphiQL client for a given GraphQL service.\n\n###### Example: GraphiQL Configurations\n\n```ballerina\n@graphql:ServiceConfig {\n    graphiql: {\n        enabled: true,\n        path: \"/ballerina/graphiql\",\n        printUrl: false\n    }\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n##### 7.1.5.1 The `enabled` Field\n\nThe field `enabled` accepts a `boolean` that denotes whether the client is enabled or not. By default, it has been set to `false`.\n\n##### 7.1.5.2 The `path` Field\n\nThe optional field `path` accepts a valid `string` for the GraphiQL service. If the path is not given in the configuration, `/graphiql` is set as the default path.\n\n##### 7.1.5.3 The `printUrl` Field\n\nThe optional field `printUrl` accepts a boolean that denotes whether the GraphiQL url is printed to stdout or not. By default, it has been set to `true`.\n\n#### 7.1.6 Service Interceptors\n\nThe `interceptors` field is used to provide the service interceptors.\n\n###### Example: Single Service Interceptor\n\n```ballerina\n@graphql:ServiceConfig {\n    interceptors: new Interceptor1()\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n###### Example: Array of Service Interceptors\n\n```ballerina\n@graphql:ServiceConfig {\n    interceptors: [new Interceptor1(), new Interceptor2()]\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n#### 7.1.7 Introspection Configurations\n\nThe `introspection` field is used to enable or disable the GraphQL introspection query support. If the introspection query support is disabled, the GraphQL service won't allow the execution of the `__schema` and the `__type` introspection queries. However, the `__typename` introspection will work even if the introspection query support is disabled. By default, introspection is enabled for Ballerina GraphQL services.\n\n###### Example: Disable Introspection Query Support\n\n```ballerina\n@graphql:ServiceConfig {\n    introspection: false\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n>**Note:** It is recommended to disable introspection in production environments until it is required.\n\n#### 7.1.8 Constraint Configurations\n\nThe `validation` field is used to enable or disable the validation of constraints defined on GraphQL input types.\n\n###### Example: Disable Constraint Validation Support\n\n```ballerina\n@graphql:ServiceConfig {\n    validation: false\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n#### 7.1.9 Operation-level Cache Configurations\n\nThe `cacheConfig` field is used to provide the operation-level cache configuration to enable the [GraphQL caching](#10711-operation-level-caching) for `query` operations.\n\n###### Example: Enable Operation-level Cache with Default Values\n\n```ballerina\n@graphql:ServiceConfig {\n    cacheConfig: {}\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n###### Example: Operation-level Cache Configurations\n\n```ballerina\n@graphql:ServiceConfig {\n    cacheConfig: {\n        enabled: true\n        maxAge: 100,\n        maxSize: 150\n    }\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n##### 7.1.9.1 The `enabled` Field\n\nThe optional field `enabled` accepts a `boolean` that denotes whether the server-side operation cache is enabled or not. By default, it has been set to `true`.\n\n##### 7.1.9.2 The `maxAge` Field\n\nThe optional field `maxAge` accepts a valid `decimal` value which is considered as the TTL(Time To Live) in seconds. The default maxAge is `60` seconds.\n\n##### 7.1.9.3 The `maxSize` Field\n\nThe optional field `maxSize` accepts an int that denotes the maximum number of cache entries in the cache table. By default, it has been set to `120`.\n\n#### 7.1.10 Query Complexity Configurations\n\nThe `queryComplexityConfig` field is used to provide the configurations for [Query Complexity Validation](#1091-query-complexity-validation) in Ballerina GraphQL services.\n\n###### Example: Enable Query Complexity with Default Values\n\n```ballerina\n@graphql:ServiceConfig {\n    queryComplexityConfig: {}\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n###### Example: Query Complexity Configurations\n\n```ballerina\n@graphql:ServiceConfig {\n    queryComplexityConfig: {\n        maxComplexity: 100,\n        defaultFieldComplexity: 1,\n        warnOnly: true\n    }\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n##### 7.1.10.1 The `maxComplexity` Field\n\nThe `maxComplexity` field is used to provide the maximum allowed complexity of a query. The default value is `100`.\n\n##### 7.1.10.2 The `defaultFieldComplexity` Field\n\nThe `defaultFieldComplexity` field is used to provide the default complexity of a field. The default value is `1`.\n\n##### 7.1.10.3 The `warnOnly` Field\n\nThe `warnOnly` field is used to provide a boolean value to denote whether to warn only when the query complexity exceeds the `maxComplexity` or to fail the request. By default, it has been set to `false`.\n\n### 7.2 Resource Configuration\n\nThe configurations stated in the `graphql:ResourceConfig`, are used to change the behavior of a particular GraphQL resolver. These configurations are applied to the resolver functions.\n\nThis annotation consists of the following fields.\n\n#### 7.2.1 Field Interceptors\n\nThe `interceptors` field is used to provide the field interceptors.\n\n###### Example: Single Field Interceptor\n\n```ballerina\nservice on new graphql:Listener(9090) {\n\n    @graphql:ResourceConfig {\n        interceptors: new Interceptor1()\n    }\n    resource function get name(int id) returns string {\n        // ...\n   }\n}\n```\n\n###### Example: Array of Field Interceptors\n\n```ballerina\nservice on new graphql:Listener(9090) {\n\n    @graphql:ResourceConfig {\n        interceptors: [new Interceptor1(), new Interceptor2()]\n    }\n    resource function get name(int id) returns string {\n        // ...\n   }\n}\n```\n\n#### 7.2.2 Prefetch Method Name Configurations\n\nThe `prefetchMethodName` field is used to override the default prefetch method name. To know more about the prefetch method, refer to the [Define the Corresponding `prefetch` Method](#10633-define-the-corresponding-prefetch-method) section.\n\n###### Example: Override Prefetch Method Name\n\n```ballerina\nservice on new graphql:Listener(9090) {\n\n    function loadBooks(graphql:Context ctx) {\n        // ...\n    }\n\n    @graphql:ResourceConfig {\n        prefetchMethodName: \"loadBooks\"\n    }\n    resource function get books(graphql:Context ctx) returns Book[] {\n        // ...\n   }\n}\n```\n\n#### 7.2.3 Field-level Cache Configurations\n\nThe `cacheConfig` field is used to provide the [field-level cache](#10712-field-level-caching) configs. The fields are as same as the operation cache configs.\n\n###### Example: Field-level Cache Configs\n\n```ballerina\nservice on new graphql:Listener(9090) {\n\n    @graphql:ResourceConfig {\n        cacheConfig: {\n            enabled: true,\n            maxAge: 90,\n            maxSize: 80\n        }\n    }\n    resource function get name(int id) returns string {\n        // ...\n   }\n}\n```\n\n#### 7.2.4 Query Complexity Configurations\n\nThe `complexity` field is used to provide the query complexity value for a given field in [Query Complexity Validation](#1091-query-complexity-validation).\n\n###### Example: Query Complexity Configuration\n\n```ballerina\nservice on new graphql:Listener(9090) {\n\n    @graphql:ResourceConfig {\n        complexity: 10\n    }\n    resource function get name(int id) returns string {\n        // ...\n   }\n}\n```\n\n### 7.3 Interceptor Configuration\n\nThe configurations stated in the `graphql:InterceptorConfig`, are used to change the behavior of a particular GraphQL interceptor.\n\n#### 7.3.1 Scope Configuration\n\nThe field `global` is used to configure the scope of the interceptor. If the `global` field is set as `true`, the interceptor will be applied to each field and subfield of the service. If the flag is set as `false`, the interceptor will be applied to the top-level fields of the Query, Mutation, and Subscription types, but not to the subfields of them. By default, the `global` flag is set as `true`.\n\n>**Note:** The scope configuration is applied only to the GraphQL [service interceptors](#10331-service-interceptors).\n\n###### Example: Scope Configuration\n\n```ballerina\n@graphql:InterceptorConfig {\n    global:false\n}\nreadonly service class LogInterceptor {\n   *graphql:Interceptor;\n\n    isolated remote function execute(graphql:Context context, graphql:Field 'field) returns anydata|error {\n        // ...\n    }\n}\n```\n\n### 7.4 ID Annotation\n\nThe `graphql:ID` annotation is used to define the [GraphQL `ID` scalar type](#415-id). This annotation can be used to annotate a field of a GraphQL object type or a GraphQL input type.\n\n## 8. Security\n\n### 8.1 Service Authentication and Authorization\n\nThere are two ways to enable authentication and authorization in the Ballerina GraphQL service.\n\n1. Declarative approach\n2. Imperative approach\n\n#### 8.1.1 Declarative Approach\n\nThis is also known as the configuration-driven approach, which is used for simple use cases, where users have to provide a set of configurations and do not need to be worried more about how authentication and authorization work. The user does not have full control over the configuration-driven approach.\n\nThe service configurations are used to define the authentication and authorization configurations. Users can configure the configurations needed for different authentication schemes and configurations needed for authorizations of each authentication scheme. The configurations can be provided at the service level. The auth handler creation and request authentication/authorization are handled internally without user intervention. The requests that succeeded in authentication and/or authorization phases according to the configurations will be passed to the business logic layer.\n\n##### 8.1.1.1 Basic Authentication - File User Store\n\nA GraphQL service can be secured using [Basic Authentication with File User Store](https://github.com/ballerina-platform/module-ballerina-auth/blob/master/docs/spec/spec.md#311-file-user-store) and optionally by enforcing authorization.\n\nWhen configured, it validates the `Authorization` header in the HTTP request that contains the GraphQL document. This reads the data from a `TOML` file, that stores the usernames and passwords for authentication and the scopes for authorization.\n\n###### Example: Declarative Basic Authentication with File User Store\n\n```ballerina\n@graphql:ServiceConfig {\n    auth: [\n        {\n            fileUserStoreConfig: {},\n            scopes: \"admin\"\n        }\n    ]\n}\nservice on new graphql:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\nThe `Config.toml` file below will be used to define the users.\n\n```toml\n[[ballerina.auth.users]]\nusername=\"alice\"\npassword=\"alice@123\"\nscopes=[\"developer\"]\n\n\n[[ballerina.auth.users]]\nusername=\"bob\"\npassword=\"bob@123\"\nscopes=[\"developer\", \"admin\"]\n```\n\n##### 8.1.1.2 Basic Authentication - LDAP User Store\n\nA GraphQL service can be secured using [Basic Authentication with LDAP User Store](https://github.com/ballerina-platform/module-ballerina-auth/blob/master/docs/spec/spec.md#312-ldap-user-store) and optionally by enforcing authorization.\n\nWhen configured, it validates the `Authorization` header in the HTTP request that contains the GraphQL document. This reads the data from the configured LDAP, which stores the usernames and passwords for authentication and the scopes for authorization.\n\n###### Example: Declarative Basic Authentication with LDAP User Store\n\n```ballerina\n@graphql:ServiceConfig {\n    auth: [\n        {\n            ldapUserStoreConfig: {\n                domainName: \"bcssl.lk\",\n                connectionUrl: \"ldap://localhost:389\",\n                connectionName: \"cn=admin,dc=bcssl,dc=lk\",\n                connectionPassword: \"bcssl123\",\n                userSearchBase: \"ou=Users,dc=bcssl,dc=lk\",\n                userEntryObjectClass: \"inetOrgPerson\",\n                userNameAttribute: \"uid\",\n                userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n                userNameListFilter: \"(objectClass=inetOrgPerson)\",\n                groupSearchBase: [\"ou=Groups,dc=bcssl,dc=lk\"],\n                groupEntryObjectClass: \"groupOfNames\",\n                groupNameAttribute: \"cn\",\n                groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n                groupNameListFilter: \"(objectClass=groupOfNames)\",\n                membershipAttribute: \"member\",\n                userRolesCacheEnabled: true,\n                connectionPoolingEnabled: false,\n                connectionTimeout: 5,\n                readTimeout: 60\n            },\n            scopes: \"admin\"\n        }\n    ]\n}\nservice /graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n##### 8.1.1.3 JWT Authentication\n\nA GraphQL service can be secured using [JWT Authentication](https://github.com/ballerina-platform/module-ballerina-jwt/blob/master/docs/spec/spec.md) and by enforcing authorization optionally.\n\nWhen configured, it validates the JWT sent in the `Authorization` header in the HTTP request that contains the GraphQL document.\n\n###### Example: Declarative JWT Authentication\n\n```ballerina\n@graphql:ServiceConfig {\n    auth: [\n        {\n            jwtValidatorConfig: {\n                issuer: \"wso2\",\n                audience: \"ballerina\",\n                signatureConfig: {\n                    certFile: \"path/to/public.crt\"\n                },\n                scopeKey: \"scp\"\n            },\n            scopes: \"admin\"\n        }\n    ]\n}\nservice /graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n##### 8.1.1.4 OAuth2\n\nA GraphQL service can be secured using [OAuth2](https://github.com/ballerina-platform/module-ballerina-oauth2/blob/master/docs/spec/spec.md) and by enforcing authorization optionally.\n\nWhen configured, it validates the OAuth2 token sent in the `Authorization` header in the HTTP request that contains the GraphQL document. This calls the configured OAuth2 introspection endpoint to validate.\n\n###### Example: Declarative Approach to Secure Service Using OAuth2\n\n```ballerina\n@graphql:ServiceConfig {\n    auth: [\n        {\n            oauth2IntrospectionConfig: {\n                url: \"https://localhost:9445/oauth2/introspect\",\n                tokenTypeHint: \"access_token\",\n                scopeKey: \"scp\",\n                clientConfig: {\n                    customHeaders: {\"Authorization\": \"Basic YWRtaW46YWRtaW4=\"},\n                    secureSocket: {\n                        cert: \"path/to/public.crt\"\n                    }\n                }\n            },\n            scopes: \"admin\"\n        }\n    ]\n}\nservice /graphql on securedEP {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n#### 8.1.2 Imperative Approach\n\nThis is also known as the code-driven approach, which is used for advanced use cases, where users need to be worried more about how authentication and authorization work and need to have further customizations. The user has full control of the code-driven approach. The handler creation and authentication/authorization calls are made by the user at the business logic layer.\n\nThe [`graphql:Context`](#101-context-object) object and the [`contextInit`](#713-context-initializer-function) method can be used to achieve this.\n\n##### 8.1.2.1 Basic Authentication - File User Store\n\nA file user store can be used to validate the `Authorization` header in the HTTP request that contains the GraphQL document.\n\n###### Example: Imperative Basic Authentication with File User Store\n\n```ballerina\nfinal http:ListenerFileUserStoreBasicAuthHandler handler = new;\n\nisolated function contextInit(http:RequestContext reqCtx, http:Request request) returns graphql:Context|error {\n    string authorization = check request.getHeader(\"Authorization\");\n    graphql:Context context = new;\n    context.set(\"Authorization\", authorization);\n    return context;\n}\n\nreadonly service class AuthInterceptor {\n    *graphql:Interceptor;\n\n    isolated remote function execute(graphql:Context context, graphql:Field 'field) returns anydata|error {\n        value:Cloneable|isolated object {} authorization = check context.get(\"Authorization\");\n        if authorization !is string {\n            return error(\"Failed to authorize\");\n        }\n        auth:UserDetails|http:Unauthorized authn = handler.authenticate(authorization);\n        if authn is http:Unauthorized {\n            return error(\"Unauthorized\");\n        }\n        http:Forbidden? authz = handler.authorize(authn, \"admin\");\n        if authz is http:Forbidden {\n            return error(\"Forbidden\");\n        }\n        return context.resolve('field);\n    }\n}\n\n@graphql:ServiceConfig {\n    contextInit: contextInit,\n    interceptors: new AuthInterceptor()\n}\nservice on new graphql:Listener(9090) {\n\n    resource function get greeting(graphql:Context context) returns string {\n        return \"welcome\";\n    }\n}\n```\n\nThe `Config.toml` file below will be used to define the users.\n\n```toml\n[[ballerina.auth.users]]\nusername=\"alice\"\npassword=\"alice@123\"\nscopes=[\"developer\"]\n\n\n[[ballerina.auth.users]]\nusername=\"bob\"\npassword=\"bob@123\"\nscopes=[\"developer\", \"admin\"]\n```\n\n##### 8.1.2.2 Basic Authentication - LDAP User Store\n\nAn LDAP user store can be used to validate the `Authorization` header in the HTTP request that contains the GraphQL document.\n\n###### Example: Imperative Basic Authentication with LDAP User Store\n\n```ballerina\ngraphql:LdapUserStoreConfig config = {\n    domainName: \"bcssl.lk\",\n    connectionUrl: \"ldap://localhost:389\",\n    connectionName: \"cn=admin,dc=bcssl,dc=lk\",\n    connectionPassword: \"bcssl123\",\n    userSearchBase: \"ou=Users,dc=bcssl,dc=lk\",\n    userEntryObjectClass: \"inetOrgPerson\",\n    userNameAttribute: \"uid\",\n    userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n    userNameListFilter: \"(objectClass=inetOrgPerson)\",\n    groupSearchBase: [\"ou=Groups,dc=bcssl,dc=lk\"],\n    groupEntryObjectClass: \"groupOfNames\",\n    groupNameAttribute: \"cn\",\n    groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n    groupNameListFilter: \"(objectClass=groupOfNames)\",\n    membershipAttribute: \"member\",\n    userRolesCacheEnabled: true,\n    connectionPoolingEnabled: false,\n    connectionTimeout: 5,\n    readTimeout: 60\n};\nfinal http:ListenerLdapUserStoreBasicAuthHandler handler = new (config);\n\nisolated function contextInit(http:RequestContext reqCtx, http:Request request) returns graphql:Context|error {\n    string authorization = check request.getHeader(\"Authorization\");\n    graphql:Context context = new;\n    context.set(\"Authorization\", authorization);\n    return context;\n}\n\nreadonly service class AuthInterceptor {\n    *graphql:Interceptor;\n\n    isolated remote function execute(graphql:Context context, graphql:Field 'field) returns anydata|error {\n        value:Cloneable|isolated object {} authorization = check context.get(\"Authorization\");\n        if authorization !is string {\n            return error(\"Failed to authorize\");\n        }\n        auth:UserDetails|http:Unauthorized authn = handler->authenticate(authorization);\n        if authn is http:Unauthorized {\n            return error(\"Unauthorized\");\n        }\n        http:Forbidden? authz = handler->authorize(authn, \"admin\");\n        if authz is http:Forbidden {\n            return error(\"Forbidden\");\n        }\n        return context.resolve('field);\n    }\n}\n\n@graphql:ServiceConfig {\n    contextInit: contextInit,\n    interceptors: new AuthInterceptor()\n}\nservice on new graphql:Listener(9090) {\n\n    resource function get greeting(graphql:Context context) returns string {\n        return \"welcome\";\n    }\n}\n```\n\n##### 8.1.2.3 JWT Authentication\n\nA JWT configuration can be used to validate the `Authorization` header in the HTTP request that contains the GraphQL document.\n\n###### Example: Imperative JWT Authentication\n\n```ballerina\ngraphql:JwtValidatorConfig config = {\n    issuer: \"ballerina\",\n    audience: [\"wso2\"],\n    signatureConfig: {\n        jwksConfig: {\n            url: \"https://localhost:8080/jwks\"\n        }\n    }\n};\nfinal http:ListenerJwtAuthHandler handler = new (config);\n\nisolated function contextInit(http:RequestContext reqCtx, http:Request request) returns graphql:Context|error {\n    string authorization = check request.getHeader(\"Authorization\");\n    graphql:Context context = new;\n    context.set(\"Authorization\", authorization);\n    return context;\n}\n\nreadonly service class AuthInterceptor {\n    *graphql:Interceptor;\n\n    isolated remote function execute(graphql:Context context, graphql:Field 'field) returns anydata|error {\n        value:Cloneable|isolated object {} authorization = check context.get(\"Authorization\");\n        if authorization !is string {\n            return error(\"Failed to authorize\");\n        }\n        jwt:Payload|http:Unauthorized authn = handler.authenticate(authorization);\n        if authn is http:Unauthorized {\n            return error(\"Unauthorized\");\n        }\n        if authn is jwt:Payload {\n            http:Forbidden? authz = handler.authorize(authn, \"admin\");\n            if authz is http:Forbidden {\n                return error(\"Forbidden\");\n            }\n        }\n        return context.resolve('field);\n    }\n}\n\n@graphql:ServiceConfig {\n    contextInit: contextInit,\n    interceptors: new AuthInterceptor()\n}\nservice on new graphql:Listener(9090) {\n\n    resource function get greeting(graphql:Context context) returns string {\n        return \"welcome\";\n    }\n}\n```\n\n##### 8.1.2.4 OAuth2\n\nAn OAuth2 introspection endpoint can be used to validate the `Authorization` header in the HTTP request that contains the GraphQL document.\n\n###### Example: Imperative Approach to Secure Service Using OAuth2\n\n```ballerina\ngraphql:OAuth2IntrospectionConfig config = {\n    url: \"https://localhost:8080/oauth2/introspect\",\n    tokenTypeHint: \"access_token\"\n};\nfinal http:ListenerOAuth2Handler handler = new (config);\n\nisolated function contextInit(http:RequestContext reqCtx, http:Request request) returns graphql:Context|error {\n    string authorization = check request.getHeader(\"Authorization\");\n    graphql:Context context = new;\n    context.set(\"Authorization\", authorization);\n    return context;\n}\n\nreadonly service class AuthInterceptor {\n    *graphql:Interceptor;\n\n    isolated remote function execute(graphql:Context context, graphql:Field 'field) returns anydata|error {\n         value:Cloneable|isolated object {} authorization = check context.get(\"Authorization\");\n        if authorization !is string {\n            return error(\"Failed to authorize\");\n        }\n        oauth2:IntrospectionResponse|http:Unauthorized|http:Forbidden auth = handler->authorize(authorization, \"admin\");\n        if auth is http:Unauthorized {\n            return error(\"Unauthorized\");\n        }\n        if auth is http:Forbidden {\n            return error(\"Forbidden\");\n        }\n        return context.resolve('field);\n    }\n}\n\n@graphql:ServiceConfig {\n    contextInit: contextInit,\n    interceptors: new AuthInterceptor()\n}\nservice on new graphql:Listener(9090) {\n\n    resource function get greeting(graphql:Context context) returns string {\n        return \"welcome\";\n    }\n}\n```\n\n### 8.2 Client Authentication and Authorization\n\nAuthentication and authorization in Ballerina GraphQL clients can be enabled using the declarative approach.\n\n##### 8.2.1 Basic Authentication\n\nBallerina GraphQL clients enable basic authentication with credentials by setting the `graphql:CredentialsConfig` configurations in the client. The requests from the client are automatically enriched with the `Authorization: Basic <token>` header when passing the `graphql:CredentialsConfig` for the `auth` configuration of the client.\n\n###### Example: Client Using Declarative Basic Authentication\n\n```ballerina\npublic function main() returns error? {\n    graphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n        auth = {\n            username: \"bob\",\n            password: \"bob@123\"\n        }\n    );\n    string document = \"{ one: profile(id: 100) {name} }\";\n    ProfileResponseWithErrors response = check graphqlClient->execute(document);\n    // ...\n}\n```\n\n##### 8.2.2 Bearer Token Authentication\n\nBallerina GraphQL clients enable authentication using bearer tokens by setting the `graphql:BearerTokenConfig` configurations in the client. The requests from the client are automatically enriched with the `Authorization: Bearer <token>` header when passing the `graphql:BearerTokenConfig` for the `auth` configuration of the client.\n\n###### Example: Client Using Declarative Bearer Token Authentication\n\n```ballerina\npublic function main() returns error? {\n    graphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n        auth = {\n            token: \"56ede317-4511-44b4-8579-a08f094ee8c5\"\n        }\n    );\n    string document = \"{ one: profile(id: 100) {name} }\";\n    ProfileResponseWithErrors response = check graphqlClient->execute(document);\n    // ...\n}\n```\n\n##### 8.2.3 Self-Signed JWT Authentication\n\nBallerina GraphQL clients enable authentication using JWTs by setting the `graphql:JwtIssuerConfig` configurations in the client.  The requests from the client are automatically enriched with the `Authorization: Bearer <token>` header when passing the `graphql:JwtIssuerConfig` for the `auth` configuration of the client.\n\n###### Example: Client Using Declarative Self-Signed JWT Authentication\n\n```ballerina\npublic function main() returns error? {\n    graphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n        auth = {\n            username: \"ballerina\",\n            issuer: \"wso2\",\n            audience: [\"ballerina\", \"ballerina.org\", \"ballerina.io\"],\n            keyId: \"5a0b754-895f-4279-8843-b745e11a57e9\",\n            jwtId: \"JlbmMiOiJBMTI4Q0JDLUhTMjU2In\",\n            customClaims: {scp: \"admin\"},\n            expTime: 3600,\n            signatureConfig: {\n                config: {\n                    keyFile: \"path/to/private.key\"\n                }\n            }\n        }\n    );\n    string document = \"{ one: profile(id: 100) {name} }\";\n    ProfileResponseWithErrors response = check graphqlClient->execute(document);\n    // ...\n}\n```\n\n##### 8.2.4 OAuth2\n\nBallerina GraphQL clients enable authentication using OAuth2 by setting the `graphql:OAuth2GrantConfig` configurations in the client. The requests from the client are automatically enriched with the `Authorization: Bearer <token>` header when passing the `graphql:OAuth2GrantConfig` for the `auth` configuration of the client. Following are the supported OAuth2 grant types.\n\n###### 8.2.4.1 Client Credentials Grant Type\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n    auth = {\n        tokenUrl: \"localhost:9445/oauth2/token\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: \"admin\",\n        clientConfig: {\n            secureSocket: {\n                cert: \"path/to/public.crt\"\n            }\n        }\n    }\n);\n```\n\n###### 8.2.4.2 Password Grant Type\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n    auth = {\n        tokenUrl: \"https://localhost:9445/oauth2/token\",\n        username: \"admin\",\n        password: \"admin\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: \"admin\",\n        refreshConfig: {\n            refreshUrl: \"https://localhost:9445/oauth2/token\",\n            scopes: \"hello\",\n            clientConfig: {\n                secureSocket: {\n                    cert: \"path/to/public.crt\"\n                }\n            }\n        },\n        clientConfig: {\n            secureSocket: {\n                cert: \"path/to/public.crt\"\n            }\n        }\n    }\n);\n```\n\n###### 8.2.4.3 Refresh Token Grant Type\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n    auth = {\n        refreshUrl: \"https://localhost:9445/oauth2/token\",\n        refreshToken: \"24f19603-8565-4b5f-a036-88a945e1f272\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: \"admin\",\n        clientConfig: {\n            secureSocket: {\n                cert: \"path/to/public.crt\"\n            }\n        }\n    }\n);\n```\n\n###### 8.2.4.4 JWT Bearer Grant Type\n\n```ballerina\ngraphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n    auth = {\n        tokenUrl: \"https://localhost:9445/oauth2/token\",\n        assertion: \"eyJhbGciOiJFUzI1NiIsImtpZCI6Ij[...omitted for brevity...]\",\n        clientId: \"FlfJYKBD2c925h4lkycqNZlC2l4a\",\n        clientSecret: \"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\",\n        scopes: \"admin\",\n        clientConfig: {\n            secureSocket: {\n                cert: \"path/to/public.crt\"\n            }\n        }\n    }\n);\n```\n\n### 8.3 SSL/TLS and Mutual SSL\n\nThe Ballerina GraphQL listeners/clients can be used to communicate via a secured connection. This section defines the specifications for creating Ballerina GraphQL listeners and clients to communicate via a secured connection.\n\n### 8.3.1 Listener\n\n#### 8.3.1.1 SSL/TLS\n\nThe GraphQL listener can be secured to communicate via HTTPS using SSL/TLS. The `graphql:ListenerSecureSocket` can be used to configure the listener to expose an HTTPS connection.\n\nAlternatively, an HTTP listener configured to connect with an HTTPS client can also be used to create the GraphQL listener to expose an HTTPS connection.\n\n###### Example: SSL/TLS Configuration of the GraphQL Listener\n\n```ballerina\nlistener graphql:Listener securedGraphqlListener = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"/path/to/public.crt\",\n            keyFile: \"/path/to/private.key\"\n        }\n    }\n);\n\nservice on securedGraphqlListener {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n###### Example: GraphQL Listener Using an SSL/TLS Configured HTTP Listener\n\n```ballerina\nlistener http:Listener securedHttpListener = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"/path/to/public.crt\",\n            keyFile: \"/path/to/private.key\"\n        }\n    }\n);\nlistener graphql:Listener securedGraphqlListener = new (securedHttpListener);\n\nservice on securedGraphqlListener {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n#### 8.3.1.2 Mutual SSL\n\nThe GraphQL listener supports mutual SSL, which is a certificate-based authentication process in which two parties (the client and the server) authenticate each other by verifying the digital certificates.\n\nThe `graphql:ListenerSecureSocket` configuration can be used to configure mutual SSL for a GraphQL listener.\n\nAlternatively, an HTTP listener configured to connect with a client with mutual SSL can also be used to create the GraphQL listener to expose an HTTPS connection.\n\n###### Example: Mutual SSL Configuration of the GraphQL Listener\n\n```ballerina\nlistener graphql:Listener securedGraphqlListener = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"/path/to/public.crt\",\n            keyFile: \"/path/to/private.key\"\n        },\n        mutualSsl: {\n            verifyClient: http:REQUIRE,\n            cert: \"/path/to/public.crt\"\n        },\n        protocol: {\n            name: http:TLS,\n            versions: [\"TLSv1.2\", \"TLSv1.1\"]\n        },\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n    }\n);\n\nservice on securedGraphqlListener {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n###### Example: GraphQL Listener Using a Mutual SSL Configured HTTP Listener\n\n```ballerina\nlistener http:Listener securedHttpListener = new(9090,\n    secureSocket = {\n        key: {\n            certFile: \"/path/to/public.crt\",\n            keyFile: \"/path/to/private.key\"\n        },\n        mutualSsl: {\n            verifyClient: http:REQUIRE,\n            cert: \"/path/to/public.crt\"\n        },\n        protocol: {\n            name: http:TLS,\n            versions: [\"TLSv1.2\", \"TLSv1.1\"]\n        },\n        ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n    }\n);\nlistener graphql:Listener securedGraphqlListener = new (securedHttpListener);\n\nservice on securedGraphqlListener {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n### 8.3.2 Client\n\n#### 8.3.2.1 SSL/TLS\n\nA GraphQL client can communicate with a secured GraphQL service via SSL/TLS. The `graphql:ClientSecureSocket` configuration can be used to provide configurations related to SSL/TLS.\n\n###### Example: GraphQL Client Using SSL/TLS\n\n```ballerina\npublic function main() returns error? {\n    graphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n       secureSocket = {\n            cert: \"path/to/public.crt\"\n        }\n    );\n    string document = \"{ one: profile(id: 100) {name} }\";\n    ProfileResponseWithErrors response = check graphqlClient->execute(document);\n    // ...\n}\n```\n\n#### 8.3.2.2 Mutual SSL\n\nA GraphQL client can communicate with a secured GraphQL service using mutual SSL. Mutual SSL can be enabled by providing the `graphql:ClientSecureSocket` value for the `auth` configuration of the client along with providing the client certificate and key files via the `key` configuration of the `graphql:ClientSecureSocket`.\n\n###### Example: GraphQL Client Using Mutual SSL\n\n```ballerina\npublic function main() returns error? {\n    graphql:Client graphqlClient = check new (\"localhost:9090/graphql\",\n       secureSocket = {\n            key: {\n                certFile: \"path/to/public.crt\",\n                keyFile: \"path/to/private.key\"\n            },\n            cert: \"path/to/public.crt\",\n            protocol: {\n                name: http:TLS\n            },\n            ciphers: [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\"]\n        }\n    );\n    string document = \"{ one: profile(id: 100) {name} }\";\n    ProfileResponseWithErrors response = check graphqlClient->execute(document);\n    // ...\n}\n```\n\n## 9. Tools\n\n### 9.1 GraphiQL client\n\nThe Ballerina GraphQL package provides an integrated GraphiQL client tool which is provided by the GraphQL Foundation. The client is implemented using CDN assets, and it provides a Graphical User Interface to execute the GraphQL queries. To enable the GraphiQL client, configuration should be provided as mentioned in the [GraphiQL configuration](#715-graphiql-configurations) section.\n\nIf the configurations are provided correctly, the GraphiQL client tool will be served at the given path when the service starts. The client can be accessed via a web browser.\n\n###### Example: Enable GraphiQL Client\n\n```ballerina\n@graphql:ServiceConfig {\n    graphiql: {\n        enabled: true,\n        path: \"/ballerina/graphiql\"\n    }\n}\nservice on new graphql:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}\n````\n\n>**Note:** The GraphiQL client is used as a tool to help developers when writing a GraphQL service, and It is recommended not to enable it in production environments.\n\n## 10. Advanced Features\n\n### 10.1 Context Object\n\nThe `graphql:Context` object is used to pass meta-information of a request among the graphql resolvers. It will be created per each request.\n\nAttributes can be stored in the `graphql:Context` object using key-value pairs and can be retrieved back when needed.\n\n#### 10.1.1 Context Methods\n\nThe `graphql:Context` object provides a set of methods for handling attributes.\n\n##### 10.1.1.1 Set Attribute in Context\n\nTo set an attribute in the `graphql:Context` object, the `set()` method can be used. It requires two parameters.\n\n* `key`: The key of the attribute. This key can be used to retrieve the attribute back when needed. The `key` must be a `string`.\n* `value`: The value of the attribute. The type of this parameter is `value:Cloneable|isolated object {}`. This means the values can be any immutable type, `readonly` value, or an isolated object.\n\n###### Example: Set Attribute in Context\n\n```ballerina\ngraphql:Context context = new;\n\ncontext.set(\"key\", \"value\");\n```\n\n>**Note:** If the provided key already exists in the context, the value will be replaced.\n\n##### 10.1.1.2 Get Attribute from Context\n\nTo get an attribute from the `graphql:Context` object, the `get()` method can be used. It requires one parameter.\n\n* `key`: This is the key of the attribute that needs to be retrieved.\n\nIf the key does not exist in the context, the `get` method will return a `graphql:Error`.\n\n###### Example: Get Context Attribute\n\n```ballerina\nvalue:Cloneable|isolated object {}|graphql:Error attribute = context.get(\"key\");\n```\n\n##### 10.1.1.3 Remove Attribute from Context\n\nTo remove an attribute from the `graphql:Context` object, the `remove` method can be used. It requires one parameter.\n\n* `key`: This is the key of the attribute that needs to be removed.\n\nIf the key does not exist in the context, the `remove` method will return a `graphql:Error`.\n\n###### Example: Remove Context Attribute\n\n```ballerina\ngraphql:Error? result = context.remove(\"key\");\n```\n\n>**Note:** Even though the functionalities are provided to update/remove attributes in the context, it is discouraged to do such operations. The reason is that destructive modifications may cause issues in parallel executions of the Query operations.\n\n##### 10.1.1.4 Register DataLoader in Context\n\nTo register a [DataLoader](#106-dataloader) in the `graphql:Context` object, you can use the `registerDataLoader()` method, which requires two parameters.\n\n* `key`: The key used to identify a specific DataLoader instance. This key can later be used to retrieve the DataLoader instance when needed. The `key` must be a `string`.\n* `dataloader`: The DataLoader instance.\n\n###### Example: Register DataLoader in Context\n\n```ballerina\ngraphql:Context context = new;\n\ncontext.registerDataLoader(\"authorLoader\", new dataloader:DefaultDataLoader(authorBatchFunction));\n```\n\n##### 10.1.1.5 Get DataLoader from Context\n\nTo obtain a DataLoader from the `graphql:Context` object, you can use the `getDataLoader()` method, which takes one parameter.\n\n* `key`: This is the key of the DataLoader instance that needs to be retrieved.\n\nIf the specified key does not exist in the context, the `getDataLoader()` method will raise a panic.\n\n###### Example: Get DataLoader from Context\n\n```ballerina\ndataloader:DataLoader authorLoader = context.getDataLoader(\"authorLoader\");\n```\n\n##### 10.1.1.6 Invalidate Cache from Context\n\nThe `invalidate()` method can be used to invalidate cache entries from the cache that are related to a particular field. It requires one parameter:\n\n* `path` - The path of the field that needs to be invalidated from the cache. The path should be specified as path segments combined with periods.\n\nIf the provided path does not match any existing cache entries, an error will be returned.\n\n###### Example: Invalidate Cache from Context\n\n```ballerina\ncheck context.invalidate(\"profile.address.city\");\n```\n\n##### 10.1.1.7 Invalidate All Caches from Context\n\nTo clear the entire cache table, you can use the `invalidateAll` method. This method does not take any arguments. An error will be returned if the cache table cannot be cleared.\n\n###### Example: Invalidate All Caches from Context\n\n```ballerina\ncheck context.invalidateAll();\n```\n\n#### 10.1.2 Accessing the Context Object\n\nThe `graphql:Context` can be accessed inside any resolver. When needed, the `graphql:Context` should be added as a parameter of the `resource` or `remote` method representing a GraphQL field.\n\n>**Note:** It is recommended to add the `graphql:Context` as the first parameter as a convention, to increase the readability of the code.\n\n###### Example: Accessing the Context\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Context context) returns Profile|error {\n        value:Cloneable|isolated object {} attribute = check context.get(\"key\");\n        // ...\n    }\n}\n\ntype Profile record {|\n    string name;\n    int age;\n|};\n```\n\n>**Note:** The parameter `graphql:Context` should be used only when it is required to use the context.\n\n###### Example: Accessing the Context from an Object\n\nThe following example shows how to access the context from an Object. When a Ballerina service type is used as an `Object` type in GraphQL, the resource methods in the service can also access the context when needed.\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n    }\n}\n\nservice class Profile {\n    private final string name;\n    private final int age;\n\n    function init(string name, int age) {\n        self.name = name;\n        self.age = age;\n    }\n\n    resource function get name() returns string {\n        return self.name;\n    }\n\n    // Access the context inside a GraphQL object\n    resource function get age(graphql:Context context) returns int {\n        value:Cloneable|isolated object {} attribute = check context.get(\"key\");\n        // ...\n        return self.age;\n    }\n}\n```\n\n#### 10.1.3 Resolving Field Value\n\nTo resolve the value of a field, the `resolve()` method can be used. This requires the `graphql:Field` object which is related to the particular field that is going to be resolved. If the resolver has interceptors attached, the interceptors will be executed until there are no more interceptors left. If there are no interceptors left, the actual resolver will be executed.\n\n```ballerina\npublic isolated function resolve(graphql:Field ‘field) returns anydata;\n```\n\n### 10.2 Field Object\n\nThe `graphql:Field` object is used to access the meta-information of a field in a GraphQL document. This object can be used to retrieve information about a particular field of a GraphQL document, from a Ballerina GraphQL `resource` or `remote` method.\n\n#### 10.2.1 Field Object Methods\n\n##### 10.2.1.1 Get Field Name\n\nThis method returns the name of the currently executing field. It returns a `string`.\n\n###### Example: Get Field Name\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Field 'field) returns Profile {\n        string name = 'field.getName();\n    }\n}\n```\n\n##### 10.2.1.2 Get Field Alias\n\nThis method returns the alias of the currently executing field as a `string`. If the field does not have an alias, it returns the field name.\n\n###### Example: Get Field Alias\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Field 'field) returns Profile {\n        srting alias = 'field.getAlias();\n    }\n}\n```\n\n##### 10.2.1.3 Get Field Path\n\nThis method returns the path of the currently executing field as an array of `int` and `string`. The path is an array of indices and keys that can be used to traverse the response JSON to reach the current field.\n\n###### Example: Get Field Path\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Field 'field) returns Profile {\n        (int|string)[] path = 'field.getPath();\n    }\n}\n```\n\n##### 10.2.1.4 Get Subfield Names\n\nThis method returns the names of the subfields of the currently executing field as an array of `string`s. If the field does not have any subfields, it returns an empty array.\n\n###### Example: Get Subfield Names\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Field 'field) returns Profile {\n        string[] subfieldNames = 'field.getSubfieldNames();\n    }\n}\n```\n\n##### 10.2.1.5 Get Field Type\n\nThis method returns the type of the currently executing field as a `graphql:__Type` record. The `graphql:__Type` record can be used to retrieve information about the type of the currently executing field.\n\n###### Example: Get Field Type\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Field 'field) returns Profile {\n        graphql:__Type type = 'field.getType();\n        // ...\n    }\n}\n```\n\n##### 10.2.1.6 Get Subfields\n\nThis method returns the subfields of the currently executing field as an array of `graphql:Field` objects. It will return `nil` if the field is not an `INTERFACE` or an `OBJECT`, i.e. if it does not have subfields.\n\n#### Example: Get Subfields\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Field 'field) returns Profile {\n        graphql:Field[] subfields = 'field.getSubfields();\n    }\n}\n```\n\n##### 10.2.1.7 Get Field Location\n\nThis method returns the location of the field in the GraphQL document as a `graphql:Location` record. It includes the line and the column number of the field in the GraphQL document.\n\n###### Example: Get Field Location\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Field 'field) returns Profile {\n        graphql:Location location = 'field.getLocation();\n    }\n}\n```\n\n#### 10.2.2 Accessing the Field Object\n\nThe `graphql:Field` can be accessed inside any resolver. When needed, the `graphql:Field` should be added as a parameter of the `resource` or `remote` method representing a GraphQL field.\n\n>**Note:** It is recommended to add the `graphql:Field` as the first parameter, or the second parameter (if the `graphql:Context` is present as the first parameter) as a convention, to increase the readability of the code.\n\n###### Example: Accessing the Field\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Field 'field) returns Profile|error {\n        string fieldName = 'field.getName();\n        // ...\n    }\n}\n\ntype Profile record {|\n    string name;\n    int age;\n|};\n```\n\n###### Example: Accessing the Field when Context is Present\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile(graphql:Context context, graphql:Field 'field) returns Profile|error {\n        string fieldName = 'field.getName();\n        // ...\n    }\n}\n\ntype Profile record {|\n    string name;\n    int age;\n|};\n```\n\n###### Example: Accessing the Field from an Object\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n        return new (\"Walter White\", 50);\n    }\n}\n\nservice class Profile {\n    private final string name;\n    private final int age;\n\n    function init(string name, int age) {\n        self.name = name;\n        self.age = age;\n    }\n\n    resource function get name() returns string {\n        return self.name;\n    }\n\n    // Access the field inside a GraphQL object\n    resource function get age(graphql:Field 'field) returns int {\n        string fieldName = 'field.getName();\n        // ...\n        return self.age;\n    }\n}\n```\n\n### 10.3 Interceptors\n\nThe GraphQL interceptors can be used to execute a custom code before and after a resolver gets invoked.\n\n#### 10.3.1 Interceptor Service Object\n\nThe interceptor service object is defined in the Ballerina GraphQL package. It includes a single remote method named execute that accepts [`Context`](#101-context-object) and [`Field`](#102-field-object) as the parameters. The return type of the method is a union of `anydata` and `error`.\n\n```ballerina\npublic type Interceptor distinct service object {\n    isolated remote function execute(Context context, Field 'field) returns anydata|error;\n};\n```\n\n#### 10.3.2 Writing an Interceptor\n\nInterceptors can be defined as a readonly service class that infers the Interceptor object provided by the GraphQL package. A user-specific name can be used as the service class name.\n\n```ballerina\nreadonly service class InterceptorName {\n   *graphql:Interceptor;\n\n    isolated remote function execute(graphql:Context context, graphql:Field 'field) returns anydata|error {\n        // Do some work\n        var output = context.resolve('field);\n        // Do some work\n    }\n}\n```\n\nThe Interceptor service class should have the implementation of the `execute()` remote method that infers from the interceptor service object. The code needed to be included in the interceptor should be kept inside the `execute()` method. Interceptors can not have any other `resource/remote` methods inside the interceptor. However, the users can define the general methods inside the interceptors.\n\n#### 10.3.3 Execution\n\nWhen it comes to interceptor execution, it follows the `onion principle`. Each interceptor adds a layer before and after the actual resolver invocation. Therefore, the order of the interceptor array in the configuration will be important. In an Interceptor `execute()` method, all the code lines are placed before the `context.resolve()` will be executed before the resolver execution, and the code lines placed after the `context.resolve()` will be executed after the resolver execution. The [`context.resolve()`](#1013-resolving-field-value) method invokes the next interceptor.\n\n>**Note:** The inserting order of the interceptors into the array, will be the execution order of Interceptors. The interceptors are applied to each event in response stream of subscription resolvers.\n\n##### 10.3.3.1 Service Interceptors\n\nThe service interceptors are applied to all the resolvers in the GraphQL service. A GraphQL service accepts a single service interceptor or an array of service interceptors, and it should be inserted as mentioned in the [Service Interceptor](#716-service-interceptors) section. The scope of the interceptor can be configured as defined in the [scope configuration](#731-scope-configuration) section.\n\n###### Example: GraphQL Service Interceptor\n\n```ballerina\nimport ballerina/graphql;\nimport ballerina/log;\n\nreadonly service class ServiceInterceptor {\n    *graphql:Interceptor;\n    isolated remote function execute(graphql:Context context, graphql:Field 'field) returns anydata|error {\n        log:printInfo(string `Service Interceptor execution!`);\n        var output = context.resolve('field);\n        log:printInfo(\"Connection closed!\");\n        return output;\n    }\n}\n\n@graphql:ServiceConfig {\n    interceptors: [new ServiceInterceptor()]\n}\nservice /graphql on new graphql:Listener(9000) {\n    resource function get name(int id) returns string {\n        log:printInfo(\"Resolver: name\");\n        return \"Ballerina\";\n    }\n}\n```\n\nFollowing is the output of the server when a request is processed:\n\n```shell\n1. Service Interceptor execution!\n3. Resolver: name\n5. Connection closed!\n```\n\n##### 10.3.3.2 Field Interceptors\n\nThe field interceptors are applied to a specific resolver in the GraphQL service. A GraphQL resolver accepts a single field interceptor or an array of field interceptors, and it should be inserted as mentioned in the [Field Interceptor](#721-field-interceptors) section.\n\n###### Example: GraphQL Field Interceptor\n\n```ballerina\nimport ballerina/graphql;\nimport ballerina/log;\n\nreadonly service class FieldInterceptor {\n    *graphql:Interceptor;\n    isolated remote function execute(graphql:Context context, graphql:Field 'field) returns anydata|error {\n        log:printInfo(string `Field Interceptor execution!`);\n        var output = context.resolve('field);\n        log:printInfo(\"Connection closed!\");\n        return output;\n    }\n}\n\nservice /graphql on new graphql:Listener(9000) {\n    @graphql:ResourceConfig {\n        interceptors: new FieldInterceptor()\n    }\n    resource function get name(int id) returns string {\n        log:printInfo(\"Resolver: name\");\n        return \"Ballerina\";\n    }\n}\n```\n\nFollowing is the output of the server when a request is processed:\n\n```shell\n1. Field Interceptor execution!\n3. Resolver: name\n5. Connection closed!\n```\n\n### 10.4 File Upload\n\nThis section describes how file uploading in Ballerina GraphQL works.\n\n#### 10.4.1 File Upload Protocol\n\nThe Ballerina GraphQL package uses the [GraphQL Multipart Request Specification](https://github.com/jaydenseric/graphql-multipart-request-spec) for file uploads.\n\nFollowing are the required, ordered fields that must be present in a multipart request to upload a file to a Ballerina GraphQL API that supports file uploads.\n\n##### 10.4.1.1 The `operations` Field\n\nThis field contains the `JSON-encoded` body of standard GraphQL POST requests where all the variable values storing files must be `null`.\n\n##### 10.4.1.2 The `map` Field\n\nThis field contains the `JSON-encoded` map of the path(s) of where the file(s) occurred in the GraphQL document provided in the `operations` field. Each variable must be mapped to a unique key.\n\n##### 10.4.1.3 File Fields\n\nThe path for each file that needs to be uploaded should be provided separately. The file path should be mapped to the corresponding key in the `map` field.\n\n###### Example: Single File Upload Request\n\n```shell\ncurl localhost:9090/graphql \\\n    -F operations='{ \"query\": \"mutation($file: Upload!) { fileUpload(file: $file) { link } }\", \"variables\": { \"file\": null } }' \\\n    -F map='{ \"0\": [\"variables.file\"] }' \\\n    -F 0=@file1.png\n```\n\n###### Example: Multiple File Upload Request\n\n```shell\ncurl localhost:9090/graphql \\\n    -F operations='{ \"query\": \"mutation($file: [Upload!]) { filesUpload(file: $file) { link } }\", \"variables\": { \"file\": [null, null] } }' \\\n    -F map='{ \"0\": [\"variables.file.0\"], \"1\": [\"variables.file.1\"]}' \\\n    -F 0=@file1.png\n    -F 1=@file2.png\n```\n\n##### 10.4.2 The `graphql:Upload` Type\n\nThe `graphql:Upload` type is used to provide information on the uploaded file. The `graphql:Upload` type is a record type with the following fields.\n\n###### 10.4.2.1 The `fileName` Field\n\nThis field contains the name of the file that is being uploaded. The type of field is `string``.\n\n###### 10.4.2.2 The `mimeType` Field\n\nThis field contains the mime type of the file being uploaded. The type of field is a `string`.\n\n###### 10.4.2.3 The `encoding` Field\n\nThis field contains the encoding used to serialize the file. The type of field is a `string`.\n\n###### 10.4.2.4 The `byteStream` Field\n\nThis field contains the serialized byte stream for the uploaded file. The type of the field is `stream<byte[], io:Error?>`.\n\n#### 10.4.3 File Upload Service\n\nA Ballerina GraphQL service can have `remote` methods that let clients upload files. To upload a file, the [`graphql:Upload`](#1042-the-graphqlupload-type) type can be used as an input of the `remote` method.\n\n##### 10.4.3.1 File Upload Resolver\n\nUploading a file is considered a `Mutation` operation in GraphQL. Therefore, only `remote` methods can be used for uploading files.\n\n###### Example: File Upload Resolver\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    remote function fileUpload(graphql:Upload fileUpload) returns boolean {\n        string fileName = fileUpload.fileName;\n        string mimeType = fileUpload.mimeType;\n        string encoding = fileUpload.encoding;\n        stream<byte[], io:Error?> byteStream = fileUpload.byteStream;\n\n        // ...\n    }\n}\n```\n\n###### Example: Multiple File Upload Resolver\n\n```ballerina\nservice on new graphql:Listener(9090) {\n    remote function fileUpload(graphql:Upload[] fileUploads) returns boolean {\n        foreach graphql:Upload fileUpload in fileUploads {\n            string fileName = fileUpload.fileName;\n            string mimeType = fileUpload.mimeType;\n            string encoding = fileUpload.encoding;\n            stream<byte[], io:Error?> byteStream = fileUpload.byteStream;\n\n            // ...\n        }\n    }\n}\n```\n\n### 10.5. Federation\n\n#### 10.5.1 Federated Subgraph\n\nThe Ballerina GraphQL module provides the capability to expose a `graphql:Service` as a [federation2 subgraph](https://www.apollographql.com/docs/federation/subgraph-spec). To convert a Ballerina GraphQL service into a federation2 subgraph, the `graphql.subgraph` submodule must be imported.\n\n```ballerina\nimport ballerina/graphql.subgraph;\n```\n\n>**Note:** The current implementation of the subgraph only supports dynamic schema composition through introspection.\n\n##### 10.5.1.1 The `@subgraph:Subgraph` Annotation\n\nTo make a Ballerina GraphQL service a federation2 subgraph, it should be annotated with `@subgraph:Subgraph`. This annotation adds all the subgraph schema additions to the GraphQL schema as described in the [subgraph specification](https://www.apollographql.com/docs/federation/subgraph-spec/#subgraph-schema-additions). Moreover, this annotation automatically adds resolvers for the `_entities` and `_service` root Query fields.\n\n###### Example: Federated Subgraph\n\n```ballerina\n@subgraph:Subgraph\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n##### 10.5.1.2 The `@subgraph:Entity` Annotation\n\nIn a federated graph, an entity is an object type that can resolve its fields across multiple subgraphs. Each subgraph can contribute different fields to the entity and is responsible for resolving only the fields that it contributes. The `@subgraph:Entity` designates an object type as an entity in Ballerina. The following type definition describes the shape of the `@subgraph:Entity` annotation.\n\n```ballerina\n# Describes the shape of the `subgraph:Entity` annotation\n# + key - GraphQL fields and subfields that contribute to the entity's primary key/keys\n# + resolveReference - Function pointer to resolve the entity\npublic type FederatedEntity record {|\n    string|string[] key;\n    ReferenceResolver? resolveReference;\n|};\n\n# The annotation to designate a GraphQL object type as a federated entity.\npublic annotation FederatedEntity Entity on class, type;\n```\n\nTo fully define an entity within a Ballerina GraphQL subgraph, you must:\n\n1. Assign the `@subgraph:Entity` annotation to an object type.\n2. Define the `key` field of the annotation to be the fields and subfields that contribute to the entity's primary key/keys.\n3. Define the `resolveReference` field of the annotation to be a function pointer to resolve the entity. If this field is set to `nil`, it indicates to the graph router that this subgraph does not define a reference resolver for this entity. For more details, see [ReferenceResolver](#10513-the-subgraphreferenceresolver-function-type).\n\n>**Note:** In order to be recognized as subgraph entities, GraphQL object types marked with `@subgraph:Entity` must be defined within the same Ballerina module as the GraphQL service.\n\n###### Example: Federated Entity Definition and Corresponding GraphQL Schema\n\n<table>\n  <tr>\n    <th>Example</th>\n        <th>Ballerina definition</th>\n        <th>GraphQL schema</th>\n  </tr>\n  <tr>\n    <td>Simple key</td>\n    <td>\n    <pre lang='ballerina'>\n\n```ballerina\n@subgraph:Entity {\n    key: \"id\",\n    resolveReference: resolveProduct\n}\ntype Product record {\n    string id;\n    string name;\n    int price;\n};\n```\n</pre>\n    </td>\n    <td>\n<pre lang='graphql'>\n\n```graphql\ntype Product @key(fields: \"id\") {\n    id: String!\n    name: String!\n    price: Int!\n}\n```\n</pre>\n    </td>\n  </tr>\n  <tr>\n    <td>Multiple keys</td>\n    <td>\n    <pre lang='ballerina'>\n\n```ballerina\n@subgraph:Entity {\n    key: [\"id\", \"sku\"],\n    resolveReference: resolveProduct\n}\ntype Product record {\n    string id;\n    string sku;\n    string name;\n    int price;\n};\n```\n</pre>\n    </td>\n    <td>\n    <pre lang='graphql'>\n\n```graphql\ntype Product @key(fields: \"id\") @key(fields: \"sku\") {\n    id: String!\n    sku: String!\n    name: String!\n    price: Int!\n}\n```\n</pre>\n    </td>\n  </tr>\n  <tr>\n    <td>Compound key</td>\n    <td>\n    <pre lang='ballerina'>\n\n```ballerina\n@subgraph:Entity {\n    key: \"id organization { id }\",\n    resolveReference: resolveUser\n}\ntype User record {\n    string id;\n    Organization organization;\n}\n```\n</pre>\n    </td>\n    <td>\n    <pre lang='graphql'>\n\n```graphql\ntype User @key(fields: \"id organization { id }\") {\n    id: String!\n    organization: Organization!\n}\n```\n</pre>\n    </td>\n  </tr>\n  <tr>\n    <td>Non resolvable</td>\n    <td>\n    <pre lang='ballerina'>\n\n```ballerina\n@subgraph:Entity {\n    key: \"id\"\n    resolveReference: ()\n}\ntype Product record {\n  id: String!\n}\n```\n</pre>\n    </td>\n    <td>\n    <pre lang='graphql'>\n\n```graphql\ntype Product @key(fields: \"id\", resolvable: false) {\n    id: ID!\n}\n```\n</pre>\n    </td>\n  </tr>\n</table>\n\n##### 10.5.1.3 The `subgraph:ReferenceResolver` Function Type\n\nA reference resolver is a function that resolves an entity of a specific type using its primary key. When the router requires a particular entity to be resolved, it invokes the corresponding entity's reference resolver. Following is the type definition of a reference resolver defined in `graphql.subgraph` module.\n\n```ballerina\npublic type ReferenceResolver isolated function (subgraph:Representation representation)\nreturns map<any>|service object {}|error?;\n```\n\nHere, `subgraph:Representation` is a type definition of the entity representation outlined in the federation specification, which includes the GraphQL `__typename` field of the entity being resolved and its primary key.\n\n###### Example: A Product Entity Defined with Its Resolver\n\n```ballerina\nisolated function resolveProduct(subgraph:Representation representation) returns Product|error? {\n    string id = check representation[\"id\"].ensureType(); // obtain the primary key of the entity\n    return findProduct(id);\n}\n\n@subgraph:Entity {\n    key: \"id\", // primary key of the entity\n    resolveReference: resolveProduct\n}\ntype Product record {\n    string id;\n    string name;\n    int price;\n};\n```\n\n>**Note:** If the reference resolver returns an entity of a different type than the entity being resolved, a runtime error will be returned to the router. For example, if the resolver returns a `User` for a `Product` entity, a runtime error will occur.\n\n### 10.6 DataLoader\n\nThe Ballerina GraphQL module allows efficient batching of data retrieval from datasources and enables caching of fetched data using the `graphql.dataloader` submodule.\n\n#### 10.6.1 DataLoader API\n\nThe `graphql.dataloader` submodule provides the `DataLoader` object, which is used to batch and cache data requests from a data source. The `DataLoader` object type has the following public methods/APIs.\n\n##### 10.6.1.1 The `add` method\n\nThis method takes an `anydata` parameter called the `key`, which is used to identify the data to be loaded. This method collects and stores the `key` to dispatch a batch operation at a later time. It does not return any values. The following is the method definition of this method.\n\n```ballerina\npublic isolated function add(anydata key);\n```\n\n##### 10.6.1.2 The `get` method\n\nThis method takes a `key` parameter and retrieves the result for the provided `key`. It performs data binding by examining the type of the assigned variable. In case of failure to retrieve the result or perform data binding, the method returns an error. The following is the method definition of this method.\n\n```ballerina\npublic isolated function get(anydata key, typedesc<anydata> 'type = <>) returns 'type|error;\n```\n\n##### 10.6.1.3 The `dispatch` method\n\nThis method does not take any parameters and does not return any values. This method is invoked by the GraphQL Engine to dispatch a user-defined batch load function for all the collected keys. For more information about the batch load function, refer to the [BatchLoadFunction](#106211-the-batchloadfunction) section. The following is the method definition of the `dispatch` method.\n\n```ballerina\npublic isolated function dispatch();\n```\n\n##### 10.6.1.4 The `clearAll` method\n\nThis method does not take any parameters and does not return any values. The purpose of this method is to clear all the collected keys and cached values from the DataLoader cache. The following is the method definition of this method.\n\n```ballerina\npublic isolated function clearAll();\n```\n\n#### 10.6.2 The DefaultDataLoader\n\nThe `DefaultDataLoader` is a built-in implementation of the `DataLoader` object available via the `graphql.dataloader` submodule. Users can use this implementation to batch and cache data-loading operations.\n\n##### 10.6.2.1 The `init` Method\n\nThe `init` method of the `DefaultDataLoader` object takes a function pointer of type `BatchLoadFunction`. The following is the method definition of the `init` method.\n\n```ballerina\npublic isolated function init(BatchLoadFunction loadFunction);\n```\n\n###### Example: Initializing a DefaultDataLoader\n\n```ballerina\ndataloader:DefaultDataLoader bookLoader = new (batchBooksForAuthors);\n```\n\n##### 10.6.2.1.1 The BatchLoadFunction\n\nThe batch load function is responsible for retrieving data based on an array of keys and returning an array of corresponding results or an `error` if the operation fails. The following is the type definition of the batch load function.\n\n```ballerina\npublic type BatchLoadFunction isolated function (readonly anydata[] keys) returns anydata[]|error;\n```\n\nWhen implementing a batch load function, it is important to ensure that the function returns an array of results that match the length of the keys array provided as input. **If the lengths do not match, the DataLoader will return an error when the `get` method is called**.\n\n###### Example: Writing a Batch Load Function\n\n```ballerina\nisolated function batchBooksForAuthors(readonly & anydata[] ids) returns Book[][]|error {\n    final readonly & int[] authorIds = <readonly & int[]>ids;\n    // Logic to retrieve books from the data source for the given author ids\n    // Book[][] books = ...\n    return books;\n};\n```\n\n#### 10.6.3 Engaging DataLoaders\n\nTo engage a DataLoader with a GraphQL service, follow the steps discussed in the below sections.\n\n##### 10.6.3.1 Import `graphql.dataloader` Submodule\n\nTo engage the dataloader with a GraphQL service, the `graphql.dataloader` submodule must be imported. This submodule provides the `DataLoader` object, which is used to batch and cache data-loading operations.\n\n###### Example: Importing `graphql.dataloader` Submodule\n\n```ballerina\nimport graphql.dataloader;\n```\n\n##### 10.6.3.2 Register DataLoaders to Context via ContextInit Function\n\nUsers should register the `DataLoader` objects via the `graphql:ContextInit` function. The `DataLoader` objects are meant to be used per request. Therefore, the `graphql:ContextInit` function is the ideal place to register the `DataLoader` objects. By registering the `DataLoader` objects to the `graphql:Context` object, these objects become accessible to all resolver functions of the GraphQL service.\n\n###### Example: Registering DataLoaders to Context via ContextInit Function\n\n```ballerina\n@graphql:ServiceConfig {\n    contextInit: isolated function (http:RequestContext requestContext, http:Request request) returns graphql:Context {\n        graphql:Context context = new;\n        context.registerDataLoader(\"bookLoader\", new dataloader:DefaultDataLoader(batchBooks));\n        return context;\n    }\n}\nservice on new graphql:Listener(9090) {\n    // ...\n}\n```\n\n##### 10.6.3.3 Define the Corresponding `prefetch` Method\n\nTo engage the DataLoader with a GraphQL field (let's assume the field name is `foo`), define a corresponding _prefetch_ method named `preFoo` in the service, where `Foo` represents the Pascal-cased name of the GraphQL field. The `preFoo` method can include some or all of the parameters from the GraphQL field and must include the `graphql:Context` parameter. Adding the parameters of the GraphQL `foo` field to the `preFoo` method is optional. However, if these parameters are added, the GraphQL Engine will make the same parameter values of the GraphQL field available to the `preFoo` method.\n\nThe GraphQL Engine guarantees the execution of the `preFoo` method before the `foo` method. By default, the GraphQL engine searches for a method named `preFoo` in the service class before executing the `foo` method. If the method name is different, the user can override the prefetch method name using the [`prefetchMethodName`](#722-prefetch-method-name-configurations) configuration of the `@graphql:ResourceConfig` annotation.\n\nThe user is responsible for implementing the logic to collect the keys of the data to be loaded into the `DataLoader` in the `preFoo` method. Subsequently, the user can implement the logic to retrieve the data from the `DataLoader` within the `foo` method.\n\n>**Note:** If there are multiple `resource`/`remote` methods with the same name in a GraphQL service, such as `bar`, and there exists a prefetch method named `preBar`, the GraphQL Engine will execute the `preBar` method prior to executing each `bar` method. Users can modify this behavior by utilizing the `prefetchMethodName` configuration within the `@graphql:ResourceConfig` annotation.\n\n###### Example: Defining the Corresponding `prefetch` Method\n\n```ballerina\ndistinct service class Author {\n    function preBooks(graphql:Context ctx) {\n        // ...\n    }\n\n    resource function get books(graphql:Context ctx) returns Book[] {\n        // ...\n    }\n}\n```\n\n###### Example: Overriding the Default `prefetch` Method Name\n\n```ballerina\ndistinct service class Author {\n    function addBooks(graphql:Context ctx) {\n        // ...\n    }\n\n    @graphql:ResourceConfig {\n        prefetchMethodName: \"addBooks\"\n    }\n    resource function get books(graphql:Context ctx) returns Book[] {\n        // ...\n    }\n}\n```\n\nBringing everything together, the subsequent examples demonstrate how to engage a DataLoader with a GraphQL service.\n\n###### Example: Utilizing a DataLoader in a GraphQL Service\n\n```ballerina\nimport ballerina/graphql;\nimport ballerina/graphql.dataloader;\nimport ballerina/http;\n\n@graphql:ServiceConfig {\n    contextInit: isolated function (http:RequestContext requestContext, http:Request request) returns graphql:Context {\n        graphql:Context context = new;\n        context.registerDataLoader(\"bookLoader\", new dataloader:DefaultDataLoader(batchBooksForAuthors));\n        return context;\n    }\n}\nservice on new graphql:Listener(9090) {\n    resource function get authors() returns Author[] {\n        return getAllAuthors();\n    }\n}\n\ndistinct service class Author {\n    private final int authorId;\n\n    function init(int authorId) {\n       self.authorId = authorId;\n    }\n\n    resource function get preBooks(graphql:Context ctx) {\n        dataloader:DataLoader bookLoader = ctx.getDataLoader(\"bookLoader\");\n        // Load author id to the DataLoader\n        bookLoader.add(self.authorId);\n    }\n\n    resource function get books(graphql:Context ctx) returns Book[] {\n        dataloader:DataLoader bookLoader = ctx.getDataLoader(\"bookLoader\");\n        // Obtain the books from the DataLoader by passing the author id\n        Book[] books = bookLoader.get(self.authorId);\n        return books;\n    }\n}\n\nisolated function batchBooksForAuthors(readonly & anydata[] ids) returns Book[][]|error {\n    final readonly & int[] authorIds = <readonly & int[]>ids;\n    // Logic to retrieve books from the data source for the given author ids\n    // Book[][] books = ...\n    return books;\n};\n```\n\nIn the given example, both the `books` resource function and the `preBooks` function receive the `graphql:Context` parameter, which grants access to the `DataLoader` objects. By using the `ctx.getDataLoader(\"bookLoader\")` syntax, the specific `DataLoader` object associated with the unique identifier \"bookLoader\" can be obtained and assigned to the `bookLoader` variable.\n\n###### Example: Utilizing Multiple DataLoaders in a GraphQL Service\n\n```ballerina\nimport ballerina/graphql;\nimport ballerina/graphql.dataloader;\nimport ballerina/http;\n\n@graphql:ServiceConfig {\n    contextInit: isolated function (http:RequestContext requestContext, http:Request request) returns graphql:Context {\n        graphql:Context context = new;\n        context.registerDataLoader(\"postsLoader\", new dataloader:DefaultDataLoader(postsLoaderFunction));\n        context.registerDataLoader(\"rePostsLoader\", new dataloader:DefaultDataLoader(rePostsLoaderFunction));\n        context.registerDataLoader(\"followersLoader\", new dataloader:DefaultDataLoader(followersLoaderFunction));\n        return context;\n    }\n}\nservice on new graphql:Listener(9090) {\n    resource function get users() returns User[] {\n        return getAllUsers();\n    }\n}\n\nisolated distinct service class User {\n    private final int userId;\n\n    isolated function init(int userId) {\n        self.userId = userId;\n    }\n\n    isolated resource function get prePosts(graphql:Context ctx) {\n        dataloader:DataLoader postsLoader = ctx.getDataLoader(\"postsLoader\");\n        postsLoader.add(self.userId);\n\n        dataloader:DataLoader rePostsLoader = ctx.getDataLoader(\"rePostsLoader\");\n        rePostsLoader.add(self.userId);\n    }\n\n    isolated resource function get posts(graphql:Context ctx) returns Post[]|error {\n        dataloader:DataLoader postsLoader = ctx.getDataLoader(\"postsLoader\");\n        Post[] posts = check postsLoader.get(self.userId);\n\n        dataloader:DataLoader rePostsLoader = ctx.getDataLoader(\"rePostsLoader\");\n        Post[] rePosts = check rePostsLoader.get(self.userId);\n\n        return [...posts, ...rePosts];\n    }\n\n    isolated resource function get preFollowers(graphql:Context ctx) {\n        dataloader:DataLoader followersLoader = ctx.getDataLoader(\"followersLoader\");\n        followersLoader.add(self.userId);\n    }\n\n    isolated resource function get followers(graphql:Context ctx) returns Follower[]|error {\n        dataloader:DataLoader followersLoader = ctx.getDataLoader(\"followersLoader\");\n        return check followersLoader.get(self.userId);\n    }\n}\n\nisolated function postsLoaderFunction(readonly & anydata[] ids) returns Post[][]|error {\n    final readonly & int[] keys = <readonly & int[]>ids;\n    // Logic to retrieve posts from the data source for the given user ids\n    // Post[][] posts = ...\n    return posts;\n};\n\nisolated function rePostsLoaderFunction(readonly & anydata[] ids) returns Post[][]|error {\n    final readonly & int[] keys = <readonly & int[]>ids;\n    // Logic to retrieve re posted items from the data source for the given user ids\n    // Post[][] rePosts = ...\n    return rePosts;\n};\n\nisolated function followersLoaderFunction(readonly & anydata[] ids) returns Follower[][]|error {\n    final readonly & int[] keys = <readonly & int[]>ids;\n    // Logic to retrieve followers from the data source for the given user ids\n    // Follower[][] followers = ...\n    return followers;\n};\n```\n\nThe above example utilizes three DataLoader instances: `postsLoader`, `rePostsLoader`, and `followersLoader`. These DataLoaders are associated with the batch load functions `postsLoaderFunction`, `rePostsLoaderFunction`, and `followersLoaderFunction`. The 'post' field in the example utilizes the `postsLoader` and `rePostsLoader` DataLoaders, while the 'followers' field utilizes the `followersLoader` DataLoader. This demonstrates how different fields can utilize specific DataLoaders to efficiently load and retrieve related data in GraphQL resolvers.\n\n### 10.7 Caching\n\nThis section describes the caching mechanisms in the Ballerina GraphQL module.\n\n#### 10.7.1 Server-side Caching\n\nThe Ballerina GraphQL module offers built-in server-side caching for GraphQL `query` operations. The caching operates as in-memory caching, implemented using the Ballerina cache module. The GraphQL module generates cache keys based on the arguments and the path. In server-side caching, the `errors` and `null` values are skipped when caching. There are two different ways called `operation-level caching` and `field-level caching` to enable server-side caching.\n\n##### 10.7.1.1 Operation-level Caching\n\nOperation-level caching can be used to cache the entire operation, and this can be enabled by providing the [operation cache configurations](#719-operation-level-cache-configurations). Once enabled, the GraphQL server initiates caching for all subfields of `query` operations. The fields requested through query operations will be cached based on the specified cache configurations.\n\n##### 10.7.1.2 Field-level Caching\n\nThe GraphQL field-level caching can be enabled only for a specific field. This can be done by providing the [field cache configurations](#723-field-level-cache-configurations). Once the field-level caching is enabled for a field, it will be applied to the sub-fields of that field. The field-level cache configuration can be used to override the operation-level cache configurations.\n\n>**Note:**  In both cases above, if the resolver returns a record that doesn't contain any optional fields, then the entire record will be cached instead of individually caching the subfields of this record. In the case of the resolver returning a record containing optional fields, all the subfields of the record will be cached individually.\n\n#### 10.7.1.3 Cache Invalidation\n\nSince server-side caching is implemented using the Ballerina cache module, the default eviction policy will utilize the `Least Recently Used (LRU)` mechanism. In addition to LRU cache eviction, the GraphQL module provides APIs for manual cache eviction. Currently, it provides `invalidate` and `invalidateAll` APIs for manual cache eviction. These APIs can be accessed through the [graphql:Context](#101-context-object) object.\n\n##### 10.7.1.3.1 The `invalidate` Method\n\nThe `invalidate` method accepts a string-type path as an argument. This method removes all cache entries related to the given path. If the provided path does not match any existing cache entries, an error will be returned.\n\n```ballerina\npublic isolated function invalidate(string path) returns error? {}\n```\n\n##### 10.7.1.3.2 The `invalidateAll` Method\n\nThe `invalidateAll` method can be used to clear the entire cache table. This method does not take any arguments. An error will be returned if the cache table cannot be cleared.\n\n```ballerina\npublic isolated function invalidateAll() returns error? {}\n```\n\n###### Example: Operation-level Cache Enabling and Invalidation\n\n```ballerina\nimport ballerina/graphql;\n\n@graphql:ServiceConfig {\n    cacheConfig: {\n        enabled: true,\n        maxAge: 50\n    }\n}\nservice /graphql on new graphql:Listener(9090) {\n    private string name = \"Ballerina GraphQL\";\n    private string 'type = \"code first\";\n\n    resource function get name() returns string {\n        return self.name;\n    }\n\n    resource function get 'type() returns string {\n        return self.'type;\n    }\n\n    remote function updateName(graphql:Context context, string name) returns string|error {\n        check context.invalidate(\"name\");\n        self.name = name\n        return self.name;\n    }\n}\n```\n\nIn this example, caching is enabled at the operation level. Therefore, the field `name` and `type` will be cached. When updating the name with a mutation, the cached values become invalid. Hence, the `invalidate` function can be used to invalidate the existing cache values.\n\n###### Example: Field-level Cache Enabling and Invalidation\n\n```ballerina\nimport ballerina/graphql;\n\ntype Friend record {|\n    readonly string name;\n    int age;\n    boolean isMarried;\n|};\n\nservice /graphql on new graphql:Listener(9090) {\n    private table<Friend> key(name) friends = table [\n        {name: \"Skyler\", age: 45, isMarried: true},\n        {name: \"Jesse Pinkman\", age: 23, isMarried: false}\n    ];\n\n    @graphql:ResourceConfig {\n        cacheConfig: {\n            enabled: true,\n            maxAge 20\n        }\n    }\n    isolated resource function get friends(boolean isMarried = false) returns Person[] {\n        if isMarried {\n            return from Friend friend in self.friends\n                where friend.isMarried == true\n                select new Person(friend.name, friend.age, isMarried);\n        }\n        return from Friend friend in self.friends\n            where friend.isMarried == false\n            select new Person(friend.name, friend.age, isMarried);\n    }\n\n    isolated remote function updateAge(graphql:Context context, string name, int age) returns Person|error {\n        check context.invalidate(\"friends.age\");\n        Friend friend = self.friends.get(name);\n        self.friends.put({name: name, age: age, isMarried: friend.isMarried});\n        return new Person(name, age, friend.isMarried);\n    }\n}\n\npublic isolated distinct service class Person {\n    private final string name;\n    private final int age;\n    private final boolean isMarried;\n\n    public isolated function init(string name, int age, boolean isMarried) {\n        self.name = name;\n        self.age = age;\n        self.isMarried = isMarried;\n    }\n\n    isolated resource function get name() returns string {\n        return self.name;\n    }\n\n    isolated resource function get age() returns int {\n        return self.age;\n    }\n\n    @graphql:ResourceConfig {\n        cacheConfig: {\n            enabled: false\n        }\n    }\n    isolated resource function get isMarried() returns boolean {\n        return self.isMarried;\n    }\n}\n```\n\nIn this example, GraphQL field-level caching is enabled for the `friends` field via the resource configurations. The configuration applies to its subfields, the `name` and `age` fields will be cached.  Since the caching is disabled for the field `isMarried`, it will not be cached. When the age is changed using the `updateAge` operation, the `invalidate` method is used to remove the existing cache entries related to the age field.\n\n###### Example: Overrides Operation-level Cache Config\n\n```ballerina\nimport ballerina/graphql;\n\n@graphql:ServiceConfig {\n    cacheConfig: {\n        enabled: true,\n        maxAge: 50\n    }\n}\nservice /graphql on new graphql:Listener(9090) {\n    private string name = \"Ballerina GraphQL\";\n    private string 'type = \"code first\";\n    private string version = \"V1.11.0\";\n\n    resource function get name() returns string {\n        return self.name;\n    }\n\n    resource function get 'type() returns string {\n        return self.'type;\n    }\n\n    @graphql:ServiceConfig {\n        cacheConfig: {\n            enabled: false\n        }\n    }\n    resource function get version() returns string {\n        return self.'type;\n    }\n\n    remote function updateName(graphql:Context context, string name) returns string|error {\n        check context.invalidate(\"name\");\n        self.name = name\n        return self.name;\n    }\n}\n```\n\nIn this example, caching is enabled at the operation level. Therefore, the field `name` and `type` will be cached. Since the field-level cache configuration overrides the parent cache configurations, the field `version` will not be cached. When updating the name with a mutation, the cached values become invalid. Hence, the `invalidate` function can be used to invalidate the existing cache values.\n\n### 10.8 Observability\n\nThe Ballerina GraphQL services are observable by default. The GraphQL module provides the following observability features:\n\n* [Metrics](#1081-metrics)\n* [Tracing](#1082-tracing)\n* [Logging](#1083-logging)\n\nTo enable observability, add the following to the `Ballerina.toml` file:\n\n```toml\n[build-options]\nobservabilityIncluded = true\n```\n\n#### 10.8.1 Metrics\n\nThe GraphQL observability metrics are published to Prometheus through the Ballerina Prometheus extension.\n\nThere will be multiple metrics published under multiple tags in the Prometheus format. The following section describes the tags and the corresponding metrics published.\n\n##### 10.8.1.1 Operation Type\n\nThe GraphQL operation type will be published under the `graphql_service_operation_type` tag. The value will be one of `query`, `mutation`, or `subscription`. This metric can be used to identify the type of operation that is being executed in the GraphQL service.\n\n##### 10.8.1.2 Operation Name\n\nThe GraphQL operation name will be published under the `graphql_service_operation_name` tag. If the operation name is not provided, the value will be `anonymous`. This metric can be used to identify the operations that are being executed in the GraphQL service.\n\n##### 10.8.1.3 Field Name\n\nEach field from the GraphQL operations will be published under the `graphql_service_field_name` tag, where the value will be the corresponding field name. This metric can be used to identify the fields that are being executed in the GraphQL service.\n\n##### 10.8.1.4 Errors\n\nIf an error occurs during the execution of the GraphQL operation, the error type will be published under the `graphql_service_errors` tag. The value will be one of `graphql_service_parsing_error`, `graphql_service_validation_error`, or `graphql_service_execution_error`.\n\n* The `graphql_service_parsing_error` metric will be published when there is an error in parsing the GraphQL document.\n* The `graphql_service_validation_error` metric will be published when there is an error in validating the GraphQL document.\n* The `graphql_service_execution_error` metric will be published when there is an error in executing the GraphQL document.\n\n#### 10.8.2 Tracing\n\nThe GraphQL tracing feature provides detailed information about the execution of the GraphQL request. The tracing information will be published to Jaeger through the Ballerina Jaeger extension.\n\n#### 10.8.3 Logging\n\nA Ballerina GraphQL service will log the errors that occurred during the execution of the GraphQL request. The errors will be logged at the `ERROR` level. The error message and the stack trace will be printed in the log, in the `ballerina/log` module log format.\n\n### 10.9 Document Validation\n\nThe Ballerina GraphQL package provides various measures to validate incoming GraphQL documents before executing them to ensure the security and integrity of the GraphQL service. This section describes the document validation features provided by the Ballerina GraphQL package.\n\n#### 10.9.1 Query Complexity Validation\n\nThe query complexity validation will evaluate the complexity of incoming GraphQL queries and help prevent performance and security issues caused by overly complex queries.\n\nThe query complexity of a GraphQL operation can be calculated based on the complexity of its fields. The complexity of a field can be defined by the user based on the field’s type and the amount of data it retrieves. The complexity of a query is the sum of the complexities of its fields. Users can set a maximum complexity threshold for queries, and queries exceeding this threshold can be either rejected by throwing an error or logged as a warning as per the user’s configuration.\n\n##### 10.9.1.1 Configure Query Complexity Validation for a GraphQL Service\n\nThis section describes the behavior of the query complexity validation configurations. See [Query Complexity Configurations](#7110-query-complexity-configurations) section for information on how to configure query complexity.\n\n###### 10.9.1.1.1 The `maxComplexity` Field\n\nThis field defines the maximum allowed complexity for a GraphQL document. The default value is set to `100` and the value should be a positive integer.\n\nThe incoming GraphQL requests are validated against the `maxComplexity` value before executing the operation. When calculating the complexity of a query, only the operation intended to execute will be considered. All the other operations will be ignored. The complexity will be accumulated per each field and the final complexity will be the sum of all the field complexities. The behavior of the scenario where the complexity exceeds the `maxComplexity` value will depend on the [`warnOnly`](#109113-the-warnonly-field) field.\n\n###### 10.9.1.1.2 The `defaultFieldComplexity` Field\n\nThis field defines the default complexity value for all the fields in the GraphQL schema. The default value is set to `1` and the value should be a positive integer.\n\nWhen the query complexity analysis is enabled and a particular field has not defined a complexity value, the `defaultFieldComplexity` value will be applied to that field.\n\n###### 10.9.1.1.3 The `warnOnly` Field\n\nThis field defines the behavior of the scenario where the complexity of a query exceeds the `maxComplexity` value. The default value is set to `false` and the value should be a boolean.\n\n1. When `warnOnly: false`\n   An error will be thrown without executing the query. The corresponding HTTP status code will be 400. The error message will be in the following format:\n\n    ```none\n    The operation <Operation Name : Will be empty for anonymous query> exceeds the maximum query complexity threshold. Maximum allowed complexity: <Max Complexity>. Calculated query complexity: <Calculated Complexity>.\n    ```\n\n2. When `warnOnly: true`\n   A warning will be logged without executing the query. The warning message will be in the following format:\n\n    ```none\n    The operation <Operation Name : Will be empty for anonymous query> exceeds the maximum query complexity threshold. Maximum allowed complexity: <Max Complexity>. Calculated query complexity: <Calculated Complexity>.\n    ```\n\n##### 10.9.1.2 Configure Query Complexity Validation for a Field\n\nThis section describes the behavior of the query complexity validation configurations for a field. See [Field Complexity Configurations](#724-query-complexity-configurations) section for information on how to configure field complexity.\n\nThe field complexity value is derived from either from the provided field-specific complexity value, or from the `defaultFieldComplexity` value.\n\nTo override the `defaultFieldComplexity` value for a specific field, the user can define the field complexity value in the field configuration. The field complexity value should be a positive integer.\n\nThere are exceptions for overriding the `defaultFieldComplexity` value, as mentioned in the following section.\n\n###### 10.9.1.2.1 Record Field Complexity\n\nThe `complexity` value of a record field cannot be overriden and will always get the `defaultFieldComplexity` value set at the service level. This is because the value of a record is calculated at a single time and assigning complexity for each field does not make sense.\n\n###### 10.9.1.2.2 List Field Complexity\n\nWhen a GraphQL field type is a `LIST`, the complexity value will not be dependent on the number of elements in the returned list. Users are advised to consider the complexity of retrieving a list of values when assigning a complexity value to a particular field.\n\n###### 10.9.1.2.3 Hierarchical Resource Paths Complexity\n\nFor hierarchical resource paths, intermediate fields get `defaultFieldComplexity` values, while leaf fields get their specific complexity values. The total complexity of the path is the sum of the complexities of all fields.\n\n###### 10.9.1.2.4 Interfaces and Objects Implementing Interfaces\n\nDue to [a limitation](https://github.com/ballerina-platform/ballerina-lang/issues/43151) in the jBallerina runtime, the field complexity value of an interface or an object implementing an interface cannot be overridden. The field complexity value will always get the `defaultFieldComplexity` value set at the service level. This will be fixed in a future release.\n\n###### 10.9.1.2.5 Introspection Query Complexities\n\nThe introspection queries will have the `defaultFieldComplexity` per each field. This cannot be overridden.\n\n> **Note:** When the maximum query complexity value is set to a lower value, tools such as GraphiQL may fail to generate the schema from the service due the introspection query complexity exceeding the maximum query complexity value. The complexity value of the introspection query from the GraphiQL client is 23 (assuming the default field complexity value is 1). In such cases, the testings can be done by either increasing the threshold value or using the `warnOnly` mode.\n\n##### 10.9.1.3 Response for Invalid Document with Exceeding Max Query Complexity\n\nWhen a GraphQL document exceeds the maximum query complexity, the GraphQL service will respond with an error message. The error message will be in the following format:\n\n```none\nThe operation <Operation Name : Will be empty for anonymous query> exceeds the maximum query complexity threshold. Maximum allowed complexity: <Max Complexity>. Calculated query complexity: <Calculated Complexity>.\n```\n\n###### Example: Invalid Document with Exceeding Max Query Complexity\n\nConsider the following GraphQL service.\n\n```ballerina\nimport ballerina/graphql;\n\n@graphql:ServiceConfig {\n    queryComplexityConfig: {\n        maxComplexity: 10\n    }\n}\nservice on new graphql:Listener(9090) {\n\n    @graphql:ResourceConfig {\n        complexity: 3\n    }\n    resource function get profile(int id) returns Profile {\n        // ...\n    }\n}\n```\n\nConsider the following GraphQL document. The `profile` field has a complexity value of 3 and all the other fields (`name`, `age`) have a complexity value of 1. The profile is intended to be executed three times with aliases. Therefore, the document has a combined complexity of 15.\n\n```graphql\n{\n    p1: profile(id: 1) {\n        name\n        age\n    }\n    p2: profile(id: 2) {\n        name\n        age\n    }\n    p3: profile(id: 3) {\n        name\n        age\n    }\n}\n```\n\nThis document will result in the following response:\n\n```json\n{\n  \"errors\": [\n    {\n      \"message\": \"The operation exceeds the maximum query complexity threshold. Maximum allowed complexity: 10. Calculated query complexity: 15.\",\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 1\n        }\n      ]\n    }\n  ]\n}\n```\n\n#### 10.9.2 Query Depth Validation\n\nThe query depth validation will evaluate the depth of incoming GraphQL queries and help prevent performance and security issues caused by overly deep queries.\n\nThe query depth of a GraphQL operation can be calculated based on the depth of its fields. The depth of a query is the maximum depth of its fields. Users can set a maximum depth threshold for queries, and queries exceeding this threshold will be rejected by throwing an error.\n\n##### 10.9.2.1 Configure Query Depth Validation for a GraphQL Service\n\nThis section describes the behavior of the query depth validation configurations. See [Max Query Depth](#711-max-query-depth) section for information on how to configure query depth.\n\n###### 10.9.2.1.1 The `maxDepth` Field\n\nThis field defines the threshold for the maximum allowed depth for a GraphQL document. The value should be a positive integer.\n\nWhen this is set, every incoming request is validated by checking the depth of the query. This includes the depths of the spread fragments. If a particular GraphQL document exceeds the maximum query depth, the request is invalidated and the server will respond with an error.\n\nIn the above example, when a document has a depth of more than 3, the request will be failed.\n\n##### 10.9.2.2 Response for Invalid Document with Exceeding Max Query Depth\n\nWhen a GraphQL document exceeds the maximum query depth, the GraphQL service will respond with an error message. The error message will be in the following format:\n\n```none\nQuery has depth of <query depth>, which exceeds max depth of <max depth>\n```\n\n###### Example: Invalid Document with Exceeding Max Query Depth\n\nConsider the following GraphQL service.\n\n```ballerina\nimport ballerina/graphql;\n\n@graphql:ServiceConfig {\n    maxQueryDepth: 3\n}\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n        // ...\n    }\n}\n```\n\nThe following GraphQL document has a depth of 4.\n\n```graphql\n{\n    profile {\n        friend {\n            friend {\n                name # Depth is 4\n            }\n        }\n    }\n}\n```\n\nThis will result in the following response.\n\n```json\n{\n  \"error\": {\n    \"errors\": [\n      {\n        \"message\": \"Query has depth of 4, which exceeds max depth of 3\",\n        \"locations\": [\n          {\n            \"line\": 1,\n            \"column\": 1\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n#### 10.9.3 Introspection\n\nThe introspection queries can be either enabled or disabled for a given GraphQL service. By default, the introspection queries are enabled. See the [Introspection Configurations](#717-introspection-configurations) section for information on how to configure introspection.\n\n##### 10.9.3.1 Response for Disabled Introspection\n\nWhen the introspection queries are disabled, the GraphQL service will respond with an error message when an introspection query is executed. The error message will be in the following format:\n\n```none\nGraphQL introspection is not allowed by the GraphQL Service, but the query contained <Introspection field name>.\n```\n\n###### Example: Disabled Introspection\n\nConsider the following GraphQL service.\n\n```ballerina\nimport ballerina/graphql;\n\n@graphql:ServiceConfig {\n    introspection: false\n}\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n        // ...\n    }\n}\n```\n\nThe following introspection query will result in the following response.\n\n```graphql\n{\n    __type(name: \"Profile\") {\n        kind\n    }\n}\n```\n\nThis will result in the following response.\n\n```json\n{\n  \"errors\": [\n    {\n      \"message\": \"GraphQL introspection is not allowed by the GraphQL Service, but the query contained __type.\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 2\n        }\n      ]\n    }\n  ]\n}\n```\n\n#### 10.9.4 Constraint Validation\n\nThis section describes the constraint validation features provided by the Ballerina GraphQL package. See the [Constraint Configurations](#718-constraint-configurations) section for information on how to configure constraints.\n\nIf constraint validation support is enabled, the GraphQL service verifies all constraints set on the GraphQL inputs when executing the resolver. By default, constraint validation is enabled for Ballerina GraphQL services.\n\n##### 10.9.4.1 Response for Invalid Document with Constraint Violation\n\nWhen a GraphQL input violates the constraints set on it, the GraphQL service will respond with an error message. The error message will be in the following format:\n\n```none\nInput validation failed in the field \"<Field Name>\": Validation failed for '<Input Name>:<Constraint Name>' constraint(s).\n```\n\n###### Example: Constraint Validation\n\nConsider the following GraphQL service.\n\n```ballerina\nimport ballerina/constraint;\nimport ballerina/graphql;\n\ntype ProfileInput record {|\n\n    @constraint:String {\n        minLength: 2,\n        maxLength: 15\n    }\n    string name;\n\n    @constraint:Int {\n        minValue: 18\n    }\n    int age;\n|};\n\nservice on new graphql:Listener(9090) {\n    resource function get profile(int id) returns Profile {\n        // ...\n    }\n\n    remote function addProfile(ProfileInput profile) returns Profile {\n        // ...\n    }\n}\n```\n\nThe following GraphQL document has a `name` field with a length of 1 and an `age` field with a value of 17.\n\n```graphql\nmutation {\n    addProfile(profile: {name: \"A\", age: 17}) {\n        id\n    }\n}\n```\n\nThe response will be as follows.\n\n```json\n{\n  \"errors\": [\n    {\n      \"message\": \"Input validation failed in the field \\\"addProfile\\\": Validation failed for '$.age:minValue','$.name:minLength' constraint(s).\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 5\n        }\n      ],\n      \"path\": [\n        \"addProfile\"\n      ]\n    }\n  ],\n  \"data\": null\n}\n```\n","codeSnippets":"[[-1164490868,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span></code></pre>\"],[1404740243,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener graphqlListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-560083682,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener httpListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener graphqlListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">httpListener</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-603876536,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener graphqlListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">timeout</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 10</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-940118140,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-876786931,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Service</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1788621368,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> hello\\\\-graphql </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-437346456,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> graphql:Service </span><span style=\\\"color:#6F42C1\\\">/graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[242322790,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Service graphqlService </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, world!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener graphqlListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    check</span><span style=\\\"color:#24292E\\\"> graphqlListener.</span><span style=\\\"color:#6F42C1\\\">attach</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphqlService</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"graphql\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    check</span><span style=\\\"color:#24292E\\\"> graphqlListener.</span><span style=\\\"color:#6F42C1\\\">'start</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    runtime</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">registerListener</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphqlListener</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1318075637,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (“</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6A737D\\\">//localhost:9090/graphql”, {timeout: 10});</span></span></code></pre>\"],[-1702908299,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">remote</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> document</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">map&#x3C;</span><span style=\\\"color:#005CC5\\\">anydata</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">variables</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? operationName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">? headers </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> (), </span><span style=\\\"color:#D73A49\\\">typedesc&#x3C;GenericResponseWithErrors|record</span><span style=\\\"color:#24292E\\\"> {}</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">json</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> targetType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    returns</span><span style=\\\"color:#24292E\\\"> targetType</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ClientError ;</span></span></code></pre>\"],[1760880467,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> ProfileResponseWithErrors</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">GenericResponseWithErrors;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">Profile profile;</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">} data;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\">? age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ profile(id: 100) {name age} }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ProfileResponseWithErrors response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> response.data.profile.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-944254842,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-258342406,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> setName</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        //...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1844321505,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> subscribe</span><span style=\\\"color:#6F42C1\\\"> greetings</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> stream&#x3C;stream></span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"Hello\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"Hi\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"Hello World!\\\"</span><span style=\\\"color:#24292E\\\">].</span><span style=\\\"color:#6F42C1\\\">toStream</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-156053978,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#D73A49\\\"> returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-98191797,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#D73A49\\\"> returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-423543812,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> names</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"Jesse Pinkman\\\"</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2125097148,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2006143738,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> post</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-286233087,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> graphql:Service </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">/address/number() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> 308</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">/address/street() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Negra Arroyo Lane\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">/address/city() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Albuquerque\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">/name() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">/age() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> 52</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-776990197,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Service to query people database.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Returns a profile with the given ID.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    #</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">id</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The ID of the profile</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The profile with the given ID</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a profile.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">id</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The ID of the profile</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The name of the profile</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">age</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The age of the profile</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1831801883,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\"> 'type(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> 'version) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> \\\\</span><span style=\\\"color:#E36209\\\">u</span><span style=\\\"color:#24292E\\\">{</span><span style=\\\"color:#005CC5\\\">0076</span><span style=\\\"color:#24292E\\\">}</span><span style=\\\"color:#E36209\\\">ersion</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1547813875,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#005CC5\\\"> Query</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    type</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">version</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span><span style=\\\"color:#24292E\\\">): </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">version</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span><span style=\\\"color:#24292E\\\">): </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1769219812,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profileById</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ID</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profileByIds</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ID</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] </span><span style=\\\"color:#E36209\\\">ids</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> studentByStringId</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ID</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Student {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> studentByUuidId</span><span style=\\\"color:#24292E\\\">(@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ID</span><span style=\\\"color:#E36209\\\"> uuid</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Uuid id) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Student {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ID</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Student</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.id </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> id</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> @graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ID string {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[505615731,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> {name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">, age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 52</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1402607504,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">52</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> age</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.age </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> age</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1449086394,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> Teacher</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"Chemistry\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Teacher</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> subject;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> subject</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.subject </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> subject;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> subject</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.subject;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Student</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> float</span><span style=\\\"color:#24292E\\\"> gpa;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> gpa</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.gpa </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> gpa;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> gpa</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> float</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.gpa;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> Teacher|Student</span><span style=\\\"color:#24292E\\\">; </span><span style=\\\"color:#6A737D\\\">// Defining the union type</span></span></code></pre>\"],[998412480,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> direction</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Direction {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> NORTH;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">enum</span><span style=\\\"color:#6F42C1\\\"> Direction</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    NORTH</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    EAST</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    SOUTH</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    WEST</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1751391691,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greet</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#032F62\\\"> `Hello, ${</span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#032F62\\\">}`</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, world!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[500912212,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> { </span><span style=\\\"color:#6A737D\\\">// Results in a compilation error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1437442065,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> author</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Book</span><span style=\\\"color:#E36209\\\"> book</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> book.author;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Book</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> title;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> author;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1033236164,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"Stranger\\\"</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, \\\"</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[672471709,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a Student as a class.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Student</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">Profile;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.id </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> id</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a Teacher as a class.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Teacher</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">Profile;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> subject;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> subject</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.subject </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> subject;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> subject</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.subject;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-757582848,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Student</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">Profile;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.id </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> id</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> Student</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">52</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1914577883,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9000</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> node</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Node {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> Image</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"001\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"https://ballerina.io/images/ballerina-logo-white.svg\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"logo\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Node</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> id</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Resource</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">Node;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> url</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Image</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">Resource;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> url;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> thumbnail;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> url</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> thumbnail</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.id </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.url </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> url;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.thumbnail </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> thumbnail;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> id</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> url</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.url;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> thumbnail</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.thumbnail;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1644992928,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">query</span><span style=\\\"color:#6F42C1\\\"> getProfile</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">$skipName</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">Boolean</span><span style=\\\"color:#D73A49\\\">!</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        name</span><span style=\\\"color:#6F42C1\\\"> @skip</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">if</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#E36209\\\">$skipName</span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        age</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2145087081,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">query</span><span style=\\\"color:#6F42C1\\\"> getProfile</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">$includeName</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">Boolean</span><span style=\\\"color:#D73A49\\\">!</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        name</span><span style=\\\"color:#6F42C1\\\"> @include</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">if</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#E36209\\\">$includeName</span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        age</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[549717606,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Greets back with a customized greeting with the provided name.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The name of the person to greet</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The customized greeting message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # # Deprecated</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The `hello` field is deprecated. Use the `greeting` field instead of this.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">deprecated</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> hello</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, \\\"</span><span style=\\\"color:#D73A49\\\"> +</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Return the name of the member</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The full name of the member</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Name {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> {first</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"John\\\"</span><span style=\\\"color:#24292E\\\">, last</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Returns the current admission status of the pub.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The current admission status of the pub</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> status</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Status {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> OPEN;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents the different admission statuses of the pub.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> enum</span><span style=\\\"color:#6F42C1\\\"> Status</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Open for everyone</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    OPEN</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Pub is closed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    CLOSED</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Only the members are allowed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    MEMBERS_ONLY</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Only the VIPs are allowed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    VIP</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # A private party is being held, only invitees are allowed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # # Deprecated</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Private parties are no longer supported</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">deprecated</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    PRIVATE_PARTY</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents the name of the member.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Name</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The first name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> first;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The last name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # # Deprecated</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # This field is deprecated</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">deprecated</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> last;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1714051678,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">==</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Invalid name provided\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#032F62\\\">`Hello ${</span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#032F62\\\">}`</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1835884043,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"\\\"</span><span style=\\\"color:#24292E\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1837976288,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    \\\"errors\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"message\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Invalid name provided\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"locations\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">                    \\\"line\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">                    \\\"column\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">4</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"path\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">                \\\"greeting\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    \\\"data\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">null</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[850684656,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">50</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Implementation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> age</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#D73A49\\\">|error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Implementation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[898056623,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    \\\"errors\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"message\\\"</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#032F62\\\">\\\"Error occurred while retrieving name\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"locations\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">                    \\\"line\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">                    \\\"column\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">20</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"path\\\"</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"profile\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"name\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    \\\"data\\\"</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">null</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[167064379,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    \\\"errors\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"message\\\"</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#032F62\\\">\\\"Error occurred while retrieving age\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"locations\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">                    \\\"line\\\"</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">                    \\\"column\\\"</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">25</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"path\\\"</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"profile\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"age\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    \\\"data\\\"</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        \\\"profile\\\"</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"name\\\"</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#032F62\\\">\\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"age\\\"</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">null</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1443977967,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">==</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ErrorDetail errorDetail </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                message</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Invalid name provided\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                locations</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> ['field.</span><span style=\\\"color:#6F42C1\\\">getLocation</span><span style=\\\"color:#24292E\\\">()],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                path</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getPath</span><span style=\\\"color:#24292E\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                extensions</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    code</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"INVALID_NAME\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">__addError</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">context</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">errorDetail</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#032F62\\\"> `Hello, ${</span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#032F62\\\">}!`</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[819055003,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ profile { name } }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">ProfileResponse</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientError response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">if</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Handle error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1335150659,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ profile { name } }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">ProfileResponse</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientError response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">if</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Handle error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[439145882,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ profile { name } }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">ProfileResponse</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientError response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">if</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">HttpError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Get response body</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    anydata</span><span style=\\\"color:#24292E\\\"> body </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> response.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().body;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Handle error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1936632506,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ profile { name } }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">ProfileResponse</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientError response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">if</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">InvalidDocumentError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Get error details</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ErrorDetail[]? errors </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> response.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().errors;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Handle error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1577422743,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ profile { name } }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">ProfileResponse</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientError response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">if</span><span style=\\\"color:#24292E\\\"> response </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">PayloadBindingError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Get error details</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ErrorDetail[]? errors </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> response.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().errors;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Handle error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[309975192,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> ProfileResponse</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">GenericResponseWithErrors;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">Profile profile;</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">} data;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    do</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ profile { name } }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        ProfileResponse response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">println</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">response</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    } </span><span style=\\\"color:#D73A49\\\">on</span><span style=\\\"color:#D73A49\\\"> fail</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientError err {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">        handleErrors</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">err</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">function</span><span style=\\\"color:#6F42C1\\\"> handleErrors</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ClientError clientError) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    if</span><span style=\\\"color:#24292E\\\"> clientError </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">PayloadBindingError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Get error details</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ErrorDetail[]? errors </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> clientError.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().errors;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Handle Payload Binding Error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    } </span><span style=\\\"color:#D73A49\\\">else</span><span style=\\\"color:#D73A49\\\"> if</span><span style=\\\"color:#24292E\\\"> clientError </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">InvalidDocumentError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Get error details</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ErrorDetail[]? errors </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> clientError.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().errors;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Handle error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    } </span><span style=\\\"color:#D73A49\\\">else</span><span style=\\\"color:#D73A49\\\"> if</span><span style=\\\"color:#24292E\\\"> clientError </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">HttpError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Get response body</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        anydata</span><span style=\\\"color:#24292E\\\"> body </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> response.</span><span style=\\\"color:#6F42C1\\\">detail</span><span style=\\\"color:#24292E\\\">().body;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Handle error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[505576660,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    maxQueryDepth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[771244673,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext requestContext, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {}</span></span></code></pre>\"],[825517343,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> initDefaultContext</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext requestContext, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Context</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1669135264,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#6F42C1\\\"> function</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext requestContext, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) returns graphql:Context</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1796207848,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> initContext</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext requestContext, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> initContext</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-791051428,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    cors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        allowOrigins</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"http://www.wso2.com\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"http://www.ballerina.io\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        allowCredentials</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        allowHeaders</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"CORELATION_ID\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        exposeHeaders</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"X-CUSTOM-HEADER\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxAge</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 84900</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1147870721,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphiql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        path</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/ballerina/graphiql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        printUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1398220047,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> Interceptor1</span><span style=\\\"color:#24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1728949033,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [new </span><span style=\\\"color:#6F42C1\\\">Interceptor1</span><span style=\\\"color:#24292E\\\">(), new </span><span style=\\\"color:#6F42C1\\\">Interceptor2</span><span style=\\\"color:#24292E\\\">()]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2072144594,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    introspection</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-861285794,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    validation</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1545974358,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    cacheConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1770112772,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    cacheConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxAge</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 100</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxSize</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 150</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1265468366,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    queryComplexityConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[301597705,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    queryComplexityConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxComplexity</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 100</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        defaultFieldComplexity</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        warnOnly</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1125773548,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> Interceptor1</span><span style=\\\"color:#24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1745775058,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [new </span><span style=\\\"color:#6F42C1\\\">Interceptor1</span><span style=\\\"color:#24292E\\\">(), new </span><span style=\\\"color:#6F42C1\\\">Interceptor2</span><span style=\\\"color:#24292E\\\">()]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1489461172,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> loadBooks</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        prefetchMethodName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"loadBooks\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> books</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Book[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1966575645,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        cacheConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            maxAge</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 90</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            maxSize</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 80</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1478217138,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        complexity</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 10</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-814270150,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">InterceptorConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    global</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\">false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> LogInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Interceptor;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[524877208,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            fileUserStoreConfig</span><span style=\\\"color:#24292E\\\">: {},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            scopes</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[355094613,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">auth</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">users</span><span style=\\\"color:#24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">username=</span><span style=\\\"color:#032F62\\\">\\\"alice\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">password=</span><span style=\\\"color:#032F62\\\">\\\"alice@123\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">scopes=[</span><span style=\\\"color:#032F62\\\">\\\"developer\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">auth</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">users</span><span style=\\\"color:#24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">username=</span><span style=\\\"color:#032F62\\\">\\\"bob\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">password=</span><span style=\\\"color:#032F62\\\">\\\"bob@123\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">scopes=[</span><span style=\\\"color:#032F62\\\">\\\"developer\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">]</span></span></code></pre>\"],[-982707426,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            ldapUserStoreConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                domainName</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"bcssl.lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionUrl</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"ldap://localhost:389\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionName</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"cn=admin,dc=bcssl,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionPassword</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"bcssl123\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userSearchBase</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"ou=Users,dc=bcssl,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userEntryObjectClass</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"inetOrgPerson\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userNameAttribute</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"uid\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userNameSearchFilter</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"(&#x26;(objectClass=inetOrgPerson)(uid=?))\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userNameListFilter</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"(objectClass=inetOrgPerson)\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupSearchBase</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">\\\"ou=Groups,dc=bcssl,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupEntryObjectClass</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"groupOfNames\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupNameAttribute</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"cn\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupNameSearchFilter</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"(&#x26;(objectClass=groupOfNames)(cn=?))\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                groupNameListFilter</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"(objectClass=groupOfNames)\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                membershipAttribute</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"member\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                userRolesCacheEnabled</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionPoolingEnabled</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                connectionTimeout</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">5</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                readTimeout</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">60</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            scopes</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> securedEP {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1688787534,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            jwtValidatorConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                issuer</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"wso2\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                audience</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                signatureConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                    certFile</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                scopeKey</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"scp\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            scopes</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> securedEP {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[231642656,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            oauth2IntrospectionConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                url</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"https://localhost:9445/oauth2/introspect\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                tokenTypeHint</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"access_token\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                scopeKey</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"scp\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                clientConfig</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                    customHeaders</span><span style=\\\"color:#24292E\\\">: {</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Basic YWRtaW46YWRtaW4=\\\"</span><span style=\\\"color:#24292E\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                    secureSocket</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">                        cert</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">            scopes</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> securedEP {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[801684149,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">final</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ListenerFileUserStoreBasicAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> contextInit</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext reqCtx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> authorization </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> request.</span><span style=\\\"color:#6F42C1\\\">getHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    context.</span><span style=\\\"color:#6F42C1\\\">set</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> context;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> AuthInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Interceptor;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">|isolated</span><span style=\\\"color:#24292E\\\"> object {} authorization </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authorization </span><span style=\\\"color:#D73A49\\\">!is</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Failed to authorize\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">UserDetails</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Unauthorized authn </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">authenticate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authn </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Unauthorized\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden? authz </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">authorize</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authn</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authz </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Forbidden\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">resolve</span><span style=\\\"color:#24292E\\\">('field);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> contextInit,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> AuthInterceptor</span><span style=\\\"color:#24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"welcome\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1636759652,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">LdapUserStoreConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    domainName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"bcssl.lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ldap://localhost:389\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"cn=admin,dc=bcssl,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionPassword</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"bcssl123\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userSearchBase</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ou=Users,dc=bcssl,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userEntryObjectClass</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"inetOrgPerson\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userNameAttribute</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"uid\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userNameSearchFilter</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"(&#x26;(objectClass=inetOrgPerson)(uid=?))\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userNameListFilter</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"(objectClass=inetOrgPerson)\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupSearchBase</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"ou=Groups,dc=bcssl,dc=lk\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupEntryObjectClass</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"groupOfNames\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupNameAttribute</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"cn\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupNameSearchFilter</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"(&#x26;(objectClass=groupOfNames)(cn=?))\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    groupNameListFilter</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"(objectClass=groupOfNames)\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    membershipAttribute</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"member\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    userRolesCacheEnabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionPoolingEnabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    connectionTimeout</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    readTimeout</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 60</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">final</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ListenerLdapUserStoreBasicAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> contextInit</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext reqCtx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> authorization </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> request.</span><span style=\\\"color:#6F42C1\\\">getHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    context.</span><span style=\\\"color:#6F42C1\\\">set</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> context;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> AuthInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Interceptor;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">|isolated</span><span style=\\\"color:#24292E\\\"> object {} authorization </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authorization </span><span style=\\\"color:#D73A49\\\">!is</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Failed to authorize\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        auth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">UserDetails</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Unauthorized authn </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">authenticate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authn </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Unauthorized\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden? authz </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">authorize</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authn</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authz </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Forbidden\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">resolve</span><span style=\\\"color:#24292E\\\">('field);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> contextInit,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> AuthInterceptor</span><span style=\\\"color:#24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"welcome\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2025051235,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">JwtValidatorConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    issuer</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    audience</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"wso2\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    signatureConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        jwksConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:8080/jwks\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">final</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ListenerJwtAuthHandler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> contextInit</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext reqCtx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> authorization </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> request.</span><span style=\\\"color:#6F42C1\\\">getHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    context.</span><span style=\\\"color:#6F42C1\\\">set</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> context;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> AuthInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Interceptor;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">|isolated</span><span style=\\\"color:#24292E\\\"> object {} authorization </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authorization </span><span style=\\\"color:#D73A49\\\">!is</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Failed to authorize\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Payload</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Unauthorized authn </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">authenticate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authn </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Unauthorized\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authn </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> jwt</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Payload {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden? authz </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler.</span><span style=\\\"color:#6F42C1\\\">authorize</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authn</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            if</span><span style=\\\"color:#24292E\\\"> authz </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Forbidden\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">resolve</span><span style=\\\"color:#24292E\\\">('field);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> contextInit,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> AuthInterceptor</span><span style=\\\"color:#24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"welcome\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2067003859,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">OAuth2IntrospectionConfig config </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    url</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:8080/oauth2/introspect\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    tokenTypeHint</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"access_token\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">final</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ListenerOAuth2Handler handler </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">config</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> contextInit</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext reqCtx, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> authorization </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> request.</span><span style=\\\"color:#6F42C1\\\">getHeader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    context.</span><span style=\\\"color:#6F42C1\\\">set</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> context;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> AuthInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Interceptor;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">         value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">|isolated</span><span style=\\\"color:#24292E\\\"> object {} authorization </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Authorization\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> authorization </span><span style=\\\"color:#D73A49\\\">!is</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Failed to authorize\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        oauth2</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">IntrospectionResponse</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Unauthorized</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http:Forbidden auth </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> handler</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">authorize</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authorization</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> auth </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Unauthorized {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Unauthorized\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> auth </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Forbidden {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> error</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Forbidden\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">resolve</span><span style=\\\"color:#24292E\\\">('field);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> contextInit,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> AuthInterceptor</span><span style=\\\"color:#24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"welcome\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1432263132,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            username</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"bob\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            password</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"bob@123\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    );</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ one: profile(id: 100) {name} }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ProfileResponseWithErrors response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-547317374,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            token</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"56ede317-4511-44b4-8579-a08f094ee8c5\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    );</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ one: profile(id: 100) {name} }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ProfileResponseWithErrors response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1029889435,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            username</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            issuer</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"wso2\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            audience</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"ballerina\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"ballerina.org\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"ballerina.io\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"5a0b754-895f-4279-8843-b745e11a57e9\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            jwtId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"JlbmMiOiJBMTI4Q0JDLUhTMjU2In\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            customClaims</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {scp: </span><span style=\\\"color:#032F62\\\">\\\"admin\\\"</span><span style=\\\"color:#24292E\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            expTime</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3600</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            signatureConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">                config</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">                    keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    );</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ one: profile(id: 100) {name} }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ProfileResponseWithErrors response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1183677372,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        tokenUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"localhost:9445/oauth2/token\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"FlfJYKBD2c925h4lkycqNZlC2l4a\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientSecret</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        scopes</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"admin\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            secureSocket</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[621870471,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        tokenUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:9445/oauth2/token\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        username</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"admin\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        password</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"admin\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"FlfJYKBD2c925h4lkycqNZlC2l4a\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientSecret</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        scopes</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"admin\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        refreshConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            refreshUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:9445/oauth2/token\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            scopes</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"hello\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            clientConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                secureSocket</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                    cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        clientConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            secureSocket</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">                cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-1544618579,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        refreshUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:9445/oauth2/token\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        refreshToken</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"24f19603-8565-4b5f-a036-88a945e1f272\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"FlfJYKBD2c925h4lkycqNZlC2l4a\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientSecret</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        scopes</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"admin\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            secureSocket</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[1153124589,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    auth</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        tokenUrl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"https://localhost:9445/oauth2/token\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        assertion</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"eyJhbGciOiJFUzI1NiIsImtpZCI6Ij[...omitted for brevity...]\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientId</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"FlfJYKBD2c925h4lkycqNZlC2l4a\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientSecret</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"PJz0UhTJMrHOo68QQNpvnqAY_3Aa\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        scopes</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"admin\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        clientConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            secureSocket</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[1643486735,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener securedGraphqlListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        key:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            certFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> securedGraphqlListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[710123870,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener securedHttpListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        key:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            certFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener securedGraphqlListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">securedHttpListener</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> securedGraphqlListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-21526410,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener securedGraphqlListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        key:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            certFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        mutualSsl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            verifyClient</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:REQUIRE,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        protocol</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:TLS,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            versions</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLSv1.2\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"TLSv1.1\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        ciphers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> securedGraphqlListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1773307507,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener securedHttpListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        key:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            certFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        mutualSsl</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            verifyClient</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:REQUIRE,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        protocol</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:TLS,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            versions</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLSv1.2\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"TLSv1.1\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        ciphers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">listener</span><span style=\\\"color:#24292E\\\"> graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Listener securedGraphqlListener </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">securedHttpListener</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> securedGraphqlListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1518118609,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">       secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/public.crt\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    );</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ one: profile(id: 100) {name} }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ProfileResponseWithErrors response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[779946512,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> main</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Client graphqlClient </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"localhost:9090/graphql\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">       secureSocket</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            key:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                certFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">                keyFile</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/private.key\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            cert</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"path/to/public.crt\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            protocol</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">                name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> http:TLS</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            ciphers</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\"</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    );</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> document </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"{ one: profile(id: 100) {name} }\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ProfileResponseWithErrors response </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> graphqlClient</span><span style=\\\"color:#D73A49\\\">-></span><span style=\\\"color:#6F42C1\\\">execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">document</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1947333592,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    graphiql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        path</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"/ballerina/graphiql\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> greeting</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Hello, World!\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[2144043266,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">context.</span><span style=\\\"color:#6F42C1\\\">set</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"key\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"value\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[562034116,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">|isolated</span><span style=\\\"color:#24292E\\\"> object {}</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error attribute </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"key\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[673986560,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error? result </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">remove</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"key\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-1348757395,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">context.</span><span style=\\\"color:#6F42C1\\\">registerDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"authorLoader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">new</span><span style=\\\"color:#E36209\\\"> dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">DefaultDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">authorBatchFunction</span><span style=\\\"color:#24292E\\\">));</span></span></code></pre>\"],[413832295,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader authorLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"authorLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-977500578,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">invalidate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"profile.address.city\\\"</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-261452373,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">invalidateAll</span><span style=\\\"color:#24292E\\\">();</span></span></code></pre>\"],[1744752993,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">|isolated</span><span style=\\\"color:#24292E\\\"> object {} attribute </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"key\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-56017242,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> age</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.age </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Access the context inside a GraphQL object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> age</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        value</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Cloneable</span><span style=\\\"color:#D73A49\\\">|isolated</span><span style=\\\"color:#24292E\\\"> object {} attribute </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"key\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1553168166,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> resolve</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field ‘field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#24292E\\\">;</span></span></code></pre>\"],[2010075437,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getName</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[19984877,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        srting alias </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getAlias</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1529931303,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        (</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">)[] path </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getPath</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1149829621,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\">[] subfieldNames </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getSubfieldNames</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1129789873,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">__Type type </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getType</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[715107333,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field[] subfields </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getSubfields</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1889212248,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Location location </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getLocation</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1681422706,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> fieldName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getName</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[794938989,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> fieldName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getName</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1633547945,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#032F62\\\">\\\"Walter White\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">50</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service class</span><span style=\\\"color:#6F42C1\\\"> Profile</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> age</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.age </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Access the field inside a GraphQL object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> age</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> fieldName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> 'field.</span><span style=\\\"color:#6F42C1\\\">getName</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1701085779,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Interceptor</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">Context</span><span style=\\\"color:#E36209\\\"> context</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">Field</span><span style=\\\"color:#24292E\\\"> 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-573655354,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> InterceptorName</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">   *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Interceptor;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Do some work</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        var</span><span style=\\\"color:#24292E\\\"> output </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">resolve</span><span style=\\\"color:#24292E\\\">('field);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Do some work</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1145007685,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> ServiceInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Interceptor;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#032F62\\\"> `Service Interceptor execution!`</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        var</span><span style=\\\"color:#24292E\\\"> output </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">resolve</span><span style=\\\"color:#24292E\\\">('field);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Connection closed!\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> output;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> [new </span><span style=\\\"color:#6F42C1\\\">ServiceInterceptor</span><span style=\\\"color:#24292E\\\">()]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9000</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Resolver: name\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Ballerina\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-899714572,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>1. Service Interceptor execution!</span></span>\\n<span class=\\\"line\\\"><span>3. Resolver: name</span></span>\\n<span class=\\\"line\\\"><span>5. Connection closed!</span></span></code></pre>\"],[1670805663,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> FieldInterceptor</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Interceptor;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> execute</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Field 'field) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#032F62\\\"> `Field Interceptor execution!`</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        var</span><span style=\\\"color:#24292E\\\"> output </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">resolve</span><span style=\\\"color:#24292E\\\">('field);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Connection closed!\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> output;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9000</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        interceptors</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> FieldInterceptor</span><span style=\\\"color:#24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        log</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">printInfo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"Resolver: name\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#032F62\\\"> \\\"Ballerina\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1559599153,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>1. Field Interceptor execution!</span></span>\\n<span class=\\\"line\\\"><span>3. Resolver: name</span></span>\\n<span class=\\\"line\\\"><span>5. Connection closed!</span></span></code></pre>\"],[-1794173494,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>curl localhost:9090/graphql \\\\</span></span>\\n<span class=\\\"line\\\"><span>    -F operations='{ \\\"query\\\": \\\"mutation($file: Upload!) { fileUpload(file: $file) { link } }\\\", \\\"variables\\\": { \\\"file\\\": null } }' \\\\</span></span>\\n<span class=\\\"line\\\"><span>    -F map='{ \\\"0\\\": [\\\"variables.file\\\"] }' \\\\</span></span>\\n<span class=\\\"line\\\"><span>    -F 0=@file1.png</span></span></code></pre>\"],[-767041409,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>curl localhost:9090/graphql \\\\</span></span>\\n<span class=\\\"line\\\"><span>    -F operations='{ \\\"query\\\": \\\"mutation($file: [Upload!]) { filesUpload(file: $file) { link } }\\\", \\\"variables\\\": { \\\"file\\\": [null, null] } }' \\\\</span></span>\\n<span class=\\\"line\\\"><span>    -F map='{ \\\"0\\\": [\\\"variables.file.0\\\"], \\\"1\\\": [\\\"variables.file.1\\\"]}' \\\\</span></span>\\n<span class=\\\"line\\\"><span>    -F 0=@file1.png</span></span>\\n<span class=\\\"line\\\"><span>    -F 1=@file2.png</span></span></code></pre>\"],[339306596,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> fileUpload</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Upload fileUpload) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> boolean</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> fileName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> fileUpload.fileName;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> mimeType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> fileUpload.mimeType;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        string</span><span style=\\\"color:#24292E\\\"> encoding </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> fileUpload.encoding;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        stream&#x3C;</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[], io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> byteStream </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> fileUpload.byteStream;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[663162229,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> fileUpload</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Upload[] fileUploads) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> boolean</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        foreach </span><span style=\\\"color:#24292E\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Upload fileUpload </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> fileUploads {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            string</span><span style=\\\"color:#24292E\\\"> fileName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> fileUpload.fileName;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            string</span><span style=\\\"color:#24292E\\\"> mimeType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> fileUpload.mimeType;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            string</span><span style=\\\"color:#24292E\\\"> encoding </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> fileUpload.encoding;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            stream&#x3C;</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[], io</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> byteStream </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> fileUpload.byteStream;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">            // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-652661170,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql.subgraph;</span></span></code></pre>\"],[-510152174,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">subgraph</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Subgraph</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1663924577,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Describes the shape of the `subgraph:Entity` annotation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">key</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">GraphQL fields and subfields that contribute to the entity's primary key/keys</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">resolveReference</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Function pointer to resolve the entity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> FederatedEntity</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[] key;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ReferenceResolver</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\"> resolveReference;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># The annotation to designate a GraphQL object type as a federated entity.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> annotation</span><span style=\\\"color:#24292E\\\"> FederatedEntity Entity </span><span style=\\\"color:#D73A49\\\">on class</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#6F42C1\\\">type</span><span style=\\\"color:#24292E\\\">;</span></span></code></pre>\"],[575014631,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">subgraph</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Entity</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    key:</span><span style=\\\"color:#032F62\\\"> \\\"id\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    resolveReference</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> resolveProduct</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Product</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> price;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-682272494,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#005CC5\\\"> Product</span><span style=\\\"color:#6F42C1\\\"> @key</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">fields</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"id\\\"</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    price</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">Int</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1167530561,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">subgraph</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Entity</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    key:</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#032F62\\\">\\\"id\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">\\\"sku\\\"</span><span style=\\\"color:#24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    resolveReference</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> resolveProduct</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Product</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> sku;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> price;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1970281625,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#005CC5\\\"> Product</span><span style=\\\"color:#6F42C1\\\"> @key</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">fields</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"id\\\"</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#6F42C1\\\">@key</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">fields</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"sku\\\"</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    sku</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    price</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">Int</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1813890491,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">subgraph</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Entity</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    key:</span><span style=\\\"color:#032F62\\\"> \\\"id organization { id }\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    resolveReference</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> resolveUser</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> User</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Organization organization;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-527229389,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#005CC5\\\"> User</span><span style=\\\"color:#6F42C1\\\"> @key</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">fields</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"id organization { id }\\\"</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    organization</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">Organization</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[388672106,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">subgraph</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Entity</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    key:</span><span style=\\\"color:#032F62\\\"> \\\"id\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    resolveReference</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> ()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Product</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  id</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> String!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1546968594,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#005CC5\\\"> Product</span><span style=\\\"color:#6F42C1\\\"> @key</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">fields</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"id\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">resolvable</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">false</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">ID</span><span style=\\\"color:#D73A49\\\">!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[591539185,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ReferenceResolver</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">subgraph</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Representation representation)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> map&#x3C;any>|service</span><span style=\\\"color:#D73A49\\\"> object</span><span style=\\\"color:#24292E\\\"> {}</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">?;</span></span></code></pre>\"],[-2088402377,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> resolveProduct</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">subgraph</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Representation representation) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Product</span><span style=\\\"color:#D73A49\\\">|error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> id </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> representation[</span><span style=\\\"color:#032F62\\\">\\\"id\\\"</span><span style=\\\"color:#24292E\\\">].</span><span style=\\\"color:#6F42C1\\\">ensureType</span><span style=\\\"color:#24292E\\\">(); </span><span style=\\\"color:#6A737D\\\">// obtain the primary key of the entity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#6F42C1\\\"> findProduct</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">subgraph</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Entity</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    key:</span><span style=\\\"color:#032F62\\\"> \\\"id\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#6A737D\\\">// primary key of the entity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    resolveReference</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> resolveProduct</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Product</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> price;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-726966936,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> add</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">anydata</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-205543156,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">anydata</span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">typedesc</span><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#005CC5\\\">anydata</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> 'type </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;></span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> 'type</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">;</span></span></code></pre>\"],[1925088648,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> dispatch</span><span style=\\\"color:#24292E\\\">();</span></span></code></pre>\"],[-1249255506,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> clearAll</span><span style=\\\"color:#24292E\\\">();</span></span></code></pre>\"],[-1532798312,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">BatchLoadFunction</span><span style=\\\"color:#E36209\\\"> loadFunction</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-1296292927,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DefaultDataLoader bookLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#E36209\\\">batchBooksForAuthors</span><span style=\\\"color:#24292E\\\">);</span></span></code></pre>\"],[-2141466027,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> BatchLoadFunction</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> (</span><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#24292E\\\">[] </span><span style=\\\"color:#E36209\\\">keys</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\">;</span></span></code></pre>\"],[-147148269,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> batchBooksForAuthors</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#24292E\\\">[] </span><span style=\\\"color:#E36209\\\">ids</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Book[][]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#D73A49\\\"> readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] authorIds </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">ids;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Logic to retrieve books from the data source for the given author ids</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Book[][] books = ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> books;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[511156254,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> graphql.dataloader;</span></span></code></pre>\"],[-1431450390,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#6F42C1\\\"> function </span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext requestContext, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) returns graphql:Context {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        context.</span><span style=\\\"color:#6F42C1\\\">registerDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"bookLoader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">new</span><span style=\\\"color:#E36209\\\"> dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">DefaultDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">batchBooks</span><span style=\\\"color:#24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> context;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1431613507,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Author</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> preBooks</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> books</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Book[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1258054178,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Author</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> addBooks</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ResourceConfig {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        prefetchMethodName</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"addBooks\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> books</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Book[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[641307674,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql.dataloader;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#6F42C1\\\"> function </span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext requestContext, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) returns graphql:Context {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        context.</span><span style=\\\"color:#6F42C1\\\">registerDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"bookLoader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">new</span><span style=\\\"color:#E36209\\\"> dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">DefaultDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">batchBooksForAuthors</span><span style=\\\"color:#24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> context;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> authors</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Author[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#6F42C1\\\"> getAllAuthors</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Author</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> authorId;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> authorId</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">       self</span><span style=\\\"color:#24292E\\\">.authorId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> authorId;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> preBooks</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader bookLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"bookLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Load author id to the DataLoader</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        bookLoader.</span><span style=\\\"color:#6F42C1\\\">add</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">self</span><span style=\\\"color:#24292E\\\">.authorId);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> books</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Book[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader bookLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"bookLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // Obtain the books from the DataLoader by passing the author id</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        Book[] books </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> bookLoader.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">self</span><span style=\\\"color:#24292E\\\">.authorId);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> books;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> batchBooksForAuthors</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#24292E\\\">[] </span><span style=\\\"color:#E36209\\\">ids</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Book[][]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#D73A49\\\"> readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] authorIds </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">ids;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Logic to retrieve books from the data source for the given author ids</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Book[][] books = ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> books;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[372861849,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql.dataloader;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    contextInit</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#6F42C1\\\"> function </span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">RequestContext requestContext, </span><span style=\\\"color:#E36209\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Request request) returns graphql:Context {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        context.</span><span style=\\\"color:#6F42C1\\\">registerDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"postsLoader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">new</span><span style=\\\"color:#E36209\\\"> dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">DefaultDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">postsLoaderFunction</span><span style=\\\"color:#24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        context.</span><span style=\\\"color:#6F42C1\\\">registerDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"rePostsLoader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">new</span><span style=\\\"color:#E36209\\\"> dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">DefaultDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">rePostsLoaderFunction</span><span style=\\\"color:#24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        context.</span><span style=\\\"color:#6F42C1\\\">registerDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"followersLoader\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#D73A49\\\">new</span><span style=\\\"color:#E36209\\\"> dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#6F42C1\\\">DefaultDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">followersLoaderFunction</span><span style=\\\"color:#24292E\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> context;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> users</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> User[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#6F42C1\\\"> getAllUsers</span><span style=\\\"color:#24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> User</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> userId;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> userId</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.userId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> userId;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> prePosts</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader postsLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"postsLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        postsLoader.</span><span style=\\\"color:#6F42C1\\\">add</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">self</span><span style=\\\"color:#24292E\\\">.userId);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader rePostsLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"rePostsLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        rePostsLoader.</span><span style=\\\"color:#6F42C1\\\">add</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">self</span><span style=\\\"color:#24292E\\\">.userId);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> posts</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Post[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader postsLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"postsLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        Post[] posts </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> postsLoader.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">self</span><span style=\\\"color:#24292E\\\">.userId);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader rePostsLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"rePostsLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        Post[] rePosts </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> rePostsLoader.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">self</span><span style=\\\"color:#24292E\\\">.userId);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#24292E\\\">posts, </span><span style=\\\"color:#D73A49\\\">...</span><span style=\\\"color:#24292E\\\">rePosts];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> preFollowers</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader followersLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"followersLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        followersLoader.</span><span style=\\\"color:#6F42C1\\\">add</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">self</span><span style=\\\"color:#24292E\\\">.userId);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> followers</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context ctx) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Follower[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        dataloader</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">DataLoader followersLoader </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> ctx.</span><span style=\\\"color:#6F42C1\\\">getDataLoader</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"followersLoader\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#24292E\\\"> followersLoader.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">self</span><span style=\\\"color:#24292E\\\">.userId);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> postsLoaderFunction</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#24292E\\\">[] </span><span style=\\\"color:#E36209\\\">ids</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Post[][]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#D73A49\\\"> readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] keys </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">ids;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Logic to retrieve posts from the data source for the given user ids</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Post[][] posts = ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> posts;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> rePostsLoaderFunction</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#24292E\\\">[] </span><span style=\\\"color:#E36209\\\">ids</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Post[][]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#D73A49\\\"> readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] keys </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">ids;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Logic to retrieve re posted items from the data source for the given user ids</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Post[][] rePosts = ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> rePosts;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> followersLoaderFunction</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#D73A49\\\">readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> anydata</span><span style=\\\"color:#24292E\\\">[] </span><span style=\\\"color:#E36209\\\">ids</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Follower[][]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    final</span><span style=\\\"color:#D73A49\\\"> readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[] keys </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> &#x3C;readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">ids;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Logic to retrieve followers from the data source for the given user ids</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    // Follower[][] followers = ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    return</span><span style=\\\"color:#24292E\\\"> followers;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-425881800,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> invalidate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> path</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {}</span></span></code></pre>\"],[2090477373,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> invalidateAll</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {}</span></span></code></pre>\"],[2101810013,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    cacheConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxAge</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 50</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"Ballerina GraphQL\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> 'type </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"code first\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\"> 'type() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.'type;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> updateName</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">invalidate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"name\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[381502294,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Friend</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    readonly</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> isMarried;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> table&#x3C;</span><span style=\\\"color:#24292E\\\">Friend</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#24292E\\\">) friends </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> table</span><span style=\\\"color:#24292E\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Skyler\\\"</span><span style=\\\"color:#24292E\\\">, age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 45</span><span style=\\\"color:#24292E\\\">, isMarried</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Jesse Pinkman\\\"</span><span style=\\\"color:#24292E\\\">, age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 23</span><span style=\\\"color:#24292E\\\">, isMarried</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        cacheConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            maxAge </span><span style=\\\"color:#005CC5\\\">20</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> friends</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">boolean</span><span style=\\\"color:#E36209\\\"> isMarried</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> false</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Person[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> isMarried {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#D73A49\\\"> from</span><span style=\\\"color:#24292E\\\"> Friend friend </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.friends</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                where</span><span style=\\\"color:#24292E\\\"> friend.isMarried </span><span style=\\\"color:#D73A49\\\">==</span><span style=\\\"color:#D73A49\\\"> true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">                select</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> Person</span><span style=\\\"color:#24292E\\\">(friend.name, friend.age, </span><span style=\\\"color:#E36209\\\">isMarried</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> from</span><span style=\\\"color:#24292E\\\"> Friend friend </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.friends</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            where</span><span style=\\\"color:#24292E\\\"> friend.isMarried </span><span style=\\\"color:#D73A49\\\">==</span><span style=\\\"color:#D73A49\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            select</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> Person</span><span style=\\\"color:#24292E\\\">(friend.name, friend.age, </span><span style=\\\"color:#E36209\\\">isMarried</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> updateAge</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> age</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Person</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">invalidate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"friends.age\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        Friend friend </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.friends.</span><span style=\\\"color:#6F42C1\\\">get</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.friends.</span><span style=\\\"color:#6F42C1\\\">put</span><span style=\\\"color:#24292E\\\">({name</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> name, age</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> age, isMarried</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> friend.isMarried});</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#6F42C1\\\"> Person</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#E36209\\\">age</span><span style=\\\"color:#24292E\\\">, friend.isMarried);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> distinct</span><span style=\\\"color:#D73A49\\\"> service class</span><span style=\\\"color:#6F42C1\\\"> Person</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#D73A49\\\"> final</span><span style=\\\"color:#005CC5\\\"> boolean</span><span style=\\\"color:#24292E\\\"> isMarried;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> age</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">boolean</span><span style=\\\"color:#E36209\\\"> isMarried</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.age </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.isMarried </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> isMarried;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> age</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ResourceConfig {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        cacheConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    isolated</span><span style=\\\"color:#D73A49\\\"> resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> isMarried</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> boolean</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.isMarried;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-658967875,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    cacheConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> true</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxAge</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 50</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#6F42C1\\\"> /graphql</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"Ballerina GraphQL\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> 'type </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"code first\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    private</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> version </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"V1.11.0\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> name</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\"> 'type() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.'type;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        cacheConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            enabled</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> version</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.'type;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> updateName</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">graphql</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Context context, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> name</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        check</span><span style=\\\"color:#24292E\\\"> context.</span><span style=\\\"color:#6F42C1\\\">invalidate</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#032F62\\\">\\\"name\\\"</span><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        self</span><span style=\\\"color:#24292E\\\">.name </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#005CC5\\\"> self</span><span style=\\\"color:#24292E\\\">.name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1181752027,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">build-options</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">observabilityIncluded = </span><span style=\\\"color:#005CC5\\\">true</span></span></code></pre>\"],[-1151744343,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>The operation &#x3C;Operation Name : Will be empty for anonymous query> exceeds the maximum query complexity threshold. Maximum allowed complexity: &#x3C;Max Complexity>. Calculated query complexity: &#x3C;Calculated Complexity>.</span></span></code></pre>\"],[-782012101,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    queryComplexityConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxComplexity</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 10</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ResourceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        complexity</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[831427705,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">    p1</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#E36209\\\">profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        age</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">    p2</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#E36209\\\">profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        age</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">    p3</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#E36209\\\">profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">id</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">3</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        age</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1976708792,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">  \\\"errors\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      \\\"message\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"The operation exceeds the maximum query complexity threshold. Maximum allowed complexity: 10. Calculated query complexity: 15.\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      \\\"locations\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">          \\\"line\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">          \\\"column\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[1519622140,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>Query has depth of &#x3C;query depth>, which exceeds max depth of &#x3C;max depth></span></span></code></pre>\"],[1033871322,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    maxQueryDepth</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 3</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-356180028,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    profile</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        friend</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">            friend</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">                name</span><span style=\\\"color:#6A737D\\\"> # Depth is 4</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1354964325,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">  \\\"error\\\"</span><span style=\\\"color:#24292E\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    \\\"errors\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        \\\"message\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Query has depth of 4, which exceeds max depth of 3\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">        \\\"locations\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"line\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">            \\\"column\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">          }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-719607818,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>GraphQL introspection is not allowed by the GraphQL Service, but the query contained &#x3C;Introspection field name>.</span></span></code></pre>\"],[-1054511034,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">@</span><span style=\\\"color:#005CC5\\\">graphql</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">ServiceConfig</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    introspection</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-698083925,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    __type</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Profile\\\"</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        kind</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-343944612,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">  \\\"errors\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      \\\"message\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"GraphQL introspection is not allowed by the GraphQL Service, but the query contained __type.\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      \\\"locations\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">          \\\"line\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">          \\\"column\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[804130330,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>Input validation failed in the field \\\"&#x3C;Field Name>\\\": Validation failed for '&#x3C;Input Name>:&#x3C;Constraint Name>' constraint(s).</span></span></code></pre>\"],[-588049122,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/constraint;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/graphql;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> ProfileInput</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">constraint</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">String</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        minLength</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 2</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        maxLength</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 15</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    @</span><span style=\\\"color:#005CC5\\\">constraint</span><span style=\\\"color:#24292E\\\">:</span><span style=\\\"color:#005CC5\\\">Int</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        minValue</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#005CC5\\\"> 18</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> age;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> graphql:Listener(</span><span style=\\\"color:#005CC5\\\">9090</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> profile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> id</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> addProfile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">ProfileInput</span><span style=\\\"color:#E36209\\\"> profile</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> Profile {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-2102048967,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">mutation</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    addProfile</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">profile</span><span style=\\\"color:#24292E\\\">: {</span><span style=\\\"color:#032F62\\\">name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"A\\\"</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#032F62\\\">age</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">17</span><span style=\\\"color:#24292E\\\">}) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">        id</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-869065762,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">  \\\"errors\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      \\\"message\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">\\\"Input validation failed in the field </span><span style=\\\"color:#005CC5\\\">\\\\\\\"</span><span style=\\\"color:#032F62\\\">addProfile</span><span style=\\\"color:#005CC5\\\">\\\\\\\"</span><span style=\\\"color:#032F62\\\">: Validation failed for '$.age:minValue','$.name:minLength' constraint(s).\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      \\\"locations\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">          \\\"line\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">          \\\"column\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">5</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">      \\\"path\\\"</span><span style=\\\"color:#24292E\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\">        \\\"addProfile\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">  \\\"data\\\"</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#005CC5\\\">null</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}