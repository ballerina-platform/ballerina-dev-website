{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina Constraint Library\n\n_Owners_: @TharmiganK @shafreenAnfar @chamil321  \n_Reviewers_: @shafreenAnfar @chamil321  \n_Created_: 2022/08/09  \n_Updated_: 2022/08/09   \n_Edition_: Swan Lake\n\n## Introduction\nThis is the specification for the Constraint standard library of [Ballerina language](https://ballerina.io/), which \nprovides APIs to validate the values that have been assigned to Ballerina types.\n\nThe Constraint library specification has evolved and may continue to evolve in the future. The released versions of the \nspecification can be found under the relevant GitHub tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) \nor in the [Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification \nand implementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the \nspecification is stored under `/docs/proposals`. Proposals under discussion can be found with the label `type/proposal` \nin GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the \nspecification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Constraint annotations](#2-constraint-annotations)\n   * 2.1. [Constraint annotation on number types](#21-constraint-annotation-on-number-types)\n   * 2.2. [Constraint annotation on `string` type](#22-constraints-annotation-on-string-type)\n   * 2.3. [Constraint annotation on array types](#23-constraint-annotation-on-array-types)\n3. [`validate` function](#3-validate-function)\n\n## 1. Overview\nValidating user input is a common requirement in most applications. This can prevent user entry errors before the app \nattempts to process the data. In Ballerina, such validations can be carried out by the Constraint library.\n\nThis specification elaborates on the functionalities provided by the Constraint library and how the library \nvalidates the constraints in Ballerina types.\n\n## 2. Constraint annotations\nThe Constraint library provides different annotations for different basic types e.g. `@constraint:String` for strings, \n`@constraint:Array` for arrays etc. Each of these is defined as a separate associated record type.\n\n```ballerina\n// Annotation\npublic annotation StringConstraints String on type, record field;\n\n// Associated Record Type\ntype StringConstraints record {|\n   int length?;\n   int minLength?;\n   int maxLength?;\n|};\n```\n\nThese annotations are attached to `type` or `record field` attachment points.\n\n```ballerina\n// Constriant attached to a type\n@constraint:Int {\n    minValue: 18\n}\ntype Age int;\n\ntype User record {|\n    // Constraint attached to a record field\n    @constraint:String {\n        minLength: 1,\n        maxLength: 10\n    }\n    string name;\n\n    // Constraint attached to a type used as a record field\n    Age age;\n|};\n```\n\nThe following table illustrates all the supported annotations with respect to the Ballerina types.\n\n| Ballerina Type                    | Annotation           |\n|-----------------------------------|----------------------|\n| `int`                             | `@constraint:Int`    |\n| `float`                           | `@constraint:float`  |\n| `int`&#124;`float`&#124;`decimal` | `@constraint:Number` |\n| `string`                          | `@constraint:String` |\n| `any[]`                           | `@constraint:Array`  |\n\n### 2.1. Constraint annotation on number types\n\nThe Constraint library offers the following three constraint annotations on number types such as `int`, `float` and \n`decimal`. \n\n```ballerina\n// Integer constraints which applies only when the value is `int`.\n// The constraint values are also type of `int`\npublic type IntConstraints record {|\n    int minValue?;\n    int maxValue?;\n    int minValueExclusive?;\n    int maxValueExclusive?;\n|};\n\n// Float constraints which applies only when the value is `float`.\n// The constraint values are also type of `float`\npublic type FloatConstraints record {|\n    float minValue?;\n    float maxValue?;\n    float minValueExclusive?;\n    float maxValueExclusive?;\n|};\n\n// Number constraints which applies when the value is `int|float|decimal`.\n// The constraint values are type of `decimal`\npublic type NumberConstraints record {|\n    decimal minValue?;\n    decimal maxValue?;\n    decimal minValueExclusive?;\n    decimal maxValueExclusive?;\n|};\n```\n\nAll the supported constraints on number types are illustrated in the following table.\n\n| Constraint name   | Semantics (v is value being <br/>constrained, c is constraint value) |\n|-------------------|:--------------------------------------------------------------------:|\n| minValue          |                                v >= c                                |\n| maxValue          |                                v <= c                                |\n| minValueExclusive |                                v > c                                 |\n| maxValueExclusive |                                v < c                                 |\n\nWhen defining constraints on number types, either `minValue` or `minValueExclusive` can be present. Similarly, either \n`maxValue` or `maxValueExclusive` can be present.\n\nExample :\n```ballerina\n// Integer constraint\n@constraint:Int {\n    minValue: 18\n}\ntype Age int;\n\n// Float constraint\n@constraint:Float {\n    minValue: 0.0\n}\ntype Area float;\n\n// Number constraint\n@constraint:Number {\n    minValue: 0,\n    maxValue: 100\n}\ntype Percentage int|decimal;\n```\n\n### 2.2. Constraints annotation on `string` type\n\nThe following is the associated record type definition for `@constraint:String` annotation.\n\n```ballerina\n// String constraints which applies only when the value is `string`.\npublic type StringConstraints record {|\n    int length?;\n    int minLength?;\n    int maxLength?;\n|};\n```\n\nAll the supported constraints on `string` type are illustrated in the following table.\n\n| Constraint name   | Semantics (v is value being <br/>constrained, c is constraint value) |\n|-------------------|:--------------------------------------------------------------------:|\n| length            |                           v.length() == c                            |\n| minLength         |                           v.length() >= c                            |\n| maxLength         |                           v.length() <= c                            |\n\nWhen defining constraints on `string` type, if the `length` constraint is present then `minLength` or `maxLength` are \nnot allowed.\n\nExample :\n```ballerina\n@constraint:String {\n    minLength: 5,\n    maxLength: 10\n}\ntype Username string;\n```\n\n### 2.3. Constraint annotation on array types\n\nThe Constraint library offers the `@constraint:Array` annotation on Ballerina `anydata[]` types. The following is the \nassociated record type definition.\n\n```ballerina\npublic type ArrayConstraints record {|\n    int length?;\n    int minLength?;\n    int maxLength?;\n|};\n```\n\nAll the supported constraints on array types are illustrated in the following table.\n\n| Constraint name   | Semantics (v is value being <br/>constrained, c is constraint value) |\n|-------------------|:--------------------------------------------------------------------:|\n| length            |                           v.length() == c                            |\n| minLength         |                           v.length() >= c                            |\n| maxLength         |                           v.length() <= c                            |\n\nWhen defining constraints on array types, if the `length` constraint is present then `minLength` or `maxLength` are\nnot allowed.\n\nExample :\n```ballerina\n@constraint:Array {\n    minLength: 1,\n    maxLength: 10\n}\ntype Names string[];\n```\n\n## 3. `validate` function\n\nThe Constraint library has a public function : `validate` which should be explicitly called by the developer to \nvalidate the constraints. If the validation is successful then this function returns the type descriptor of the \nvalue which is validated, else a `constraint:Error` is returned.\n\nThe following is the definition of the `validate` function.\n```ballerina\npublic isolated function validate(anydata value, typedesc<anydata> td = <>) returns td|Error {\n    // ...\n}\n```\n\nExample :\n```ballerina\ntype Person record {|\n    @constraint:String {\n        minLength: 5,\n        maxLength: 10\n    }\n    string name;\n|};\n\npublic function func1() returns error? {\n    Person p1 = {name: \"Alice\"};\n    p1 = check constraint:validate(p1);\n    \n    // Error case\n    Person p2 = {name: \"Bob\"};\n    // This will return an error since the length is less than 5\n    p2 = check constraint:validate(p2);\n}\n```\n\n"},"__N_SSG":true}