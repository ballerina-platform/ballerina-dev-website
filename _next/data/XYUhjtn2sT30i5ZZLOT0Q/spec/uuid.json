{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina UUID Library\n\n_Owners_: @daneshk @MadhukaHarith92  \n_Reviewers_: @daneshk  \n_Created_: 2021/11/16  \n_Updated_: 2022/02/08  \n_Edition_: Swan Lake   \n\n## Introduction\nThis is the specification for the UUID standard library of [Ballerina language](https://ballerina.io/), which provides APIs to generate UUIDs based on the [RFC 4122](https://www.rfc-editor.org/rfc/rfc4122.html).\n\nThe UUID library specification has evolved and may continue to evolve in the future. The released versions of the specification can be found under the relevant Github tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the [Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the specification is stored under `/docs/proposals`. Proposals under discussion can be found with the label `type/proposal` in GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Generating UUIDs](#2-generating-uuids)\n    * 2.1. [Version 1](#21-version-1)\n    * 2.2. [Version 3](#22-version-3)\n    * 2.3. [Version 4](#23-version-4)\n    * 2.4. [Version 5](#24-version-5)\n    * 2.5. [Nil UUID](#25-nil-uuid)\n3. [Checking the Version of UUIDs](#3-checking-the-version-of-uuids)\n4. [Validating UUIDs](#4-validating-uuids)\n5. [UUID Operations](#5-uuid-operations)\n\n## 1. Overview\nThis specification elaborates on the functions available in the UUID library.\n\n## 2. Generating UUIDs\nUUID module supports generating 4 versions of UUIDs. They are generated as UUID strings or UUID records. The following is the UUID record definition.\n```ballerina\n# Represents a UUID.\n#\n# + timeLow - The low field of the timestamp\n# + timeMid - The middle field of the timestamp\n# + timeHiAndVersion - The high field of the timestamp multiplexed with the version number\n# + clockSeqHiAndReserved - The high field of the clock sequence multiplexed with the variant\n# + clockSeqLo - The low field of the clock sequence\n# + node - The spatially unique node identifier\npublic type Uuid readonly & record {\n    ints:Unsigned32 timeLow;\n    ints:Unsigned16 timeMid;\n    ints:Unsigned16 timeHiAndVersion;\n    ints:Unsigned8 clockSeqHiAndReserved;\n    ints:Unsigned8 clockSeqLo;\n    int node;\n};\n```\n\n### 2.1. Version 1\nThis is generated using the MAC address of the computer and the time of generation. \n\nThe `uuid:createType1AsString()` function returns a UUID as a string.\n```ballerina\nstring uuid1 = uuid:createType1AsString();\n```\n\nThe `uuid:createType1AsRecord()` function returns a UUID as a `Uuid` record.\n```ballerina\nuuid:Uuid|uuid:Error uuid1 = uuid:createType1AsRecord();\n```\n\n### 2.2. Version 3\nThis is generated using cryptographic hashing and application-provided text strings. MD5 hashing is used.\n\nUUID library has a set of pre-defined UUIDs strings of well known namespace IDs.\n```\nNAME_SPACE_DNS - Namespace is a fully-qualified domain name\nNAME_SPACE_URL - Namespace is a URL\nNAME_SPACE_OID - Namespace is an ISO OID\nNAME_SPACE_X500 - Namespace is an X.500 DN (in DER or a text output format)\nNAME_SPACE_NIL - Empty UUID\n```\n\nThe `uuid:createType3AsString()` function returns a UUID as a string or else a `uuid:Error`.\n```ballerina\nstring|uuid:Error uuid3 = uuid:createType3AsString(uuid:NAME_SPACE_DNS, “ballerina.io”);\n```\n\nThe `uuid:createType3AsRecord()` function returns a UUID as a `Uuid` record or else a `uuid:Error`.\n```ballerina\nuuid:Uuid|uuid:Error uuid3 = uuid:createType3AsRecord(uuid:NAME_SPACE_DNS, “ballerina.io”);\n```\n\n### 2.3. Version 4\n\nThis is generated using a pseudo-random number generator. Every bit of the string is randomly generated.\n\nThe `uuid:createType4AsString()` function returns a UUID as a string.\n```ballerina\nstring uuid4 = uuid:createType4AsString();\n```\n\nThe `uuid:createType4AsRecord()` function returns a UUID as a `Uuid` record or else a `uuid:Error`.\n```ballerina\nuuid:Uuid|uuid:Error uuid4 = uuid:createType4AsRecord();\n```\n\n### 2.4. Version 5\nThis is generated using cryptographic hashing and application-provided text strings. SHA-1 hashing is used.\n\nThe `uuid:createType5AsString()` function returns a UUID as a string or else a `uuid:Error`.\n```ballerina\nstring|uuid:Error uuid5 = uuid:createType5AsString(uuid:NAME_SPACE_DNS, “ballerina.io”);\n```\n\nThe `uuid:createType5AsRecord()` function returns a UUID as a `Uuid` record or else a `uuid:Error`.\n```ballerina\nuuid:Uuid|uuid:Error uuid5 = uuid:createType5AsRecord(uuid:NAME_SPACE_DNS, “ballerina.io”);\n```\n\n### 2.5. Nil UUID\n\nThe `nilAsString()` function returns a nil UUID as a string.\n```ballerina\nstring nilUUID = uuid:nilAsString();\n```\n\nThe `nilAsRecord()` function returns a nil UUID as a UUID record.\n```ballerina\nuuid:Uuid nilUUID = uuid:nilAsRecord();\n```\n\n## 3. Checking the Version of UUIDs\nThe `uuid:getVersion()` function detects the [RFC]((https://www.rfc-editor.org/rfc/rfc4122.html)) version of a UUID. This returns an error if the UUID is invalid.\n```ballerina\nuuid:Version|uuid:Error v = uuid:getVersion(\"4397465e-35f9-11eb-adc1-0242ac120002\");\n```\n\n## 4. Validating UUIDs\nThe `uuid:validate()` function validates a UUID.\n```ballerina\nboolean valid = uuid:validate(\"4397465e-35f9-11eb-adc1-0242ac120002\");\n```\n\n## 5. UUID operations\nUUID module supports the conversion of a UUID between 3 data types; `string`, `byte[]`, and `Uuid` record.\n\nThe `toBytes()` function converts a UUID `string` or a `Uuid` record to a `byte[]`. This returns an error if the UUID is invalid.\n```ballerina\nbyte[]|uuid:Error b = uuid:toBytes(“6ec0bd7f-11c0-43da-975e-2aesass0b”);\n```\n\nThe `toString()` function converts a `Uuid` record or a `byte[]` to a UUID `string`. This returns an error if the UUID is invalid.\n```ballerina\nstring|uuid:Error s = uuid:toString([5, 12, 16, 35]);\n```\n\nThe `toRecord()` function converts a UUID `string` or a `byte[]` to a `Uuid` record. This returns an error if the UUID is invalid.\n```ballerina\nuuid:Uuid|uuid:Error r1 = uuid:toRecord(\"4397465e-35f9-11eb-adc1-0242ac120002\");\nuuid:Uuid|uuid:Error r2 = uuid:toRecord([10, 20, 30]);\n```\n"},"__N_SSG":true}