{"pageProps":{"frontmatter":{},"content":"<div class=\"release_notes\">\n<h1>Overview of Ballerina 0.990.3</h1>\n<p>Ballerina 0.990.3 is a release iteration done based on the 0.990 language specification. It includes improvements on standard library modules, extensions, tooling, and language syntax.</p>\n<h1>Compatibility and Support</h1>\n<ul>\n<li>The record <code>rest-fields</code> descriptor should now be followed by a semi colon.</li>\n</ul>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">type Person record {\n    string name;\n    string...;\n};\n</code></pre>\n\n<ul>\n<li>Constrained JSON is no longer supported. The <code>stamp()</code> or <code>convert()</code> methods can be used instead depending on the requirement.</li>\n<li>Binary integer literals are no longer supported.</li>\n<li>Use of <code>var</code> in the left hand side, with iterable operations ending with <code>map()</code> or <code>filter()</code> operations is disallowed.</li>\n</ul>\n<pre class=\"line-numbers language-ballerina\"><code class=\"language-ballerina\">int[] numbers = [-5, -3, 2, 7, 12];\n\n// The following now results in a compilation error.\nvar filtered = numbers.filter(function (int i) returns boolean {\n    return i &gt;= 0;\n});\n</code></pre>\n\n<h1>Improvements</h1>\n<h2>Language &amp; Runtime</h2>\n<p>In Ballerina, floating point types (<code>float</code> and <code>decimal</code>) adheres to the IEEE754-2008 standard. Hence, floating point types accommodate NaN and Infinity concepts. Now, along with the <code>float</code> type, <code>decimal</code> type also supports NaN and Infinity concepts.</p>\n<p>Dividing a number by zero will no longer result in a panic situation. Rather, it will result in infinity(+/-) for all non-zero real numbers and NaN. Now, in addition to this, the <code>decimal</code> type supports three built-in functions namely <code>isNaN()</code>, <code>isInfinite()</code>, and <code>inFinite()</code> to check whether a given number is NaN, Infinity, or a finite number.</p>\n<h2>Standard Library</h2>\n<ul>\n<li>Now, the type <code>time:Time</code>, which represents an instance of time with the associated timezone is a <code>record type</code> (not an <code>object type</code>). Member functions of the previous <code>time:Time</code> object are now provided as utility functions.</li>\n<li>Support for using the <code>optional</code> configuration for client authentication in SSL.</li>\n<li>The SimpleDurableTopicSubscriber, SimpleQueueReceiver, SimpleQueueSender, SimpleTopicPublisher, and SimpleTopicSubscriber were removed from the JMS API. The initialization API of the TopicPublisher, TopicSubscriber, DurableTopicSubscriber, QueueReceiver, and QueueSender has been modified to support all simple use cases as well.</li>\n<li>Support on WebSub Hub persistence.</li>\n<li>Basic auth support for WebSub Hub.</li>\n<li>Ballerina <code>crypto</code> standard library is reorganized to enhance the extensibility of the library and to increase reusability across other standard libraries.</li>\n<li>Now, the <code>crypto</code> standard library provides RSA-signing capabilities in addition to hashing operations, HMAC generation, and CRC32B checksum generation.</li>\n<li>Instead of returning Hex encoded <code>string</code> values, crypto operations now return <code>byte[]</code> (byte array). This allows users to consume raw bytes as well as to use the newly added <code>encoding</code> standard library, to get string values encoded using different encoding algorithms.</li>\n<li>Also, the <code>crypto</code> standard library now provides the <code>crypto:KeyStore</code>, <code>crypto:PrivateKey</code>, and  <code>crypto:PublicKey</code> records. These are usable across other standard libraries to represent key stores, private keys, and public keys.</li>\n<li>Ballerina <code>encoding</code> standard library provides functions to perform the following:</li>\n<li>Encode <code>byte[]</code> (byte arrays) to <code>string</code> using different encoding algorithms.</li>\n<li>Decode <code>string</code> values into <code>byte[]</code> (byte array) using different decoding algorithms.</li>\n<li>The <code>byteArrayToString</code> function that can be used to encode <code>byte[]</code> into a <code>string</code> using a selected character encoding.</li>\n</ul>\n<h2>IDEs &amp; Language Server</h2>\n<ul>\n<li>Update LSP version to v3.13.0.</li>\n<li>Markup Content Support on Signature Help, Hover Provider, and Completion.</li>\n<li>Code Lens support.</li>\n</ul>\n<h3>IDEA Plugin</h3>\n<ul>\n<li>Ballerina code folding support.</li>\n<li>Spell-checking support.</li>\n<li>Improved Signature Help.</li>\n<li>Minor bug fixes and improvements.</li>\n</ul>\n<h2>Compiler Extensions</h2>\n<ul>\n<li>Support on AWS Lambda functions.</li>\n</ul>\n<h1>Performance Results</h1>\n<p>Refer Ballerina <a href=\"https://github.com/ballerina-platform/ballerina-lang/blob/v0.990.3/performance/benchmarks/summary.md\">performance test results</a> available in the repository.</p>\n<h1>Bug Fixes</h1>\n<p>Refer <a href=\"https://github.com/ballerina-platform/ballerina-lang/issues?q=is%3Aissue+milestone%3A0.990.3+is%3Aclosed+label%3AType%2FBug\">Github milestone issues</a> to view bug fixes.</p>\n<h1>Getting Started</h1>\n<p>You can download the Ballerina distributions, try samples, and read the documentation at https://ballerina.io. You can also visit the <a href=\"https://ballerina.io/learn/quick-tour/\">Quick Tour</a> to get started.</p>\n<p>We encourage you to report issues, improvements, and suggestions at the <a href=\"https://github.com/ballerina-platform/ballerina-lang\">Ballerina Github Repository</a>.</p>\n</div>","id":"0.990.3"},"__N_SSG":true}