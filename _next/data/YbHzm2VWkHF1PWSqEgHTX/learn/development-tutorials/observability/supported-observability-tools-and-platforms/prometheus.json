{"pageProps":{"frontmatter":{"title":"Observe metrics using Prometheus","description":"See how Ballerina supports observability by exposing itself via metrics to Prometheus.","keywords":"ballerina, observability, metrics, prometheus","permalink":"/learn/supported-observability-tools-and-platforms/prometheus/","active":"prometheus","intro":"Ballerina provides metrics compatible with [Prometheus](https://prometheus.io), which is widely used worldwide to monitor open-source systems."},"content":"\nThe sample [shop service](/learn/overview-of-ballerina-observability/#example-observe-a-ballerina-service) will be used in this guide. Follow the steps given below to observe Ballerina metrics in Prometheus.\n\n## Step 1 - Set up Prometheus\nPrometheus is used as the monitoring system, which pulls out the metrics collected from the Ballerina `/metrics` service. This section focuses on the quick installation of Prometheus with Docker and the configuration required to collect metrics from the Ballerina service with the default configurations. Follow the steps below to configure Prometheus. \n\n>**Tip:** There are many other ways to install Prometheus and you can find possible options from the <a href=\"https://prometheus.io/docs/prometheus/latest/installation/\" target=\"_blank\">installation guide</a>.\n> The easiest option is to use precompiled binaries listed in <a href=\"https://prometheus.io/download/\" target=\"_blank\">Downloads</a>.\n\n1. Create a `prometheus.yml` file in a directory.\n\n2. Add the following content to the `prometheus.yml` file.\n\n    ```yaml\n    global:\n      scrape_interval:     15s\n      evaluation_interval: 15s\n    \n    scrape_configs:\n      - job_name: 'prometheus'\n        static_configs:\n          - targets: ['a.b.c.d:9797']\n    ```\n\n    Here, the `'a.b.c.d:9797'` targets should contain the host and port of the `/metrics` service that is exposed from \n    Ballerina for metrics collection. Add the IP of the host in which the Ballerina service is running as `a.b.c.d` and its\n    port (default `9797`).\n    If you need more information, go to the <a href=\"https://prometheus.io/docs/introduction/first_steps/\" target=\"_blank\">Prometheus documentation</a>.\n    If your Ballerina service is running on localhost and Prometheus in a Docker container,\n    add the target as `host.docker.internal:9797` to access the localhost from Docker.\n\n3.  Start the Prometheus server in a Docker container with the command below.\n\n    ```\n    $ docker run -p 9090:9090 -v <path_to_prometheus.yml>:/etc/prometheus/ prom/prometheus\n    ```\n\n## Step 2 - Import Ballerina Prometheus extension\n\nTo include the Prometheus extension into the executable, the `ballerinax/prometheus` module needs to be imported into your Ballerina project `main.bal` file.\n\n```ballerina\nimport ballerinax/prometheus as _;\n```\n\nTo support Prometheus as the metrics reporter, an HTTP endpoint starts with the context of `/metrics` in the default port `9797` when starting the Ballerina service.\n\n## Step 3 - Configure Ballerina runtime configurations\nYou can set up Prometheus for your Ballerina project using configurations similar to the following in your `Config.toml` file.\n\n```toml\n[ballerina.observe]\nmetricsEnabled=true\nmetricsReporter=\"prometheus\"\n\n[ballerinax.prometheus]\nport=9797\nhost=\"0.0.0.0\"\n```\n\nConfiguration key | Description | Default value | Possible values \n--- | --- | --- | --- \n`ballerinax.prometheus.port` | The value of the port to which the '/metrics' service will bind. This service will be used by Prometheus to scrape the information of the Ballerina service. | `9797` | Any suitable value for port 0 - 0 - 65535. However, within that range, ports `0` - `1023` are generally reserved for specific purposes. Therefore, it is advisable to select a port outside that range. \n`ballerinax.prometheus.host` | The name of the host to which the '/metrics' service will bind. This service will be used by Prometheus to scrape the information of the Ballerina service. | `0.0.0.0` | IP or Hostname or `0.0.0.0` of the node in which the Ballerina service is running.\n\n## Step 4 - Run the Ballerina service\n\nWhen Ballerina observability is enabled, the Ballerina runtime exposes internal metrics via an HTTP endpoint (`/metrics`) for metrics monitoring, and the metrics will be published to Prometheus. Prometheus should be configured to scrape metrics from the metrics HTTP endpoint in Ballerina.\n\nRun the following command to start the Ballerina service.\n\n```\n$ bal run\n\nCompiling source\n\nRunning executable\n\nballerina: started Prometheus HTTP listener 0.0.0.0:9797\n```\n\n## Step 5 - Send requests\n \nSend requests to <http://localhost:8090/shop/products>.\n\nExample cURL commands:\n\n```\n$ curl -X GET http://localhost:8090/shop/products\n```\n```\n$ curl -X POST http://localhost:8090/shop/product \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"id\": 4, \n    \"name\": \"Laptop Charger\", \n    \"price\": 50.00\n}'\n```\n```\n$ curl -X POST http://localhost:8090/shop/order \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"productId\": 1, \n    \"quantity\": 1\n}'\n```\n```\n$ curl -X GET http://localhost:8090/shop/order/0\n```\n\n## Step 6 - View metrics on the Prometheus server\n\nGo to <http://localhost:19090/> and check whether you can see the Prometheus graph.\nBallerina metrics should appear in the Prometheus graph's metrics list when the Ballerina service is started.\n\n![Ballerina metrics listed in Prometheus](/learn/images/ballerina-metrics-listed-in-prometheus.png \"Ballerina metrics listed in Prometheus\")\n\n![Ballerina metric in graph format](/learn/images/ballerina-metrics-in-graph.png \"Ballerina metric in graph format\")\n\nYou can also use the following command to get the metrics.\n\n```\n$ curl http://localhost:9797/metrics\n```\n\n## Set up Grafana\n\n[Grafana](https://grafana.com/) can be used to visualize Ballerina metrics provided for Prometheus. First, users need to set up the Ballerina project to observe metrics in Prometheus and follow the steps mentioned above.\n\nLetâ€™s use Grafana to visualize metrics in a dashboard. For this, we need to install Grafana and configure Prometheus as a data source. Follow the steps below to configure Grafana.\n\n1. Start Grafana as a Docker container with the command below.\n\n    ```\n    $ docker run -d --name=grafana -p 3000:3000 grafana/grafana\n    ```\n    For more information, go to <a href=\"https://hub.docker.com/r/grafana/grafana/\" target=\"_blank\">Grafana in Docker Hub</a>.\n\n2. Go to <http://localhost:3000/> to access the Grafana dashboard running on Docker.\n\n3. Login to the dashboard with the default user, username: `admin` and password: `admin`\n\n4. Add Prometheus as a data source with the `Browser` access configuration as provided below.\n\n    ![Grafana Prometheus data source](/learn/images/grafana-prometheus-datasource.png \"Grafana Prometheus data source\")\n\n5. Import the Grafana dashboard designed to visualize Ballerina metrics from <a href=\"https://grafana.com/dashboards/5841\" target=\"_blank\">https://grafana.com/dashboards/5841</a> as shown below.\n    ![Import dashboard for Ballerina](/learn/images/grafana-import-dashboard.png \"Import dashboard For Ballerina\")\n\nThis dashboard consists of service and client invocation level metrics in near real-time view. \n\nThe Ballerina HTTP service metrics dashboard panel will be as shown below.\n\n![Ballerina metrics dashboard](/learn/images/grafana-ballerina-metrics-dashboard.png \"Ballerina metrics dashboard\")\n","id":"prometheus","sub":"observability","third":"supported-observability-tools-and-platforms","slug":"observability/supported-observability-tools-and-platforms/prometheus","codes":"[[-2008389372,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">global</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  scrape_interval</span><span style=\\\"color:#24292E\\\">:     </span><span style=\\\"color:#032F62\\\">15s</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">  evaluation_interval</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">15s</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">scrape_configs</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">  - </span><span style=\\\"color:#22863A\\\">job_name</span><span style=\\\"color:#24292E\\\">: </span><span style=\\\"color:#032F62\\\">'prometheus'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A\\\">    static_configs</span><span style=\\\"color:#24292E\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">      - </span><span style=\\\"color:#22863A\\\">targets</span><span style=\\\"color:#24292E\\\">: [</span><span style=\\\"color:#032F62\\\">'a.b.c.d:9797'</span><span style=\\\"color:#24292E\\\">]</span></span></code></pre>\"],[-845515808,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/prometheus </span><span style=\\\"color:#D73A49\\\">as</span><span style=\\\"color:#24292E\\\"> _;</span></span></code></pre>\"],[-397928631,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">observe</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsEnabled=</span><span style=\\\"color:#005CC5\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">metricsReporter=</span><span style=\\\"color:#032F62\\\">\\\"prometheus\\\"</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerinax</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">prometheus</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">port=</span><span style=\\\"color:#005CC5\\\">9797</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">host=</span><span style=\\\"color:#032F62\\\">\\\"0.0.0.0\\\"</span></span></code></pre>\"]]"},"__N_SSG":true}