{"pageProps":{"tagline":"Reduce message volume and send across the system without losing message content","desc":"Claim Check will store messages in a persistent storage and send a claim to another application to access the origin stored message.","category":"Message Transformation","index":39,"helps":"Ballerina supports the persistent storage of messages. Popular storage technologies such as SQL, AWS S3, and Redis are available as Ballerina packages.","tags":["Claim Check","Content Enricher","Content Filter"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/StoreInLibrary.html","files":["claim-check-consumer.bal","claim-check-producer.bal"],"content":[{"headerCode":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerinax/kafka;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> ScanResult</span><span style=\"color:#24292E\"> [</span><span style=\"color:#005CC5\">string</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">string</span><span style=\"color:#24292E\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client awsS3Client </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#032F62\">\"http://bucket.s3.amazonaws.com.balmock,io\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client firebaseClient </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#032F62\">\"http://api.mriresults.firebase.com.balmock.io\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> kafka</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Consumer kafkaConsumer </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">kafka</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">DEFAULT_URL, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    groupId</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"mri-scan-group\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    topics</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [</span><span style=\"color:#032F62\">\"topic-mri-scan\"</span><span style=\"color:#24292E\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">});</span></span>\n<span class=\"line\"></span></code></pre>","mainCode":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    while</span><span style=\"color:#D73A49\"> true</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ScanResult[] mriScanResults </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> kafkaConsumer</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">pollPayload</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">1</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        foreach </span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> [scanId, patientId] </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> mriScanResults {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Response s3Response </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> awsS3Client</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">mri\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#24292E\">scans</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">[scanId].</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">            string</span><span style=\"color:#24292E\"> mriScanResult </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> analyzeMriScan</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">check</span><span style=\"color:#24292E\"> s3Response.</span><span style=\"color:#6F42C1\">getByteStream</span><span style=\"color:#24292E\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> firebaseClient</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">mri</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">[scanId]</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">reports\\.json.</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">({mriScanResult, patientId}, </span><span style=\"color:#E36209\">targetType</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#005CC5\"> json</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">isolated</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> analyzeMriScan</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">stream&#x3C;</span><span style=\"color:#005CC5\">byte</span><span style=\"color:#24292E\">[], </span><span style=\"color:#E36209\">io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Error?</span><span style=\"color:#D73A49\">></span><span style=\"color:#E36209\"> fileByteStream</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // logic to analyze the MRI scan</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    return</span><span style=\"color:#032F62\"> \"No Abnormalities Detected\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>","raw":"import ballerina/http;\nimport ballerina/io;\nimport ballerinax/kafka;\n\ntype ScanResult [string, string];\n\nfinal http:Client awsS3Client = check new (\"http://bucket.s3.amazonaws.com.balmock,io\");\nfinal http:Client firebaseClient = check new (\"http://api.mriresults.firebase.com.balmock.io\");\nfinal kafka:Consumer kafkaConsumer = check new (kafka:DEFAULT_URL, {\n    groupId: \"mri-scan-group\",\n    topics: [\"topic-mri-scan\"]\n});\n\npublic function main() returns error? {\n    while true {\n        ScanResult[] mriScanResults = check kafkaConsumer->pollPayload(1);\n        foreach var [scanId, patientId] in mriScanResults {\n            http:Response s3Response = check awsS3Client->/mri\\-scans/[scanId].get();\n            string mriScanResult = analyzeMriScan(check s3Response.getByteStream());\n            _ = check firebaseClient->/mri/[scanId]/reports\\.json.put({mriScanResult, patientId}, targetType = json);\n        }\n    }\n}\n\nisolated function analyzeMriScan(stream<byte[], io:Error?> fileByteStream) returns string {\n    // logic to analyze the MRI scan\n    return \"No Abnormalities Detected\";\n}\n","name":"claim-check-consumer.bal"},{"headerCode":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/io;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/mime;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/uuid;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerinax/kafka;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client awsS3Client </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#032F62\">\"http://bucket.s3.amazonaws.com.balmock,io\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> kafka</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Producer kafkaProducer </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">kafka</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">DEFAULT_URL);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> ScanRequest</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> patientId;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    stream&#x3C;</span><span style=\"color:#005CC5\">byte</span><span style=\"color:#24292E\">[], io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Error?</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> fileByteStream;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span></code></pre>","mainCode":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#6F42C1\"> /api/v1</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    isolated</span><span style=\"color:#D73A49\"> resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> scans</span><span style=\"color:#24292E\">/mri(</span><span style=\"color:#E36209\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Request request) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        ScanRequest {patientId, fileByteStream} </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#6F42C1\"> scanRequestFromMultipart</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">request</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> claimCheckId </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> uuid</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">createType1AsString</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> fileName </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `${</span><span style=\"color:#24292E\">claimCheckId</span><span style=\"color:#032F62\">}.dicom`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Request s3ObjectCreationRequest </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        s3ObjectCreationRequest.</span><span style=\"color:#6F42C1\">setByteStream</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">fileByteStream</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> awsS3Client</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">mri\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#24292E\">scans</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">[fileName].</span><span style=\"color:#6F42C1\">put</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">s3ObjectCreationRequest</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">targetType</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Response);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E\">        _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> kafkaProducer</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">send</span><span style=\"color:#24292E\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            topic</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"topic-mri-scan\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            value</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> [fileName, patientId]</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        });</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">isolated</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> scanRequestFromMultipart</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Request request) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> ScanRequest</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    mime</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Entity[] bodyParts </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> request.</span><span style=\"color:#6F42C1\">getBodyParts</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\">? patientId </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> ();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    stream&#x3C;</span><span style=\"color:#005CC5\">byte</span><span style=\"color:#24292E\">[], io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Error?</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\">? fileByteStream </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> ();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    foreach </span><span style=\"color:#24292E\">mime</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Entity bodyPart </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> bodyParts {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> partName </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> bodyPart.</span><span style=\"color:#6F42C1\">getContentDisposition</span><span style=\"color:#24292E\">().name;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> partName </span><span style=\"color:#D73A49\">==</span><span style=\"color:#032F62\"> \"patientId\"</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            patientId </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> bodyPart.</span><span style=\"color:#6F42C1\">getText</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        } </span><span style=\"color:#D73A49\">else</span><span style=\"color:#D73A49\"> if</span><span style=\"color:#24292E\"> partName </span><span style=\"color:#D73A49\">==</span><span style=\"color:#032F62\"> \"file\"</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            fileByteStream </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> bodyPart.</span><span style=\"color:#6F42C1\">getByteStream</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    if</span><span style=\"color:#24292E\"> patientId </span><span style=\"color:#D73A49\">==</span><span style=\"color:#24292E\"> () </span><span style=\"color:#D73A49\">||</span><span style=\"color:#24292E\"> fileByteStream </span><span style=\"color:#D73A49\">==</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"Multipart request should contains both patientId and file parts\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    return</span><span style=\"color:#24292E\"> {fileByteStream, patientId};</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>","raw":"import ballerina/http;\nimport ballerina/io;\nimport ballerina/mime;\nimport ballerina/uuid;\nimport ballerinax/kafka;\n\nfinal http:Client awsS3Client = check new (\"http://bucket.s3.amazonaws.com.balmock,io\");\nfinal kafka:Producer kafkaProducer = check new (kafka:DEFAULT_URL);\n\ntype ScanRequest record {|\n    string patientId;\n    stream<byte[], io:Error?> fileByteStream;\n|};\n\nservice /api/v1 on new http:Listener(8080) {\n\n    isolated resource function post scans/mri(http:Request request) returns error? {\n        ScanRequest {patientId, fileByteStream} = check scanRequestFromMultipart(request);\n\n        string claimCheckId = uuid:createType1AsString();\n        string fileName = string `${claimCheckId}.dicom`;\n\n        http:Request s3ObjectCreationRequest = new;\n        s3ObjectCreationRequest.setByteStream(fileByteStream);\n        _ = check awsS3Client->/mri\\-scans/[fileName].put(s3ObjectCreationRequest, targetType = http:Response);\n\n        _ = check kafkaProducer->send({\n            topic: \"topic-mri-scan\",\n            value: [fileName, patientId]\n        });\n    }\n}\n\nisolated function scanRequestFromMultipart(http:Request request) returns ScanRequest|error {\n    mime:Entity[] bodyParts = check request.getBodyParts();\n    string? patientId = ();\n    stream<byte[], io:Error?>? fileByteStream = ();\n    foreach mime:Entity bodyPart in bodyParts {\n        string partName = bodyPart.getContentDisposition().name;\n        if partName == \"patientId\" {\n            patientId = check bodyPart.getText();\n        } else if partName == \"file\" {\n            fileByteStream = check bodyPart.getByteStream();\n        }\n    }\n    if patientId == () || fileByteStream == () {\n        return error(\"Multipart request should contains both patientId and file parts\");\n    }\n    return {fileByteStream, patientId};\n}\n","name":"claim-check-producer.bal"}],"name":" Claim Check"},"__N_SSG":true}