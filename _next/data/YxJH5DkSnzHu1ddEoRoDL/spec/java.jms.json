{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina `java.jms` Library\n\n_Owners_: @shafreenAnfar @ayeshLK \\\n_Reviewers_: @shafreenAnfar \\\n_Created_: 2023/08/15 \\\n_Updated_: 2024/02/02 \\\n_Edition_: Swan Lake \n\n## Introduction  \n\nThis is the specification for the `java.jms` standard library of [Ballerina language](https://ballerina.io/), which provides the \nfunctionality to send and receive messages by connecting to a JMS provider. \n\nThe `java.jms` library specification has evolved and may continue to evolve in the future. The released versions of the \nspecification can be found under the relevant GitHub tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a GitHub issue or in the Discord \nserver. Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback \nis always welcome. Any accepted proposal which affects the specification is stored under `/docs/proposals`. Proposals \nunder discussion can be found with the label `type/proposal` in Github.\n\nThe conforming implementation of the specification is released to Ballerina Central. Any deviation from the \nspecification is considered a bug.\n\n## Content  \n1. [Overview](#1-overview)\n2. [Connection](#2-connection)\n    * 2.1. [Configuration](#21-configuration)\n    * 2.2. [Initialization](#22-initialization)\n    * 2.3. [Functions](#23-functions)\n3. [Session](#3-session)\n    * 3.1. [Configuration](#31-configuration)\n    * 3.2. [Functions](#32-functions)\n4. [Message](#4-message)\n5. [Message producer](#5-message-producer)\n   * 5.1. [Functions](#51-functions)\n6. [Message consumer](#6-message-consumer)\n   * 6.1. [Functions](#61-functions)\n7. [Message listener](#7-message-listener)\n   * 7.1. [Configuration](#71-configuration)\n   * 7.2. [Initialization](#72-initialization)\n   * 7.3. [Functions](#73-functions)\n   * 7.4. [Caller](#74-caller)\n     * 7.4.1. [Functions](#741-functions)\n   * 7.5. [Usage](#75-usage)\n\n## 1. Overview  \n\nJava Message Service (JMS) is a Java-based API that provides a standardized way for applications to create, send, \nreceive, and consume messages in a loosely coupled, reliable, and asynchronous manner. JMS is part of the Java EE \n(Enterprise Edition) specification and is commonly used for building distributed, decoupled, and scalable applications \nthat need to exchange information or events between different components. This specification elaborates on the usage of \nJMS connection, session, message producer, and message consumer. These clients allow the writing of distributed applications \nand microservices that read, write, and process messages using a JMS provider. \n\nBallerina `java.jms` provides several core apis:\n- `jms:Connection` - represents a communication link between JMS client and JMS provider.\n- `jms:Session` - represents a single-threaded context for producing and consuming messages.\n- `jms:MessageProducer` - used to send messages to a specific destination (queue or a topic) within the JMS session.\n- `jms:MessageConsumer` - used to receive messages from a specific destination (queue or a topic) within the JMS session.\n- `jms:Listener` - used to receive messages from a specific destination (queue or a topic) in an asynchronous manner.\n\n## 2. Connection\n\nA JMS connection represents a communication link between a JMS client and a JMS provider (typically a messaging broker). \nIt's established using a JMS connection factory. The connection manages underlying resources, such as network \nconnections, and provides a context for creating JMS sessions.\n\n### 2.1. Configuration\n\nWhen initializing a `jms:Connection`, the following configurations can be provided.\n```ballerina\n# Configurations related to a JMS connection.\n#\n# + initialContextFactory - JMS provider-specific inital context factory\n# + providerUrl - JMS provider specific provider URL used to configure a connection\n# + connectionFactoryName - JMS connection factory to be used in creating JMS connections\n# + username - Username for the JMS connection\n# + password - Password for the JMS connection\n# + properties - Additional properties use in initializing the initial context\npublic type ConnectionConfiguration record {|\n    string initialContextFactory;\n    string providerUrl;\n    string connectionFactoryName = \"ConnectionFactory\";\n    string username?;\n    string password?;\n    map<string> properties = {};\n|};\n```\n\n### 2.2. Initialization\n\nThe `jms:Connection` can be initialized by providing the `jms:ConnectionConfiguration`.\n```ballerina\n# Initialize and starts a JMS connection.\n# ```\n# jms:Connection connection = check new (\n#   initialContextFactory = \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\",\n#   providerUrl = \"tcp://localhost:61616\"\n# );\n# ```\n#\n# + connectionConfig - The configurations to be used when initializing the JMS connection\n# + return - The `jms:Connection` or an `jms:Error` if the initialization failed\npublic isolated function init(*jms:ConnectionConfiguration connectionConfig) returns jms:Error?;\n```\n\n### 2.3. Functions\n\nTo start (or restart) a connection's delivery of incoming messages for a connection, the `'start` function can be used.\n```ballerina\n# Starts (or restarts) a connection's delivery of incoming messages.\n# A call to start on a connection that has already been started is ignored.\n# ```\n# check connection->'start()\n# ```\n#\n# + return - A `jms:Error` if there is an error while starting the connection\nisolated remote function 'start() returns jms:Error?;\n```\n\nTo temporarily stop the connection's delivery of incoming messages for a connection, the `stop` function can be used.\n```ballerina\n# Temporarily stops a connection's delivery of incoming messages.\n# Delivery can be restarted using the connection's start method.\n# ```\n# check connection->stop();\n# ```\n#\n# + return - A `jms:Error` if there is an error while stopping the connection\nisolated remote function stop() returns jms:Error?;\n```\n\nTo close the JMS connection, the `close` function can be used.\n```ballerina\n# Closes the connection.\n# ```\n# check connection->close();\n# ```\n#\n# + return - A `jms:Error` if threre is an error while closing the connection\nisolated remote function close() returns jms:Error?;\n```\n\nTo initialize a new `jms:Session`, the `createSession` function can be used.\n```ballerina\n# Defines the JMS session acknowledgement modes.\npublic enum AcknowledgementMode {\n    # Indicates that the session will use a local transaction which may subsequently \n    # be committed or rolled back by calling the session's `commit` or `rollback` methods. \n    SESSION_TRANSACTED = \"SESSION_TRANSACTED\",\n    # Indicates that the session automatically acknowledges a client's receipt of a message \n    # either when the session has successfully returned from a call to `receive` or when \n    # the message listener the session has called to process the message successfully returns.\n    AUTO_ACKNOWLEDGE = \"AUTO_ACKNOWLEDGE\",\n    # Indicates that the client acknowledges a consumed message by calling the \n    # MessageConsumer's or Caller's `acknowledge` method. Acknowledging a consumed message \n    # acknowledges all messages that the session has consumed.\n    CLIENT_ACKNOWLEDGE = \"CLIENT_ACKNOWLEDGE\",\n    # Indicates that the session lazily acknowledges the delivery of messages. \n    # This is likely to result in the delivery of some duplicate messages if the JMS provider fails, \n    # so it should only be used by consumers that can tolerate duplicate messages. \n    # Use of this mode can reduce session overhead by minimizing the work the session does to prevent duplicates.\n    DUPS_OK_ACKNOWLEDGE = \"DUPS_OK_ACKNOWLEDGE\"\n}\n\n# Create a Session object, specifying transacted and acknowledgeMode.\n# ```\n# jms:Session session = check connection->createSession();\n# ```\n#\n# + ackMode - Configuration indicating how messages received by the session will be acknowledged\n# + return - Returns the Session or an error if it fails.\nisolated remote function createSession(AcknowledgementMode ackMode = AUTO_ACKNOWLEDGE) returns jms:Session|jms:Error;\n```\n\n## 3. Session\n\nA JMS session is a single-threaded context for producing and consuming messages. It's created from a JMS connection and \nprovides the environment in which messages are sent and received. Sessions can be transactional or non-transactional. \nIn a transactional session, multiple messages can be sent or received as part of a single transaction, and the \ntransaction is committed or rolled back at the end. Non-transactional sessions handle messages one at a time without \ninvolving transactions.\n\n### 3.1. Configuration\n\n`jms:Destination` record corresponds to a JMS destination.\n```ballerina\n# Represent the JMS destination.\n#\n# + 'type - JMS destination types  \n# + name - Name of the destination\npublic type Destination readonly & record {|\n    DestinationType 'type;\n    string name?;\n|};\n\n# Defines the supported JMS destination types.\npublic enum DestinationType {\n    # Represents JMS Queue\n    QUEUE = \"QUEUE\", \n    # Represents JMS Temporary Queue\n    TEMPORARY_QUEUE = \"TEMPORARY_QUEUE\", \n    # Represents JMS Topic\n    TOPIC = \"TOPIC\", \n    # Represents JMS Temporary Topic\n    TEMPORARY_TOPIC = \"TEMPORARY_TOPIC\"\n}\n```\n\n`jms:ConsumerOptions` record corresponds to the configurations related to a JMS message consumer.\n```ballerina\n# Defines the supported JMS message consumer types.\npublic enum ConsumerType {\n    # Represents JMS durable subscriber\n    DURABLE = \"DURABLE\", \n    # Represents JMS shared consumer\n    SHARED = \"SHARED\", \n    # Represents JMS shared durable subscriber\n    SHARED_DURABLE = \"SHARED_DURABLE\", \n    # Represents JMS default consumer\n    DEFAULT = \"DEFAULT\"\n}\n\n# Message consumer listener configurations.\n#\n# + type - Message consumer type\n# + destination - Name of the JMS destination\n# + messageSelector - only messages with properties matching the message selector expression are added to the durable subscription. \n#                     An empty string indicates that there is no message selector for the durable subscription.\n# + noLocal - if true then any messages published to the topic using this session's connection, or any other connection \n#             with the same client identifier, will not be added to the durable subscription.\n# + subscriberName - the name used to identify the subscription \npublic type ConsumerOptions record {|\n    jms:ConsumerType 'type = DEFAULT;\n    jms:Destination destination;\n    string messageSelector = \"\";\n    boolean noLocal = false;\n    string subscriberName?;\n|};\n```\n\n### 3.2. Functions\n\nTo unsubscribe a durable subscription that has been created by the JMS session, `unsubscribe` function can be used.\n```ballerina\n# Unsubscribe a durable subscription that has been created by this session.\n# It is erroneous for a client to delete a durable subscription while there is an active (not closed) consumer\n# for the subscription, or while a consumed message is part of a pending transaction or has not been\n# acknowledged in the session.\n# ```\n# check session->unsubscribe(\"subscription-1\");\n# ```\n#\n# + subscriptionId - The name, which is used to identify the subscription\n# + return - A `jms:Error` if there is an error or else `()`\nisolated remote function unsubscribe(string subscriptionId) returns jms:Error?;\n```\n\nTo create a new `jms:MessageProducer` using the JMS session, `createProducer` function can be used.\n```ballerina\n# Creates a MessageProducer to send messages to the specified destination.\n# ```\n# jms:MessageProducer producer = check session.createProducer({\n#   'type: jms:QUEUE,\n#   name: \"test-queue\"\n# });\n# ```\n#\n# + destination - The Destination to send to, or nil if this is a producer which does not have a specified destination\n# + return - Returns `jms:MessageProducer` or `jms:Error` if there is an error\npublic isolated function createProducer(jms:Destination? destination = ()) returns jms:MessageProducer|jms:Error;\n```\n\nTo create a new `jms:MessageConsumer` using the JMS session, `createConsumer` function can be used.\n```ballerina\n# Creates a MessageConsumer for the specified destination.\n# ```\n# jms:MessageConsumer consumer = check session.createConsumer(destination = {\n#   'type: jms:QUEUE,\n#   name: \"test-queue\"\n# });\n# ```\n#\n# + consumerOptions - The relevant consumer configurations\n# + return - Returns a `jms:MessageConsumer` or else `jms:Error` if there is an error\npublic isolated function createConsumer(*jms:ConsumerOptions consumerOptions) returns jms:MessageConsumer|jms:Error;\n```\n\nTo commit all the messages sent/received in this transaction and release any locks currently held, `'commit` function \ncan be used.\n```ballerina\n# Commits all messages sent/received in this transaction and releases any locks currently held.\n# ```\n# check session->'commit();\n# ```\n# \n# + return - A `jms:Error` if there is an error or else `()`\nisolated remote function 'commit() returns jms:Error?;\n```\n\nTo rollback all the messages sent/received in this transaction and release any locks currently held, `'rollback` \nfunction can be used.\n```ballerina\n# Rolls back any messages sent/received in this transaction and releases any locks currently held.\n# ```\n# check session->'rollback();\n# ```\n# \n# + return - A `jms:Error` if there is an error or else `()`\nisolated remote function 'rollback() returns jms:Error?;\n```\n\nTo close the current JMS session, `close` function can be used.\n```ballerina\n# Closes the current JMS session.\n# ```ballerina\n# check session->close();\n# ```\n# \n# + return - A `jms:Error` if there is an error or else `()`\nisolated remote function close() returns jms:Error?;\n```\n\n## 4. Message\n\nA JMS message is a unit of data representing information that is exchanged between components using the Java Message \nService (JMS) API. Messages can contain various types of data, such as text, binary data, maps, and objects. \nBallerina `java.jms` library supports messages of type text, binary data, and maps.\n```ballerina\n# Represent the JMS Message used to send and receive content from the a JMS provider.\n#\n# + messageId - Unique identifier for a JMS message  \n# + timestamp - Time a message was handed off to a provider to be sent \n# + correlationId - Id which can be used to correlate multiple messages \n# + replyTo - JMS destination to which a reply to this message should be sent\n# + destination - JMS destination of this message \n# + deliveryMode - Delivery mode of this message  \n# + redelivered - Indication of whether this message is being redelivered\n# + jmsType - Message type identifier supplied by the client when the message was sent  \n# + expiration - Message expiration time  \n# + deliveredTime - The earliest time when a JMS provider may deliver the message to a consumer  \n# + priority - Message priority level  \n# + properties - Additional message properties\npublic type Message record {\n    string messageId?;\n    int timestamp?;\n    string correlationId?;\n    jms:Destination replyTo?;\n    jms:Destination destination?;\n    int deliveryMode?;\n    boolean redelivered?;\n    string jmsType?;\n    int expiration?;\n    int deliveredTime?;\n    int priority?;\n    map<anydata> properties?;\n};\n\n# Represent the JMS Text Message.\n# \n# + content - Message content  \npublic type TextMessage record {|\n    *jms:Message;\n    string content;\n|};\n\n# Represent the JMS Map Message.\n# \n# + content - Message content \npublic type MapMessage record {|\n    *jms:Message;\n    map<anydata> content;\n|};\n\n# Represent the JMS Bytes Message.\n# \n# + content - Message content \npublic type BytesMessage record {|\n    *jms:Message;\n    byte[] content;\n|};\n```\n\n## 5. Message producer\n\nA JMS message producer is responsible for sending messages to a specific destination (queue or topic) within a JMS \nsession.\n\n### 5.1. Functions\n\nTo send a message to the pre-configured default destination of the JMS message producer, `send` function can be used.\n```ballerina\n# Sends a message to the JMS provider.\n# ```\n# check producer->send(message);\n# ```\n#\n# + message - Message to be sent to the JMS provider\n# + return - A `jms:Error` if there is an error or else `()`\nisolated remote function send(jms:Message message) returns jms:Error?;\n```\n\nTo send a message to a given destination, `sendTo` function can be used.\n```ballerina\n# Sends a message to a given destination of the JMS provider.\n# ```\n# check producer->sendTo({ 'type: QUEUE, name: \"test-queue\" }, message);\n# ```\n#\n# + destination - Destination used for the message sender\n# + message - Message to be sent to the JMS provider\n# + return - A `jms:Error` if there is an error or else `()`\nisolated remote function sendTo(jms:Destination destination, jms:Message message) returns jms:Error?;\n```\n\nTo close the message producer, `close` function can be used.\n```ballerina\n# Closes the message producer.\n# ``` \n# check producer->close();\n# ```\n# + return - A `jms:Error` if there is an error or else `()`\nisolated remote function close() returns jms:Error?;\n```\n\n## 6. Message consumer\n\nA JMS message consumer is used to receive messages from a specific destination (queue or topic) within a JMS session. \nIt's created from a JMS session and provides methods to receive messages synchronously.\n\n### 6.1. Functions\n\nTo receive the next message arriving within the specified timeout interval, `receive` function can be used.\n```ballerina\n# Receives the next message that arrives within the specified timeout interval.\n# ```\n# jms:Message message = check consumer->receive(10000);\n# ```\n#\n# + timeoutMillis - Message receive timeout\n# + return - A `jms:JmsMessage` if there is a new message, `()` if there is no new message, \n# or else a `jsm:Error` if there is an error in the execution\nisolated remote function receive(int timeoutMillis = 10000) returns jms:Message|jms:Error?;\n```\n\nTo receive the next message if one is immediately available, `receiveNoWait` function can be used.\n```ballerina\n# Receives the next message if one is immediately available.\n# ```\n# jms:Message? message = check consumer->receiveNoWait();\n# ```\n# \n# + return - A `jms:JmsMessage` if there is a new message, `()` if there is no any new message, \n# or else a `jsm:Error` if there is an error in the execution\nisolated remote function receiveNoWait() returns jms:Message|jms:Error?;\n```\n\nTo mark a JMS message as received, the `acknowledge` function can be used.\n```ballerina\n# Mark a JMS message as received.\n# ```\n# check consumer->acknowledge(message);\n# ```\n#\n# + message - JMS message record\n# + return - A `jms:Error` if there is an error in the execution or else `()`\nisolated remote function acknowledge(jms:Message message) returns jms:Error?;\n```\n\nTo close the JMS consumer, `close` function can be used.\n```ballerina\n# Closes the message consumer.\n# ```\n# check consumer->close();\n# ```\n#\n# + return - A `jms:Error` if there is an error or else `()`\nisolated remote function close() returns jms:Error?;\n```\n\n## 7. Message listener\n\nA JMS message listener is a mechanism for asynchronously receiving messages using event-driven programming. Instead of \nactively polling for messages, you can register a message listener. Upon the arrival of a message at the subscribed \ndestination of the message listener, the callback method of the registered listener is triggered.\n\n### 7.1. Configuration\n\nWhen initializing a `jms:Listener`, the following configurations can be provided.\n```ballerina\n# Message listener configurations.\n#\n# + connectionConfig - Configurations related to the broker connection  \n# + acknowledgementMode - Configuration indicating how messages received by the session will be acknowledged\n# + consumerOptions - Underlying JMS message consumer configurations\npublic type MessageListenerConfigurations record {|\n    ConnectionConfiguration connectionConfig;\n    AcknowledgementMode acknowledgementMode = AUTO_ACKNOWLEDGE;\n    ConsumerOptions consumerOptions;\n|};\n```\n\n### 7.2. Initialization\n\nThe `jms:Listener` can be initialized by providing the `jms:MessageListenerConfigurations`.\n```ballerina\n# Creates a new `jms:Listener`.\n# ```ballerina\n# listener jms:Listener messageListener = check new(\n#   connectionConfig = {\n#       initialContextFactory: \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\",\n#       providerUrl: \"tcp://localhost:61616\"\n#   },\n#   consumerOptions = {\n#       destination: {\n#           'type: jms:QUEUE,\n#           name: \"test-queue\"\n#       }\n#   }\n# );\n# ```\n# \n# + consumerConfig - Underlying JMS consumer configurations\n# + return - The relevant JMS consumer or a `jms:Error` if there is any error\npublic isolated function init(*jms:MessageListenerConfigurations listenerConfig) returns jms:Error?;\n```\n\n### 7.3. Functions\n\nTo attach a service to the listener, `attach` function can be used.\n```ballerina\n# Attaches a message consumer service to a listener.\n# ```\n# check messageListener.attach(jmsService);\n# ```\n# \n# + 'service - The service instance\n# + name - Name of the service\n# + return - A `jms:Error` if there is an error or else `()`\npublic isolated function attach(jms:Service 'service, string[]|string? name = ()) returns jms:Error?;\n```\n\nTo detach a service from the listener, `detach` function can be used.\n```ballerina\n# Detaches a message consumer service from the the listener.\n# ```\n# check messageListener.detach(jmsService);\n# ```\n#\n# + 'service - The service to be detached\n# + return - A `jms:Error` if there is an error or else `()`\npublic isolated function detach(jms:Service 'service) returns jms:Error?;\n```\n\nTo start the listener, `'start` function can be used.\n```ballerina\n# Starts the endpoint.\n# ```\n# check messageListener.'start();\n# ```\n#\n# + return - A `jms:Error` if there is an error or else `()`\npublic isolated function 'start() returns jms:Error?;\n```\n\nTo stop the listener gracefully, `gracefulStop` function can be used.\n```ballerina\n# Stops the JMS listener gracefully.\n# ```\n# check messageListener.gracefulStop();\n# ```\n#\n# + return - A `jms:Error` if there is an error or else `()`\npublic isolated function gracefulStop() returns jms:Error?;\n```\n\nTo stop the listener immediately, `immediateStop` function can be used.\n```ballerina\n# Stops the JMS listener immediately.\n# ```\n# check messageListener.immediateStop();\n# ```\n#\n# + return - A `jms:Error` if there is an error or else `()`\npublic isolated function immediateStop() returns jms:Error?;\n```\n\n### 7.4. Caller\n\nA `jms:Caller` can be used to mark JMS message as received. The caller is used in association with the `jms:Listener`.\n\n#### 7.4.1. Functions\n\nTo mark a JMS message as received, `acknowledge` function can be used.\n```ballerina\n# Mark a JMS message as received.\n# ```\n# check caller->acknowledge(message);\n# ```\n#\n# + message - JMS message record\n# + return - A `jms:Error` if there is an error in the execution or else `()`\nisolated remote function acknowledge(jms:Message message) returns jms:Error?;\n```\n\n### 7.5. Usage\n\nAfter initializing the `jms:Listener` a `jms:Service` must be attached to it.\n```ballerina\nservice jms:Service \"consumer-service\" on messageListener {\n    remote function onMessage(jms:Caller caller, jms:Message message) returns error? {\n        // process results\n    }\n}\n```\n","codeSnippets":"[[-1481279761,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Configurations related to a JMS connection.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">initialContextFactory</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">JMS provider-specific inital context factory</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">providerUrl</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">JMS provider specific provider URL used to configure a connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">connectionFactoryName</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">JMS connection factory to be used in creating JMS connections</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">username</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Username for the JMS connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">password</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Password for the JMS connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">properties</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Additional properties use in initializing the initial context</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ConnectionConfiguration</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> initialContextFactory;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> providerUrl;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> connectionFactoryName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"ConnectionFactory\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> username?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> password?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> properties </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1005766124,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Initialize and starts a JMS connection.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># jms:Connection connection = check new (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   initialContextFactory = \\\"org.apache.activemq.jndi.ActiveMQInitialContextFactory\\\",</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   providerUrl = \\\"tcp://localhost:61616\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># );</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">connectionConfig</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The configurations to be used when initializing the JMS connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The `jms:Connection` or an `jms:Error` if the initialization failed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(*</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ConnectionConfiguration connectionConfig) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[453844990,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Starts (or restarts) a connection's delivery of incoming messages.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># A call to start on a connection that has already been started is ignored.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check connection->'start()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error while starting the connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'start() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1229985638,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Temporarily stops a connection's delivery of incoming messages.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Delivery can be restarted using the connection's start method.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check connection->stop();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error while stopping the connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> stop</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1305721512,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Closes the connection.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check connection->close();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if threre is an error while closing the connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> close</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1250803391,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Defines the JMS session acknowledgement modes.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> enum</span><span style=\\\"color:#6F42C1\\\"> AcknowledgementMode</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Indicates that the session will use a local transaction which may subsequently </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # be committed or rolled back by calling the session's `commit` or `rollback` methods. </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    SESSION_TRANSACTED</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"SESSION_TRANSACTED\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Indicates that the session automatically acknowledges a client's receipt of a message </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # either when the session has successfully returned from a call to `receive` or when </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # the message listener the session has called to process the message successfully returns.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    AUTO_ACKNOWLEDGE</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"AUTO_ACKNOWLEDGE\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Indicates that the client acknowledges a consumed message by calling the </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # MessageConsumer's or Caller's `acknowledge` method. Acknowledging a consumed message </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # acknowledges all messages that the session has consumed.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    CLIENT_ACKNOWLEDGE</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"CLIENT_ACKNOWLEDGE\\\"</span><span style=\\\"color:#24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Indicates that the session lazily acknowledges the delivery of messages. </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # This is likely to result in the delivery of some duplicate messages if the JMS provider fails, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # so it should only be used by consumers that can tolerate duplicate messages. </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Use of this mode can reduce session overhead by minimizing the work the session does to prevent duplicates.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    DUPS_OK_ACKNOWLEDGE</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"DUPS_OK_ACKNOWLEDGE\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Create a Session object, specifying transacted and acknowledgeMode.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># jms:Session session = check connection->createSession();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">ackMode</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Configuration indicating how messages received by the session will be acknowledged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Returns the Session or an error if it fails.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> createSession</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">AcknowledgementMode</span><span style=\\\"color:#E36209\\\"> ackMode</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#E36209\\\"> AUTO_ACKNOWLEDGE</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Session</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">jms:Error;</span></span></code></pre>\"],[768612457,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represent the JMS destination.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">'type</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">JMS destination types  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Name of the destination</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Destination</span><span style=\\\"color:#D73A49\\\"> readonly</span><span style=\\\"color:#D73A49\\\"> &#x26;</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    DestinationType 'type;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Defines the supported JMS destination types.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> enum</span><span style=\\\"color:#6F42C1\\\"> DestinationType</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Represents JMS Queue</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    QUEUE</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"QUEUE\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Represents JMS Temporary Queue</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    TEMPORARY_QUEUE</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"TEMPORARY_QUEUE\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Represents JMS Topic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    TOPIC</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"TOPIC\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Represents JMS Temporary Topic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    TEMPORARY_TOPIC</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"TEMPORARY_TOPIC\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-12237862,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Defines the supported JMS message consumer types.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> enum</span><span style=\\\"color:#6F42C1\\\"> ConsumerType</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Represents JMS durable subscriber</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    DURABLE</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"DURABLE\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Represents JMS shared consumer</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    SHARED</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"SHARED\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Represents JMS shared durable subscriber</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    SHARED_DURABLE</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"SHARED_DURABLE\\\"</span><span style=\\\"color:#24292E\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Represents JMS default consumer</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    DEFAULT</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#032F62\\\"> \\\"DEFAULT\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Message consumer listener configurations.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">type</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message consumer type</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">destination</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Name of the JMS destination</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">messageSelector</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">only messages with properties matching the message selector expression are added to the durable subscription. </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#                     An empty string indicates that there is no message selector for the durable subscription.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">noLocal</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">if true then any messages published to the topic using this session's connection, or any other connection </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#             with the same client identifier, will not be added to the durable subscription.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">subscriberName</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">the name used to identify the subscription </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> ConsumerOptions</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ConsumerType 'type </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Destination destination;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> messageSelector </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> noLocal </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> false</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> subscriberName?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1054962973,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Unsubscribe a durable subscription that has been created by this session.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># It is erroneous for a client to delete a durable subscription while there is an active (not closed) consumer</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># for the subscription, or while a consumed message is part of a pending transaction or has not been</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># acknowledged in the session.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check session->unsubscribe(\\\"subscription-1\\\");</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">subscriptionId</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The name, which is used to identify the subscription</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> unsubscribe</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> subscriptionId</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1890695346,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Creates a MessageProducer to send messages to the specified destination.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># jms:MessageProducer producer = check session.createProducer({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   'type: jms:QUEUE,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   name: \\\"test-queue\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">destination</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The Destination to send to, or nil if this is a producer which does not have a specified destination</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Returns `jms:MessageProducer` or `jms:Error` if there is an error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> createProducer</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Destination? </span><span style=\\\"color:#E36209\\\">destination</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> ()) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">MessageProducer</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">jms:Error;</span></span></code></pre>\"],[1100414305,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Creates a MessageConsumer for the specified destination.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># jms:MessageConsumer consumer = check session.createConsumer(destination = {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   'type: jms:QUEUE,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   name: \\\"test-queue\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">consumerOptions</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The relevant consumer configurations</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Returns a `jms:MessageConsumer` or else `jms:Error` if there is an error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> createConsumer</span><span style=\\\"color:#24292E\\\">(*</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ConsumerOptions consumerOptions) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">MessageConsumer</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">jms:Error;</span></span></code></pre>\"],[-430583532,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Commits all messages sent/received in this transaction and releases any locks currently held.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check session->'commit();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'commit() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-732329554,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Rolls back any messages sent/received in this transaction and releases any locks currently held.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check session->'rollback();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'rollback() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1559096225,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Closes the current JMS session.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```ballerina</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check session->close();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> close</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1157857865,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represent the JMS Message used to send and receive content from the a JMS provider.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">messageId</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Unique identifier for a JMS message  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">timestamp</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Time a message was handed off to a provider to be sent </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">correlationId</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Id which can be used to correlate multiple messages </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">replyTo</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">JMS destination to which a reply to this message should be sent</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">destination</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">JMS destination of this message </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">deliveryMode</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Delivery mode of this message  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">redelivered</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Indication of whether this message is being redelivered</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">jmsType</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message type identifier supplied by the client when the message was sent  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">expiration</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message expiration time  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">deliveredTime</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The earliest time when a JMS provider may deliver the message to a consumer  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">priority</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message priority level  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">properties</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Additional message properties</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Message</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> messageId?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> timestamp?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> correlationId?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Destination replyTo?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Destination destination?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> deliveryMode?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#24292E\\\"> redelivered?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> jmsType?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> expiration?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> deliveredTime?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> priority?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#005CC5\\\">anydata</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> properties</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represent the JMS Text Message.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">content</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message content  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> TextMessage</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> content;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represent the JMS Map Message.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">content</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message content </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> MapMessage</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#005CC5\\\">anydata</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> content;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represent the JMS Bytes Message.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">content</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message content </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> BytesMessage</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    *</span><span style=\\\"color:#24292E\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] content;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[533816563,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Sends a message to the JMS provider.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check producer->send(message);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">message</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message to be sent to the JMS provider</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> send</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message message) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1939524447,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Sends a message to a given destination of the JMS provider.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check producer->sendTo({ 'type: QUEUE, name: \\\"test-queue\\\" }, message);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">destination</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Destination used for the message sender</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">message</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message to be sent to the JMS provider</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> sendTo</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Destination destination, </span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message message) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[403273674,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Closes the message producer.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ``` </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check producer->close();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> close</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[1735578719,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Receives the next message that arrives within the specified timeout interval.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># jms:Message message = check consumer->receive(10000);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">timeoutMillis</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Message receive timeout</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:JmsMessage` if there is a new message, `()` if there is no new message, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># or else a `jsm:Error` if there is an error in the execution</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> receive</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> timeoutMillis</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 10000</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">jms:Error?;</span></span></code></pre>\"],[-1746188831,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Receives the next message if one is immediately available.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># jms:Message? message = check consumer->receiveNoWait();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:JmsMessage` if there is a new message, `()` if there is no any new message, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># or else a `jsm:Error` if there is an error in the execution</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> receiveNoWait</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">jms:Error?;</span></span></code></pre>\"],[-766641129,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Mark a JMS message as received.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check consumer->acknowledge(message);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">message</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">JMS message record</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error in the execution or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> acknowledge</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message message) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[176987051,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Closes the message consumer.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check consumer->close();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> close</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1585180767,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Message listener configurations.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">connectionConfig</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Configurations related to the broker connection  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">acknowledgementMode</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Configuration indicating how messages received by the session will be acknowledged</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">consumerOptions</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Underlying JMS message consumer configurations</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> MessageListenerConfigurations</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ConnectionConfiguration connectionConfig;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    AcknowledgementMode acknowledgementMode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> AUTO_ACKNOWLEDGE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    ConsumerOptions consumerOptions;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[200397301,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Creates a new `jms:Listener`.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```ballerina</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># listener jms:Listener messageListener = check new(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   connectionConfig = {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#       initialContextFactory: \\\"org.apache.activemq.jndi.ActiveMQInitialContextFactory\\\",</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#       providerUrl: \\\"tcp://localhost:61616\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   consumerOptions = {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#       destination: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#           'type: jms:QUEUE,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#           name: \\\"test-queue\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#       }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#   }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># );</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">consumerConfig</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Underlying JMS consumer configurations</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The relevant JMS consumer or a `jms:Error` if there is any error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(*</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">MessageListenerConfigurations listenerConfig) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[1831511933,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Attaches a message consumer service to a listener.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check messageListener.attach(jmsService);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">'service</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The service instance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">name</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Name of the service</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> attach</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Service 'service, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\">? </span><span style=\\\"color:#E36209\\\">name</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#24292E\\\"> ()) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[1842616226,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Detaches a message consumer service from the the listener.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check messageListener.detach(jmsService);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">'service</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The service to be detached</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> detach</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Service 'service) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-134510480,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Starts the endpoint.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check messageListener.'start();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#24292E\\\"> 'start() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-506930267,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Stops the JMS listener gracefully.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check messageListener.gracefulStop();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> gracefulStop</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-66354069,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Stops the JMS listener immediately.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check messageListener.immediateStop();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> immediateStop</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-1313393556,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Mark a JMS message as received.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check caller->acknowledge(message);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">message</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">JMS message record</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">A `jms:Error` if there is an error in the execution or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> acknowledge</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message message) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[417194800,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#24292E\\\"> jms:Service </span><span style=\\\"color:#032F62\\\">\\\"consumer-service\\\"</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#24292E\\\"> messageListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> onMessage</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Caller caller, </span><span style=\\\"color:#E36209\\\">jms</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message message) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#D73A49\\\"> error?</span><span style=\\\"color:#24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">        // process results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}