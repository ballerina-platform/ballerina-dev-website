{"pageProps":{"frontmatter":{"layout":"ballerina-left-nav-release-notes","title":"2201.6.0 (Swan Lake)","permalink":"/downloads/swan-lake-release-notes/2201.6.0/","active":"2201.6.0","redirect_from":["/downloads/swan-lake-release-notes/2201.6.0","/downloads/swan-lake-release-notes/2201.6.0-swan-lake/","/downloads/swan-lake-release-notes/2201.6.0-swan-lake","/downloads/swan-lake-release-notes/","/downloads/swan-lake-release-notes"]},"content":"\n## Overview of Ballerina Swan Lake 2201.6.0\n\n<em>2201.6.0 (Swan Lake Update 6) is the sixth update release of Ballerina Swan Lake, and it includes a new set of features and significant improvements to the compiler, runtime, standard library, and developer tooling. It is based on the 2022R4 version of the Language Specification.</em> \n\n## Update Ballerina\n\nUpdate your current Ballerina installation directly to 2201.6.0 using the [Ballerina Update Tool](/learn/update-tool/) as follows.\n\n1. Run `bal update` to get the latest version of the Update Tool.\n2. Run `bal dist update` to update to this latest distribution.\n\n## Install Ballerina\n\nIf you have not installed Ballerina, download the [installers](/downloads/#swanlake) to install.\n\n## Language updates\n\n### New features\n\n#### New lang library functions\n\n##### New `lang.int:avg()` function\n\n- Introduced the `lang.int:avg()` function, which returns the average of its integer arguments.\n\n    ```ballerina\n    import ballerina/io;\n\n    public function main() {\n        io:println(int:avg(10, 20, 30, 40)); // 25.0\n    }\n    ```\n\n##### New `lang.float:avg()` function\n\n- Introduced the `lang.float:avg()` function, which returns the average of its float arguments.\n\n    ```ballerina\n    import ballerina/io;\n\n    public function main() {\n        io:println(float:avg(2, 2)); // 2.0\n    }\n    ```\n\n##### New `lang.decimal:avg()` function\n\n- Introduced the `lang.decimal:avg()` function, which returns the average of its decimal arguments.\n\n    ```ballerina\n    import ballerina/io;\n\n    public function main() {\n        io:println(decimal:avg(10, 20, 30, 40)); // 25.0\n    }\n    ```\n\n##### New `lang.boolean:some()` function\n\n- Introduced the `lang.boolean:some()` function, which returns true if one or more of its arguments are `true`, and `false` otherwise.\n\n    ```ballerina\n    import ballerina/io;\n\n    public function main() {\n        io:println(boolean:some(true, false)); // true\n        io:println(boolean:some(false, false)); // false\n    }\n    ```\n\n##### New `lang.boolean:every()` function\n\n- Introduced the `lang.boolean:every()` function, which returns `true` if all of its arguments are true, and `false` otherwise.\n\n    ```ballerina\n    import ballerina/io;\n\n    public function main() {\n        io:println(boolean:every(true, false)); // false\n        io:println(boolean:every(true, true)); // true\n    }\n    ```\n\n##### New `lang.value:count()` function\n\n- Introduced the `lang.value:count()` function, which returns the number of arguments.\n\n    ```ballerina\n    import ballerina/io;\n    import ballerina/lang.value;\n\n    public function main() {\n        io:println(value:count(1, 2, 3)); // 3\n    }\n    ```\n\n##### New `lang.value:first()` function\n\n- Introduced the `lang.value:first()` function, which returns the first argument.\n\n    ```ballerina\n    import ballerina/io;\n    import ballerina/lang.value;\n\n    public function main() {\n        io:println(value:first(1, 2, 3)); // 1\n    }\n    ```\n\n##### New `lang.value:last()` function\n\n- Introduced the `lang.value:last()` function, which returns the last argument.\n\n    ```ballerina\n    import ballerina/io;\n    import ballerina/lang.value;\n\n    public function main() {\n        io:println(value:last(1, 2, 3)); // 3\n    }\n    ```\n\n### Bug fixes\n\nTo view other bug fixes, see the [GitHub milestone for 2201.6.0 (Swan Lake)](https://github.com/ballerina-platform/ballerina-lang/issues?q=is%3Aissue+label%3ATeam%2FCompilerFE+milestone%3A2201.6.0+is%3Aclosed+label%3AType%2FBug).\n\n## Runtime updates\n\n### New features\n\n#### New Runtime Java APIs\n\n- Introduced the `getInitMethod()` API in the `io.ballerina.runtime.api.types.ObjectType` class to get the method type of the initializer method of Ballerina objects.\n\n    ```java\n    MethodType getInitMethod();\n    ```\n\n### Deprecations\n\n#### Deprecations in Runtime Java APIs\n\n- Deprecated the following APIs in the `io.ballerina.runtime.api` package and marked for removal in a future release.\n\n  | **Runtime API**                                  | **Java class**                                     |\n  |--------------------------------------------------|----------------------------------------------------|\n  | `getCurrentRuntime()`                            | `io.ballerina.runtime.api.Runtime`                 |\n  | `createDecimalValue(String, DecimalValueKind)`   | `io.ballerina.runtime.api.creators.ValueCreator`   |\n  | `createStreamingJsonValue(JsonDataSource)`       | `io.ballerina.runtime.api.creators.ValueCreator`   |\n  | `convertToJson(Object, List<TypeValuePair>)`     | `io.ballerina.runtime.api.utils.JsonUtils`         |\n  | `getStringValue(Object, BLink)`                  | `io.ballerina.runtime.api.utils.StringUtils`       |\n  | `getExpressionStringValue(Object, BLink)`        | `io.ballerina.runtime.api.utils.StringUtils`       |\n  | `parseExpressionStringValue(String, BLink)`      | `io.ballerina.runtime.api.utils.StringUtils`       |\n  | `getValueKind()`                                 | `io.ballerina.runtime.api.values.BDecimal`         |\n  | `getStrand()`                                    | `io.ballerina.runtime.api.values.BFuture`          |\n  | `call(Strand, String, Object...)`                | `io.ballerina.runtime.api.values.BObject`          |\n  | `start(Strand, String, Object...)`               | `io.ballerina.runtime.api.values.BObject`          |\n  | `getRegExpDisjunction()`                         | `io.ballerina.runtime.api.values.BRegexpValue`     |\n  | `instantiate(Strand)`                            | `io.ballerina.runtime.api.values.BTypedesc`        |\n  | `instantiate(Strand, BInitialValueEntry[])`      | `io.ballerina.runtime.api.values.BTypedesc`        |\n\n### Bug fixes\n\nTo view bug fixes, see the [GitHub milestone for 2201.6.0 (Swan Lake)](https://github.com/ballerina-platform/ballerina-lang/issues?q=is%3Aissue+milestone%3A2201.6.0+label%3ATeam%2FjBallerina+label%3AType%2FBug+is%3Aclosed).\n\n## Standard library updates\n\n### New features\n\n#### `constraint` package\n\n- Introduced the `@constriant:Date` annotation to validate date record structures.\n- Allowed constraint annotations on subtypes.\n\n#### `http` package\n\n- Added constraint validation support for `query`, `path`, and `header` parameters.\n- Exposed the `http:Request` object in the response interceptors as a remote method parameter.\n- Added finite type support for `query`, `path`, and `header` parameters.\n\n#### `graphql` package\n\n- Added support for GraphQL field interceptors.\n- Added support for GraphQL interceptor configurations.\n- Added support to access subfields of a GraphQL field from the `graphql:Field` object.\n\n#### `persist` package\n\n- Added support for the `in-memory` data store.\n- Added support for the `google-sheets` data store. This is currently an experimental feature and its behavior may be subject to change in future releases.\n- Added support for defining enums and adding `enum` fields to the data model.\n\n#### `edi` package\n\n- Introduced the `edi` module to convert EDI to JSON and vice versa based on a given schema.\n\n#### `toml` package\n\n- Introduced the pre-release version of the `toml` module to convert a TOML configuration file to `map<json>` and vice versa.\n\n#### `yaml` package\n\n- Introduced the pre-release version of the `yaml` module to convert a YAML configuration file to JSON and vice \nversa.\n\n### Deprecations\n\n#### `stan` package\n\n- Deprecated the `stan` package.\n    > For NATS-enabled applications requiring persistence, it is recommended to use `JetStream` provided by the [`ballerinax/nats`](https://github.com/ballerina-platform/module-ballerinax-nats) library, including the new [NATS JetStream client](https://lib.ballerina.io/ballerinax/nats/latest#JetStreamClient) and the [NATS JetStream listener](https://lib.ballerina.io/ballerinax/nats/latest#JetStreamListener).\n\n#### `serdes` package\n\n- Deprecated the `serdes` package.\n\n### Improvements\n\n#### `persist` package\n\n- Renamed the error types as follows.\n    - `InvalidKeyError` to `NotFoundError`\n    - `DuplicateKeyError` to `AlreadyExistsError`\n    - `ForeignKeyConstraintViolationError` to `ForeignKeyViolationError`\n- Removed the `FieldDoesNotExistError` error type as the `NotFoundError` error type can be used instead.\n- Marked the generated client object as `isolated`.\n- Added support for transactions in the `mysql` data store.\n\n#### `http` package\n\n- Allowed a single interceptor service object to be configured as the interceptor pipeline.\n- Allowed the subtypes of one of `string`, `int`, `float`, `boolean`, or `decimal` as path parameters.\n- Added support for `http:InterceptableService` to enable engaging service-level interceptors and deprecated the usage of interceptors in the `http:HttpServiceConfig`.\n\n    For example, consider the following implementation of the `http:InterceptableService`.\n    ```ballerina\n    import ballerina/http;\n    \n    service http:InterceptableService / on new http:Listener(9090) {\n\n        public function createInterceptors() returns RequestInterceptor {\n            return new RequestInterceptor();\n        }\n\n        resource function get user() returns string {\n            return \"John, Doe\";\n        }\n    }\n    ```\n\n### Bug fixes\n\nTo view bug fixes, see the [GitHub milestone for 2201.6.0 (Swan Lake)](https://github.com/ballerina-platform/ballerina-standard-library/issues?q=is%3Aclosed+is%3Aissue+milestone%3A%222201.6.0%22+label%3AType%2FBug).\n\n## Developer tools updates\n\n### New features\n\n#### Persist Tool\n\n- Added support for the `in-memory` data store. This is set as the default data store.\n- Added support for the `google-sheets` data store. This is currently an experimental feature and its behavior may be subject to change in future releases.\n- Added the `persist migrate` command to generate migration scripts for data model changes in the `mysql` data store. The support for migrations is currently an experimental feature and its behavior may be subject to change in future releases.\n\n#### Language Server\n\n- Added inlay hint support for function call expressions and method call expressions to provide information about parameters.\n\n### Deprecations\n\n#### CLI Commands\n\n##### Deprecation of `bal init`\n\n- Deprecated the `bal init` command. It will be removed in a future version. The `bal new .` command can be used instead.\n\n### Improvements\n\n#### Test Framework\n\n- Added support for excluding source files from code coverage.\n\n#### Persist Tool\n\n- Added support for additional DB configurations in the generated client objects for the `mysql` data store.\n- Changed the Ballerina `byte[]` type mapping to `LONGBLOB` in the generated SQL script file.\n\n#### Language Server\n\n- Removed service template initialization from the lightweight mode.\n- Improved the completion support and signature help for client resource access actions.\n- Improved the main function completion item.\n- Improved completions in the named argument context.\n- Added support to rename parameter documentation for record fields and required parameters.\n\n#### OpenAPI Tool\n\n- Added support for regular expression templates (i.e., the `pattern` property) defined on OpenAPI `string` types in the Ballerina client and service generation.\n  With this support, the aforementioned Regex templates will be represented as `ballerina/constraint` module annotations in the generated code. This support applies to Regex patterns that satisfy [the Ballerina regular expression grammar](https://ballerina.io/spec/lang/2022R4/#section_10.1).\n- Added support for OpenAPI enums in the client and service generation. \n- Added support for query parameters with referenced schema in the Ballerina service generation. \n- Added support for header parameters with referenced schema in the Ballerina service generation. \n- Added support for `integer`, `float`, `decimal`, and `boolean` header parameter types in the Ballerina service generation.\n\n#### Architecture Model Generator\n\n- Added a new language server extension to retrieve Ballerina persist models.\n- Added support to retrieve dependencies of the main function entry points.\n\n#### CLI commands\n\n##### Support for providing paths with `bal new`\n\n- Added support to provide a directory path with the `bal new` command to create a package in a specific directory (e.g., `bal new <package-path>`). \n\n### Bug fixes\n\nTo view bug fixes, see the GitHub milestone for 2201.6.0 (Swan Lake) of the repositories below.\n\n- [Test Framework](https://github.com/ballerina-platform/ballerina-lang/issues?q=is%3Aissue+is%3Aclosed+label%3AType%2FBug+label%3AArea%2FTestFramework+milestone%3A2201.6.0)\n- [Language Server](https://github.com/ballerina-platform/ballerina-lang/issues?q=is%3Aissue+label%3ATeam%2FLanguageServer+milestone%3A2201.6.0+is%3Aclosed+label%3AType%2FBug)\n- [OpenAPI](https://github.com/ballerina-platform/openapi-tools/issues?q=is%3Aissue+milestone%3A%22Swan+Lake+2201.6.0+%22+label%3AType%2FBug+is%3Aclosed)\n- [Architecture Model Generator](https://github.com/ballerina-platform/ballerina-dev-tools/issues?q=is%3Aissue+milestone%3A2201.6.0+is%3Aclosed+label%3AArea%2FArchitectureModelGenerator+label%3AType%2FBug)\n\n## Ballerina packages updates\n\n### Bug fixes\n\nTo view bug fixes, see the [GitHub milestone for 2201.6.0 (Swan Lake)](https://github.com/ballerina-platform/ballerina-lang/issues?q=is%3Aissue+is%3Aclosed+label%3AType%2FBug+milestone%3A2201.6.0+label%3AArea%2FProjectAPI).\n\n## Backward-incompatible changes\n\n- `self` of an object is now implicitly final and cannot be assigned to.\n\n    ```ballerina\n    class Counter {\n        private int i = 0;\n\n        function updateSelf() {\n            self = new; // Compilation error now.\n        }\n\n        function increment() {\n            lock {\n                self.i += 1;\n            }\n        }\n    }    \n    ```\n\n  This also allows using `self` of an object that is a subtype of `readonly` or `isolated object {}` as a captured variable within an `isolated` anonymous function.\n\n    ```ballerina\n    isolated class Filter {\n        final string[] & readonly words;\n        private int length;\n\n        isolated function init(string[] & readonly words, int length) {\n            self.words = words;\n            self.length = length;\n        }\n\n        isolated function setLength(int length) {\n            lock {\n                self.length = length;\n            }\n        }\n\n        isolated function getCount() returns int =>\n            self.words.filter(\n                // Allowed now.\n                word => word.length() == self.length).length();\n    }\n    ```\n\n- Fixed a bug that allowed assigning `nil` to a record field with member access expressions when there are no fields of optional types. This previously resulted in a runtime panic if the value was `nil`.\n\n    ```ballerina\n    type Employee record {|\n        string id;\n        string name;\n    |};\n\n    public function main() {\n        Employee employee = {\n            name: \"Jo\",\n            id: \"E12321\"\n        };\n\n        string key = \"name\";\n        employee[key] = (); // Compilation error now.\n\n        map<string> data = {\n            name: \"Jo Doe\",\n            dept: \"IT\"\n        };\n\n        foreach string mkey in employee.keys() {\n            // `data[key]` will be nil if the key is not present in `data`.\n            // E.g., `data[key]` is nil when `key` is `name`.\n            employee[mkey] = data[mkey]; // Compilation error now.\n        }\n    }\n    ```\n    \n- Fixed a bug with the XML parser error messages that showed dependency information. The error message prefix `failed to create xml` is now changed to `failed to parse xml` to have a single prefix for all the XML-parsing error messages.\n\n    For example, consider the content below of the `invalid_xml.txt` file.\n\n    ```\n    <!-- comments cannot have -- in it -->\n    ```\n\n    When the following Ballerina code is run,\n\n    ```ballerina\n    import ballerina/io;\n\n    public function main() returns error? {\n        xml readResult = check io:fileReadXml(\"invalid_xml.txt\");\n    }\n    ```\n\n    it gives the error below.\n\n    ```\n    error: failed to parse xml: String '--' not allowed in comment (missing '>'?)\n     at [row,col {unknown-source}]: [1,4]\n    ```\n\n- The `Environment`, `Future`, and `Runtime` classes in the `io.ballerina.runtime.api` package, are refactored to abstract classes. Creating an instance of those classes is incorrect.\n\n- A `typedesc` value (returned by evaluating the `typeof` expression on a result of the `value:cloneWithType` and `value:fromJsonWithType` functions) is changed to give the correct type-reference type.\n\n    ```ballerina\n    import ballerina/io;\n\n    type IntArray int[];\n\n    public function main() returns error? {\n        float[] arr = [1.0, 2.0];\n        IntArray result = check arr.cloneWithType();\n        io:println(typeof result); // Prints 'typedesc IntArray'.\n    }\n    ```\n","id":"swan-lake-2201.6.0","codeSnippets":"[[-1516874820,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">avg</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">10</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">20</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">30</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">40</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// 25.0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1966022096,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">float</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">avg</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">2</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">2</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// 2.0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[848857374,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">decimal</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">avg</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">10</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">20</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">30</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">40</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// 25.0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1187409888,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">some</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">true</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">false</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">some</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">false</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">false</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-1161769276,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">every</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">true</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">false</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">every</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">true</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">true</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1262153875,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/lang.value;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">value</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">count</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">2</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">3</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// 3</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1661707378,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/lang.value;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">value</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">first</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">2</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">3</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1765800732,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/lang.value;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">value</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">last</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">2</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">3</span><span style=\\\"color: #24292E\\\">)); </span><span style=\\\"color: #6A737D\\\">// 3</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[409925016,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">MethodType </span><span style=\\\"color: #6F42C1\\\">getInitMethod</span><span style=\\\"color: #24292E\\\">();</span></span></code></pre>\"],[869713119,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">service</span><span style=\\\"color: #24292E\\\"> http:InterceptableService / </span><span style=\\\"color: #D73A49\\\">on</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> http:Listener(</span><span style=\\\"color: #005CC5\\\">9090</span><span style=\\\"color: #24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">createInterceptors</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> RequestInterceptor {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">return</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">RequestInterceptor</span><span style=\\\"color: #24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">resource</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">get</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">user</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">return</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;John, Doe&quot;</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[2007887400,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">class</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">Counter</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">private</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> i </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">0</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">updateSelf</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">self</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\">; </span><span style=\\\"color: #6A737D\\\">// Compilation error now.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">increment</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">lock</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">self</span><span style=\\\"color: #24292E\\\">.i </span><span style=\\\"color: #D73A49\\\">+=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-81330722,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated class</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">Filter</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">final</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">[] </span><span style=\\\"color: #D73A49\\\">&amp;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">readonly</span><span style=\\\"color: #24292E\\\"> words;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">private</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> length;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">init</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">[] </span><span style=\\\"color: #D73A49\\\">&amp;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">readonly</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">words</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">length</span><span style=\\\"color: #24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">self</span><span style=\\\"color: #24292E\\\">.words </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> words;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">self</span><span style=\\\"color: #24292E\\\">.length </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> length;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">setLength</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">length</span><span style=\\\"color: #24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">lock</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">self</span><span style=\\\"color: #24292E\\\">.length </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> length;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">getCount</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">=&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">self</span><span style=\\\"color: #24292E\\\">.words.</span><span style=\\\"color: #6F42C1\\\">filter</span><span style=\\\"color: #24292E\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #6A737D\\\">// Allowed now.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #E36209\\\">word</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">=&gt;</span><span style=\\\"color: #24292E\\\"> word.</span><span style=\\\"color: #6F42C1\\\">length</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">==</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">self</span><span style=\\\"color: #24292E\\\">.length).</span><span style=\\\"color: #6F42C1\\\">length</span><span style=\\\"color: #24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-16724516,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">Employee</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> id;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    Employee employee </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        name</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Jo&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        id</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;E12321&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    };</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> key </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;name&quot;</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    employee[</span><span style=\\\"color: #D73A49\\\">key</span><span style=\\\"color: #24292E\\\">] </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> (); </span><span style=\\\"color: #6A737D\\\">// Compilation error now.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">map&lt;</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #D73A49\\\">&gt;</span><span style=\\\"color: #24292E\\\"> data </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        name</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Jo Doe&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        dept</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;IT&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    };</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">foreach </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> mkey </span><span style=\\\"color: #D73A49\\\">in</span><span style=\\\"color: #24292E\\\"> employee.</span><span style=\\\"color: #6F42C1\\\">keys</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #6A737D\\\">// `data[key]` will be nil if the key is not present in `data`.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #6A737D\\\">// E.g., `data[key]` is nil when `key` is `name`.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        employee[mkey] </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> data[mkey]; </span><span style=\\\"color: #6A737D\\\">// Compilation error now.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1764456607,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">xml</span><span style=\\\"color: #24292E\\\"> readResult </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fileReadXml</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;invalid_xml.txt&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-1522320922,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">IntArray</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\">[];</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">float</span><span style=\\\"color: #24292E\\\">[] arr </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> [</span><span style=\\\"color: #005CC5\\\">1.0</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">2.0</span><span style=\\\"color: #24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    IntArray result </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> arr.</span><span style=\\\"color: #6F42C1\\\">cloneWithType</span><span style=\\\"color: #24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">typeof</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">result</span><span style=\\\"color: #24292E\\\">); </span><span style=\\\"color: #6A737D\\\">// Prints &#39;typedesc IntArray&#39;.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}