{"pageProps":{"frontmatter":{"layout":"ballerina-persist-documentation-left-nav-pages-swanlake","title":"Persist introspection (experimental)","description":"The section gives details on database introspection.","keywords":"ballerina, programming language, ballerina packages, persist, introspection","permalink":"/learn/ballerina-persist/persist-instrospection/","active":"persist_introspection","intro":"Bal persist can work with existing databases by providing the facility to introspect an existing database to generate the persist data model.","redirect_from":["/learn/ballerina-persist/persist-introspection"]},"content":"\nIntrospection lets you use `bal persist` with existing databases without having to write a\ndata model. Currently, introspection is only supported for MySQL databases and new data stores will be supported\nin the future. [Advanced SQL annotations](/learn/persist-model/#advanced-sql-annotations) are used to annotate names, special types, declare generated fields, custom foreign\nkeys, and indexes etc.\n\nDuring introspection, all table and column names which does not conform to Ballerina naming conventions will be converted to conforming names and their original names will be mapped with the [`@sql:Name`](/learn/persist-model/#name-mapping-with-name-annotation) annotation.\n\n## Type Mapping\n\nThe below table shows how SQL types are mapped into Ballerina types. Development efforts are underway to support more SQL types.\n\nThe types that are partially supported will be fully supported later along with new annotations to better represent their specific SQL types. However, they can still be used in queries. The unsupported types will also be supported in the future.\n\n\n| SQL Type         | Ballerina Type   |                         Annotation                         | Supported |\n|------------------|------------------|:----------------------------------------------------------:|:---------:|\n| `BOOLEAN`        | `boolean`        |                             -                              |    Yes    |\n| `TINYINT(1) `    | `boolean`        |                             -                              |    Yes    |\n| `INT`            | `int`            |                             -                              |    Yes    |\n| `INTEGER`        | `int`            |                             -                              |    Yes    |\n| `DECIMAL(65,30)` | `decimal`        |                             -                              |    Yes    |\n| `DECIMAL(X,Y)`   | `decimal`        | [`@sql:Decimal`](/learn/persist-model/#decimal-annotation) |    Yes    |\n| `DOUBLE`         | `float`          |                             -                              |    Yes    |\n| `FLOAT`          | `float`          |                             -                              |    Yes    |\n| `TIME`           | `time:TimeOfDay` |                             -                              |    Yes    |\n| `TIMESTAMP`      | `time:Utc`       |                             -                              |    Yes    |\n| `DATE`           | `time:Date`      |                             -                              |    Yes    |\n| `DATETIME`       | `time:Civil`     |                             -                              |    Yes    |\n| `VARCHAR(191)`   | `string`         |                             -                              |    Yes    |\n| `VARCHAR(X)`     | `string`         | [`@sql:Varchar`](/learn/persist-model/#varchar-annotation) |    Yes    |\n| `CHAR(X)`        | `string`         |    [`@sql:Char`](/learn/persist-model/#char-annotation)    |    Yes    |\n| `BLOB`           | `byte[]`         |                             -                              |    Yes    |\n| `ENUM`           | `enum`           |                             -                              |    Yes    |\n| `TINYINT(X)`     | `int`            |                             -                              |  Partial  |\n| `SMALLINT`       | `int`            |                             -                              |  Partial  |\n| `MEDIUMINT`      | `int`            |                             -                              |  Partial  |\n| `BIGINT`         | `int`            |                             -                              |  Partial  |\n| `TEXT`           | `string`         |                             -                              |  Partial  |\n| `TINYTEXT`       | `string`         |                             -                              |  Partial  |\n| `MEDIUMTEXT`     | `string`         |                             -                              |  Partial  |\n| `LONGTEXT`       | `string`         |                             -                              |  Partial  |\n| `TINYBLOB`       | `byte[]`         |                             -                              |  Partial  |\n| `MEDIUMBLOB`     | `byte[]`         |                             -                              |  Partial  |\n| `LONGBLOB`       | `byte[]`         |                             -                              |  Partial  |\n| `VARBINARY`      | `byte[]`         |                             -                              |  Partial  |\n| `BINARY`         | `byte[]`         |                             -                              |  Partial  |\n| `JSON`           | -                |                             -                              |    No     |\n| `GEOMETRY`       | -                |                             -                              |    No     |\n| `SET`            | -                |                             -                              |    No     |\n\n\n## Limitations\n\n- Introspection currently supports only for MySQL data stores\n- Cross-referring relations, where foreign keys are found in both sides of a couple of associated entities are not supported\n- Foreign keys occurring from unique keys are not supported\n- Some data types are unsupported, in which case the client API for those entities are not generated. However, you can still perform join queries that include those relations, without unsupported fields.\n- Bal Persist only supports `auto-increment` generation strategy with the [`@sql:Generated`](/learn/persist-model/#declare-generated-fields-with-generated-annotation) annotation\n- Introspection ignores the order of columns in composite indexes and annotates index fields with [`@sql:Index`](/learn/persist-model/#index-annotation) or [`@sql:UniqueIndex`](/learn/persist-model/#uniqueindex-annotation) annotation without considering the column order\n","id":"persist-introspection","sub":"ballerina-persist","third":"","slug":"ballerina-persist/persist-introspection","codes":"[]"},"__N_SSG":true}