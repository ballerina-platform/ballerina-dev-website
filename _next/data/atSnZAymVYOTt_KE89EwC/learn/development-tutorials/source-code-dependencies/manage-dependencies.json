{"pageProps":{"frontmatter":{"layout":"ballerina-managing-dependencies-left-nav-pages-swanlake","title":"Manage dependencies","description":"The sections below include information about dependencies, imports, and how they can be used in your package.","keywords":"ballerina, programming language, ballerina packages, dependencies, importing modules","permalink":"/learn/manage-dependencies/","active":"manage-dependencies","intro":"The sections below include information about dependencies, imports, and how they can be used in your package."},"content":"\n## Specify dependencies\n\nA package can depend on other packages that are available in Ballerina repositories. By default, Ballerina searches for the dependencies in the repositories below.\n* The distribution repository\n* The Ballerina Central repository\n\nIt also supports a third repository named the `local repository`, and temporarily overrides dependencies, which is useful for the package-development and bug-fixing phases. Additionally, a predefined set of custom package repositories are also supported, which are useful to bring third-party repositories into dependency management.\n\n**Distribution repository**\n\nThe distribution repository is a file system repository added with the local Ballerina installation. The repository is located at `<BALLERINA_HOME>/repo/bala`.\n\n**Ballerina Central repository**\n\nThe Ballerina Central is a remote repository and creates a local file system cache at `<USER_HOME>/.ballerina/repositories/central.ballerina.io/bala`. Ballerina queries the remote repository only if the specified dependency version is not present in its local cache.\n\n> **Note:** If you are connected to the internet via an HTTP proxy, you need to configure the proxy settings to perform operations with the Ballerina Central. For more information on proxy settings, see [Configure a network proxy](/learn/configure-a-network-proxy).\n\n**Local repository**\n\nThe local repository is also a file system repository, which will be created in the `<USER_HOME>` location. The repository location is `<USER_HOME>/.ballerina/repositories/local/bala`. \nFor more information, see [Use dependencies from the local repository](/learn/manage-dependencies/#use-dependencies-from-the-local-repository).\n\n**Custom repositories**\n\nBallerina supports one or more custom remote repositories, which can be configured in the `<USER_HOME>/.ballerina/Settings.toml` file. A local filesystem cache is maintained per repository at `<USER_HOME>/.ballerina/repositories/<REPOSITORY_ID>/bala`. Ballerina queries the remote repository only if the specified dependency version is not present in its local cache. For more information, see [Use custom repositories for package management](/learn/manage-dependencies/#use-custom-repositories-for-package-management).\n\n### Import a module\n\nTo use exported modules of any package, add an import statement in the Ballerina code. It enables access to all public symbols in the imported module.\n\nThe import declaration syntax is as follows.\n\n```ballerina\nimport [org_name/] module_name [as import_prefix];\n```\n\n* The `import_prefix` has to be a valid Ballerina identifier, and it is used to refer to public symbols in the declared module.\n* The `import_prefix` is optional. You can use the last part of the module name if an `import_prefix` is unavailable.\n\nYou can import a module by providing the organization name, and the module name. The module name consists of the package name, and the name of the module root directory.\nThe module name of the default module is always the package name. \n\nThe following example shows how to import modules from the `ballerina/io` package.\n\n```ballerina\nimport ballerina/io; // Imports the default module of io package\n\npublic function main() {\n\tio:println(\"Hello world!\");\n}\n```\n\nThe following is another example that shows the usage of multiple modules from different libraries.\n\n```ballerina\n// Imports the default module from the `ballerina/log` package.\nimport ballerina/log;\n// Imports the default module from the `salesforce` package\n// with an import prefix.\nimport ballerinax/salesforce as sf;\n// Imports a non-default module from the `salesforce` package\n// with an import prefix.\nimport ballerinax/salesforce.bulk as sfBulk;\n\nconfigurable string baseUrl = ?;\nconfigurable string token = ?;\n\nsf:ConnectionConfig sfConfig = {baseUrl, auth: {token}};\n\npublic function main() returns error? {\n    string contacts = \"Name,Email\\n\"\n        + \"John,john434@gmail.com\\n\"\n        + \"Peter,peter77@gmail.com\";\n\n    sfBulk:Client bulkClient = check new (sfConfig);\n    sfBulk:BulkJob insertJob = check bulkClient->createJob(\"insert\", \"Contact\", \"CSV\");\n    sfBulk:BatchInfo batch = check bulkClient->addBatch(insertJob, contacts);\n\n    log:printInfo(batch.id.length() > 0 ? \"Batch Added Successfully\" : \"Failed to add the Batch\");\n}\n```\n\n## Specify dependency versions\n\nWhen building a package, the compiler figures out the dependency versions automatically. Ballerina searches the latest compatible versions of the package dependencies in the distribution repository, Ballerina Central repository, and the local repository (if specified).\n\nWhen you execute `bal build` for the first time on the package, the CLI operation will generate the `Dependencies.toml` in the package root. \nThis will contain the latest compatible dependency versions. From thereon, the versions locked in the `Dependencies.toml` are considered as the minimum required versions for the subsequent builds. The `Dependencies.toml` file is generated and managed by the Ballerina CLI and does not need user intervention.\n\n### Update dependency versions\n\nThe `Dependencies.toml` file generated during the compiler will automatically update the versions of the dependencies at the patch level. Therefore, if any patch release is available for a dependency, the compiler will pick the latest patch version.\n\n>**Note:** The automatic update runs only once a day to optimize the time taken during frequent builds. Run the `bal clean` command if you want to enable automatic updates for the next build.\n\nTo update the minor or the major version of a dependency, specify the dependency version in the `Ballerina.toml` file. The provided version is considered as the minimum required version for compiling the package, which will update the dependency to the latest version that is compatible with the version provided in the `Ballerina.toml` as well as the version locked in the`Dependencies.toml`.\n\nFor example, the minimum version of the `ballerinax/mysql` dependency can be specified in the following way.\n\n```toml\n[[dependency]]\norg = \"ballerinax\"\nname = \"mysql\"\nversion = \"1.5.0‚Äù\n```\n\n### Upgrading packages to use new Swan Lake update distributions\n\nWhen a new Swan Lake update distribution is released, it may include incompatible language improvements. When upgrading an existing package to use new Swan Lake update distributions, the Ballerina compiler automatically updates the `Dependencies.toml` file with the latest compatible minor versions of the dependencies of the new distribution. This enables the existing projects to benefit from improvements in the new update releases without requiring significant modifications.\n\n## Use dependencies from the local repository\n\nThe local repository is useful to test a package in the development phase or to fix bugs. To specify a dependency from the local repository, first, you need to publish it to the local repository by following the steps below.\n\n1. Generate the Ballerina archive after editing the package source files as required.\n\n   ```\n   $ bal pack\n   ```\n\n2. Publish to the local repository.\n   ```\n   $ bal push --repository local\n   ```\n\n   If you already have the path of Ballerina archive, then you can simply execute the following command.\n\n    ```\n    $ bal push --repository local <path-to-bala-archive>\n    ```\n\n3. Specify the dependency in the `Ballerina.toml` file.\n\n    ```toml\n    [[dependency]]\n    org = \"ballerinax\"\n    name = \"googleapis.gmail\"\n    version = \"2.1.1\"\n    repository = \"local\"\n    ```\n\nOnce you complete the above steps, the dependency will be picked from the local repository when building the package.\nBallerina considers the version specified in the `Ballerina.toml` file as the minimum required version and uses the local repository to resolve the dependency.\nHowever, the compiler gives priority to the latest version if a new patch version is found in the distribution or Ballerina Central repositories.\nAt this point, the compiler resolves the latest version and ignores the dependency version in the local repository.\n\n\n## Use custom repositories for package management\n\nBallerina supports Maven repositories such as [Nexus](https://www.sonatype.com/products/sonatype-nexus-repository), [Artifactory](https://jfrog.com/artifactory/) and [Github packages](https://github.com/features/packages) to be set up as custom repositories. \n\n### Define the custom repository\n\nYou can configure one or multiple custom repositories in the `<USER_HOME>/.ballerina/Settings.toml` file to integrate them into the package resolution.\n\n```toml\n[[repository.maven]]\nid = \"<repository-id>\" # This ID is used when pushing/ pulling packages\nurl = \"<repository-url>\"\nusername = \"<username>/<userId>\"\naccesstoken = \"<password>/<accesstoken>\"\n```\n\nBelow is a sample repository configuration.\n\n```toml\n[[repository.maven]]\nid = \"github_1\" # This ID is used when pushing/ pulling balas\nurl = \"https://maven.pkg.github.com/jackson12/jackson-encrypt-module\"\nusername = \"jackson12\"\naccesstoken = \"ghp_nMlJsjshhdtdt5367389920020hHfrdrd\"\n```\n\nThe sections below show how to configure the above GitHub package repository to resolve a specific dependency.\n\n### Publish a Ballerina archive to the custom repository\n\nFollow the steps below to publish a Ballerina archive to the custom repository you configured above.\n\n1. Generate the Ballerina archive. \n\n   ```\n   $ bal pack\n   ```\n\n2. Publish to the custom repository.\n\n   ```\n   $ bal push --repository <repository-id>\n   ```\n\n    If you already have the path of the Ballerina archive, execute the command below.\n\n    ```\n    $ bal push --repository <repository-id> <path-to-bala-archive>\n    ```\n\n### Use the package from the custom repository\n\nYou can use the package you pushed to the custom repository in the ways below.\n\n#### Specify the dependency in the `Ballerina.toml`\n\nSimilar to the local repository, dependencies from the custom repository can be specified in the Ballerina.toml file and utilized as shown below.\n\n```toml\n[[dependency]]\norg = \"jackson\"\nname = \"encrypter\"\nversion = \"2.1.1\"\nrepository = \"github_1\" # Must match a repository ID configured in the Settings.toml file.\n```\n\n#### Pull the package from a custom repository\n\nExecute the command below to pull a Ballerina package from a custom repository.\n\n```\n$ bal pull <package-org>/<package-name>:<version> --repository <repository-id>\n```\n\n## Achieve reproducible builds\n\nBy default, the compiler always looks up the latest compatible versions of the dependencies in the repositories when building a package.\n\nIt minimizes the hassle of managing dependency versions to the package developer since the compiler is smart enough to keep the package updated with the latest compatible dependencies all the time. However, if you need to repeat a constant behavior to make the build more predictable, Ballerina facilitates this using offline and sticky modes.\n\n### The sticky mode\n\nUsing the `--sticky` flag with `bal build` will force the compiler to stick to the exact versions locked in the `Dependencies.toml`. \nIn other words, the CLI disables the automatic-update feature when you provide the `--sticky` flag.\n   \n```\n$ bal build --sticky\n```\n\n>**Note:** The automatic update runs only once a day to optimize the time taken during frequent builds.\n\n### The offline mode\n\nUsing the` ‚Äì-offline` flag will run the compilation offline without connecting to Ballerina Central or any configured Maven repositories. This will save the compilation time since the packages are resolved using the distribution repository, and the file system cache of the Ballerina Central repository/Maven repositories.\n\nUsing the `--offline` flag along with the `--sticky` flag will ensure a predictable build with optimal time for compilation. \n\n## Version compatibility\n\nAbiding by the specifications of <a href=\"https://semver.org/\" target=\"_blank\">Semantic Versioning</a>, Ballerina considers two versions to be **compatible if the major versions are equal and not zero**.\n\nA few examples would be as follows:\n\n* `0.2.3` and `0.2.4` are considered incompatible since the major version is `0`. The major version `0` is unstable.\n* `1.2.3`, `1.2.4`, and `1.4.5` are compatible. `1.4.5` will be considered as the latest.\n* `1.2.3-alpha`, `1.2.3-alpha.2`, and `1.2.3-beta` are compatible and `1.2.3-beta` is considered the latest.\n* `1.2.3-alpha`, `1.2.3-beta`, `1.2.4-alpha` are compatible and `1.2.4-alpha` is considered the latest.\n* `1.0.0` and `2.0.0` are considered incompatible since the major versions are different.\n\nWhen building the dependency graph, if there is more than one version for a specific dependency, the versions are chosen according to the following.\n* If the versions are compatible, pick the latest version.\n* If the versions are incompatible, throw an error with a build failure.\n\nFor example, assume one dependency in your package depends on the `1.0.0` version of the `ballerina/observe` package, and another dependency depends on `0.9.0` of the same. The build fails with the following error message.\n\n```\nerror: compilation failed: Two incompatible versions exist in the dependency graph:\nballerina/observe versions: 0.9.0, 1.0.0\n```\n\n## Manage platform dependencies\n\nA Ballerina package can depend on JAVA code that is shipped with the JVM, from a remote package repository, or from a JAR file located in the user‚Äôs machine. Libraries shipped with the JVM can be used seamlessly and libraries used from other locations must be specified in the `Ballerina.toml` as shown below.\n\n## Specify a Maven dependency\n\nThe following example shows how a dependency from a public Maven repository can be specified.\n\n```toml\n[[platform.java11.dependency]]\n# Group ID of the Maven dependency.\ngroupId = \"<group-id>\"\n# Artifact ID of the Maven dependency.\nartifactId = \"<artifact-id>\"\n# Version of the Maven dependency.\nversion = \"<version>\"\n```\n\nWhen building the package, these specified Maven dependencies will be resolved and can be found in the `target/platform-libs` directory. \n\n### Specify a local JAR file path\n\nThe following example uses a JAR file located in the user's machine as a platform dependency.\n\n```toml\n[[platform.java11.dependency]]\n# Group ID of the dependency.\ngroupId = \"<group-id>\"\n# Artifact ID of the dependency.\nartifactId = \"<artifact-id>\"\n# Version of the dependency.\nversion = \"<version>\"\n# Absolute or relative path of the JAR file.\npath = \"<path-to-jar-file-1>\"\n```\n\nThe Ballerina compiler will copy the specified JAR file from the provided path when creating the archive.\n\n>**Info:** You can also provide custom package repositories such as GitHub Packages and private Maven repositories. You can also specify different scopes to control how platform dependencies are used during program execution. For more information on this, see [Package references](/learn/package-references/).\n\n## Manage tool dependencies\n\nSimilar to package dependencies, tools specified in `Ballerina.toml` and executed in the package build are also resolved from the distribution repository and the Ballerina Central repository. The tool dependency resolution mechanism is akin to package dependencies. Once resolved, the tool versions are automatically recorded in the `Dependencies.toml` file and used as the minimum required versions for subsequent builds.\n","id":"manage-dependencies","sub":"source-code-dependencies","third":"","slug":"source-code-dependencies/manage-dependencies","codes":"[[-713247735,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> [org_name/] module_name [</span><span style=\\\"color: #D73A49\\\">as</span><span style=\\\"color: #24292E\\\"> import_prefix];</span></span></code></pre>\"],[-871533555,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io; </span><span style=\\\"color: #6A737D\\\">// Imports the default module of io package</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">\\tio</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;Hello world!&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-217072879,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// Imports the default module from the `ballerina/log` package.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// Imports the default module from the `salesforce` package</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// with an import prefix.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerinax/salesforce </span><span style=\\\"color: #D73A49\\\">as</span><span style=\\\"color: #24292E\\\"> sf;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// Imports a non-default module from the `salesforce` package</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// with an import prefix.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerinax/salesforce.bulk </span><span style=\\\"color: #D73A49\\\">as</span><span style=\\\"color: #24292E\\\"> sfBulk;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">configurable</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> baseUrl </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">?</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">configurable</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> token </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">?</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">sf</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ConnectionConfig sfConfig </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {baseUrl, auth</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {token}};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> contacts </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Name,Email</span><span style=\\\"color: #005CC5\\\">\\\\n</span><span style=\\\"color: #032F62\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">+</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;John,john434@gmail.com</span><span style=\\\"color: #005CC5\\\">\\\\n</span><span style=\\\"color: #032F62\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">+</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Peter,peter77@gmail.com&quot;</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    sfBulk</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Client bulkClient </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> (</span><span style=\\\"color: #E36209\\\">sfConfig</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    sfBulk</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">BulkJob insertJob </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> bulkClient</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">createJob</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;insert&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;Contact&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;CSV&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    sfBulk</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">BatchInfo batch </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> bulkClient</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">addBatch</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">insertJob</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">contacts</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    log</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">printInfo</span><span style=\\\"color: #24292E\\\">(batch.id.</span><span style=\\\"color: #6F42C1\\\">length</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">&gt;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">0</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">?</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Batch Added Successfully&quot;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Failed to add the Batch&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[2039675758,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[[</span><span style=\\\"color: #6F42C1\\\">dependency</span><span style=\\\"color: #24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">org = </span><span style=\\\"color: #032F62\\\">&quot;ballerinax&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">name = </span><span style=\\\"color: #032F62\\\">&quot;mysql&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">version = </span><span style=\\\"color: #032F62\\\">&quot;1.5.0‚Äù</span></span></code></pre>\"],[-553767983,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[[</span><span style=\\\"color: #6F42C1\\\">dependency</span><span style=\\\"color: #24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">org = </span><span style=\\\"color: #032F62\\\">&quot;ballerinax&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">name = </span><span style=\\\"color: #032F62\\\">&quot;googleapis.gmail&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">version = </span><span style=\\\"color: #032F62\\\">&quot;2.1.1&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">repository = </span><span style=\\\"color: #032F62\\\">&quot;local&quot;</span></span></code></pre>\"],[-2056599276,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[[</span><span style=\\\"color: #6F42C1\\\">repository</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">maven</span><span style=\\\"color: #24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">id = </span><span style=\\\"color: #032F62\\\">&quot;&lt;repository-id&gt;&quot;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6A737D\\\"># This ID is used when pushing/ pulling packages</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">url = </span><span style=\\\"color: #032F62\\\">&quot;&lt;repository-url&gt;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">username = </span><span style=\\\"color: #032F62\\\">&quot;&lt;username&gt;/&lt;userId&gt;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">accesstoken = </span><span style=\\\"color: #032F62\\\">&quot;&lt;password&gt;/&lt;accesstoken&gt;&quot;</span></span></code></pre>\"],[1241412872,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[[</span><span style=\\\"color: #6F42C1\\\">repository</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">maven</span><span style=\\\"color: #24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">id = </span><span style=\\\"color: #032F62\\\">&quot;github_1&quot;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6A737D\\\"># This ID is used when pushing/ pulling balas</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">url = </span><span style=\\\"color: #032F62\\\">&quot;https://maven.pkg.github.com/jackson12/jackson-encrypt-module&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">username = </span><span style=\\\"color: #032F62\\\">&quot;jackson12&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">accesstoken = </span><span style=\\\"color: #032F62\\\">&quot;ghp_nMlJsjshhdtdt5367389920020hHfrdrd&quot;</span></span></code></pre>\"],[51734282,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[[</span><span style=\\\"color: #6F42C1\\\">dependency</span><span style=\\\"color: #24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">org = </span><span style=\\\"color: #032F62\\\">&quot;jackson&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">name = </span><span style=\\\"color: #032F62\\\">&quot;encrypter&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">version = </span><span style=\\\"color: #032F62\\\">&quot;2.1.1&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">repository = </span><span style=\\\"color: #032F62\\\">&quot;github_1&quot;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6A737D\\\"># Must match a repository ID configured in the Settings.toml file.</span></span></code></pre>\"],[799569223,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[[</span><span style=\\\"color: #6F42C1\\\">platform</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">java11</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">dependency</span><span style=\\\"color: #24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Group ID of the Maven dependency.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">groupId = </span><span style=\\\"color: #032F62\\\">&quot;&lt;group-id&gt;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Artifact ID of the Maven dependency.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">artifactId = </span><span style=\\\"color: #032F62\\\">&quot;&lt;artifact-id&gt;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Version of the Maven dependency.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">version = </span><span style=\\\"color: #032F62\\\">&quot;&lt;version&gt;&quot;</span></span></code></pre>\"],[-1170576577,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[[</span><span style=\\\"color: #6F42C1\\\">platform</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">java11</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">dependency</span><span style=\\\"color: #24292E\\\">]]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Group ID of the dependency.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">groupId = </span><span style=\\\"color: #032F62\\\">&quot;&lt;group-id&gt;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Artifact ID of the dependency.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">artifactId = </span><span style=\\\"color: #032F62\\\">&quot;&lt;artifact-id&gt;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Version of the dependency.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">version = </span><span style=\\\"color: #032F62\\\">&quot;&lt;version&gt;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Absolute or relative path of the JAR file.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">path = </span><span style=\\\"color: #032F62\\\">&quot;&lt;path-to-jar-file-1&gt;&quot;</span></span></code></pre>\"]]"},"__N_SSG":true}