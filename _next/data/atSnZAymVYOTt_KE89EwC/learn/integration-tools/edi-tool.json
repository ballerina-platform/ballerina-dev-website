{"pageProps":{"frontmatter":{"layout":"ballerina-edi-support-left-nav-pages-swanlake","title":"EDI tool","description":"The EDI tool provides the below set of command line tools to work with EDI files in Ballerina.","keywords":"ballerina, programming language, edi, contract, text, JSON","permalink":"/learn/edi-tool/","active":"edi-tool","intro":"The EDI tool provides the below set of command line tools to work with EDI files in Ballerina."},"content":" \n\n## Install the tool\n\nExecute the command below to pull the EDI tool from [Ballerina Central](https://central.ballerina.io/ballerina/edi/latest).\n\n```\n$ bal tool pull edi\n```\n\n## Usage\n\nThe tool supports three main usages, as follows:\n\n- [**Code generation**](#code-generation): Generate Ballerina records and parser functions for a given EDI schema.\n- [**Package generation**](#package-generation): Generates Ballerina records, parser functions, utility methods, and a REST connector for a given collection of EDI schemas and organizes those as a Ballerina package.\n- [**Schema conversion**](#schema-conversion): Convert various EDI schema formats to Ballerina EDI schema format.\n\n### Define the EDI schema\n\nPrior to utilizing the EDI tools, it is crucial to define the structure of the EDI data meant for import. Developers have the option to utilize the [Ballerina EDI Schema Specification](https://github.com/ballerina-platform/module-ballerina-edi/blob/main/docs/specs/SchemaSpecification.md) for guidance. This specification outlines the essential components required to describe an EDI schema, encompassing attributes such as name, delimiters, segments, field definitions, components, sub-components, and additional configuration options.\n\nAs an illustrative example, consider the following EDI schema definition for a `simple order`, assumed to be stored as `schema.json`:\n\n```json\n{\n    \"name\": \"SimpleOrder\",\n    \"delimiters\" : {\"segment\" : \"~\", \"field\" : \"*\", \"component\": \":\", \"repetition\": \"^\"},\n    \"segments\" : [\n        {\n            \"code\": \"HDR\",\n            \"tag\" : \"header\",\n            \"minOccurances\": 1,\n            \"fields\" : [{\"tag\": \"code\"}, {\"tag\" : \"orderId\"}, {\"tag\" : \"organization\"}, {\"tag\" : \"date\"}]\n        },\n        {\n            \"code\": \"ITM\",\n            \"tag\" : \"items\",\n            \"maxOccurances\" : -1,\n            \"fields\" : [{\"tag\": \"code\"}, {\"tag\" : \"item\"}, {\"tag\" : \"quantity\", \"dataType\" : \"int\"}]\n        }\n    ]\n}\n```\n\nThis schema can be employed to parse EDI documents featuring one HDR segment, mapped to the `header`, and any number of ITM segments, mapped to `items`. The HDR segment incorporates three `fields`, corresponding to _orderId_, _organization_, and _date_. Each ITM segment comprises two fields, mapped to _item_ and _quantity_.\n\nBelow is an example of an EDI document that can be parsed using the aforementioned schema. Let's assume that the following EDI information is saved in a file named `sample.edi`:\n\n```\nHDR*ORDER_1201*ABC_Store*2008-01-01~\nITM*A-250*12~\nITM*A-45*100~\nITM*D-10*58~\nITM*K-80*250~\nITM*T-46*28~\n```\nIf you already have an existing X12, EDIFACT, or ESL schema file, you can convert it to the Ballerina EDI schema using the EDI tool's [schema-conversion](#schema-conversion) capabilities.\n\n## Code generation\n\nThe below command can be used to generate typed Ballerina records and parser functions for a given EDI schema.\n\n```\n$ bal edi codegen -i <input schema path> -o <output path>\n```\n\nThe above command generates all Ballerina records and parser functions required for working with data in the given EDI schema and writes those into the file specified in the `output path`. The generated parser function (i.e., `fromEdiString(...)`) can read EDI text files into generated records, which can be accessed from the Ballerina code, similar to accessing any other Ballerina record. Similarly, the generated serialization function (i.e., `toEdiString(...)`) can serialize generated Ballerina records into EDI text.\n\n### `codegen` command options\n\n| Command option  | Description                  | Mandatory/Optional |\n|-----------------|------------------------------|--------------------|\n| `-i, --input`   | Path to the EDI schema file. | Mandatory          |\n| `-o, --output`  | Path to the output file.     | Mandatory          |\n\n### Code generation example\n\nCreate a new Ballerina project named `sample` and create a module named `orders` inside that project by using the below commands.\n\n```\n$ bal new sample\n$ cd sample\n$ bal add orders\n```\n\nCreate a new folder named resources in the root of the project and copy the `schema.json` and `sample.edi` files into it. At this point, the directory structure of the project would look like below:\n```\n.\n├── Ballerina.toml\n├── Dependencies.toml\n├── main.bal\n├── modules\n│   └── orders\n│       ├── Module.md\n│       ├── orders.bal\n│       ├── resources\n│       └── tests\n│           └── lib_test.bal\n└── resources\n    ├── sample.edi\n    └── schema.json\n```\n\nBallerina records for the EDI schema in `resources/schema.json` can be generated as follows (generated Ballerina records will be saved in `modules/order/records.bal`).\n\nRun the below command from the project root directory to generate the Ballerina parser for the above schema.\n\n```\n$ bal edi codegen -i resources/schema.json -o modules/orders/records.bal\n```\n\nGenerated Ballerina records for the above schema are shown below:\n\n```ballerina\npublic type Header_Type record {|\n   string code = \"HDR\";\n   string orderId?;\n   string organization?;\n   string date?;\n|};\n\npublic type Items_Type record {|\n   string code = \"ITM\";\n   string item?;\n   int? quantity?;\n|};\n\npublic type SimpleOrder record {|\n   Header_Type header;\n   Items_Type[] items = [];\n|};\n```\n\n#### Reading EDI files\n\nThe generated `fromEdiString` function can be used to read EDI text files into the generated Ballerina record, as shown below. Note that any data item in the EDI can be accessed using the record's fields, as shown in the example code.\n\n```ballerina\nimport ballerina/io;\nimport sample.orders;\n\npublic function main() returns error? {\n    string ediText = check io:fileReadString(\"resources/sample.edi\");\n    orders:SimpleOrder sample_order = check orders:fromEdiString(ediText);\n    io:println(sample_order.header.date);\n}\n```\n\n#### Writing EDI files\n\nThe generated `toEdiString` function can be used to serialize `SimpleOrder` records into EDI text, as shown below:\n\n```ballerina\nimport ballerina/io;\nimport sample.orders;\npublic function main() returns error? {\n    orders:SimpleOrder simpleOrder = {header: {code: \"HDR\", orderId: \"ORDER_200\", organization: \"ABC_Store\", date: \"17-05-2024\"}};\n    simpleOrder.items.push({code: \"ITM\", item: \"A680\", quantity: 15}); \n    simpleOrder.items.push({code: \"ITM\", item: \"A530\", quantity: 2}); \n    simpleOrder.items.push({code: \"ITM\", item: \"A500\", quantity: 4});\n    string ediText = check orders:toEdiString(simpleOrder);\n    io:println(ediText);\n}\n```\n\n## Package generation\n\nUsually, organizations have to work with many EDI formats, and integration developers need to have a convenient way to work on EDI data with minimum effort. Ballerina EDI libraries facilitate this by allowing organizations to pack all EDI processing codes for their EDI collections into an importable package. Therefore, integration developers can simply import those libraries and convert EDI messages into Ballerina records in a single line of code.\n\nThe below command can be used to generate Ballerina records, parser and util functions, and a REST connector for a given collection of EDI schemas organized into a Ballerina package:\n\n```\n$ bal edi libgen -p <package name> -i <input schema folder> -o <output folder>\n```\n\nThe Ballerina package will be generated in the output folder. This package can be built and published by issuing `bal pack` and `bal push` commands from the output folder. Then, the generated package can be imported into any Ballerina project, and the generated utility functions of the package can be invoked to parse EDI messages into Ballerina records. \n\n### `libgen` command options\n\n| Command option  | Description                                           | Mandatory/Optional |\n|-----------------|-------------------------------------------------------|--------------------|\n| `-p, --package` | Package name (organization-name/package-name).        | Mandatory          |\n| `-i, --input`   | Path to the folder containing EDI schemas.            | Mandatory          |\n| `-o, --output`  | Path to the folder where libraries will be generated. | Mandatory          |\n\n### Package generation example\n\nLet's assume that an organization named \"CityMart\" needs to work with X12 850, 810, 820, and 855 to handle purchase orders. CityMart's integration developers can put schemas of those X12 specifications into a folder as follows:\n\n```\n|-- CityMart\n    |--lib\n    |--schemas\n       |--850.json\n       |--810.json\n       |--820.json\n       |--855.json\n```\n\nThen, the `libgen` command can be used to generate a Ballerina package as shown below:\n\n```\n$ bal edi libgen -p citymart/porder -i CityMart/schemas -o CityMart/lib\n```\n\nThe generated Ballerina package will look like below:\n\n```\n|-- CityMart\n    |--lib  \n    |--porder\n    |     |--modules\n    |\t  |   |--m850\n    |\t  |\t  |  |--G_850.bal\n    |     |   |  |--transformer.bal\n    |\t  |\t  |--m810\n    |\t  |\t  |  |--G_810.bal\n    |     |   |  |--transformer.bal\n    |\t  |\t  |--m820\n    |\t  |\t  |  |--G_820.bal\n    |     |   |  |--transformer.bal\n    |\t  |\t  |--m855\n    |\t  |\t    |--G_855.bal\n    |     |     |--transformer.bal\n    |\t  |--Ballerina.toml\n    |\t  |--Module.md\n    |\t  |--Package.md\n    |\t  |--porder.bal\n    |\t  |--rest_connector.bal\n    |\n    |--schemas\n       |--850.json\n       |--810.json\n       |--820.json\n       |--855.json\n```\n\nAs seen in the above project structure, code for each EDI schema is generated into a separate module, to prevent possible conflicts. Now it is possible to build the above project using the `bal pack` command and publish it into the central repository using the `bal push` command. Then any Ballerina project can import this package and use it to work with purchase order-related EDI files. An example of using this package for reading an 850 file and writing an 855 file is shown below:\n\n```ballerina\nimport ballerina/io;\nimport citymart/porder.m850;\nimport citymart/porder.m855;\n\npublic function main() returns error? {\n    string orderText = check io:fileReadString(\"orders/d15_05_2023/order10.edi\");\n    m850:Purchase_Order purchaseOrder = check m850:fromEdiString(orderText);\n    ...\n    m855:Purchase_Order_Acknowledgement orderAck = {...};\n    string orderAckText = check m855:toEdiString(orderAck);\n    check io:fileWriteString(\"acks/d15_05_2023/ack10.edi\", orderAckText);\n}\n```\n\nIt is quite common for different trading partners to use variations of standard EDI formats. In such cases, it is possible to create partner-specific schemas and generate a partner-specific Ballerina package for processing interactions with the particular partner.\n\n#### Using generated EDI libraries as standalone REST services\n\nEDI libraries generated in the previous step can also be compiled into a jar file (using the `bal build` command) and executed (using the `bal run` command) as a standalone Ballerina service that processes EDI files via a REST interface. This is useful for microservice environments where the EDI processing functionality can be deployed as a separate microservice.\n\nFor example, the citymart package generated in the above step can be built and executed as a jar file. Once executed, it will expose a REST service to work with X12 850, 810, 820, and 855 files. The conversion of X12 850 EDI text to JSON using the REST service is shown below:\n\n```\n$ curl --request POST \\\n  --url http://localhost:9090/porderParser/edis/850 \\\n  --header 'Content-Type: text/plain' \\\n  --data 'ST*834*12345*005010X220A1~\nBGN*00*12456*20020601*1200****~\nREF*38*ABCD012354~\nAMT*cc payment*467.34*~\nN1*P5**FI*999888777~\nN1*IN**FI*654456654~\nINS*Y*18*025**A***FT~\nREF*0F*202443307~\nREF*1L*123456001~\nNM1*IL*1*SMITH*WILLIAM****ZZ*202443307~\nHD*025**DEN~\nDTP*348*D8*20020701~\nSE*12*12345~'\n```\n\nThe above REST call will return a JSON response like the below:\n\n```\n{\n    \"Transaction_Set_Header\": {\n        \"Transaction_Set_Identifier_Code\": \"834\",\n        \"Transaction_Set_Control_Number\": \"12345\",\n        \"Implementation_Convention_Reference\": \"005010X220A1\"\n    },\n    \"Beginning_Segment\": {\n        \"Transaction_Set_Purpose_Code\": \"00\",\n        \"Reference_Identification\": \"12456\",\n        \"Date\": \"20020601\",\n        \"Time\": \"1200\"\n    },\n    \"Reference_Information\": [\n        {\n            \"Reference_Identification_Qualifier\": \"38\",\n            \"Reference_Identification\": \"ABCD012354\"\n        }\n    ],\n    \"Date_or_Time_or_Period\": [],\n    \"Monetary_Amount_Information\": [\n        {\n            \"Amount_Qualifier_Code\": \"cc payment\",\n            \"Monetary_Amount\": 467.34\n        }\n    ],...\n}\n```\n\n## Schema conversion\n\nInstead of writing the Ballerina EDI schema from scratch, the Ballerina EDI tool also supports converting various EDI schema formats to the Ballerina EDI schema format.\n\n### X12 schema to the Ballerina EDI schema\n\nX12, short for ANSI ASC X12, is a standard for electronic data interchange (EDI) in the United States. It defines the structure and format of business documents such as `purchase orders`, `invoices`, and `shipping notices`, allowing for seamless communication between different computer systems. X12 standards cover a wide range of industries, including healthcare, finance, retail, and manufacturing.\n\nThe below command can be used to convert the X12 schema to the Ballerina EDI schema:\n\n``` \n$ bal edi convertX12Schema -H <enable headers mode> -c <enable collection mode > -i <input schema path> -o <output json file/folder path> -d <segment details path>\n```\n\n#### `convertX12Schema` command options\n\n| Command option     | Description                                                 | Mandatory/Optional |\n|--------------------|-------------------------------------------------------------|--------------------|\n| `-H, --headers`    | Enable headers mode for X12 schema conversion.              | Optional           |\n| `-c, --collection` | Enable collection mode for X12 schema conversion.           | Optional           |\n| `-i, --input`      | Path to the X12 schema file.                                | Mandatory          |\n| `-o, --output`     | Path to the output file or folder.                          | Mandatory          |\n| `-d, --segdet`     | Path to the segment details file for X12 schema conversion. | Optional           |\n\nExample:\n```\n$ bal edi convertX12Schema -i input/schema.xsd -o output/schema.json\n```\n\n### EDIFACT schema to the Ballerina EDI schema\n\nEDIFACT, which stands for Electronic Data Interchange For Administration, Commerce, and Transport, is an international EDI standard developed by the United Nations. It's widely used in Europe and many other parts of the world. EDIFACT provides a common syntax for exchanging business documents electronically between trading partners, facilitating global trade and improving efficiency in supply chain management.\n\nThe below command can be used to convert the EDIFACT schema to the Ballerina EDI schema:\n\n```\n$ bal edi convertEdifactSchema -v <EDIFACT version> -t <EDIFACT message type> -o <output folder>\n```\n\n#### `convertEdifactSchema` command options\n\n| Command option  | Description                                                 | Mandatory/Optional |\n|-----------------|-------------------------------------------------------------|--------------------|\n| `-v, --version` | EDIFACT version for EDIFACT schema conversion.              | Mandatory          |\n| `-t, --type`    | EDIFACT message type for EDIFACT schema conversion.         | Mandatory          |\n| `-o, --output`  | Path to the folder where EDIFACT schemas will be generated. | Mandatory          |\n                                            \nExample:\n```\n$ bal edi convertEdifactSchema -v d03a -t ORDERS -o output/schema.json\n```\n\n### ESL to Ballerina EDI schema\n\nESL, or Electronic Shelf Labeling, is a technology used in retail stores to display product pricing and information electronically. Instead of traditional paper price tags, ESL systems use digital displays that can be updated remotely, allowing retailers to change prices in real-time and automate pricing strategies.\n\nThe below command can be used to convert the ESL schema to the Ballerina EDI schema:\n\n```\n$ bal edi convertESL -b <segment definitions file path> -i <input ESL schema file/folder> -o <output file/folder>\n```\n\n#### `convertEdifactSchema` command options\n\n| Command option   | Description                                                     | Mandatory/Optional |\n|------------------|-----------------------------------------------------------------|--------------------|\n| `-b, --basedef`  | Path to the segment definitions file for ESL schema conversion. | Mandatory          |\n| `-i, --input`    | Path to the ESL schema file or folder.                          | Mandatory          |\n| `-o, --output`   | Path to the output file or folder.                              | Mandatory          |\n \nExample:\n```\n$ bal edi convertESL -b segment_definitions.yaml -i esl_schema.esl -o output/schema.json\n```\n","id":"edi-tool","sub":"","third":"","slug":"edi-tool","codes":"[[1778295981,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">&quot;name&quot;</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">&quot;SimpleOrder&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">&quot;delimiters&quot;</span><span style=\\\"color: #24292E\\\"> : {</span><span style=\\\"color: #005CC5\\\">&quot;segment&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;~&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">&quot;field&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;*&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">&quot;component&quot;</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">&quot;:&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">&quot;repetition&quot;</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">&quot;^&quot;</span><span style=\\\"color: #24292E\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">&quot;segments&quot;</span><span style=\\\"color: #24292E\\\"> : [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">&quot;code&quot;</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">&quot;HDR&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;header&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">&quot;minOccurances&quot;</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">&quot;fields&quot;</span><span style=\\\"color: #24292E\\\"> : [{</span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">&quot;code&quot;</span><span style=\\\"color: #24292E\\\">}, {</span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;orderId&quot;</span><span style=\\\"color: #24292E\\\">}, {</span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;organization&quot;</span><span style=\\\"color: #24292E\\\">}, {</span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;date&quot;</span><span style=\\\"color: #24292E\\\">}]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">&quot;code&quot;</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">&quot;ITM&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;items&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">&quot;maxOccurances&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #005CC5\\\">-1</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #005CC5\\\">&quot;fields&quot;</span><span style=\\\"color: #24292E\\\"> : [{</span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\">: </span><span style=\\\"color: #032F62\\\">&quot;code&quot;</span><span style=\\\"color: #24292E\\\">}, {</span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;item&quot;</span><span style=\\\"color: #24292E\\\">}, {</span><span style=\\\"color: #005CC5\\\">&quot;tag&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;quantity&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">&quot;dataType&quot;</span><span style=\\\"color: #24292E\\\"> : </span><span style=\\\"color: #032F62\\\">&quot;int&quot;</span><span style=\\\"color: #24292E\\\">}]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1415837919,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">Header_Type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> code </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;HDR&quot;</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> orderId?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> organization?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> date?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">Items_Type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> code </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;ITM&quot;</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> item?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\">? quantity?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">SimpleOrder</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   Header_Type header;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   Items_Type[] items </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[1377950288,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> sample.orders;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> ediText </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fileReadString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;resources/sample.edi&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    orders</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">SimpleOrder sample_order </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> orders</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fromEdiString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">ediText</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(sample_order.header.date);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-881742221,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> sample.orders;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    orders</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">SimpleOrder simpleOrder </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {header</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {code: </span><span style=\\\"color: #032F62\\\">&quot;HDR&quot;</span><span style=\\\"color: #24292E\\\">, orderId</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;ORDER_200&quot;</span><span style=\\\"color: #24292E\\\">, organization</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;ABC_Store&quot;</span><span style=\\\"color: #24292E\\\">, date</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;17-05-2024&quot;</span><span style=\\\"color: #24292E\\\">}};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    simpleOrder.items.</span><span style=\\\"color: #6F42C1\\\">push</span><span style=\\\"color: #24292E\\\">({code</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;ITM&quot;</span><span style=\\\"color: #24292E\\\">, item</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;A680&quot;</span><span style=\\\"color: #24292E\\\">, quantity</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">15</span><span style=\\\"color: #24292E\\\">}); </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    simpleOrder.items.</span><span style=\\\"color: #6F42C1\\\">push</span><span style=\\\"color: #24292E\\\">({code</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;ITM&quot;</span><span style=\\\"color: #24292E\\\">, item</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;A530&quot;</span><span style=\\\"color: #24292E\\\">, quantity</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">2</span><span style=\\\"color: #24292E\\\">}); </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    simpleOrder.items.</span><span style=\\\"color: #6F42C1\\\">push</span><span style=\\\"color: #24292E\\\">({code</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;ITM&quot;</span><span style=\\\"color: #24292E\\\">, item</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;A500&quot;</span><span style=\\\"color: #24292E\\\">, quantity</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">4</span><span style=\\\"color: #24292E\\\">});</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> ediText </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> orders</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">toEdiString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">simpleOrder</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">ediText</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1055091210,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> citymart/porder.m850;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> citymart/porder.m855;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> orderText </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fileReadString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;orders/d15_05_2023/order10.edi&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    m850</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Purchase_Order purchaseOrder </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> m850</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fromEdiString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">orderText</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    m855</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Purchase_Order_Acknowledgement orderAck </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">...</span><span style=\\\"color: #24292E\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> orderAckText </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> m855</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">toEdiString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">orderAck</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fileWriteString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;acks/d15_05_2023/ack10.edi&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">orderAckText</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}