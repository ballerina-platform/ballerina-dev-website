{"pageProps":{"frontmatter":{"layout":"ballerina-working-with-llms-using-natural-expressions-left-nav-pages-swanlake","title":"Work with Large Language Models (LLMs) using natural expressions","description":"Bring AI-powered capabilities into your integrations using natural expressions to call LLMs with automatic binding of the response to user-defined types.","keywords":"ballerina, AI, LLM, large language model, natural programming","permalink":"/learn/work-with-llms-using-natural-expressions/","active":"work-with-llms-using-natural-expressions","intro":"This guide helps you understand the basics of using natural expressions in Ballerina to work with LLMs."},"content":"\n## Set up the prerequisites\n\nTo complete this tutorial, you need:\n\n1. Ballerina 2201.13.0-m1 (Swan Lake) or greater. Install [Ballerina](/downloads/) and use the `bal dist pull` command to pull the milestone version.\n\n    ```\n    $ bal dist pull 2201.13.0-m1\n    ```\n\n2. A text editor\n  >**Tip:** Preferably, <a href=\"https://code.visualstudio.com/\" target=\"_blank\">Visual Studio Code</a> with the \n  <a href=\"https://wso2.com/ballerina/vscode/docs/\" target=\"_blank\">Ballerina extension</a> installed. Enable [experimental features](/learn/vs-code-extension/configure-the-extension/) for Ballerina.\n\n3. A command terminal\n\n## Understand the implementation\n\nThis tutorial describes how to use Ballerina's natural expressions to integrate working with large language models (LLMs). In this sample you will develop a REST API with a single GET resource that accepts the name of a country, the interests of the user, and a count and uses a natural expression to call an LLM to identify the specified number of attractions in the specified country that may be of interest to the user. The expected structure of the response is indicated by the expected type and natural expressions automatically bind the response to the expected type.\n\n## Create the service package\n\nBallerina uses packages to group code. You need to create a Ballerina package and write the business logic in it. In the terminal, execute the command below to create the Ballerina package for the implementation.\n\n> **Info:** For more information on Ballerina packages, see [Organize Ballerina code](/learn/organize-ballerina-code/).\n\n```\n$ bal new attraction_finder_service\n``` \n\nThis creates a directory named `attraction_finder_service` with the files below.\n\n```\n.\n├── attraction_finder_service\n│   ├── Ballerina.toml\n│   └── main.bal\n```\n\n>**Tip:** Rename the automatically-created `main.bal` file to `service.bal` and remove the generated content.\n\n## Create the service\n\n### Create a record to represent an attraction\n\nIn Ballerina, records are a data type that maps keys to values. Define a [closed record](/learn/by-example/controlling-openness/) to represent an attraction in the `service.bal` file. \n\n>**Info:** This record type is also used to generate a JSON schema to be used in the LLM call to specify a format for the expected response.\n\n```ballerina\n# Represents a tourist attraction.\ntype Attraction record {|\n    # The name of the attraction\n    string name;\n    # The city where the attraction is located\n    string city;\n    # A notable feature or highlight of the attraction\n    string highlight;\n|};\n```\n\n### Introduce an HTTP RESTful API\n\nIntroduce an HTTP service to expose a RESTful API with the GET resource that allows retrieving the required details of relevant attractions. \n\n### Create a service\n\nIn the `service.bal` file, add an import for the Ballerina [`HTTP` module](https://lib.ballerina.io/ballerina/http/latest).\n\n```ballerina\nimport ballerina/http;\n```\n\nThen add the following service snippet. \n\n```ballerina\nservice on new http:Listener(8080) {\n}\n```\n\n### Create the resource method\n\nWithin this service, you can define the GET resource method to retrieve and return attractions in the expected format. Specify the input as parameters. Use `Attraction[]` in the return type to indicate that an array of `Attraction`s will be returned from the resource and `http:InternalServerError` to represent LLM call and/or data binding failures.\n\n```ballerina\nservice on new http:Listener(8080) {\n    resource function get attractions(string country, string interest, int count = 5) \n            returns Attraction[]|http:InternalServerError {\n\n    }    \n}\n```\n\n### Introduce the natural expression to call the LLM and bind the response\n\nWithin the resource, introduce a natural expression with the requirement specified in natural language. Use interpolations to refer to in-scope variables/parameters; at runtime, these get replaced with the values passed to the parameters.\n\n```ballerina\nAttraction[]|error attractions = natural {\n    Tell me the top ${count} places to visit in ${country} which are \n    good for a tourist who has an interest in ${interest} to visit.  \n    Include a highlight one-liner about that place.\n};\n```\n\nIf the LLM call was successful and the response was returned in the expected format, return the result from the resource. If it failed, return an `Internal Server Error` response from the resource.\n\n```ballerina\nservice on new http:Listener(8080) {\n    resource function get attractions(string country, string interest, int count = 5) \n            returns Attraction[]|http:InternalServerError {\n\n        Attraction[]|error attractions = natural {\n            Tell me the top ${count} places to visit in ${country} which are \n            good for a tourist who has an interest in ${interest} to visit.  \n            Include a highlight one-liner about that place.\n        };\n\n        if attractions is Attraction[] {\n            return attractions;\n        }\n        return {body: \"Failed to fetch attractions: \" + attractions.message()};\n    }\n}\n```\n\n## The `service.bal` file complete code \n\nThe complete code in the `service.bal` will be as follows.\n\n```ballerina\nimport ballerina/http;\n\n# Represents a tourist attraction.\ntype Attraction record {|\n    # The name of the attraction\n    string name;\n    # The city where the attraction is located\n    string city;\n    # A notable feature or highlight of the attraction\n    string highlight;\n|};\n\nservice on new http:Listener(8080) {\n    resource function get attractions(string country, string interest, int count = 5) \n            returns Attraction[]|http:InternalServerError {\n        Attraction[]|error attractions = natural {\n            Tell me the top ${count} places to visit in ${country} which are \n            good for a tourist who has an interest in ${interest} to visit.  \n            Include a highlight one-liner about that place.\n        };\n\n        if attractions is Attraction[] {\n            return attractions;\n        }\n        return {body: \"Failed to fetch attractions: \" + attractions.message()};\n    }    \n}\n```\n\n## Configure the LLM\n\n### Configure the default LLM\n\nProvide configuration for the LLM via configurable variables. This configuration will be used in an LLM client across all natural expressions, unless a model is explicitly specified in the natural expression.\n\nYou can use your keys and configuration for OpenAI or Azure OpenAI by configuring the `defaultModelConfig` variable in the `ballerina/np` module.\n\nE.g., add the following for Azure OpenAI in the Config.toml file\n\n```toml\n[ballerina.np.defaultModelConfig]\nserviceUrl = \"<SERVICE_URL>\"\ndeploymentId = \"<DEPLOYMENT_ID>\"\napiVersion = \"<API_VERSION>\"\nconnectionConfig.auth.apiKey = \"<YOUR_API_KEY>\"\n```\n\nAlternatively, you can use the default model made available via WSO2 Copilot. Log in to WSO2 Copilot, open up the VS Code command palette (`Ctrl + Shift + P` or `command + shift + P`), and run `Configure Default Model for Natural Functions`. This will add configuration for the default model into the Config.toml file. Please note that this will require VS Code being open in the relevant directory.\n\n![Configure the default model](/learn/images/ai_natural_expr_configure_default_model.png)\n\n### Configure the LLM in the natural expression\n\nAlternatively, for finer control over the model used with each natural expression, the model can also be explicitly specified in the code. \n\nNatural expressions expect an argument of type `np:ModelProvider` to use as the model. The `ballerinax/np` package provides implementations of `np:ModelProvider` for commonly-used providers.\n\n```ballerina\nimport ballerinax/np.openai;\n\nconfigurable string model = ?;\nconfigurable string token = ?;\n\nfinal openai:ModelProvider openAI = check new (\n    {connectionConfig: {auth: {token}}},\n    model\n);\n\n// Specify the model after the `natural` keyword.\nAttraction[]|error attractions = natural (openAI) {\n    Tell me the top ${count} places to visit in ${country} which are \n    good for a tourist who has an interest in ${interest} to visit.  \n    Include a highlight one-liner about that place.\n};\n```\n\nThe updated source code is as follows.\n\n```ballerina\nimport ballerina/http;\nimport ballerinax/np.openai;\n\n# Represents a tourist attraction.\ntype Attraction record {|\n    # The name of the attraction\n    string name;\n    # The city where the attraction is located\n    string city;\n    # A notable feature or highlight of the attraction\n    string highlight;\n|};\n\nconfigurable string model = ?;\nconfigurable string token = ?;\n\nfinal openai:ModelProvider openAI = check new (\n    {connectionConfig: {auth: {token}}},\n    model\n);\n\nservice on new http:Listener(8080) {\n    resource function get attractions(string country, string interest, int count = 5) \n            returns Attraction[]|http:InternalServerError {\n        Attraction[]|error attractions = natural (openAI) {\n            Tell me the top ${count} places to visit in ${country} which are \n            good for a tourist who has an interest in ${interest} to visit.  \n            Include a highlight one-liner about that place.\n        };\n\n        if attractions is Attraction[] {\n            return attractions;\n        }\n        return {body: \"Failed to fetch attractions: \" + attractions.message()};\n    }    \n}\n```\n\n## Run the service \n\nExecute the command below to run the service.\n\n```\n$ bal run --experimental\n```\n\nYou view the output below.\n\n```\nCompiling source\n        ballerina_tutorials/attraction_finder_service:0.1.0\n\nRunning executable\n```\n\n## Try the service\n\nInvoke the defined resource method by making the following `GET` request.\n\n```\n$ curl \"http://localhost:8080/attractions?country=Sri%20Lanka&interest=Surfing&count=3\"\n[{\"name\":\"Arugam Bay\", \"city\":\"Pottuvil\", \"highlight\":\"Regarded as Sri Lanka's premier surf spot, Arugam Bay offers consistent waves and a vibrant surf culture.\"}, {\"name\":\"Hikkaduwa\", \"city\":\"Hikkaduwa\", \"highlight\":\"Famous for its stunning reefs, Hikkaduwa is ideal for both surfing and snorkeling in a picturesque setting.\"}, {\"name\":\"Unawatuna\", \"city\":\"Galle\", \"highlight\":\"With its beautiful beaches and laid-back atmosphere, Unawatuna is a perfect spot for beginner surfers and relaxation.\"}]\n```\n\n## Learn more\n\nSee [Introducing natural programming](https://blog.ballerina.io/posts/2025-04-26-introducing-natural-programming).\n","id":"work-with-llms-using-natural-expressions","sub":"featured-scenarios","third":"","slug":"featured-scenarios/work-with-llms-using-natural-expressions","codes":"[[-1215192360,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a tourist attraction.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Attraction</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The name of the attraction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The city where the attraction is located</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> city;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # A notable feature or highlight of the attraction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> highlight;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1976184615,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span></code></pre>\"],[1390876527,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[97725266,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> attractions</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> country</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> interest</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> count</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">) </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            returns</span><span style=\\\"color:#24292E\\\"> Attraction[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">InternalServerError {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[-1118883044,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">Attraction[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> attractions </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> natural {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Tell me the top ${count} places to visit </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${country} which are </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    good for a tourist who has an interest </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${interest} to visit.  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Include a highlight one</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">liner about that place.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-822945801,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> attractions</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> country</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> interest</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> count</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">) </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            returns</span><span style=\\\"color:#24292E\\\"> Attraction[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">InternalServerError {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        Attraction[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> attractions </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> natural {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            Tell me the top ${count} places to visit </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${country} which are </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            good for a tourist who has an interest </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${interest} to visit.  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            Include a highlight one</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">liner about that place.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        };</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> attractions </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> Attraction[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> attractions;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> {body</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Failed to fetch attractions: \\\"</span><span style=\\\"color:#24292E\\\"> + attractions.</span><span style=\\\"color:#6F42C1\\\">message</span><span style=\\\"color:#24292E\\\">()};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[698730694,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a tourist attraction.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Attraction</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The name of the attraction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The city where the attraction is located</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> city;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # A notable feature or highlight of the attraction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> highlight;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> attractions</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> country</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> interest</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> count</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">) </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            returns</span><span style=\\\"color:#24292E\\\"> Attraction[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        Attraction[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> attractions </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> natural {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            Tell me the top ${count} places to visit </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${country} which are </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            good for a tourist who has an interest </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${interest} to visit.  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            Include a highlight one</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">liner about that place.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        };</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> attractions </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> Attraction[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> attractions;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> {body</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Failed to fetch attractions: \\\"</span><span style=\\\"color:#24292E\\\"> + attractions.</span><span style=\\\"color:#6F42C1\\\">message</span><span style=\\\"color:#24292E\\\">()};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"],[865923412,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">[</span><span style=\\\"color:#6F42C1\\\">ballerina</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">np</span><span style=\\\"color:#24292E\\\">.</span><span style=\\\"color:#6F42C1\\\">defaultModelConfig</span><span style=\\\"color:#24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">serviceUrl = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;SERVICE_URL>\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">deploymentId = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;DEPLOYMENT_ID>\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">apiVersion = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;API_VERSION>\\\"</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">connectionConfig.auth.apiKey = </span><span style=\\\"color:#032F62\\\">\\\"&#x3C;YOUR_API_KEY>\\\"</span></span></code></pre>\"],[-1505851575,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/np.openai;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">configurable</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> model </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> ?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">configurable</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> token </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> ?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">final</span><span style=\\\"color:#24292E\\\"> openai</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ModelProvider openAI </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    {connectionConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {auth: {token}}},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    model</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">// Specify the model after the `natural` keyword.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">Attraction[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> attractions </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#6F42C1\\\"> natural </span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">openAI</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Tell me the top ${count} places to visit </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${country} which are </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    good for a tourist who has an interest </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${interest} to visit.  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Include a highlight one</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">liner about that place.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-2048224557,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">import</span><span style=\\\"color:#24292E\\\"> ballerinax/np.openai;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Represents a tourist attraction.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">type</span><span style=\\\"color:#6F42C1\\\"> Attraction</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The name of the attraction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The city where the attraction is located</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> city;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # A notable feature or highlight of the attraction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> highlight;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">configurable</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> model </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> ?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">configurable</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> token </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> ?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">final</span><span style=\\\"color:#24292E\\\"> openai</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">ModelProvider openAI </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> check</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    {connectionConfig</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\"> {auth: {token}}},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209\\\">    model</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">service</span><span style=\\\"color:#D73A49\\\"> on</span><span style=\\\"color:#D73A49\\\"> new</span><span style=\\\"color:#24292E\\\"> http:Listener(</span><span style=\\\"color:#005CC5\\\">8080</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    resource</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#6F42C1\\\"> attractions</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> country</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> interest</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> count</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#005CC5\\\"> 5</span><span style=\\\"color:#24292E\\\">) </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            returns</span><span style=\\\"color:#24292E\\\"> Attraction[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">http</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">InternalServerError {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        Attraction[]</span><span style=\\\"color:#D73A49\\\">|error</span><span style=\\\"color:#24292E\\\"> attractions </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#6F42C1\\\"> natural </span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">openAI</span><span style=\\\"color:#24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            Tell me the top ${count} places to visit </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${country} which are </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            good for a tourist who has an interest </span><span style=\\\"color:#D73A49\\\">in</span><span style=\\\"color:#24292E\\\"> ${interest} to visit.  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">            Include a highlight one</span><span style=\\\"color:#D73A49\\\">-</span><span style=\\\"color:#24292E\\\">liner about that place.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        };</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        if</span><span style=\\\"color:#24292E\\\"> attractions </span><span style=\\\"color:#D73A49\\\">is</span><span style=\\\"color:#24292E\\\"> Attraction[] {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">            return</span><span style=\\\"color:#24292E\\\"> attractions;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">        return</span><span style=\\\"color:#24292E\\\"> {body</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#032F62\\\"> \\\"Failed to fetch attractions: \\\"</span><span style=\\\"color:#24292E\\\"> + attractions.</span><span style=\\\"color:#6F42C1\\\">message</span><span style=\\\"color:#24292E\\\">()};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    }    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}