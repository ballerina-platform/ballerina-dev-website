{"pageProps":{"frontmatter":{"layout":"ballerina-organizing-code-left-nav-pages-swanlake","title":"Organize Ballerina code","description":"The sections below include information about packages and how you can manage the growth of your source code.","keywords":"ballerina, programming language, ballerina packages, dependencies, importing modules","permalink":"/learn/organize-ballerina-code/","active":"organize-ballerina-code","intro":"The sections below include information about packages and how you can manage the growth of your source code."},"content":"\n## Package structure\n\nWriting code in an organized manner from the beginning of the project is important for the lifecycle of the project and its maintainability in the long run. Organized code will make it easy to extend and improve your project over time. Ballerina project structure makes it easy to write clean code by eliminating repetitions, writing reusable code, adding new features without changing the existing code, etc. To achieve this, Ballerina has the concept of packages and modules. \n\nBallerina code is organized in a single shareable unit called a `package`.\n\nA `package` is a collection of `modules`, and a `module` is a collection of Ballerina source files, test files, and resources. A package should contain at least one module called the default module. Each module has its own directory, which organizes source files, test files, and resources.\n\nIt is common in small projects to have only one (default) module in a package. As a result, the default module’s content is placed directly in the root of the package directory.\n\n## Create your first Ballerina package\n\nThe `bal new` command below creates a package with the default module. \n\n```\n$ bal new hello_world\n```\n\nThis creates a new Ballerina package  in the default module with the `Ballerina.toml` file, which identifies a directory as a package and a sample source file (i.e., `main.bal`) with a main function.\n\nThe `bal new` command generates the following file structure.\n\n```\ncd hello_world\ntree .\n.\n├── Ballerina.toml\n└── main.bal\n    \n0 directories, 2 files\n```\n\n>**Info:** You may also create a service or a library package instead of the main function as explained in the sections below. \n\n## Create a Ballerina service package\n\n```\n$ bal new -t service hello_service\n```\n\nThis creates a Ballerina source containing a service declaration with Ballerina tests to test the service. It creates the following file structure with the service template.  \n\n```\ncd hello_service\n.\n├── Ballerina.toml\n├── service.bal\n└── tests\n    └── service_test.bal\n\n1 directory, 3 files\n```\n\n## Create a library package\n\n```\n$ bal new -t lib hello_lib\n```\n\nThis creates a Ballerina source file containing a function that prints `Hello, world!` along with a test file to test the function. Additionally, it creates the `Package.md` file, which is required to [publish a package to Ballerina Central](/learn/publish-packages-to-ballerina-central).\n\n```\n\n├── Ballerina.toml\n├── hello_lib.bal\n├── Module.md\n├── Package.md\n├── resources\n└── tests\n    └── lib_test.bal\n```\n\n## The default module\n\nWhen a package is created with the `bal new` command, the `Ballerina.toml` and the `main.bal` files are created. \n\nThe `main.bal` file is a Ballerina source file, which belongs to the default module. \nThe root directory of the default module is the root directory of the package as well. \nTherefore, the package root directory contains files that belong to the package as well as the default module.\n\nYou can add more source files at the package root, and all the top-level symbols (i.e., functions, variables, etc.) defined in one file will also be visible to other files as they share the same namespace.\nThis namespace is called the default module of the package. The package name, which is specified in the `Ballerina.toml` file is also used to refer to the default module.\n\n## Non-default modules\n\nAs projects grow in complexity, the need arises to organize code better. \nThis could be because you want to separate the functionalities of the package and/or to add boundaries to the visibility of certain functionalities. \nTherefore, Ballerina allows subdividing the code into multiple modules as well.\n\nYou can add more modules to the package using the `bal add` command:\n\n```\n$ cd hello_world\n$ bal add util\n```\n\nThis will create the `modules` directory in the package root. The `modules/util` directory is the root of the `hello_world.util` module. \nThe package structure after adding a non-default module will have the directory structure below.\n\n```\n.\n├── Ballerina.toml\n├── main.bal\n└── modules\n    └── util\n        ├── Module.md\n        ├── resources\n        ├── tests\n        │   └── lib_test.bal\n        └── util.bal\n\n4 directories, 5 files\n```\n\n## Import a module from the same package \n\nYou can access any public symbol from another module of the package by importing the particular module using an import declaration. \n\nThe import declaration syntax is as follows.\n\n```ballerina\nimport module_name [as import_prefix];\n```\n\nIn the above syntax:\n* the `import_prefix` has to be a valid Ballerina identifier and the `import_prefix` is used to refer to public symbols in the declared module.\n* the `import_prefix` is optional. If it is not available, the last part of the module name can be used.\n\nIn a package, which has the default module containing the `main.bal` file and a non-default module named `hello-world.util`, you can add a public function in the `hello_world.util` module and use this function in the `main.bal` file in the default module.\n\n```ballerina\nimport hello_world.util;\n\nString formattedMsg = util:properCaseMessage(\"hello world!\");\n```\n\nSince the `import-prefix` is not given, the module name `util` is used to refer to the symbols in the `hello_world.util` module. \n\n## Package references\n\nFor information on the structure of a package directory, see [Package references](/learn/package-references/).\n","id":"organize-ballerina-code","sub":"source-code-dependencies","third":"","slug":"source-code-dependencies/organize-ballerina-code","codes":"[[1750743418,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> module_name [</span><span style=\\\"color: #D73A49\\\">as</span><span style=\\\"color: #24292E\\\"> import_prefix];</span></span></code></pre>\"],[1925288202,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> hello_world.util;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">String formattedMsg </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> util</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">properCaseMessage</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;hello world!&quot;</span><span style=\\\"color: #24292E\\\">);</span></span></code></pre>\"]]"},"__N_SSG":true}