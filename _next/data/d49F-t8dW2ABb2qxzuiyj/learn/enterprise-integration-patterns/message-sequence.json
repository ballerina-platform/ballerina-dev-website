{"pageProps":{"tagline":"Send large data sets in chunks","desc":"Message sequence sends the data as a sequence of messages and marks each message with sequence identification fields.","category":"Message Construction","index":21,"helps":"Ballerina supports loop constructs such as `while`, `foreach`, and `map`. These constructs can be used to iterate over data and send it in chunks. Program state can be kept in variables.","tags":["Message Sequence","Message Channel","Message Endpoint","Message"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageSequence.html","content":[{"headerCode":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/http;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/io;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client s3Client </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #032F62\">&quot;http://noname-tech.s3.amazonaws.com.balmock.io&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span></code></pre>","mainCode":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">main</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Response metaData </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> s3Client</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">employee_names.</span><span style=\"color: #6F42C1\">head</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> fileSize </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">int</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fromString</span><span style=\"color: #24292E\">(</span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> metaData.</span><span style=\"color: #6F42C1\">getHeader</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;Content-Length&quot;</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fileWriteBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;./resources/employee_names.txt&quot;</span><span style=\"color: #24292E\">, []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> numberOfChunks </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">fileSize</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">10</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Download the data chunk by chunk.</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">foreach </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> i </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\"> ..</span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\"> numberOfChunks {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">map&lt;</span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> headers </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {Range</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> string </span><span style=\"color: #032F62\">`bytes=${</span><span style=\"color: #005CC5\">10</span><span style=\"color: #032F62\"> </span><span style=\"color: #D73A49\">*</span><span style=\"color: #032F62\"> </span><span style=\"color: #24292E\">i</span><span style=\"color: #032F62\">}-${</span><span style=\"color: #005CC5\">10</span><span style=\"color: #032F62\"> </span><span style=\"color: #D73A49\">*</span><span style=\"color: #032F62\"> (</span><span style=\"color: #005CC5\">i</span><span style=\"color: #032F62\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #032F62\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #032F62\">) </span><span style=\"color: #D73A49\">-</span><span style=\"color: #032F62\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Response s3Response </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> s3Client</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">employee_names.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">headers</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> headers);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">byte</span><span style=\"color: #24292E\">[] chunkData </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> s3Response.</span><span style=\"color: #6F42C1\">getBinaryPayload</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">fileWriteBytes</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;./resources/employee_names.txt&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">chunkData</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">io</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">APPEND);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>","raw":"import ballerina/http;\nimport ballerina/io;\n\nfinal http:Client s3Client = check new (\"http://noname-tech.s3.amazonaws.com.balmock.io\");\n\npublic function main() returns error? {\n    http:Response metaData = check s3Client->/employee_names.head();\n    int fileSize = check int:fromString(check metaData.getHeader(\"Content-Length\"));\n\n    check io:fileWriteBytes(\"./resources/employee_names.txt\", []);\n\n    int numberOfChunks = (fileSize + 10 - 1) / 10;\n    // Download the data chunk by chunk.\n    foreach int i in 0 ..< numberOfChunks {\n        map<string> headers = {Range: string `bytes=${10 * i}-${10 * (i + 1) - 1}`};\n        http:Response s3Response = check s3Client->/employee_names.get(headers = headers);\n        byte[] chunkData = check s3Response.getBinaryPayload();\n        check io:fileWriteBytes(\"./resources/employee_names.txt\", chunkData, io:APPEND);\n    }\n}\n","name":"message-sequence.bal"}],"name":" Message Sequence"},"__N_SSG":true}