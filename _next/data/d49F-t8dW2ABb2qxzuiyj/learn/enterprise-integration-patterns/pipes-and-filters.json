{"pageProps":{"tagline":"Divide the processing task into a sequence of smaller, independent processing steps","desc":"The pipes and Filters pattern divides a larger processing task into a sequence of smaller, independent processing steps (Filters) that are connected by channels (Pipes).","category":"Messaging Systems","index":2,"helps":"Ballerina has a query expression syntax that acts as a pipeline of data. Within a query expression, the `where` clause can be used to filter data. Existing functions can be called within the query expression to compose complex message processing logic.","link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/PipesAndFilters.html","tags":["Pipes and Filters","Message Filter","Message Channel","Message"],"content":[{"headerCode":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/http;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">EmployeePerformance</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> empId;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> productivity;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> customerSatisfaction;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> goalAchievement;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">TopPerformer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> empId;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> performance;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> http</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client firebaseClient </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #032F62\">&quot;http://api.employee.performance.firebase.com.balmock.io&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span></code></pre>","mainCode":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">/api/v1</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> http:Listener(</span><span style=\"color: #005CC5\">8080</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">isolated</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">employee</span><span style=\"color: #24292E\">/top\\-performers(</span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">count</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> TopPerformer[]</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        EmployeePerformance[] employeePerformace </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> firebaseClient</span><span style=\"color: #D73A49\">-&gt;/</span><span style=\"color: #24292E\">performance\\.</span><span style=\"color: #6F42C1\">json</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">var</span><span style=\"color: #24292E\"> {empId, productivity, customerSatisfaction, goalAchievement} </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> employeePerformace</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">               </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">float</span><span style=\"color: #24292E\"> performance </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> productivity </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0.3</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> customerSatisfaction </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0.1</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> goalAchievement </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0.6</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">               </span><span style=\"color: #D73A49\">where</span><span style=\"color: #24292E\"> performance </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">7.5</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">               </span><span style=\"color: #D73A49\">limit</span><span style=\"color: #24292E\"> count</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">               </span><span style=\"color: #D73A49\">order</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">by</span><span style=\"color: #24292E\"> performance </span><span style=\"color: #D73A49\">descending</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">               </span><span style=\"color: #D73A49\">select</span><span style=\"color: #24292E\"> {empId, performance};</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>","raw":"import ballerina/http;\n\ntype EmployeePerformance record {|\n    string empId;\n    int productivity;\n    int customerSatisfaction;\n    int goalAchievement;\n|};\n\ntype TopPerformer record {|\n    string empId;\n    float performance;\n|};\n\nfinal http:Client firebaseClient = check new (\"http://api.employee.performance.firebase.com.balmock.io\");\n\nservice /api/v1 on new http:Listener(8080) {\n    isolated resource function get employee/top\\-performers(int count) returns TopPerformer[]|error {\n        EmployeePerformance[] employeePerformace = check firebaseClient->/performance\\.json();\n        return from var {empId, productivity, customerSatisfaction, goalAchievement} in employeePerformace\n               let float performance = productivity * 0.3 + customerSatisfaction * 0.1 + goalAchievement * 0.6\n               where performance > 7.5\n               limit count\n               order by performance descending\n               select {empId, performance};\n    }\n}\n","name":"pipes-and-filters.bal"}],"name":" Pipes And Filters"},"__N_SSG":true}