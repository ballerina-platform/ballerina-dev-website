{"pageProps":{"frontmatter":{"layout":"ballerina-getting-started-left-nav-pages-swanlake","title":"Get started","description":"Let’s set up a Ballerina development environment and write a simple Ballerina program.","keywords":"ballerina, programming language, ballerina packages, getting started","permalink":"/learn/get-started/","active":"get-started","intro":"Let’s set up a Ballerina development environment and write a simple Ballerina program."},"content":"\n## Install Ballerina\n\n[Download](/downloads/) Ballerina based on the operating system you are using and install it.\n\n>**Tip:** For more information on installing Ballerina, see [Installation options](/downloads/installation-options/).\n\n## Set up the editor\n\nSet up a text editor to write Ballerina code.\n\n>**Tip:** Preferably, <a href=\"https://code.visualstudio.com/\" target=\"_blank\">Visual Studio Code</a> with the Ballerina VS Code extension installed. For detailed information of the functionalities of this extension, go to the <a href=\"https://wso2.com/ballerina/vscode/docs/\" target=\"_blank\">Ballerina VS Code extension documentation</a>.\n\n## Meet `bal`\n\n`bal` is the Ballerina build tool and package manager. Among other things, `bal` helps you to create, build, test, and run your package. The latest `bal` tool version is available with the latest Ballerina installation. \n\nOpen your terminal, and run the following commands to make sure everything is ready.\n\n```\n$ bal\n$ bal version\n```\n\n## Create a new package\n\nLet's write a Ballerina program, which prints `Hello, World!`. Use the `bal new` command to create a new Ballerina package. \n\n>**Info:** For more information on packages, see [Organize Ballerina code](/learn/organize-ballerina-code/).\n\n```\n$ bal new greeter\n```\n\nThis command creates a new directory called `greeter` with the content below.\n\n```\ngreeter/\n├── Ballerina.toml\n└── main.bal\n```\n\n- The `Ballerina.toml` file contains metadata, which describes your package. Also, the `bal` tool uses the `Ballerina.toml` file to identify the root of a package.\n- The `main.bal` file is a source file and it contains the Ballerina code that prints `Hello, World!` to the console. You can add any number of source files into the `greeter` directory.\n\n## Say `Hello, World!`\n\nYou can open the package directory in your text editor. If you are using VS Code, run `code .` from inside the `greeter` directory. Then, open the `main.bal` file to see the generated source.\n\n```ballerina\nimport ballerina/io;\n\npublic function main() {\n    io:println(\"Hello, World!\");\n}\n```\n\nIn this code:\n\n- The first line is an import statement, which makes the functionality in the <a href=\"https://lib.ballerina.io/ballerina/io/latest\" target=\"_blank\">`ballerina/io`</a> module available to your program. This module contains functions to write to the console, read from the console, and perform read/write operations on the files.\n- The `main` function is your program's entry point, and you can execute it by running the program. \n- This function contains a statement, which prints `Hello, World!` to the console. This statement calls the `println` function in the `io` module with `\"Hello, World!\"` as an argument.\n\n>**Info:** To learn more about the language, see [Language basics](/learn/language-basics/). \n\n## Run the package\n\nRun `bal run` in your terminal to run this package.\n\n```\n$ bal run\nCompiling source\n\texample/greeter:0.1.0\n\nRunning executable\n\nHello, World!\n```\n\nAlternatively, you can generate an executable program with `bal build`,\n\n```\n$ bal build\nCompiling source\n\texample/greeter:0.1.0\n\nGenerating executable\n\ttarget/bin/greeter.jar\n```\n\nand then, use `bal run` as follows.\n\n```\n$ bal run target/bin/greeter.jar\nHello, World!\n```\n\n## Write a simple REST API\n\nNow, let's change the `greeter` application to a REST API. Ballerina has first-class abstractions for services, resources, etc., and they make network service development easier and more fun. \n\nReplace the `main.bal` content with the code below.\n\n```ballerina\nimport ballerina/http;\n\nlistener http:Listener httpListener = new (8080);\n\nservice / on httpListener {\n    resource function get greeting() returns string { \n        return \"Hello, World!\"; \n    }\n\n    resource function get greeting/[string name]() returns string { \n        return \"Hello \" + name; \n    }\n}\n```\n\nLet's take a moment to digest the new constructs in this code:\n\n- The <a href=\"https://lib.ballerina.io/ballerina/http/latest\" target=\"_blank\">`http`</a> module provides high-level abstractions to work with the HTTP protocol. \n- The listener declaration creates a new HTTP listener with the port `8080`. The `listener` is the entity, which receives the network input and then routes it to the attached service(s).\n- The service declaration specifies the listener to which the service gets attached and a collection of remotely accessible methods. There are two kinds of methods as `resource` and `remote`.\n- Services use `remote` methods to expose services in a procedural style and they are named by verbs whereas `resource` methods are used for data-oriented protocols and they are named by nouns.\n- In this example, there are two `resource` methods: The first one responds to HTTP GET requests with the `/greeting` path and the other one responds to `GET` requests with the `/greeting/{name}` path.\n- These `resource` methods return a `string` value, which maps to the `text/plain` content-type in the HTTP response.\n\n>**Info:** To learn more about services, see [Network interaction](/learn/network-interaction/). \n\n## Run the simple REST API\n\nLet's run this package in your terminal:\n\n```\n$ bal run\nCompiling source\n\texample/greeter:0.1.0\n\nRunning executable\n```\n\nAlso, run the commands below in another terminal window to invoke the REST API.\n\n```\n$ curl localhost:8080/greeting\nHello, World!\n\n$ curl localhost:8080/greeting/Ballerina\nHello Ballerina\n```\n\n## Learn more\n\nIn this guide, you set up your development environment and wrote two Ballerina programs. For more learning resources, see [Learn](/learn/).\n","id":"get-started","sub":"","third":"","slug":"get-started","codes":"[[1456057328,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;Hello, World!&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1038078371,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">listener</span><span style=\\\"color: #24292E\\\"> http</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Listener httpListener </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> (</span><span style=\\\"color: #005CC5\\\">8080</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">service</span><span style=\\\"color: #24292E\\\"> / </span><span style=\\\"color: #D73A49\\\">on</span><span style=\\\"color: #24292E\\\"> httpListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">resource</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">get</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">greeting</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">return</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Hello, World!&quot;</span><span style=\\\"color: #24292E\\\">; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">resource</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">get</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">greeting</span><span style=\\\"color: #24292E\\\">/[</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">name</span><span style=\\\"color: #24292E\\\">]() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">return</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Hello &quot;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">+</span><span style=\\\"color: #24292E\\\"> name; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}