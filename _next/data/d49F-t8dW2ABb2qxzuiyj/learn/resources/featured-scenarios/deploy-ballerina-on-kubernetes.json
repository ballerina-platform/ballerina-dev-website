{"pageProps":{"frontmatter":{"layout":"ballerina-deploying-ballerina-on-kubernetes-left-nav-pages-swanlake","title":"Deploy Ballerina on Kubernetes","description":"Let’s Dockerize your Ballerina service and deploy it on Kubernetes.","keywords":"ballerina, programming language, cloud, kubernetes, docker, cloud-native","permalink":"/learn/deploy-ballerina-on-kubernetes/","active":"deploy-ballerina-on-kubernetes","intro":"This guide walks you through writing a simple Ballerina service, building it, and deploying it on Kubernetes."},"content":"\nCode to Cloud is a compiler extension, which is packed with Ballerina. It eases generating the artifacts required for the cloud from your Ballerina code. Currently, you could generate Docker and Kubernetes artifacts from the Ballerina code. This process encourages you to write cloud-ready code from day one without any additional effort. \n\n## Set up the prerequisites\n\nTo complete this tutorial, you need:\n\n1. [Ballerina 2201.0.0 (Swan Lake)](/downloads/) or greater\n2. A text editor\n    >**Tip:** Preferably, <a href=\"https://code.visualstudio.com/\" target=\"_blank\">Visual Studio Code</a> with the <a href=\"https://wso2.com/ballerina/vscode/docs/\" target=\"_blank\">Ballerina extension</a> installed.\n3. A command terminal\n4. [Docker](https://www.docker.com/) installed and configured in your machine\n5. A [Docker Hub](https://hub.docker.com/) account\n6. [Kubectl](https://kubernetes.io/docs/tasks/tools/) installed and configured in a [Kubernetes cluster](https://minikube.sigs.k8s.io/docs/start/)\n\n## Create the service package\n\nBallerina uses packages to group code. You need to create a Ballerina package and write the business logic in it. In the terminal, execute the command below to create the Ballerina package for the API implementation.\n\n> **Info:** For more information on Ballerina packages, see [Organize Ballerina code](/learn/organize-ballerina-code/).\n\n```\n$ bal new greeter\n```\n\nYou view the output below.\n\n\n```\nCreated new package 'greeter' at greeter.\n```\n\nThis creates a directory named `covid19` with the default module along with a sample code for the service as shown below. \n\n```\n.\ngreeter/\n├── Ballerina.toml\n└── main.bal\n```\n\n## Create the Ballerina service\n\nTo write a Ballerina program that returns a `Hello, World!` string upon invoking the resource, replace the `main.bal` content with the code below.\n\n```ballerina\nimport ballerina/http;\n\nlistener http:Listener httpListener = new (8080);\nservice / on httpListener {\n    resource function get greeting() returns string { \n        return \"Hello, World!\"; \n    }\n}\n```\n\n## Set the Code to Cloud configurations\n\n### Update the `Ballerina.toml` file\n\nTo enable the code to cloud functionality in the Ballerina package, add the `cloud=\"k8s\"` property below to the `build-options` in the `Ballerina.toml` file.\n\n```toml\n[build-options]\ncloud = \"k8s\"\n```\n\n>**Note:** If you want to deploy your Ballerina service only on Docker, add the `cloud=\"docker\"` property to the `build-options` in the `Ballerina.toml` file.\n\n### Create the `Cloud.toml` file\n\nCreate a file named `Cloud.toml` in the package directory and add the content below. \n\n>**Info:** Make sure to replace the value of the repository field with your Docker hub repository name.\n\n```toml\n[container.image]\nrepository=\"wso2inc\" # Docker hub repository name.\nname=\"greeter\" # container name\ntag=\"latest\"\n```\n\n## Build the package\n\nExecute the code below to build the Ballerina package.\n\n```\n$ bal build\n```\n\nYou view the output below.\n\n```\nCompiling source\n        example/greeter:0.1.0\n\nGenerating executable\n\nGenerating artifacts...\n\n        @kubernetes:Service                      - complete 1/1\n        @kubernetes:Deployment                   - complete 1/1\n        @kubernetes:HPA                          - complete 1/1\n        @kubernetes:Docker                       - complete 2/2 \n\n        Execute the below command to deploy the Kubernetes artifacts: \n        kubectl apply -f /home/example/greeter/target/kubernetes/greeter\n\n        Execute the below command to access service via NodePort: \n        kubectl expose deployment greeter-deployment --type=NodePort --name=greeter-svc-local\n```\n\n>**Info:** This generates the cloud artifacts inside the `target/` directory.\n\n## Push the Docker image\n\nExecute the command below to push the created Docker image into Docker Hub for the cluster to get access to the previously built container.\n\n**Info:** Replace `wso2inc` with your repository name.\n\n```\n$ docker push wso2inc/greeter:latest\n```\n\nYou view the output below.\n\n```\nThe push refers to repository [docker.io/wso2inc/greeter]\nlatest: digest: sha256:c1acf5165848d70c347a970d6b5c32f63669cdbb0d4c1daca2c91cfbe32f61b2 size: 13718\n```\n\n## Deploy on Kubernetes\n\nExecute the command below to deploy the Ballerina application into the Kubernetes cluster.\n\n```\n$ kubectl apply -f /home/example/greeter/target/kubernetes/greeter\n```\nYou view the output below.\n\n```ballerina\nservice/greeter-svc created\ndeployment.apps/greeter-deployment created\nhorizontalpodautoscaler.autoscaling/greeter-hpa created\n```\n\n## Learn more\n\nFor in-depth information about executing these deployed applications and the supported customizations in code to cloud, see [Code to Cloud deployment](/learn/code-to-cloud-deployment).\n ","id":"deploy-ballerina-on-kubernetes","sub":"featured-scenarios","third":"","slug":"featured-scenarios/deploy-ballerina-on-kubernetes","codes":"[[358044095,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">listener</span><span style=\\\"color: #24292E\\\"> http</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Listener httpListener </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> (</span><span style=\\\"color: #005CC5\\\">8080</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">service</span><span style=\\\"color: #24292E\\\"> / </span><span style=\\\"color: #D73A49\\\">on</span><span style=\\\"color: #24292E\\\"> httpListener {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">resource</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">get</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">greeting</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">return</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Hello, World!&quot;</span><span style=\\\"color: #24292E\\\">; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1431467551,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #6F42C1\\\">build-options</span><span style=\\\"color: #24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">cloud = </span><span style=\\\"color: #032F62\\\">&quot;k8s&quot;</span></span></code></pre>\"],[-812891720,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #6F42C1\\\">container</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">image</span><span style=\\\"color: #24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">repository=</span><span style=\\\"color: #032F62\\\">&quot;wso2inc&quot;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6A737D\\\"># Docker hub repository name.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">name=</span><span style=\\\"color: #032F62\\\">&quot;greeter&quot;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6A737D\\\"># container name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">tag=</span><span style=\\\"color: #032F62\\\">&quot;latest&quot;</span></span></code></pre>\"],[-1855738690,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">service</span><span style=\\\"color: #6F42C1\\\">/greeter</span><span style=\\\"color: #24292E\\\">-svc created</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">deployment.apps</span><span style=\\\"color: #6F42C1\\\">/greeter</span><span style=\\\"color: #24292E\\\">-deployment created</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">horiz</span><span style=\\\"color: #D73A49\\\">on</span><span style=\\\"color: #24292E\\\">talpodautoscaler.autoscaling/greeter</span><span style=\\\"color: #D73A49\\\">-</span><span style=\\\"color: #24292E\\\">hpa created</span></span></code></pre>\"]]"},"__N_SSG":true}