{"pageProps":{"frontmatter":{"title":"Sequence Diagram View","description":"The visual representation provided by the Ballerina VS Code extension has its roots in sequence diagrams. They can capture how the logic of your program flows, how the concurrent execution flow works, which remote endpoints are involved, and how those endpoints interact with the different workers in the program.","keywords":"ballerina, vs code extension, sequence diagram, graphical","intro":"The visual representation provided by the Ballerina VS Code extension has its roots in sequence diagrams. They can capture how the logic of your program flows, how the concurrent execution flow works, which remote endpoints are involved, and how those endpoints interact with the different workers in the program."},"content":"\n## Access the Sequence Diagram View\n\nThere are two methods for switching to the graphical mode and accessing the Sequence Diagram View using the VS Code extension as shown below.\n\n### Via the CodeLens\n\nClick the **Visualize** CodeLens that appears in the editor.\n    \n<img src=\"/learn/images/vs-code-extension/visual-programming/sequence-diagram-view/visualize-code-block.png\" class=\"cInlineImage-full\"/>\n\n### Via the editor group button\n\nClick the **Show Diagram** button in the editor group.\n    \n<img src=\"/learn/images/vs-code-extension/visual-programming/sequence-diagram-view/editor-group-button.png\" class=\"cInlineImage-full\"/>\n\nShown below is the code editor and graphical editor in the split view. The graphical mode is focused on the main function.\n\n<img src=\"/learn/images/vs-code-extension/visual-programming/sequence-diagram-view/graphical-view.png\" class=\"cInlineImage-full\"/>\n\n## Graphical representation of code\n\nBallerina code can be represented graphically in the following ways.\n\n### Functions\n\nGraphical representations of functions are based on sequence diagrams. Each function has a lifeline with a start and end, and this lifeline represents the flow of the function logic. \n\n**Source code**\n\n```ballerina\nimport ballerina/io;\nimport ballerina/random;\n\npublic function main() {\n    io:println(\"Hello, World!\");\n\n    if random:createIntInRange(1, 100) == 22 {\n        io:println(\"the number is 22\");\n    } else {\n        io:println(\"the number is not 22\");\n    }\n\n    io:println(\"Program exit\");\n}\n```\n\n**Graphical view**\n    \n<img src=\"/learn/images/vs-code-extension/visual-programming/sequence-diagram-view/function-sequence-diagram.png\" class=\"cInlineImage-full\"/>\n\n### Concurrent execution\n\nConcurrent executions are supported in Ballerina through workers. Each worker has a lifeline that runs parallel to the lifeline of the main function body. The diagram also captures asynchronous messaging between workers.\n\nThe following example shows how asynchronous messaging is represented in the diagram.\n\n**Source code**\n\n```ballerina\npublic function FunctionWithWorker() {\n    worker A {\n        int num = 10;\n\n        // Sends the `10` integer value to the `B` worker asynchronously.\n        num -> B;\n\n        // Receives the `Hello` string from the `B` worker.\n        string msg = <- B;\n        io:println(string `Received string \"${msg}\" from worker B`);\n    }\n\n    worker B {\n        int num;\n\n        // Receives the `10` integer value from the `A` worker.\n        num = <- A;\n        io:println(string `Received integer \"${num}\" from worker A`);\n\n        // Sends the `Hello` string to the `A` worker asynchronously.\n        string msg = \"Hello\";\n        msg -> A;\n    }\n\n    wait A;\n    io:println(\"Woker A execution finished\");\n}\n```\n\n**Graphical view**\n\n<img src=\"/learn/images/vs-code-extension/visual-programming/sequence-diagram-view/worker_sample.png\" class=\"cInlineImage-full\"/>\n\n### Remote endpoints and clients\n\nBallerina specifies interactions with remote endpoints through its syntax. These interactions are presented graphically in the diagram view by giving each endpoint a lifeline. This endpoint lifeline represents the messages that the endpoint can receive.\n\nThe following code shows an HTTP client that is used for the `GET` and `POST` requests sent to a remote endpoint.\n\n**Source code**\n\n```ballerina\nimport ballerina/http;\n\nconfigurable string lookupUrl = ?;\nconfigurable string reportUrl = ?;\n\nfunction execute() returns error? {\n    http:Client lookupService = check new (lookupUrl);\n    http:Client reportService = check new (reportUrl);\n    json result = check lookupService->get(\"/query\");\n    http:Response response = check reportService->post(\"/report\", result);\n}\n```\n\n**Graphical view**\n\n<img src=\"/learn/images/vs-code-extension/visual-programming/sequence-diagram-view/client-code-representations.png\" class=\"cInlineImage-full\"/>\n\n## Develop programs in graphical mode\n\nYou can interact with the diagram using the `plus` icons placed in the lifeline. Click **Add** to add a statement at the function execution.\n\n<img src=\"/learn/images/vs-code-extension/visual-programming/sequence-diagram-view/diagram-interaction.gif\" class=\"cInlineImage-full\"/>\n","id":"sequence-diagram-view","sub":"","third":"","slug":"sequence-diagram-view","codes":"[[78333541,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/random;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;Hello, World!&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">if</span><span style=\\\"color: #24292E\\\"> random</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">createIntInRange</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">100</span><span style=\\\"color: #24292E\\\">) </span><span style=\\\"color: #D73A49\\\">==</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">22</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;the number is 22&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    } </span><span style=\\\"color: #D73A49\\\">else</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;the number is not 22&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;Program exit&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-625082750,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">FunctionWithWorker</span><span style=\\\"color: #24292E\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">worker</span><span style=\\\"color: #24292E\\\"> A {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> num </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">10</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #6A737D\\\">// Sends the `10` integer value to the `B` worker asynchronously.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        num </span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #24292E\\\"> B;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #6A737D\\\">// Receives the `Hello` string from the `B` worker.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> msg </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">&lt;-</span><span style=\\\"color: #24292E\\\"> B;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">`Received string &quot;${</span><span style=\\\"color: #24292E\\\">msg</span><span style=\\\"color: #032F62\\\">}&quot; from worker B`</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">worker</span><span style=\\\"color: #24292E\\\"> B {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> num;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #6A737D\\\">// Receives the `10` integer value from the `A` worker.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        num </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">&lt;-</span><span style=\\\"color: #24292E\\\"> A;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">`Received integer &quot;${</span><span style=\\\"color: #24292E\\\">num</span><span style=\\\"color: #032F62\\\">}&quot; from worker A`</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #6A737D\\\">// Sends the `Hello` string to the `A` worker asynchronously.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> msg </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Hello&quot;</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        msg </span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #24292E\\\"> A;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">wait</span><span style=\\\"color: #24292E\\\"> A;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;Woker A execution finished&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1986830465,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">configurable</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> lookupUrl </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">?</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">configurable</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> reportUrl </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">?</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">execute</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    http</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Client lookupService </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> (</span><span style=\\\"color: #E36209\\\">lookupUrl</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    http</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Client reportService </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> (</span><span style=\\\"color: #E36209\\\">reportUrl</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">json</span><span style=\\\"color: #24292E\\\"> result </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> lookupService</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">get</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;/query&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    http</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Response response </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> reportService</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">post</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #032F62\\\">&quot;/report&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">result</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}