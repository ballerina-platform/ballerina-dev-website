{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina MQTT Library\n\n_Owners_: @shafreenAnfar @dilanSachi \\\n_Reviewers_: @shafreenAnfar \\\n_Created_: 2023/08/15 \\\n_Updated_: 2023/08/15 \\\n_Edition_: Swan Lake\n\n## Introduction\nThis is the specification for the MQTT standard library of [Ballerina language](https://ballerina.io/), which can send and receive messages \nby connecting to an MQTT broker.\n\nThe MQTT library specification has evolved and may continue to evolve in the future. The released versions of the \nspecification can be found under the relevant GitHub tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the \n[Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and implementation can be updated. Community \nfeedback is always welcome. Any accepted proposal, which affects the specification is stored under `/docs/proposals`. Proposals \nunder discussion can be found with the label `type/proposal` in GitHub.\n\nThe conforming implementation of the specification is released to Ballerina Central. Any deviation from the specification \nis considered a bug.\n\n## Contents\n1. [Overview](#1-overview)\n2. [Configurations](#2-configurations)\n    *  2.1. [Security Configurations](#21-security-configurations)\n    *  2.2. [ConnectionConfiguration](#22-connectionconfiguration)\n    *  2.3. [Message](#23-message)\n    *  2.4. [DeliveryToken](#24-deliverytoken)\n    *  2.5. [Subscription](#25-subscription)\n3. [Client](#3-client)\n    *  3.1. [Configurations](#31-configurations)\n    *  3.2. [Initialization](#32-initialization)\n        *  3.2.1. [Insecure Client](#321-insecure-client)\n        *  3.2.2. [Secure Client](#322-secure-client)\n    *  3.3. [Functions](#33-functions)\n4. [Subscriber](#4-subscriber)\n    *  4.1. [Configurations](#41-configurations)\n    *  4.2. [Initialization](#42-initialization)\n        *  4.2.1. [Insecure Listener](#421-insecure-listener)\n        *  4.2.2. [Secure Listener](#422-secure-listener)\n    *  4.3. [Usage](#43-usage)\n    *  4.4. [Caller](#44-caller)\n\n## 1. Overview\nMQTT is a lightweight, publish-subscribe, machine-to-machine network protocol for message queue/message queuing service.\nThis specification elaborates on the usage of MQTT clients that connect and interact with the MQTT broker. These clients \nallow publishing and subscribing messages to and from the MQTT broker with resource constraints or limited network \nbandwidth, such as in the Internet of Things.\n\nBallerina MQTT supports MQTTv5. Currently, it contains two core APIs:\n* Client - Used to publish messages to the MQTT broker.\n* Listener - Used to get the messages from the MQTT broker.\n\n## 2. Configurations\n### 2.1. Security Configurations\n* `mqtt:CertKey` represents the certificate and the private key of the client.\n```ballerina\npublic type CertKey record {|\n    # A file containing the certificate\n    string certFile;\n    # A file containing the private key\n    string keyFile;\n    # Password of the private key if it is encrypted\n    string keyPassword?;\n|}; \n```\n* `mqtt:SecureSocket` configuration is used to enable secure communication with the MQTT server.\n```ballerina\npublic type SecureSocket record {|\n    # Certificate file that the client trusts or a `crypto:TrustStore`\n    crypto:TrustStore|string cert?;\n    # Combination of certificate and private key of the client or a `crypto:KeyStore`\n    crypto:KeyStore|CertKey key?;\n    # Related protocol\n    record {|\n        Protocol name;\n        string version;\n    |} protocol?;\n|};\n```\n* To authenticate the client with the MQTT broker, the `username` and `password` fields of \n`mqtt:ConnectionConfiguration` can be used.\n\n### 2.2. ConnectionConfiguration\n* This record represents the common connection configurations required to initialize both the client and the listener.\n```ballerina\npublic type ConnectionConfiguration record {|\n    # The username to use for the connection\n    string username?;\n    # The password to use for the connection\n    string password?;\n    # The configurations related to secure communication with the MQTT server\n    mqtt:SecureSocket secureSocket?;\n    # The maximum delay between reconnects in milliseconds\n    int maxReconnectDelay?;\n    # The maximum time interval between messages sent or received in seconds\n    int keepAliveInterval?;\n    # Maximum time interval in seconds the client will wait for the network connection to the MQTT server to be established\n    int connectionTimeout?;\n    # Whether the client and server should remember state for the client across reconnects\n    boolean cleanStart?;\n    # List of serverURIs the client may connect to\n    string[] serverUris?;\n    # Whether the client will automatically attempt to reconnect to the server if the connection is lost\n    boolean automaticReconnect?;\n|};\n```\n### 2.3. Message\n* This represents the MQTT message that is received from the server.\n```ballerina\npublic type Message record {|\n    # The payload of the message as a byte array\n    byte[] payload;\n    # Quality of service. 0 - at most once, 1 - at least once, 2 - exactly once\n    int qos = 1;\n    # Indicates whether this message should/is retained by the server\n    boolean retained = false;\n    # Indicates whether or not this message might be a duplicate\n    boolean duplicate = false;\n    # The message ID of the message. This is only set on messages received from the server\n    int messageId?;\n    # The topic this message was received on. This is only set on messages received from the server\n    string topic?;\n    # The properties of the message\n    mqtt:MessageProperties properties?;\n|};\n```\n* `mqtt:MessageProperties` represents the additional properties of the message.\n```ballerina\npublic type MessageProperties record {|\n    # The topic to send the response to in the request response scenario\n    string responseTopic?;\n    # The correlation data to uniquely identify the message\n    byte[] correlationData?;\n|};\n```\n### 2.4. DeliveryToken\n* This represents the token that is returned when a message is published to the MQTT broker.\n```ballerina\npublic type DeliveryToken record {|\n    # Message ID of the message that was delivered\n    int messageId;\n    # Topic for the message that was delivered\n    string topic;\n|};\n```\n### 2.5 Subscription\n* This represents the subscription that is used to subscribe to a topic.\n```ballerina\npublic type Subscription record {|\n    # The topic to subscribe to\n    string topic;\n    # The QoS level to subscribe at\n    int qos = 1;\n|};\n```\n## 3. Client\nThe `mqtt:Client` allows applications to publish messages to a MQTT broker. A connection with the MQTT broker can be \nestablished insecurely or securely.\n### 3.1. Configurations\n* When initializing the client, the following configurations can be provided.\n```ballerina\npublic type ClientConfiguration record {|\n    # The related connection configuration\n    mqtt:ConnectionConfiguration connectionConfig?;\n    # The configurations related to the last will message of the client\n    mqtt:WillDetails willDetails?; \n|};\n```\n* `mqtt:WillDetails` represents the last will message of the client that is sent to the broker at the connection initialization.\n```ballerina\npublic type WillDetails record {|\n    # The last will message to be sent to the subscribers\n   mqtt:Message willMessage;\n   # The topic to publish the last will message\n   string destinationTopic;\n|};\n```\n### 3.2. Initialization\n#### 3.2.1. Insecure Client\nA simple insecure client can be initialized by providing the MQTT broker URL and a unique id to identify the client.\n```ballerina\n# Creates a new `mqtt:Client`.\n#\n# + serverUri - URI of the server to connect to\n# + clientId - Unique ID of the client\n# + config - Optional configuration values to use for the client\n# + return - `mqtt:Error` if an error occurs while creating the client or else `()`\npublic isolated function init(string serverUri, string clientId, *mqtt:ClientConfiguration config) returns mqtt:Error? {\n```\n#### 3.2.2. Secure Client\nA secure client can be initialized by providing either a `crypto:Truststore` or a certificate file to the\n`mqtt:SecureSocket` and providing it as the `mqtt:ConnectionConfiguration` to the client. Additionally, a `crypto:Keystore` \nor a `mqtt:CertKey` can also be provided in order to ensure two-way secure communication.\n\nThe above only provides the configurations related to secure communication. To authenticate the client with the broker, \nthe `username` and `password` needs to be provided in the `mqtt:ConnectionConfiguration`.\n```ballerina\nmqtt:ConnectionConfiguration connConfig = {\n    username: \"username\",\n    password: \"password\",\n    secureSocket: {\n        cert: \"path/to/crt\",\n        key: {\n            certFile: \"path/to/client/crt\",\n            keyFile: \"path/to/client/key\",\n            keyPassword: \"password\"\n        }\n    }\n};\n\nmqtt:ClientConfiguration clientConfig = {\n    connectionConfig: connConfig\n};\n```\n### 3.3. Functions\n* MQTT client API can be used to publish messages to the MQTT broker. For this, the `publish()` method can be used.\n```ballerina\n# Publishes a message to a topic.\n#\n# + topic - Topic to publish the message to\n# + message - `mqtt:Message` to publish\n# + return - `mqtt:DeliveryToken` or else `mqtt:Error` if an error occurs while publishing\nisolated remote function publish(string topic, mqtt:Message message) returns mqtt:DeliveryToken|mqtt:Error;\n```\n* To disconnect the client's connection with the broker, the `disconnect()` method can be used.\n```ballerina\n# Disconnects the client from the server.\n#\n# + return - `mqtt:Error` if an error occurs while disconnecting or else `()`\nisolated remote function disconnect() returns mqtt:Error?;\n```\n* To check if the client is connected with the broker, the `isConnected()` method can be used.\n```ballerina\n# Checks if the client is connected to the server.\n#\n# + return - `true` if the client is connected, `mqtt:Error` if an error occurs in the process\nisolated remote function isConnected() returns boolean|mqtt:Error;\n```\n* To reconnect the client with the broker, the `reconnect()` method can be used.\n```ballerina\n# Reconnects the client to the server.\n#\n# + return - `mqtt:Error` if an error occurs while reconnecting or else `()`\nisolated remote function reconnect() returns mqtt:Error?;\n```\n* After disconnecting the client, to close the connection with the broker, the `close()` method can be used.\n```ballerina\n# Closes the connection to the server.\n#\n# + return - `mqtt:Error` if an error occurs while closing or else `()`\nisolated remote function close() returns mqtt:Error?;\n```\n* In the request/response scenario, the client can publish a message to a topic and wait for a response from a subscriber \nby subscribing to a response topic. To subscribe to a response topic, the `subscribe()` method can be used.\n```ballerina\n# Subscribes to a given topic in the request-response scenario.\n#\n# + subscriptions - The topics to be subscribed to\n# + return - `mqtt:Error` if an error occurs while subscribing or else `()`\nisolated remote function subscribe(string|string[]|mqtt:Subscription|mqtt:Subscription[] subscriptions) returns mqtt:Error?;\n```\n* To receive the responses sent from a subscriber, the `receiveResponse` method can be used. This method returns a `stream` \nof `mqtt:Message`s and the publisher can asynchronously iterate through the stream to receive the responses.\n```ballerina\n# Receives messages from the server.\n#\n# + T - Type of the stream to return\n# + return - `stream<Message, error?>` or else`mqtt:Error` if an error occurs while receiving the response\nisolated remote function receiveResponse(typedesc<stream<Message, error?>> T = <>) returns T|mqtt:Error;\n```\n\nSample usage of the client API in the request/response scenario is as follows.\n```ballerina\nimport ballerina/mqtt;\nimport ballerina/uuid;\nimport ballerina/io;\n\nconfigurable string requestTopic = \"request/topic\";\nconfigurable string responseTopic = \"response/topic\";\n\npublic function main() returns error? {\n    mqtt:Client mqttClient = check new (mqtt:DEFAULT_URL, uuid:createType1AsString(), {\n        connectionConfig: {\n            secureSocket: {\n                cert: \"path/to/public.crt\"\n            }\n        }\n    });\n    check mqttClient->subscribe(responseTopic);\n    mqtt:DeliveryToken token = check mqttClient->publish(requestTopic, {\n        payload: \"Hello World!\".toBytes(),\n        properties: {\n            responseTopic: responseTopic,\n            correlationData: \"msg-1\".toBytes()\n        }\n    });\n    io:println(string`Delivered message with id: ${token.messageId.toString()} to topic: ${token.topic}`);\n\n    stream<mqtt:Message, error?> respStream = check mqttClient->receive();\n    future<error?> f1 = start readResponses(respStream);\n    check wait f1;\n}\n\nfunction readResponses(stream<mqtt:Message, error?> respStream) returns error? {\n    while true {\n        record {|mqtt:Message value;|}? val = check respStream.next();\n        if val == () {\n            break;\n        } else {\n            io:println(string`Received value: ${check string:fromBytes(val.value.payload)}`);\n        }\n    }\n} \n```\n## 4. Subscriber\nThe subscriber allows applications to read messages from different topics in the MQTT broker. `mqtt:Listener` is used as \na subscriber which requires a `mqtt:Service` to handle the incoming messages.\n### 4.1. Configurations\n* When initializing the `mqtt:Listener`, following configurations can be provided.\n```ballerina\npublic type ListenerConfiguration record {|\n    # The related connection configuration\n    mqtt:ConnectionConfiguration connectionConfig?;\n    # Indicates whether or not the client should automatically ack messages\n    boolean manualAcks = false;\n|};\n```\n### 4.2. Initialization\nAn `mqtt:Listener` can be established insecurely or securely as same as the `mqtt:Client`.\n#### 4.2.1. Insecure Listener\nA simple insecure connection with the MQTT broker can be easily established by providing the MQTT broker URL, a unique \nid, and the subscriptions as the input parameters.\n```ballerina\n# Creates a new `mqtt:Listener`.\n#\n# + serverUri - The URI of the remote MQTT server\n# + clientId - The unique client ID to identify the listener\n# + subscriptions - The topics to be subscribed to\n# + return - `mqtt:Error` if an error occurs while creating the listener or else `()`\npublic isolated function init(string serverUri, string clientId, string|string[]|mqtt:Subscription|mqtt:Subscription[] subscriptions, *mqtt:ListenerConfiguration config) returns mqtt:Error?;\n```\n#### 4.2.2. Secure Listener\nA secure client can be established via SSL as same as the `mqtt:Client` using either a `crypto:Truststore` or a\ncertificate file. Additionally, a `crypto:Keystore` or a key file can also be provided.\n```ballerina\nmqtt:ConnectionConfiguration connConfig = {\n    username: \"username\",\n    password: \"password\",\n    secureSocket: {\n        cert: \"path/to/crt\",\n        key: {\n            certFile: \"path/to/client/crt\",\n            keyFile: \"path/to/client/key\",\n            keyPassword: \"password\"\n        }\n    }\n};\n\nmqtt:ListenerConfiguration clientConfig = {\n    connectionConfig: connConfig\n};\n```\n### 4.3. Usage\nAfter initializing the listener, a service must be attached to the listener. There are two ways for this.\n1. Attach the service to the listener directly.\n```ballerina\nservice on new mqtt:Listener(mqtt:DEFAULT_URL, uuid:createType1AsString(), \"mqtt/topic/temperature\") {\n    remote function onMessage(mqtt:Message message) returns error? {\n        // process results\n    }\n}\n```\n2. Attach the service dynamically.\n```ballerina\n// Create a service object\nmqtt:Service subscriber =\nservice object {\n    remote function onMessage(mqtt:Message message) returns error? {\n        // process results\n    }\n};\n```\nThe remote function `onMessage()` is called when the listener receives messages from the MQTT broker.\n\nThe `mqtt:Service` has the following remote functions to manage the subscription.\n* `onMessage`\n```ballerina\nremote function onMessage(mqtt:Message message) returns error? {\n    // process results\n}\nor\nremote function onMessage(mqtt:Message message, mqtt:Caller caller) returns error? {\n    // process results\n}\n```\nThis is a mandatory remote function that is invoked when the listener receives messages from the MQTT broker. \nAny errors returning from this function will be logged to the console.\n\n* `onError`\n```ballerina\nremote function onError(mqtt:Error err) returns error? {\n    // process error\n} \n```\nThis is an optional remote function that is invoked when an error occurs when invoking the `onMessage` method. If the \nmethod is not implemented, the error will be logged to the console. Any errors returning from this function will be \nlogged to the console.\n\n* `onComplete`\n```ballerina\nremote function onComplete(mqtt:DeliveryToken token) returns error? {\n    // handle the delivery token\n}\n```\nThis is an optional remote function that is invoked when the message is successfully delivered to the MQTT broker in \nthe request-response scenario.\n\nThe Listener has the following functions to manage a service.\n* `attach()` - can be used to attach a service to the listener dynamically.\n```ballerina\n# Attaches a service to the listener.\n#\n# + 'service - The service to be attached\n# + name - Name of the service\n# + return - An `error` if an error is encountered while attaching the service or else `()`\npublic isolated function attach(Service 'service, string[]|string? name = ()) returns mqtt:Error?;\n```\n* `detach()` - can be used to detach a service from the listener.\n```ballerina\n# Detaches a consumer service from the listener.\n#\n# + 'service - The service to be detached\n# + return - An `error` if an error is encountered while detaching a service or else `()`\npublic isolated function detach(Service 'service) returns mqtt:Error?;\n```\n* `start()` - needs to be called to start the listener.\n```ballerina\n# Starts the registered services.\n#\n# + return - An `error` if an error is encountered while starting the server or else `()`\npublic isolated function 'start() returns mqtt:Error?;\n```\n* `gracefulStop()` - can be used to gracefully stop the listener from consuming messages.\n```ballerina\n# Stops the MQTT listener gracefully.\n#\n# + return - An `error` if an error is encountered during the listener-stopping process or else `()`\npublic isolated function gracefulStop() returns mqtt:Error?;\n```\n* `immediateStop()` - can be used to immediately stop the listener from consuming messages.\n```ballerina\n# Stops the mqtt listener immediately.\n#\n# + return - An `error` if an error is encountered during the listener-stopping process or else `()`\npublic isolated function immediateStop() returns mqtt:Error?;\n```\n\n### 4.4. Caller\n`mqtt:Caller` is provided as a parameter to the `onMessage` remote function. It can be used to send a response back to \nthe publisher in the request-response scenario or acknowledge the message when in `manualAcks` mode.\n* `complete()` - can be used to acknowledge the message in `manualAcks` mode.\n```ballerina\n# Completes the received message.\n# \n# + return - `mqtt:Error` if the message cannot be completed or else `()`\nisolated remote function complete() returns mqtt:Error?;\n```\nThis will internally use the message-id of the message to acknowledge the message.\n* `respond()` - can be used to send a response back to the publisher in request-response scenario.\n```ballerina\n# Send the response to the request message.\n#\n# + response - The response message to be sent\n# + return - `mqtt:Error` if the message cannot be sent or `()`\nisolated remote function respond(mqtt:Message response) returns mqtt:Error?;\n```\nThis will internally read the response topic sent by the publisher and send the response to that topic.\n\nSample usage of the listener in the request/response scenario is as follows.\n```ballerina\nimport ballerina/uuid;\nimport ballerina/log;\nimport ballerina/mqtt;\n\nservice on new mqtt:Listener(mqtt:DEFAULT_URL, uuid:createType1AsString(), \"request/topic\", {\n    connectionConfig: {\n        secureSocket: {\n            cert: \"path/to/public.crt\"\n        }\n    }\n}) {\n    remote function onMessage(mqtt:Message message, mqtt:Caller caller) returns error? {\n        log:printInfo(string`Message received: ${check string:fromBytes(message.payload)}`);\n        check caller->respond({\n            payload: \"Response from subscriber for message \".toBytes()\n        });\n    }\n\n    remote function onError(mqtt:Error err) {\n        log:printInfo(string`Error occurred: ${err.message()}`);\n    }\n}\n```\n","codeSnippets":"[[-636761453,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">CertKey</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># A file containing the certificate</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> certFile;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># A file containing the private key</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> keyFile;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Password of the private key if it is encrypted</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> keyPassword?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[-789235437,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">SecureSocket</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Certificate file that the client trusts or a `crypto:TrustStore`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    crypto</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">TrustStore</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">string cert?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Combination of certificate and private key of the client or a `crypto:KeyStore`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    crypto</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">KeyStore</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">CertKey key?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Related protocol</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        Protocol name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> version;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">} protocol</span><span style=\\\"color: #D73A49\\\">?</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[1789070777,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">ConnectionConfiguration</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The username to use for the connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> username?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The password to use for the connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> password?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The configurations related to secure communication with the MQTT server</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">SecureSocket secureSocket?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The maximum delay between reconnects in milliseconds</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> maxReconnectDelay?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The maximum time interval between messages sent or received in seconds</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> keepAliveInterval?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Maximum time interval in seconds the client will wait for the network connection to the MQTT server to be established</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> connectionTimeout?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Whether the client and server should remember state for the client across reconnects</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #24292E\\\"> cleanStart?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># List of serverURIs the client may connect to</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">[] serverUris?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Whether the client will automatically attempt to reconnect to the server if the connection is lost</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #24292E\\\"> automaticReconnect?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[230454146,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">Message</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The payload of the message as a byte array</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">byte</span><span style=\\\"color: #24292E\\\">[] payload;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Quality of service. 0 - at most once, 1 - at least once, 2 - exactly once</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> qos </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Indicates whether this message should/is retained by the server</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #24292E\\\"> retained </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">false</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Indicates whether or not this message might be a duplicate</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #24292E\\\"> duplicate </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">false</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The message ID of the message. This is only set on messages received from the server</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> messageId?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The topic this message was received on. This is only set on messages received from the server</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> topic?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The properties of the message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">MessageProperties properties?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[1533307020,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">MessageProperties</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The topic to send the response to in the request response scenario</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> responseTopic?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The correlation data to uniquely identify the message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">byte</span><span style=\\\"color: #24292E\\\">[] correlationData?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[-1109431150,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">DeliveryToken</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Message ID of the message that was delivered</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> messageId;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Topic for the message that was delivered</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> topic;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[1364004374,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">Subscription</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The topic to subscribe to</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> topic;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The QoS level to subscribe at</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> qos </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">1</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[-1314305111,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">ClientConfiguration</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The related connection configuration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ConnectionConfiguration connectionConfig?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The configurations related to the last will message of the client</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">WillDetails willDetails?; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[1829028528,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">WillDetails</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The last will message to be sent to the subscribers</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message willMessage;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #6A737D\\\"># The topic to publish the last will message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">   </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> destinationTopic;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[-1103686891,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Creates a new `mqtt:Client`.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">serverUri</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">URI of the server to connect to</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">clientId</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">Unique ID of the client</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">config</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">Optional configuration values to use for the client</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Error` if an error occurs while creating the client or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">init</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">serverUri</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">clientId</span><span style=\\\"color: #24292E\\\">, *</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ClientConfiguration config) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error? {</span></span></code></pre>\"],[-1018947296,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ConnectionConfiguration connConfig </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    username</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;username&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    password</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;password&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    secureSocket</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        cert</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;path/to/crt&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">key:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            certFile</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;path/to/client/crt&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            keyFile</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;path/to/client/key&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            keyPassword</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;password&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ClientConfiguration clientConfig </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    connectionConfig</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> connConfig</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[17050452,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Publishes a message to a topic.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">topic</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">Topic to publish the message to</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">message</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Message` to publish</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:DeliveryToken` or else `mqtt:Error` if an error occurs while publishing</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">publish</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">topic</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message message) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">DeliveryToken</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">mqtt:Error;</span></span></code></pre>\"],[287596716,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Disconnects the client from the server.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Error` if an error occurs while disconnecting or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">disconnect</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[383669562,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Checks if the client is connected to the server.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`true` if the client is connected, `mqtt:Error` if an error occurs in the process</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">isConnected</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error;</span></span></code></pre>\"],[-848327592,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Reconnects the client to the server.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Error` if an error occurs while reconnecting or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">reconnect</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[-1389457311,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Closes the connection to the server.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Error` if an error occurs while closing or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">close</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[-634837901,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Subscribes to a given topic in the request-response scenario.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">subscriptions</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">The topics to be subscribed to</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Error` if an error occurs while subscribing or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">subscribe</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">[]</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Subscription</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">mqtt:Subscription[] subscriptions) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[-1893044495,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Receives messages from the server.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">T</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">Type of the stream to return</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`stream&lt;Message, error?&gt;` or else`mqtt:Error` if an error occurs while receiving the response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">receiveResponse</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #D73A49\\\">typedesc&lt;stream&lt;</span><span style=\\\"color: #E36209\\\">Message</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #D73A49\\\">error</span><span style=\\\"color: #E36209\\\">?</span><span style=\\\"color: #D73A49\\\">&gt;&gt;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">T</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">&lt;&gt;</span><span style=\\\"color: #24292E\\\">) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> T</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error;</span></span></code></pre>\"],[451417014,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/mqtt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/uuid;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">configurable</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> requestTopic </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;request/topic&quot;</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">configurable</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> responseTopic </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;response/topic&quot;</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">main</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Client mqttClient </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> (</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">DEFAULT_URL, </span><span style=\\\"color: #E36209\\\">uuid</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">createType1AsString</span><span style=\\\"color: #24292E\\\">(), {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        connectionConfig</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            secureSocket</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">                cert</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;path/to/public.crt&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> mqttClient</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">subscribe</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">responseTopic</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">DeliveryToken token </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> mqttClient</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">publish</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">requestTopic</span><span style=\\\"color: #24292E\\\">, {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        payload</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Hello World!&quot;</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">toBytes</span><span style=\\\"color: #24292E\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        properties</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            responseTopic</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> responseTopic,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            correlationData</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;msg-1&quot;</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">toBytes</span><span style=\\\"color: #24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #032F62\\\">`Delivered message with id: ${</span><span style=\\\"color: #24292E\\\">token</span><span style=\\\"color: #032F62\\\">.</span><span style=\\\"color: #24292E\\\">messageId</span><span style=\\\"color: #032F62\\\">.</span><span style=\\\"color: #6F42C1\\\">toString</span><span style=\\\"color: #032F62\\\">()</span><span style=\\\"color: #032F62\\\">} to topic: ${</span><span style=\\\"color: #24292E\\\">token</span><span style=\\\"color: #032F62\\\">.</span><span style=\\\"color: #24292E\\\">topic</span><span style=\\\"color: #032F62\\\">}`</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">stream&lt;</span><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message, </span><span style=\\\"color: #D73A49\\\">error?&gt;</span><span style=\\\"color: #24292E\\\"> respStream </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> mqttClient</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">receive</span><span style=\\\"color: #24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">future&lt;error?&gt;</span><span style=\\\"color: #24292E\\\"> f1 </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">start</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">readResponses</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">respStream</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">wait</span><span style=\\\"color: #24292E\\\"> f1;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">readResponses</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #D73A49\\\">stream&lt;</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message, </span><span style=\\\"color: #D73A49\\\">error</span><span style=\\\"color: #E36209\\\">?</span><span style=\\\"color: #D73A49\\\">&gt;</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">respStream</span><span style=\\\"color: #24292E\\\">) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">while</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">true</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message value;</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">}</span><span style=\\\"color: #D73A49\\\">?</span><span style=\\\"color: #24292E\\\"> val </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> respStream.</span><span style=\\\"color: #6F42C1\\\">next</span><span style=\\\"color: #24292E\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">if</span><span style=\\\"color: #24292E\\\"> val </span><span style=\\\"color: #D73A49\\\">==</span><span style=\\\"color: #24292E\\\"> () {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            </span><span style=\\\"color: #D73A49\\\">break</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        } </span><span style=\\\"color: #D73A49\\\">else</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            io</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">println</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #032F62\\\">`Received value: ${</span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #032F62\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fromBytes</span><span style=\\\"color: #032F62\\\">(</span><span style=\\\"color: #24292E\\\">val</span><span style=\\\"color: #032F62\\\">.</span><span style=\\\"color: #24292E\\\">value</span><span style=\\\"color: #032F62\\\">.</span><span style=\\\"color: #24292E\\\">payload</span><span style=\\\"color: #032F62\\\">)</span><span style=\\\"color: #032F62\\\">}`</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1172974334,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">type</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">ListenerConfiguration</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">record</span><span style=\\\"color: #24292E\\\"> {</span><span style=\\\"color: #D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># The related connection configuration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ConnectionConfiguration connectionConfig?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\"># Indicates whether or not the client should automatically ack messages</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">boolean</span><span style=\\\"color: #24292E\\\"> manualAcks </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">false</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[-1841460813,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Creates a new `mqtt:Listener`.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">serverUri</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">The URI of the remote MQTT server</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">clientId</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">The unique client ID to identify the listener</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">subscriptions</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">The topics to be subscribed to</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Error` if an error occurs while creating the listener or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">init</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">serverUri</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">clientId</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">[]</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Subscription</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #24292E\\\">mqtt:Subscription[] subscriptions, *</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ListenerConfiguration config) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[-442103479,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ConnectionConfiguration connConfig </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    username</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;username&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    password</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;password&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    secureSocket</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        cert</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;path/to/crt&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">key:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            certFile</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;path/to/client/crt&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            keyFile</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;path/to/client/key&quot;</span><span style=\\\"color: #24292E\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            keyPassword</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;password&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">ListenerConfiguration clientConfig </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    connectionConfig</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> connConfig</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[-1918125547,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">service</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">on</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> mqtt:Listener(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">DEFAULT_URL, </span><span style=\\\"color: #E36209\\\">uuid</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">createType1AsString</span><span style=\\\"color: #24292E\\\">(), </span><span style=\\\"color: #032F62\\\">&quot;mqtt/topic/temperature&quot;</span><span style=\\\"color: #24292E\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">onMessage</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message message) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #6A737D\\\">// process results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-1935335914,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">// Create a service object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Service subscriber </span><span style=\\\"color: #D73A49\\\">=</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">service</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">object</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">onMessage</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message message) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #6A737D\\\">// process results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">};</span></span></code></pre>\"],[-898684123,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">onMessage</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message message) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\">// process results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">or</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">onMessage</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message message, </span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Caller caller) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\">// process results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1089673866,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">onError</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error err) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\">// process error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-1675629983,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">onComplete</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">DeliveryToken token) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #6A737D\\\">// handle the delivery token</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[1496320471,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Attaches a service to the listener.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">&#39;service</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">The service to be attached</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">name</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">Name of the service</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">An `error` if an error is encountered while attaching the service or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">attach</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">Service</span><span style=\\\"color: #24292E\\\"> &#39;service, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">[]</span><span style=\\\"color: #D73A49\\\">|</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">? </span><span style=\\\"color: #E36209\\\">name</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> ()) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[-74050280,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Detaches a consumer service from the listener.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">&#39;service</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">The service to be detached</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">An `error` if an error is encountered while detaching a service or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">detach</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">Service</span><span style=\\\"color: #24292E\\\"> &#39;service) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[-507669849,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Starts the registered services.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">An `error` if an error is encountered while starting the server or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> &#39;start() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[1525245260,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Stops the MQTT listener gracefully.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">An `error` if an error is encountered during the listener-stopping process or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">gracefulStop</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[1490800996,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Stops the mqtt listener immediately.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">An `error` if an error is encountered during the listener-stopping process or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">public</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">immediateStop</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[-567106277,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Completes the received message.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Error` if the message cannot be completed or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">complete</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[-797073715,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># Send the response to the request message.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">response</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">The response message to be sent</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6A737D\\\"># </span><span style=\\\"color: #D73A49\\\">+ </span><span style=\\\"color: #24292E\\\">return</span><span style=\\\"color: #D73A49\\\"> - </span><span style=\\\"color: #6A737D\\\">`mqtt:Error` if the message cannot be sent or `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">isolated</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">respond</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message response) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error?;</span></span></code></pre>\"],[82296474,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/uuid;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/mqtt;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">service</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">on</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">new</span><span style=\\\"color: #24292E\\\"> mqtt:Listener(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">DEFAULT_URL, </span><span style=\\\"color: #E36209\\\">uuid</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">createType1AsString</span><span style=\\\"color: #24292E\\\">(), </span><span style=\\\"color: #032F62\\\">&quot;request/topic&quot;</span><span style=\\\"color: #24292E\\\">, {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    connectionConfig</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        secureSocket</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            cert</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;path/to/public.crt&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">onMessage</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Message message, </span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Caller caller) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        log</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">printInfo</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #032F62\\\">`Message received: ${</span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #032F62\\\"> </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fromBytes</span><span style=\\\"color: #032F62\\\">(</span><span style=\\\"color: #24292E\\\">message</span><span style=\\\"color: #032F62\\\">.</span><span style=\\\"color: #24292E\\\">payload</span><span style=\\\"color: #032F62\\\">)</span><span style=\\\"color: #032F62\\\">}`</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> caller</span><span style=\\\"color: #D73A49\\\">-&gt;</span><span style=\\\"color: #6F42C1\\\">respond</span><span style=\\\"color: #24292E\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">            payload</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;Response from subscriber for message &quot;</span><span style=\\\"color: #24292E\\\">.</span><span style=\\\"color: #6F42C1\\\">toBytes</span><span style=\\\"color: #24292E\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">remote</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">onError</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">mqtt</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\">Error err) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        log</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">printInfo</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #032F62\\\">`Error occurred: ${</span><span style=\\\"color: #24292E\\\">err</span><span style=\\\"color: #032F62\\\">.</span><span style=\\\"color: #6F42C1\\\">message</span><span style=\\\"color: #032F62\\\">()</span><span style=\\\"color: #032F62\\\">}`</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}