{"pageProps":{"samples":{"better-security":{"frontmatter":{"title":"Better security","description":"Ballerina provides robust security features such as encryption, authentication, and authorization, which are essential for businesses dealing with sensitive data.","url":"https://github.com/ballerina-guides/integration-samples/blob/graphql-security/graphql-social-media-service/service.bal","image":""},"content":"```\nlistener graphql:Listener graphqlListener = new (9090,\n    secureSocket = {\n        key: {\n            certFile: \"../resource/path/to/public.crt\",\n            keyFile: \"../resource/path/to/private.key\"\n        }\n    }\n);\n\n@graphql:ServiceConfig {\n    auth: [\n        {\n            oauth2IntrospectionConfig: {\n                url: \"https://mytoken.endpoint/oauth2/introspect\",\n                tokenTypeHint: \"access_token\",\n                scopeKey: \"scp\",\n                clientConfig: {\n                    customHeaders: {\"Authorization\": \"Basic YWRtaW46YWRtaW4=\"},\n                    secureSocket: {\n                        cert: \"../resource/path/to/public.crt\"\n                    }\n                }\n            },\n            scopes: [\"admin\"]\n        }\n    ],\n    // Validate the query depth\n    maxQueryDepth: 5\n}\nservice /graphql on graphqlListener {\n    resource function get users() returns User[] {\n        // ...\n    }\n    remote function createPost(graphql:Context context, NewPost newPost) returns Post|error {\n        // ...\n    }\n}\n\npublic type NewPost readonly & record {|\n    // Validate user inputs\n    @constraint:String {\n        maxLength: 25,\n        minLength: 5\n    }\n    string title;\n|};\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">listener</span><span style=\"color: #24292E\"> graphql</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Listener graphqlListener </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\">secureSocket</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">key:</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            certFile</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;../resource/path/to/public.crt&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            keyFile</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;../resource/path/to/private.key&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">@</span><span style=\"color: #005CC5\">graphql</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">ServiceConfig</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6F42C1\">oauth2IntrospectionConfig</span><span style=\"color: #24292E\">: {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6F42C1\">url</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;https://mytoken.endpoint/oauth2/introspect&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6F42C1\">tokenTypeHint</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;access_token&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6F42C1\">scopeKey</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;scp&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #6F42C1\">clientConfig</span><span style=\"color: #24292E\">: {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #6F42C1\">customHeaders</span><span style=\"color: #24292E\">: {</span><span style=\"color: #032F62\">&quot;Authorization&quot;</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Basic YWRtaW46YWRtaW4=&quot;</span><span style=\"color: #24292E\">},</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #6F42C1\">secureSocket</span><span style=\"color: #24292E\">: {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                        </span><span style=\"color: #6F42C1\">cert</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&quot;../resource/path/to/public.crt&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #6F42C1\">scopes</span><span style=\"color: #24292E\">: [</span><span style=\"color: #032F62\">&quot;admin&quot;</span><span style=\"color: #24292E\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    ],</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Validate the query depth</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    maxQueryDepth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">5</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">/graphql</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> graphqlListener {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">users</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> User[] {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">remote</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createPost</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">graphql</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Context context, </span><span style=\"color: #E36209\">NewPost</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">newPost</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Post</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6A737D\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">public</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">NewPost</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">readonly</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// Validate user inputs</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    @</span><span style=\"color: #005CC5\">constraint</span><span style=\"color: #24292E\">:</span><span style=\"color: #005CC5\">String</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        maxLength</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">25</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        minLength</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">5</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span></code></pre>"},"clean-and-simple-code-apollo":{"frontmatter":{"title":"Apollo","description":"","url":"","image":""},"content":"\n```javascript\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\n\nconst typeDefs = `#graphql\n    type Book {\n        title: String\n        author: String\n    }\n\n    type Query {\n        books: [Book]\n    }\n`;\n\nconst books = [\n    {\n        title: 'Harry Potter',\n        author: 'J. K. Rowling',\n    },\n    {\n        title: 'The Lord of the Rings',\n        author: 'J. R. R. Tolkien',\n    },\n];\n\nconst resolvers = {\n    Query: {\n        books: () => books,\n    },\n};\n\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n});\n\nawait startStandaloneServer(server, {\n    listen: { port: 4000 },\n});\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { ApolloServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;@apollo/server&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { startStandaloneServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;@apollo/server/standalone&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">typeDefs</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">`#graphql</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">    type Book {</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">        title: String</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">        author: String</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #032F62\">    type Query {</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">        books: [Book]</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">    }</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">`</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">books</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        title: </span><span style=\"color: #032F62\">&#39;Harry Potter&#39;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        author: </span><span style=\"color: #032F62\">&#39;J. K. Rowling&#39;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        title: </span><span style=\"color: #032F62\">&#39;The Lord of the Rings&#39;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        author: </span><span style=\"color: #032F62\">&#39;J. R. R. Tolkien&#39;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">resolvers</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Query: {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6F42C1\">books</span><span style=\"color: #24292E\">: () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> books,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">server</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">ApolloServer</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    typeDefs,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    resolvers,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">await</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">startStandaloneServer</span><span style=\"color: #24292E\">(server, {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    listen: { port: </span><span style=\"color: #005CC5\">4000</span><span style=\"color: #24292E\"> },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span></code></pre>"},"clean-and-simple-code-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"\n```ballerina\nimport ballerina/graphql;\n\ntype Book record {|\n    string title;\n    string author;\n|};\n\nBook[] books = [\n    {\n        title: \"Harry Potter\",\n        author: \"J. K. Rowling\"\n    },\n    {\n        title: \"The Lord of the Rings\",\n        author: \"J. R. R. Tolkien\"\n    }\n];\n\nservice on new graphql:Listener(9090) {\n    resource function get books() returns Book[] => books;\n}\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/graphql;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Book</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> author;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">Book[] books </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        title</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Harry Potter&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        author</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;J. K. Rowling&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        title</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;The Lord of the Rings&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        author</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;J. R. R. Tolkien&quot;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> graphql:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">books</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Book[] </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> books;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"clean-and-simple-code":{"frontmatter":{"title":"Clean and simple code","description":"Ballerina provides a simple and clean way to write GraphQL services with fewer lines of code compared to Apollo. Its concise syntax and built-in features allow streamlined development, resulting in more efficient and maintainable GraphQL services. Ballerina's focus on simplicity helps developers achieve their goals with ease and clarity.","url":"","image":""},"content":"","code":""},"cli-tool":{"frontmatter":{"title":"GraphQL CLI tool - An all-in-one tool for GraphQL","description":"Experience the exhilaration of the Ballerina GraphQL CLI tool. Effortlessly generate custom GraphQL clients from schemas, accessing endpoints with ease. Seamlessly generate and share Ballerina GraphQL service schemas, facilitating collaboration and empowering efficient development workflows.","url":"https://ballerina.io/learn/graphql-tool/","image":"images/usecases/integration/apollo-graphql/graphql-cli-tool.png"},"content":"\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre>"},"community-driven-development":{"frontmatter":{"title":"Community-driven development","description":"Ballerina is a community-driven open-source project with contributions from developers around the world. This means that developers have access to a rich ecosystem of libraries, tools, and resources that can enhance their automation workflows.","url":"","image":"images/usecases/integration/community-driven-development.png"},"content":"","code":""},"connect-with-anything":{"frontmatter":{"title":"Connect with anything","description":"Access thousands of connectors for HTTP APIs (OpenAPI), event APIs (AsyncAPI), GraphQL services, legacy systems, and data stores, allowing seamless data transfer to and from any system, anywhere.","url":"","image":""},"content":"```ballerina\nconfigurable string token = ?;\n\nservice /graphql on new graphql:Listener(9090) {\n    final github:Client githubClient;\n\n    function init() returns error? {\n        self.githubClient = check new ({auth: {token}});\n    }\n\n    resource function get repositories() returns Repository[]|error {\n        stream<Repository, github:Error?> repositories = \n            check self.githubClient->getRepositories();\n        return from github:Repository repository in repositories\n            select repository;\n    }\n\n    remote function createIssue(CreateIssueInput createIssueInput, \n            string owner, string repositoryName) returns github:Issue|error {\n        Issue issue = \n            check self.githubClient->createIssue(createIssueInput, owner, repositoryName);\n        check produceIssue(issue, repositoryName);\n        return issue;\n    }\n\n    resource function subscribe issues(string repositoryName) returns stream<Issue>|error {\n        IssueStream issueStreamGenerator = check new (repositoryName);\n        return new (issueStreamGenerator);\n    }\n}\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">configurable</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> token </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">/graphql</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> graphql:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">final</span><span style=\"color: #24292E\"> github</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Client githubClient;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">init</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">error?</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.githubClient </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> ({auth</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {token}});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">repositories</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Repository[]</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">stream&lt;</span><span style=\"color: #24292E\">Repository, github</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Error?</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> repositories </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.githubClient</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">getRepositories</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> github</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Repository repository </span><span style=\"color: #D73A49\">in</span><span style=\"color: #24292E\"> repositories</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">select</span><span style=\"color: #24292E\"> repository;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">remote</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createIssue</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">CreateIssueInput</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">createIssueInput</span><span style=\"color: #24292E\">, </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">owner</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">repositoryName</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> github</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\">Issue</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        Issue issue </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">self</span><span style=\"color: #24292E\">.githubClient</span><span style=\"color: #D73A49\">-&gt;</span><span style=\"color: #6F42C1\">createIssue</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">createIssueInput</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">owner</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">repositoryName</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">produceIssue</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">issue</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">repositoryName</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> issue;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">subscribe</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">issues</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">repositoryName</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">stream&lt;</span><span style=\"color: #24292E\">Issue</span><span style=\"color: #D73A49\">&gt;|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        IssueStream issueStreamGenerator </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">repositoryName</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">issueStreamGenerator</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"designer-tool":{"frontmatter":{"title":"Built-in designer tool for GraphQL","description":"Explore the boundless possibilities with the in-built GraphQL API designer, a visual tool of the Ballerina VS Code plugin. Effortlessly design and prototype GraphQL APIs, unlocking a seamless and intuitive development experience. Empower your GraphQL services with this exceptional visual designer tool.","url":"https://wso2.com/ballerina/vscode/docs/design-the-services/graphql-api-designer/","image":"images/usecases/integration/apollo-graphql/graphql-diagram-editor.png"},"content":"","code":""},"diagram-when-you-need":{"frontmatter":{"title":"Diagram when you need it, Code when you don't","description":"Ballerina diagrams provide great creativity and flexibility in the early stages of development, allowing developers to visualize and iterate on their ideas quickly. However, developers can easily switch to writing code when delivering a more polished product by taking advantage of Ballerina's powerful language features.","url":"","image":"images/usecases/integration/diagram-when-you-need-it.png"},"content":"","code":""},"git-based-workflow":{"frontmatter":{"title":"Your typical Git-based workflow: edit, debug, and test in VS Code","description":"Ballerina provides built-in editing, debugging, and testing tools making it easier for developers to test, debug, deploy, and optimize their automation workflows.","url":"","image":"images/usecases/integration/edit-debug-diagram.png"},"content":"","code":""},"similarities-default-values-ballerina":{"frontmatter":{"title":"Default values","description":"Ballerina has in-built default value support, similar to GraphQL.","url":"","image":""},"content":"```\nresource function get greeting(string name = \"Anonymous\") returns string;\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">greeting</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Anonymous&quot;</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">;</span></span></code></pre>"},"similarities-default-values-graphql":{"frontmatter":{"title":"","description":"","url":"","image":""},"content":"```graphql\ngreeting(name: String! = \"Anonymous\"): String!\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6F42C1\">greeting</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\"> = </span><span style=\"color: #032F62\">&quot;Anonymous&quot;</span><span style=\"color: #24292E\">): </span><span style=\"color: #6F42C1\">String</span><span style=\"color: #24292E\">!</span></span></code></pre>"},"similarities-nullability-ballerina":{"frontmatter":{"title":"Nullability","description":"Ballerina supports nullable types similar to GraphQL.","url":"","image":""},"content":"```ballerina\ntype Person record {|\n   string? name;\n|};\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\">? name;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span></code></pre>"},"similarities-nullability-graphql":{"frontmatter":{"title":"","description":"","url":"","image":""},"content":"```graphql\ntype Profile {\n   name: String\n}\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Profile</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"similarities-object-types-ballerina":{"frontmatter":{"title":"Object types","description":"Using Ballerina record types is very much similar to GraphQL object definitions.","url":"","image":""},"content":"```ballerina\ntype Person record {|\n   string name;\n   int age;\n|};\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Person</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span></code></pre>"},"similarities-object-types-graphql":{"frontmatter":{"title":"","description":"","url":"","image":""},"content":"```graphql\ntype Profile {\n   name: String!\n   age: Int!\n}\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Profile</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">Int</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"similarities-union-types-ballerina":{"frontmatter":{"title":"Union types","description":"Ballerina supports union types similar to GraphQL union types.","url":"","image":""},"content":"```ballerina\ntype SearchResult Human|Droid;\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">SearchResult</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">Human|Droid</span><span style=\"color: #24292E\">;</span></span></code></pre>"},"similarities-union-types-graphql":{"frontmatter":{"title":"","description":"","url":"","image":""},"content":"```graphql\nunion SearchResult = Human | Droid\n```","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">union</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">SearchResult</span><span style=\"color: #24292E\"> = </span><span style=\"color: #005CC5\">Human</span><span style=\"color: #24292E\"> | </span><span style=\"color: #005CC5\">Droid</span></span></code></pre>"},"similarities":{"frontmatter":{"title":"Ballerina is GraphQL - GraphQL is Ballerina","description":"Ballerina, a strongly-typed language, is perfectly suited for GraphQL's declarative data fetching. With compile-time error handling, Ballerina ensures reliability and efficiency, making it an excellent choice for building robust and user-friendly GraphQL APIs. Ballerina is the perfect choice for developers who want to build reliable, efficient, and easy-to-use GraphQL APIs. The similarities between the Ballerina and GraphQL syntax are astonishing.","url":"","image":""},"content":"","code":""},"simplifying-graphql-api-development-ballerina":{"frontmatter":{"title":"Ballerina code","description":"","url":"","image":""},"content":"\n```ballerina\nimport ballerina/graphql;\n\nservice on new graphql:Listener(9090) {\n    resource function get profile() returns Profile {\n        return {\n            name: \"John Doe\",\n            age: 30,\n            address: {street: \"15 Yemen Road\", city: \"Yemen\", country: \"YM\"}\n        };\n    }\n}\n\ntype Profile record {|\n    string name;\n    int age;\n    Address address;\n|};\n\ntype Address record {|\n    string street;\n    string city;\n    string country;\n|};\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/graphql;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> graphql:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">profile</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> Profile {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            name</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;John Doe&quot;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            age</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">30</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            address</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> {street: </span><span style=\"color: #032F62\">&quot;15 Yemen Road&quot;</span><span style=\"color: #24292E\">, city</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Yemen&quot;</span><span style=\"color: #24292E\">, country</span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;YM&quot;</span><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Profile</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">int</span><span style=\"color: #24292E\"> age;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    Address address;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Address</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">record</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> street;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> city;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> country;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">|</span><span style=\"color: #24292E\">};</span></span></code></pre>"},"simplifying-graphql-api-development-graphql":{"frontmatter":{"title":"Generated schema","description":"","url":"","image":""},"content":"\n```graphql\ntype Query {\n   profile: Profile!\n}\n\ntype Profile {\n   name: String!\n   age: Int!\n   address: Address!\n}\n\ntype Address {\n   street: String!\n   city: String!\n   country: String!\n}\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Query</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">profile</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">Profile</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Profile</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">age</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">Int</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">address</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">Address</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">type</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Address</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">street</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">city</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">   </span><span style=\"color: #E36209\">country</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">String</span><span style=\"color: #D73A49\">!</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"simplifying-graphql-api-development":{"frontmatter":{"title":"Seamlessly generate schema from code","description":"Ballerina GraphQL simplifies the life of developers by generating the GraphQL schema directly from the Ballerina code. With this automatic schema generation, developers can focus on writing code, streamlining development, and ensuring consistency between the schema and the code. It offers convenience, efficiency, and ease of use in building GraphQL services with Ballerina.","url":"","image":""},"content":"","code":""},"subscription-support-apollo":{"frontmatter":{"title":"Apollo","description":"","url":"","image":""},"content":"\n```javascript\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';\nimport { createServer } from 'http';\nimport express from 'express';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\nimport { WebSocketServer } from 'ws';\nimport { useServer } from 'graphql-ws/lib/use/ws';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport resolvers from './resolvers';\nimport typeDefs from './typeDefs';\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\nconst app = express();\nconst httpServer = createServer(app);\n\nconst wsServer = new WebSocketServer({\n    server: httpServer,\n    path: '/graphql',\n});\nconst serverCleanup = useServer({ schema }, wsServer);\n\nconst server = new ApolloServer({\n    schema,\n    plugins: [\n        ApolloServerPluginDrainHttpServer({ httpServer }),\n        {\n            async serverWillStart() {\n                return {\n                    async drainServer() {\n                        await serverCleanup.dispose();\n                    },\n                };\n            },\n        },\n    ],\n});\n\nawait server.start();\napp.use('/graphql', cors<cors.CorsRequest>(), bodyParser.json(), expressMiddleware(server));\n\nconst PORT = 4000;\nhttpServer.listen(PORT, () => {\n    console.log(`Server is now running on http://localhost:${PORT}/graphql`);\n});\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { ApolloServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;@apollo/server&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { expressMiddleware } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;@apollo/server/express4&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { ApolloServerPluginDrainHttpServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;@apollo/server/plugin/drainHttpServer&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;http&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> express </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;express&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { makeExecutableSchema } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;@graphql-tools/schema&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { WebSocketServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;ws&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { useServer } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;graphql-ws/lib/use/ws&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> bodyParser </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;body-parser&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> cors </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;cors&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> resolvers </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;./resolvers&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> typeDefs </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;./typeDefs&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">schema</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">makeExecutableSchema</span><span style=\"color: #24292E\">({ typeDefs, resolvers });</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">app</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">express</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">httpServer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createServer</span><span style=\"color: #24292E\">(app);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">wsServer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">WebSocketServer</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    server: httpServer,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    path: </span><span style=\"color: #032F62\">&#39;/graphql&#39;</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">serverCleanup</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">useServer</span><span style=\"color: #24292E\">({ schema }, wsServer);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">server</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">ApolloServer</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    schema,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    plugins: [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6F42C1\">ApolloServerPluginDrainHttpServer</span><span style=\"color: #24292E\">({ httpServer }),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            </span><span style=\"color: #D73A49\">async</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">serverWillStart</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    </span><span style=\"color: #D73A49\">async</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">drainServer</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                        </span><span style=\"color: #D73A49\">await</span><span style=\"color: #24292E\"> serverCleanup.</span><span style=\"color: #6F42C1\">dispose</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                    },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">                };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">            },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    ],</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">await</span><span style=\"color: #24292E\"> server.</span><span style=\"color: #6F42C1\">start</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">app.</span><span style=\"color: #6F42C1\">use</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;/graphql&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #6F42C1\">cors</span><span style=\"color: #24292E\">&lt;</span><span style=\"color: #6F42C1\">cors</span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\">CorsRequest</span><span style=\"color: #24292E\">&gt;(), bodyParser.</span><span style=\"color: #6F42C1\">json</span><span style=\"color: #24292E\">(), </span><span style=\"color: #6F42C1\">expressMiddleware</span><span style=\"color: #24292E\">(server));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">PORT</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">4000</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">httpServer.</span><span style=\"color: #6F42C1\">listen</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">PORT</span><span style=\"color: #24292E\">, () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">`Server is now running on http://localhost:${</span><span style=\"color: #005CC5\">PORT</span><span style=\"color: #032F62\">}/graphql`</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span></code></pre>"},"subscription-support-ballerina":{"frontmatter":{"title":"Ballerina","description":"","url":"","image":""},"content":"\n```ballerina\nimport ballerina/graphql;\nimport ballerina/uuid;\n\nservice on new graphql:Listener(9090) {\n    resource function get greeting() returns string {\n        return \"Welcome\";\n    }\n\n    remote function publishMessage(NewPost newPost) returns string|error {\n        check publishPost(postData);\n        return new (postData);\n    }\n\n    resource function subscribe messages() returns stream<Post, error?>|error {\n        string id = uuid:createType1AsString();\n        PostStreamGenerator postStreamGenerator = check new (id);\n        stream<Post, error?> postStream = new (postStreamGenerator);\n        return postStream;\n    }\n}\n```\n","code":"<pre class=\"shiki github-light\" style=\"background-color: #fff\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/graphql;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> ballerina/uuid;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">service</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">on</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> graphql:Listener(</span><span style=\"color: #005CC5\">9090</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">greeting</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Welcome&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">remote</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">publishMessage</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">NewPost</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">newPost</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">string</span><span style=\"color: #D73A49\">|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">publishPost</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">postData</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">postData</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">resource</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">subscribe</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">messages</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">returns</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">stream&lt;</span><span style=\"color: #24292E\">Post, </span><span style=\"color: #D73A49\">error?&gt;|error</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #005CC5\">string</span><span style=\"color: #24292E\"> id </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> uuid</span><span style=\"color: #D73A49\">:</span><span style=\"color: #6F42C1\">createType1AsString</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        PostStreamGenerator postStreamGenerator </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">check</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">id</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">stream&lt;</span><span style=\"color: #24292E\">Post, </span><span style=\"color: #D73A49\">error?&gt;</span><span style=\"color: #24292E\"> postStream </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">new</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">postStreamGenerator</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> postStream;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span></code></pre>"},"subscription-support":{"frontmatter":{"title":"Out-of-the-box subscription support - No additional libraries are needed","description":"Ballerina offers seamless support for GraphQL subscriptions out-of-the-box, eliminating the need for additional libraries like with Apollo. With Ballerina, you can effortlessly integrate systems like Apache Kafka into your GraphQL subscriptions, enhancing real-time data streaming capabilities. This simplifies development, reduces dependencies, and provides a comprehensive solution for building robust GraphQL subscription-based applications.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/graphql-social-media-service","image":""},"content":"","code":""},"trivial-hosting-in-wso2-choreo-ipaas":{"frontmatter":{"title":"(Extra!) Trivial hosting in WSO2 Choreo iPaaS","description":"Manual integrations? Scheduled integrations (cron jobs)? Triggered integrations? Integrations as APIs? No problem! Write the code, attach the repo to WSO2 Choreo, and let it do the rest.","url":"https://wso2.com/choreo/ipaas/","image":"images/choreo-ipaas-image-v2.png"},"content":"","code":""}}},"__N_SSG":true}