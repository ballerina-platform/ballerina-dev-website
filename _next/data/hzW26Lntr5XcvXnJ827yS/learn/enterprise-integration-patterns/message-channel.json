{"pageProps":{"tagline":"Connects one application to another","desc":"Message channel connects one application to another, where one application writes information to the channel and the other one reads.","category":"Messaging Systems","index":0,"helps":"Ballerina supports message systems via its rich set of libraries. These libraries have `Client`s and `Listener`s to write and read messages.","tags":["Message Channel","Point-to-Point Channel","Message"],"link":"https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageChannel.html","content":[{"headerCode":"","mainCode":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49\">import</span><span style=\"color:#24292E\"> ballerina/websocket;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#D73A49\"> map&#x3C;</span><span style=\"color:#24292E\">websocket</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Caller</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> connectionMap </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#6F42C1\"> /chat</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> websocket:Listener(</span><span style=\"color:#005CC5\">8080</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#24292E\"> .() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> websocket</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Service {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> ChatService</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service class</span><span style=\"color:#6F42C1\"> ChatService</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    *</span><span style=\"color:#24292E\">websocket</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Service;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    remote</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> onOpen</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">websocket</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Caller caller) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> newUserConnectionId </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> caller.</span><span style=\"color:#6F42C1\">getConnectionId</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        connectionMap[newUserConnectionId] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> caller;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> message </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#032F62\"> `New user joined with connection id: ${</span><span style=\"color:#24292E\">newUserConnectionId</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#6F42C1\"> broadcaseMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">message</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">newUserConnectionId</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    remote</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> onMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">websocket</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Caller caller, </span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> chatMessage</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        check</span><span style=\"color:#6F42C1\"> broadcaseMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">chatMessage</span><span style=\"color:#24292E\">, caller.</span><span style=\"color:#6F42C1\">getConnectionId</span><span style=\"color:#24292E\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    remote</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> onClose</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">websocket</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Caller caller) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> connectionMap.</span><span style=\"color:#6F42C1\">remove</span><span style=\"color:#24292E\">(caller.</span><span style=\"color:#6F42C1\">getConnectionId</span><span style=\"color:#24292E\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> broadcaseMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> message</span><span style=\"color:#24292E\">, </span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> senderConnectionId</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    foreach </span><span style=\"color:#005CC5\">var</span><span style=\"color:#24292E\"> [connectionId, wsChannel] </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> connectionMap.</span><span style=\"color:#6F42C1\">entries</span><span style=\"color:#24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> connectionId </span><span style=\"color:#D73A49\">!=</span><span style=\"color:#24292E\"> senderConnectionId {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#24292E\"> wsChannel</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">writeMessage</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">message</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>","raw":"import ballerina/websocket;\n\nfinal map<websocket:Caller> connectionMap = {};\n\nservice /chat on new websocket:Listener(8080) {\n    resource function get .() returns websocket:Service {\n        return new ChatService();\n    }\n}\n\nservice class ChatService {\n    *websocket:Service;\n\n    remote function onOpen(websocket:Caller caller) returns error? {\n        string newUserConnectionId = caller.getConnectionId();\n        connectionMap[newUserConnectionId] = caller;\n        string message = string `New user joined with connection id: ${newUserConnectionId}`;\n        check broadcaseMessage(message, newUserConnectionId);\n    }\n\n    remote function onMessage(websocket:Caller caller, string chatMessage) returns error? {\n        check broadcaseMessage(chatMessage, caller.getConnectionId());\n    }\n\n    remote function onClose(websocket:Caller caller) returns error? {\n        _ = connectionMap.remove(caller.getConnectionId());\n    }\n}\n\nfunction broadcaseMessage(string message, string senderConnectionId) returns error? {\n    foreach var [connectionId, wsChannel] in connectionMap.entries() {\n        if connectionId != senderConnectionId {\n            check wsChannel->writeMessage(message);\n        }\n    }\n}\n","name":"message-channel.bal"}],"name":" Message Channel"},"__N_SSG":true}