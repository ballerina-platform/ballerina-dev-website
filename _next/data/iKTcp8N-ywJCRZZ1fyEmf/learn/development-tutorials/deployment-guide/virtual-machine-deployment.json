{"pageProps":{"frontmatter":{"layout":"ballerina-cloud-left-nav-pages-swanlake","title":"Virtual machine deployment","description":"This guide explains how to deploy Ballerina services on virtual machines (VMs), offering a traditional server-based approach without containerization. It covers two deployment strategies, decentralized and centralized.","keywords":"ballerina, programming language, services, cloud, kubernetes, docker","active":"ballerina-deployment-guideLines","intro":"This guide explains how to deploy Ballerina services on virtual machines (VMs), offering a traditional server-based approach without containerization. It covers two deployment strategies, decentralized and centralized."},"content":"\n## Decentralized deployment\n\nThe decentralized deployment offers a straightforward approach, ideal for simpler applications or when direct control over individual deployments is preferred. In this method, Ballerina artifacts are developed and published to a registry (a storage location for deployable components). The deployment process retrieves these artifacts and deploys them to the target environment, ensuring all necessary dependencies and configurations are included.\n\n### Continuous Integration (CI)\n\nContinuous Integration (CI) in decentralized deployment streamlines development by automating the building, testing, and publishing of individual Ballerina artifacts, ensuring faster feedback and fewer integration issues.\n\nThe following steps outline the CI process of the decentralized deployment:\n\n1. Prepare the Server Environment by provisioning the VM or Bare Metal Server.\n   - Ensure the server meets the hardware requirements for your application (CPU, memory, disk space, etc.).\n   - Configure the server OS (Linux is recommended for production).\n\n2. Install the Ballerina distribution from the [Ballerina Installation options.](https://ballerina.io/downloads/)\n\n3. Install any other dependencies your Ballerina integration might need (e.g., database drivers, libraries).\n\n4. Implement the business logic in the Ballerina.\n\n   > **Tip:** Organize the Project: Follow the standard Ballerina project structure, with a `Ballerina.toml` file and source organized in modules if needed. You can visit the [Organize Ballerina code](https://ballerina.io/learn/organize-ballerina-code/) for detailed information about packages and how you can manage the growth of your source code.\n\n5. Add tests to the created integration.\n\n   > **Tip:** You can use [Ballerina test framework](https://ballerina.io/learn/test-ballerina-code/write-tests/) to write and run tests for your Ballerina applications. The Ballerina test framework provides a simple way to write unit tests, integration tests, and end-to-end tests for your Ballerina code.\n\n6. Build the Ballerina integration. This command compiles the Ballerina application to produce the target artifacts. The default build command creates an executable `.jar` file in the `target/bin` directory.\n\n   ```bash\n   $ bal build\n   ```\n\n   > **Tip**: You can use GraalVM builds to compile Ballerina apps into native binaries, ensuring faster startup and lower memory usage compared to the JVM.\n   >\n   > ```bash\n   > $ bal build --graalvm\n   > ```\n   >\n   > See [Build the GraalVM executable](https://ballerina.io/learn/build-the-executable-locally/) for more information.\n\n7. Publish the artifacts to the registry.\n\n> **Tip**: The above steps of the CI process can be automated using the [Ballerina GitHub action](/learn/virtual-machine-deployment/#ballerina-github-action-for-cicd-integration).\n\n### Continuous Deployment (CD)\n\nThe Continuous Deployment (CD) process in a decentralized setup involves automating the deployment of Ballerina artifacts to the target environment.  This typically involves using a deployment workflow or pipeline to retrieve the built artifacts from the registry, configure the target environment, deploy the application, and verify its successful deployment.\n\n## Centralized deployment\n\nWhile decentralized deployment offers simplicity, managing numerous Ballerina artifacts and their dependencies can become complex.  It may also lead to increased resource consumption due to the separate deployment of each artifact.  Centralized deployment addresses these challenges by consolidating all Ballerina artifacts into a single, deployable package, offering a more streamlined and resource-efficient approach.  This strategy is well-suited for scenarios involving multiple Ballerina artifacts that need to be deployed together, or where a more efficient deployment process is desired.\n\nThe centralized deployment involves two primary repositories:\n\n- **Source Repository (CI):** Manages Ballerina packages, builds them, and publishes them to Ballerina Central.\n\n- **Deployment Repository (CD):** Consolidates packages from source repositories and deploys the application to the target environment.\n\n### Source Repository\n\nTypically, a single integration can consist of multiple components, each implemented as a separate Ballerina package. These components can represent distinct functionalities or services that collectively form the complete integration solution. By organizing the integration into multiple packages, the source repository ensures modularity, reusability, and easier maintenance. Each package can be developed, tested, and published independently, allowing teams to work on different components in parallel while maintaining a clear separation of concerns.\n\nThe continuous integration (CI) process of the centralized deployment is managed by the source repositories.\n\nThe following steps outline the CI process in a source repository:\n\n1. Prepare the Server Environment by provisioning the VM or Bare Metal Server.\n   - Ensure the server meets the hardware requirements for your application (CPU, memory, disk space, etc.).\n   - Configure the server OS (Linux is recommended for production).\n\n2. Install the Ballerina distribution from the [Ballerina Installation options.](/downloads/)\n\n3. Install any other dependencies your Ballerina application might need (e.g., database drivers, libraries).\n\n4. Create a new Ballerina package.\n\n   ```bash\n   $ bal new --template lib <package-name>\n   ```\n\n5. Implement the business logic in the Ballerina package.\n\n    > **Tip:**\n    > - Utilize the [Ballerina HTTP default listener](/spec/http/#213-default-listener) to efficiently manage multiple HTTP services on a single port, reducing resource consumption.\n    > - Follow the standard Ballerina project structure, with a `Ballerina.toml` file and source organized in modules if needed. Visit the [Organize Ballerina code](/learn/organize-ballerina-code/) for detailed information about packages and package management.\n\n6. Add tests to the created package.\n\n   > **Tip:** You can use the [Ballerina test framework](/learn/test-ballerina-code/write-tests/) to write and run tests for your Ballerina packages. The Ballerina test framework provides a simple way to write unit tests, integration tests, and end-to-end tests for your Ballerina code.\n\n7. Generate the Ballerina archive.\n\n    ```bash\n    $ bal pack\n    ```\n\n8. Push the package to the Ballerina Central repository.\n\n   ```bash\n   $ bal push\n   ```\n\n   > **Tip**: Visit the [Publish Pacakages to Ballerina Central](/learn/publish-packages-to-ballerina-central/) for more information on how to publish packages to Ballerina Central.\n\n> **Tip**: The above steps of the CI process can be automated using the [Ballerina GitHub action](/learn/virtual-machine-deployment/#ballerina-github-action-for-cicd-integration).\n\n### Continuous Deployment (CD) - Deployment Repository\n\nThe deployment repository serves as the central hub for managing and deploying Ballerina applications. It consolidates Ballerina packages from multiple source repositories, ensuring that all components required for the application are organized in one place. This repository streamlines the deployment process by orchestrating the integration of these packages and preparing them for deployment to the target environment. By centralizing deployment management, it simplifies configuration, enhances maintainability, and ensures consistency across environments.\n\nThe following steps outline the process of setting up a deployment repository for a Ballerina integration:\n\n1. Prepare the Server Environment by provisioning the VM or Bare Metal Server.\n   - Ensure the server meets the hardware requirements for your application (CPU, memory, disk space, etc.).\n   - Configure the server OS (Linux is recommended for production).\n\n2. Install the Ballerina distribution from the [Ballerina Installation options.](/downloads/)\n\n3. Install any other dependencies your Ballerina packages might need (e.g., database drivers, libraries).\n\n4. Install Ballerina consolidate packages tool\n\n   ```\n   $ bal tool pull consolidate-packages\n   ```\n\n5. Consolidate the Ballerina packages from the source repository to create the consolidated project.\n\n   ```\n   $ bal consolidate-packages new --package-path <consolidated-project-path> <comma-separated-list-of-package-names>\n   ```\n\n    > **Tip**: Visit the [Consolidate-packages tool](/learn/consolidate-packages-tool) for more information on how to consolidate Ballerina packages.\n\n6. Add integration tests to the consolidated project.\n\n   > **Tip:** You can use the [Ballerina test framework](/learn/test-ballerina-code/write-tests/) to write and run tests for your Ballerina packages. The Ballerina test framework provides a simple way to write unit tests, integration tests, and end-to-end tests for your Ballerina code.\n\n7. Build the consolidated project. This command creates an executable `.jar` file in the `target/bin` directory.\n\n   ```\n   $ bal build <consolidated-project-name>\n   ```\n\n   > **Tip**: You can use GraalVM builds to compile Ballerina apps into native binaries, ensuring faster startup and lower memory usage compared to the JVM.\n   >\n   > ```bash\n   > $ bal build --graalvm <consolidated-project-name>  \n   > ```\n   >\n   > See [Build the GraalVM executable](/learn/build-the-executable-locally/) for more information.\n\nThe generated Ballerina artifact can be deployed to the target environment, configuring necessary environment variables and system settings.\n\n> **Tip**: The above steps of the CD process can be automated using the [Ballerina GitHub action](/learn/virtual-machine-deployment/#ballerina-github-action-for-cicd-integration).\n\n## Ballerina GitHub Action for CI/CD integration\n\nThe [Ballerina GitHub](https://github.com/marketplace/actions/ballerina-action) action provides a seamless way to automate CI/CD workflows for Ballerina projects within GitHub. Refer to the following sample workflow file which demonstrates how to use the Ballerina GitHub action to build and push a Ballerina package to Ballerina Central.\n\n```yaml\nname: Ballerina publish example\n\non: [workflow_dispatch]\n\njobs:\n  build:\n    \n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n    \n      - name: Ballerina Build\n        uses: ballerina-platform/ballerina-action@master\n        with:\n          args: \n            pack\n\n      - name: Ballerina Push\n        uses: ballerina-platform/ballerina-action@master\n        with:\n          args: \n            push \n        env: \n            BALLERINA_CENTRAL_ACCESS_TOKEN: ${{ secrets.BallerinaToken }}\n```\n","id":"virtual-machine-deployment","sub":"deployment-guide","third":"","slug":"deployment-guide/virtual-machine-deployment","codes":"[[624140191,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">$</span><span style=\\\"color:#032F62\\\"> bal</span><span style=\\\"color:#032F62\\\"> build</span></span></code></pre>\"],[-1382491425,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> $ bal build --graalvm</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#032F62\\\"> ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#032F62\\\"> See [Build the GraalVM executable](</span><span style=\\\"color:#6F42C1\\\">https://ballerina.io/learn/build-the-executable-locally/</span><span style=\\\"color:#032F62\\\">) </span><span style=\\\"color:#D73A49\\\">for</span><span style=\\\"color:#032F62\\\"> more information.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">Publish</span><span style=\\\"color:#032F62\\\"> the artifacts to the registry.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#032F62\\\">Tip</span><span style=\\\"color:#D73A49\\\">**</span><span style=\\\"color:#032F62\\\">: The above steps of the CI process can be automated using the [Ballerina GitHub action](</span><span style=\\\"color:#6F42C1\\\">/learn/virtual-machine-deployment/#ballerina-github-action-for-cicd-integration</span><span style=\\\"color:#032F62\\\">).</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\"> Continuous</span><span style=\\\"color:#032F62\\\"> Deployment (CD)</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\"> Continuous</span><span style=\\\"color:#032F62\\\"> Deployment (CD) process in a decentralized setup involves automating the deployment of Ballerina artifacts to the target environment.  This typically involves using a deployment workflow or pipeline to retrieve the built artifacts from the registry, configure the target environment, deploy the application, and verify its successful deployment.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">Centralized</span><span style=\\\"color:#032F62\\\"> deployment</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">le</span><span style=\\\"color:#032F62\\\"> decentralized deployment offers simplicity, managing numerous Ballerina artifacts and their dependencies can become complex.  It may also lead to increased resource consumption due to the separate deployment of each artifact.  Centralized deployment addresses these challenges by consolidating all Ballerina artifacts into a single, deployable package, offering a more streamlined and resource-efficient approach.  This strategy is well-suited for scenarios involving multiple Ballerina artifacts that need to be deployed together, or where a more efficient deployment process is desired.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\"> centralized</span><span style=\\\"color:#032F62\\\"> deployment involves two primary repositories:</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#032F62\\\">Source Repository (</span><span style=\\\"color:#6F42C1\\\">CI</span><span style=\\\"color:#032F62\\\">):</span><span style=\\\"color:#D73A49\\\">**</span><span style=\\\"color:#032F62\\\"> Manages Ballerina packages, builds them, and publishes them to Ballerina Central.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#032F62\\\">Deployment Repository (</span><span style=\\\"color:#6F42C1\\\">CD</span><span style=\\\"color:#032F62\\\">):</span><span style=\\\"color:#D73A49\\\">**</span><span style=\\\"color:#032F62\\\"> Consolidates packages from source repositories and deploys the application to the target environment.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\"> Source</span><span style=\\\"color:#032F62\\\"> Repository</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">ically,</span><span style=\\\"color:#032F62\\\"> a single integration can consist of multiple components, each implemented as a separate Ballerina package. These components can represent distinct functionalities or services that collectively form the complete integration solution. By organizing the integration into multiple packages, the source repository ensures modularity, reusability, and easier maintenance. Each package can be developed, tested, and published independently, allowing teams to work on different components in parallel while maintaining a clear separation of concerns.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\"> continuous</span><span style=\\\"color:#032F62\\\"> integration (CI) process of the centralized deployment is managed by the source repositories.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\"> following</span><span style=\\\"color:#032F62\\\"> steps outline the CI process in a source repository:</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">Prepare</span><span style=\\\"color:#032F62\\\"> the Server Environment by provisioning the VM or Bare Metal Server.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">-</span><span style=\\\"color:#032F62\\\"> Ensure the server meets the hardware requirements for your application (CPU, memory, disk space, etc.).</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">-</span><span style=\\\"color:#032F62\\\"> Configure the server OS (Linux is recommended for production).</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">Install</span><span style=\\\"color:#032F62\\\"> the Ballerina distribution from the [Ballerina Installation options.](</span><span style=\\\"color:#6F42C1\\\">/downloads/</span><span style=\\\"color:#032F62\\\">)</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">Install</span><span style=\\\"color:#032F62\\\"> any other dependencies your Ballerina application might need (e.g., database drivers, libraries).</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">Create</span><span style=\\\"color:#032F62\\\"> a new Ballerina package.</span></span></code></pre>\"],[1821646536,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">$</span><span style=\\\"color:#032F62\\\"> bal</span><span style=\\\"color:#032F62\\\"> pack</span></span></code></pre>\"],[1821666249,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">$</span><span style=\\\"color:#032F62\\\"> bal</span><span style=\\\"color:#032F62\\\"> push</span></span></code></pre>\"],[-452057909,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> $ bal build --graalvm </span><span style=\\\"color:#D73A49\\\">&#x3C;</span><span style=\\\"color:#24292E\\\">consolidated-project-name</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#032F62\\\"> ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#032F62\\\"> See [Build the GraalVM executable](</span><span style=\\\"color:#6F42C1\\\">/learn/build-the-executable-locally/</span><span style=\\\"color:#032F62\\\">) </span><span style=\\\"color:#D73A49\\\">for</span><span style=\\\"color:#032F62\\\"> more information.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\"> generated</span><span style=\\\"color:#032F62\\\"> Ballerina artifact can be deployed to the target environment, configuring necessary environment variables and system settings.</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">*</span><span style=\\\"color:#032F62\\\">Tip</span><span style=\\\"color:#D73A49\\\">**</span><span style=\\\"color:#032F62\\\">: The above steps of the CD process can be automated using the [Ballerina GitHub action](</span><span style=\\\"color:#6F42C1\\\">/learn/virtual-machine-deployment/#ballerina-github-action-for-cicd-integration</span><span style=\\\"color:#032F62\\\">).</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1\\\">Ballerina</span><span style=\\\"color:#032F62\\\"> GitHub Action for CI/CD integration</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62\\\"> [Ballerina GitHub](</span><span style=\\\"color:#6F42C1\\\">https://github.com/marketplace/actions/ballerina-action</span><span style=\\\"color:#032F62\\\">) </span><span style=\\\"color:#6F42C1\\\">action</span><span style=\\\"color:#032F62\\\"> provides a seamless way to automate CI/CD workflows for Ballerina projects within GitHub. Refer to the following sample workflow file which demonstrates how to use the Ballerina GitHub action to build and push a Ballerina package to Ballerina Central.</span></span></code></pre>\"]]"},"__N_SSG":true}