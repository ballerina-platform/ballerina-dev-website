{"pageProps":{"frontmatter":{"layout":"ballerina-calling-java-code-left-nav-pages-swanlake","title":"Call Java code from Ballerina","description":"See how Ballerina offers a straightforward way to call existing Java code from Ballerina.","keywords":"ballerina, programming language, java api, interoperability","permalink":"/learn/call-java-code-from-ballerina/","active":"call-java-code-from-ballerina","intro":"Ballerina offers a straightforward way to call existing Java code from Ballerina. Although Ballerina is not designed to be a JVM language, the current implementation, which targets the JVM, aka jBallerina, provides Java interoperability by adhering to the Ballerina language semantics.","redirect_from":["/learn/how-to-use-java-interoperability","/learn/how-to-use-java-interoperability/","/learn/how-to-call-java-code-from-ballerina","/learn/how-to-call-java-code-from-ballerina/","/learn/calling-java-code-from-ballerina","/learn/calling-java-code-from-ballerina/","/swan-lake/learn/calling-java-code-from-ballerina","/swan-lake/learn/calling-java-code-from-ballerina/","/learn/user-guide/calling-java-code-from-ballerina","/learn/user-guide/calling-java-code-from-ballerina/","/learn/user-guide/interoperability/calling-java-code-from-ballerina","/learn/user-guide/interoperability/calling-java-code-from-ballerina/","/learn/user-guide/interoperability/","/learn/user-guide/interoperability","/learn/calling-java-code-from-ballerina-and-vice-versa","/learn/calling-java-code-from-ballerina-and-vice-versa/","/learn/call-java-code-from-ballerina","/learn/guides/calling-java-code-from-ballerina/","/learn/guides/calling-java-code-from-ballerina"]},"content":"\n## Write Ballerina bindings\n\nThe `bindgen` is a CLI tool that eases the process of generating Ballerina bindings for given Java APIs. This guide shows you how to use it. For more details on how the `bindgen` tool works, see [Bindgen Tool](/learn/java-interoperability-guide/the-bindgen-tool/).\n\nThe [Package layout](/learn/package-references/#package-layout) explains how to package Java libraries (JAR files) with Ballerina programs to produce self-contained executable programs. When you generate bindings for a Java library using the Bindgen Tool, this part is already handled.\n\nThe [Ballerina FFI](/learn/java-interoperability-guide/ballerina-ffi/) explains how to write these bindings manually. It is also a useful section for those who want to understand the inner workings of calling Java from Ballerina and for those who want to customize the bindings generated by the Bindgen Tool.\n\n## Use the SnakeYAML Java library in Ballerina\nSnakeYAML is a YAML parser for Java. This section describes how to use this library to parse a YAML document using Ballerina. \n\nYou develop a Ballerina program that parses the given YAML file and writes the content to the standard output.\n\nLet's get started.\n\n\n### Step 1 - Write the Java code\nIt is recommended to always start by writing the Java code. It gives you an idea of the set of Java classes required to implement your logic. Then, you can use the `bindgen` tool to generate Ballerina bindings for those classes.\n\nThe Java code below uses the SnakeYAML API to parse the given YAML file. \n\n>**Note:** This is not the most idiomatic way of writing the Java code for this scenario. \n\n```java\nimport org.yaml.snakeyaml.Yaml;\n\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.util.Map;\n\npublic class SnakeYamlSample {\n\n    public static void main(String... a) {\n\t    String filename = a[0];\n        try (InputStream inputStream = new FileInputStream(filename)) {\n            Yaml yaml = new Yaml();\n            Map<String, Object> obj = yaml.load(inputStream);\n            System.out.println(obj);\n        } catch (Exception e) {\n            System.err.println(\"The file '\" + filename + \"' cannot be loaded. Reason: \" + e.getMessage());;\n        }\n    }\n}\n```\n\nHere, you have used four Java classes:\n- `org.yaml.snakeyaml.Yaml`\n- `java.io.FileInputStream`\n- `java.io.InputStream`\n- `java.util.Map`\n\nYou can see them in the imported class list. \n\n>**Tip:** You are encouraged to generate Ballerina bindings for these four classes as a start.  \n\nNow, you create an environment for your Ballerina program.\n\n### Step 2 - Set up the Ballerina package\n\n>**Info:** This section assumes that you have already read [Package layout](/learn/package-references/#package-layout).\n\n#### Create a Ballerina package\n```sh\n> bal new yaml_package\nCreated new Ballerina package 'yaml_package' at yaml_package.\n```\n\n#### Verify the package\n```sh\n> cd yaml_package\n> bal build\nCompiling source\n\tsameera/yaml_package:0.1.0\n\nGenerating executable\n\ttarget/bin/yaml_package.jar\n```\n```sh\n> bal run target/bin/yaml_package.jar\nHello World!\n```\nGreat! You are all set for the next step.\n\n#### Add a sample YAML file \nCopy the content below to a file named `invoice.yml` in the package root directory.\n```yaml\ninvoice: 34843\ndate   : 2001-01-23\nbill-to: &id001\n   given  : Chris\n   family : Dumars\n   address:\n       lines: |\n           458 Walkman Dr.\n           Suite #292\n       city    : Royal Oak\n       state   : MI\n       postal  : 48046\nship-to: *id001\nproduct:\n   - sku         : BL394D\n     quantity    : 4\n     description : Basketball\n     price       : 450.00\n   - sku         : BL4438H\n     quantity    :\n     description : Super Hoop\n     price       : 2392.00\ntax  : 251.42\ntotal: 4443.52\ncomments: >\n   Late afternoon is best.\n   Backup contact is Nancy\n   Billsmer @ 338-4338.\\\n```\n\n### Step 3 - Generate the Ballerina bindings \nIn this step, you will use the `bindgen` tool to generate Ballerina bindings for the four classes that were listed in [Step 1](/learn/call-java-code-from-ballerina/#step-1---write-the-java-code). If you want more information about the tool, see [Bindgen Tool](/learn/java-interoperability-guide/the-bindgen-tool/).\n\n```sh\n> bal bindgen -mvn org.yaml:snakeyaml:1.25 org.yaml.snakeyaml.Yaml java.io.FileInputStream java.io.InputStream java.util.Map\n\nBallerina package detected at: /Users/sameera/yaml_package\n\nResolving maven dependencies...\nsnakeyaml-1.25.jar 100% [===============================================] 297/297 KB (0:00:01 / 0:00:00)\n\nUpdated the `Ballerina.toml` file with the new platform libraries.\n\nThe following JARs were added to the classpath:\n\tsnakeyaml-1.25.jar\n\nGenerating bindings for:\n\tjava.util.Map\n\tjava.io.FileInputStream\n\torg.yaml.snakeyaml.Yaml\n\tjava.io.InputStream\n\nGenerating dependency bindings for:\n\torg.yaml.snakeyaml.introspector.BeanAccess\n\tjava.util.function.BiFunction\n\torg.yaml.snakeyaml.DumperOptions$FlowStyle\n\t...\n\t...\n```\n\n- The `-mvn` option specifies the Maven dependency of the Java library required to generate bindings.\n- The argument list specifies the Java class names. \n\nThe Bindgen Tool generates bindings for:\n- the specified Java classes\n- the Java classes exposed in the public APIs of all the specified classes\n\nBefore you move on to the next step, verify the generated code.\n```sh\n> bal build\n... \n...\n\nGenerating executable\n\ttarget/bin/yaml_package.jar\n\n> bal run target/bin/yaml_package.jar\nHello World!\n```\n\n### Step 4 - Write the Ballerina code\nNow, you will use the generated bindings and write the Ballerina code, which uses the SnakeYAML library. You can develop the Ballerina code corresponding to the Java code below step by step.\n```java\npublic class SnakeYamlSample {\n\n    public static void main(String... a) {\n        String filename = a[0];\n        try (InputStream inputStream = new FileInputStream(filename)) {\n            Yaml yaml = new Yaml();\n            Map<String, Object> obj = yaml.load(inputStream);\n            System.out.println(obj);\n        } catch (Exception e) {\n            System.err.println(\"The file '\" + filename + \"' cannot be loaded. Reason: \" + e.getMessage());;\n        }\n    }\n}\n```\n\n#### Create the `FileInputStream`\nThe goal here is to create a new `java.io.FileInputStream` instance from the filename. In [Step 3](/learn/call-java-code-from-ballerina/#step-3---generate-the-ballerina-bindings), you generated bindings for the required Java classes. The following is the code snippet that does the job.\n\n```ballerina\njavaio:FileInputStream | javaio:FileNotFoundException fileInputStream = javaio:newFileInputStream3(filename);\n```\n\nHere, `FileInputStream` is the Ballerina class generated for the `java.io.FileInputStream` class.\n- Ballerina bindings for each Java package are mapped onto a separate Ballerina module by default. Therefore, you need to import them when using them inside other modules. Here, the `java.io` Ballerina module (mapping the corresponding Java package) is imported as `javaio`. However, if you wish to generate all the bindings inside a single directory, you can do so by using the `[(-o|--output) <output-path>]` command option.\n- You can find functions that start with `newFileInputStream` in the generated code. Each such function creates a new `java.io.FileInputStream` instance. Ballerina does not support function overloading. Therefore, the `bindgen` tool generates a separate Ballerina function for each overloaded method or constructor. Function names of the generated bindings will be improved in a future release.\n- All the public instance methods in the `java.io.FileInputStream` class are mapped to methods in the generated Ballerina class. For more details on how other Java class members are mapped into Ballerina bindings, see [Bindgen Tool](/learn/java-interoperability-guide/the-bindgen-tool/).\n\nNext, youâ€™ll handle the `error` using a type guard.\n```ballerina\nif fileInputStream is javaio:FileNotFoundException {\n    // The type of fileInputStream is FileNotFoundException within this block.\n    io:println(\"The file '\" + filename + \"' cannot be loaded. Reason: \" + fileInputStream.message());\n} else {\n    // The type of fileInputStream is FileInputStream within this block.\n}\n```\n#### Create the SnakeYAML entry point\nThe `org.yaml.snakeyaml.Yaml` class is the entry point to the SnakeYAML API. The generated corresponding Ballerina class is `Yaml`. The `newYaml1()` function is mapped to the default constructor of the Java class. Import the `org.yaml.snakeyaml` Ballerina module as `snakeyaml`.\n```ballerina\nsnakeyaml:Yaml yaml = snakeyaml:newYaml1();\n```\n####  Load the YAML document\nUse the `org.yaml.snakeyaml.Yaml.load(InputStream is)` method to get a `java.util.Map` Java instance from the given `java.io.InputStream`. Since the `Object` Ballerina class (the mapping of `java.lang.Object` class) resides inside the `java.lang` module, import it as `javalang`.\n\n>**Note:** Even though you didn't explicitly generate the `java.lang.Object` class, it has been generated automatically since it is exposed through the public APIs of generated classes.\n\n```ballerina\njavalang:Object mapObj = yaml.load(fileInputStream);\n```\n\nThe `org.yaml.snakeyaml.Yaml.load(InputStream is)` is a generic method. The Bindgen Tool does not support Java generics at the moment. That is why the corresponding Ballerina method returns a `java.lang.Object`.\n\n####  Print the returned map instance\nYou can print the content of the `java.util.Map` instance in the standard out as follows.\n```ballerina\nio:println(mapObj);\n```\n#### Complete the code \nBelow is the complete code. You can replace the contents in `main.bal` with the following code.\n```ballerina\nimport ballerina/io;\nimport yaml_package.java.io as javaio;\nimport yaml_package.java.lang as javalang;\nimport yaml_package.org.yaml.snakeyaml as snakeyaml;\n \npublic function main(string... args) returns error? {\n   string filename = args[0];\n   javaio:FileInputStream | javaio:FileNotFoundException fileInputStream = javaio:newFileInputStream3(filename);\n   if fileInputStream is javaio:FileNotFoundException {\n       io:println(\"The file '\" + filename + \"' cannot be loaded. Reason: \" + fileInputStream.message());\n   } else {\n       snakeyaml:Yaml yaml = snakeyaml:newYaml1();\n       javalang:Object mapObj = yaml.load(fileInputStream);\n       io:println(mapObj);\n   }\n}\n```\n\nBuild and run this code.\n```sh\n> bal build\nCompiling source\n\tsameera/yaml_package:0.1.0\n\nGenerating executable\n\ttarget/bin/yaml_package.jar\n```\n\nNow, you need to pass the YAML file name as the first argument.\n```sh\n> bal run target/bin/yaml_package.jar invoice.yml\n{invoice=34843, date=Mon Jan 22 16:00:00 PST 2001, bill-to={given=Chris, family=Dumars, address={lines=458 Walkman Dr.\nSuite #292\n, city=Royal Oak, state=MI, postal=48046}}, ship-to={given=Chris, family=Dumars, address={lines=458 Walkman Dr.\nSuite #292\n, city=Royal Oak, state=MI, postal=48046}}, product=[{sku=BL394D, quantity=4, description=Basketball, price=450.0}, {sku=BL4438H, quantity=null, description=Super Hoop, price=2392.0}], tax=251.42, total=4443.52, comments=Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\\}\n```\n\nThe above sections explain how to use the `bindgen` tool to generate Ballerina bindings for Java classes and how to use them.\n\nFor more information on various aspects related to Java interoperability in Ballerina, see [Java interoperability](/learn/java-interoperability-guide/java-interoperability/).\n","id":"call-java-code-from-ballerina","sub":"java-interoperability","third":"","slug":"java-interoperability/call-java-code-from-ballerina"},"__N_SSG":true}