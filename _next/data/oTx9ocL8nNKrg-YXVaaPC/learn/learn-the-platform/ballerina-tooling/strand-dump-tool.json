{"pageProps":{"frontmatter":{"title":"Strand dump tool","description":"Check out how you can dump and inspect the currently available strands of a Ballerina program.","keywords":"ballerina runtime, troubleshoot, strand dump, thread dump","permalink":"/learn/strand-dump-tool/","active":"strand-dump-tool","redirect_from":["/learn/strand-dump-tool"]},"content":"\nThe Ballerina runtime can have unexpected behaviors due to user code errors, bugs, or issues with the running environment. \nThese will result in memory leaks, CPU spinning, runtime hangs, performance degradation or crashing with various errors. \nBallerina provides a tool to dump the status of currently running strands.\n\n## Strand dump\n\nBallerina strand dump provides information on the available strands and strand groups during the execution of \na Ballerina program. This can be used to:\n\n- troubleshoot runtime errors\n\n- find data races, race conditions, livelocks, and deadlocks\n\n- inspect strand and strand group status\n\n>**Note:** Currently, this ability is only available in the operating systems in which the `SIGTRAP` POSIX signal is \nsupported (`SIGTRAP` is not available on Windows).\n\n### Get the strand dump\n\nTo get the strand dump when a Ballerina program is running, you need to know the process ID (PID) of the Ballerina \nprogram. For that, you can use the `jps` tool. Then, you need to send the `SIGTRAP` signal to the process. The strand \ndump will be produced to the standard output stream in the text format.\n\nFor example, consider the following Ballerina program.\n```ballerina\nimport ballerina/lang.runtime;\nimport ballerina/io;\n\npublic function main() {\n    future<int> addResult = start addnum(1, 2);\n    int|error addition = wait addResult;\n    io:println(addition);\n}\n\nfunction addnum(int num1, int num2) returns int {\n\n    worker sender {\n        runtime:sleep(1000);\n        num1 -> receiver;\n    }\n\n    worker receiver returns int {\n        int firstNum = <- sender;\n        return num2 + firstNum;\n    }\n\n    int intResult = wait receiver;\n    return intResult;\n}\n```\n\nRun this Ballerina package using the `bal run` command.\n```\n$ bal run\nCompiling source\n\tdemo/strandDump:0.1.0\n\nRunning executable\n```\n\nObtain its PID while the program is running.\n```\n$ jps\n3408 Main\n28851 Jps\n28845 $_init\n```\n\nYou get the PID for this program as 28845 because `$_init` is the main class of the Ballerina program. \nTo get the strand dump, send the `SIGTRAP` signal to that process. You can use the following CLI command.\n```\n$ kill -SIGTRAP 28845\n```\nor\n```\n$ kill -5 28845\n```\n\nThen, the dump of the runtime strands will be emitted to the standard output stream of the Ballerina program. \nFor example, see the sample below.\n```text\nBallerina Strand Dump [2022/07/26 14:34:31]\n===========================================\n \nCurrent no. of strand groups    :       2\nCurrent no. of strands          :       4\n \ngroup 4 [QUEUED]: [1]\n        strand 2 \"main\" [demo.strandDump.0:main] [WAITING]:\n                at      demo.strandDump.0.1.0:main(main.bal:6)\n \ngroup 5 [QUEUED]: [3]\n        strand 3 \"addResult\" [demo.strandDump.0:main][2] [WAITING]:\n                at      demo.strandDump.0.1.0:addnum(main.bal:22)\n \n        strand 4 \"sender\" [demo.strandDump.0:addnum][3] [BLOCKED]:\n                at      ballerina.lang.runtime.0.0.0:sleep(runtime.bal:61)\n                        demo.strandDump.0.1.0:$lambda$_0(main.bal:13)\n \n        strand 5 \"receiver\" [demo.strandDump.0:addnum][3] [BLOCKED ON WORKER MESSAGE RECEIVE]:\n                at      demo.strandDump.0.1.0:$lambda$_1(main.bal:18)\n \n===========================================\n```\n\n### Output format and available details\n\nThe strand dump contains the information on the date and the time when the strand dump was obtained and the current \nnumber of strand groups and strands available. The details will be given in the following format.\n\n![Strand dump output format](/learn/images/strand-dump-output-format.svg \"Strand dump output format\")\n\nLabel | Description\n-- | --\nStrand group ID | A unique ID given to a particular strand group. A strand group comprises a set of strands that run on the same thread.\nStrand group state | Current state of the strand group. For the available states, see [Strand group states](/learn/strand-dump-tool/#strand-group-states).\nThe current number of strands in the strand group | A strand group consists of one or more strands. Only one of them runs on a thread at a time.\nStrand ID | A unique ID given to a particular strand.\nStrand name | Name of the strand associated with the strand ID. This is optional and will be omitted if not available.\nStrand initiated module | Name of the module, which created the strand.\nStrand initiated function | Name of the function, which created the strand.\nParent strand ID | ID of the parent strand. This will be omitted if there is no parent strand.\nStrand state | Current state of the strand. For the available states, see [Strand states](/learn/strand-dump-tool/#strand-states).\nStrand yielded location stack trace | The stack trace, which points to the location where the strand is blocked (yielded). This is omitted if the state is `RUNNABLE` or `DONE`. A line in the stack trace is given by the format: <br />`module name:function name(filename:line number)`\n\n#### Strand group states\n\nState | Description\n-- | --\nRUNNABLE | Strand group is ready to run or is currently running.\nQUEUED | Strand group execution is blocked or completed or it comprises a new set of strands that are not yet scheduled to run.\n\n#### Strand states\n\nState | Description\n-- | --\nWAITING FOR LOCK | Strand is waiting to acquire a lock.\nBLOCKED ON WORKER MESSAGE SEND | Strand is blocked due to the `sync send` action.\nBLOCKED ON WORKER MESSAGE RECEIVE | Strand is blocked due to the `receive` action.\nBLOCKED ON WORKER MESSAGE FLUSH | Strand is blocked due to the `flush` action.\nWAITING | Strand is blocked due to the `wait` action.\nBLOCKED | Strand is blocked due to any other reason than the above. E.g., sleep, external function call, etc.\nRUNNABLE | Strand is ready to run or is currently running.\nDONE | Strand execution is completed.\n","id":"strand-dump-tool","sub":"ballerina-tooling","third":"","slug":"ballerina-tooling/strand-dump-tool"},"__N_SSG":true}