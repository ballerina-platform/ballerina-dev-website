{"pageProps":{"frontmatter":{"layout":"ballerina-style-guide-left-nav-pages-swanlake","title":"Operators, keywords, and types","description":"The Ballerina Style Guide aims at maintaining a standard coding style among the Ballerina community. The Ballerina code formatting tools are based on this guide.","keywords":"ballerina, programming language, ballerina style guide, operators, keywords, types","active":"operators-keywords-and-types","permalink":"/learn/style-guide/operators-keywords-and-types/","intro":"The sections below include the coding conventions with respect to operators, keywords, and types.","redirect_from":["/learn/style-guide/operators_keywords_and_types","/learn/coding-conventions/operators_keywords_and_types","/swan-lake/learn/coding-conventions/operators_keywords_and_types/","/swan-lake/learn/coding-conventions/operators_keywords_and_types","/learn/coding-conventions/operators_keywords_and_types/","/learn/coding-conventions/operators_keywords_and_types","/learn/user-guide/coding-conventions/operators_keywords_and_types","/learn/user-guide/coding-conventions/operators_keywords_and_types/","/learn/user-guide/code-organization/coding-conventions/operators_keywords_and_types/","/learn/user-guide/code-organization/coding-conventions/operators_keywords_and_types","/learn/user-guide/style-guide/coding-conventions/operators-keywords-and-types","/learn/user-guide/style-guide/coding-conventions/operators-keywords-and-types/"]},"content":"\n## Keywords and Types\n* Do not keep spaces between the type and the pipe operator when it is in a union type (e.g., `string|int`).\n  \n**Example,**\n\n```ballerina\ntype method \"POST\"|\"GET\"|\"PUT\";\n    \n(int|string) variable = 0;\n  \nfunction getValue(string key) returns (string|error) {\n    ...\n}\n  \nfunction getName() returns string|error {\n    (string|error) valueOrError = getValue(\"name\");\n    ...\n}\n```\n\n* Do not keep spaces between the type and the optional operator `?`.\n  \n**Example,**\n\n```ballerina\nstring? name;\n```\n\n* Avoid line breaks inside constrained types.\n  \n**Do's**\n\n```ballerina\nmap<int|string> x;// map reference type\n```\n  \n**Don'ts**\n\n```ballerina\nmap<\n    int\n    |\n    string\n> x;\n```\n\n## Operators\n* Keep only a single space before and after the `=` operator.\n  \n**Example,**\n\n```ballerina\nint a = 0;\n```\n\n* Do not keep spaces around the semicolon `;`.\n* Do not keep spaces between the unary operator and the expression.\n\n**Example,**\n\n```ballerina\na = -a;\n``` \n\n* Keep a single space before and after any `binary` or `ternary` operator.\n\n**Example,**\n\n```ballerina\nvar fullName = firstName + lastName;\n  \nstring|() name = isNameAvailable() ? getName() : \"Unknown\";\n  \nvar elvisOperator = name ?: \"Unknown\";\n```\n\n* Keep a single space before and after a compound operator such as `-=` and `+=`.\n\n**Example,**\n\n```ballerina\nname += lastName;\n```\n\n* When accessing a function, object, class or record from another module, do not keep spaces around `:`.\n  \n**Example,**\n  \n```ballerina\nio:println(\"john\");\nhttp:Response res = new();\n```\n\n<div class=\"cGitButtonContainer\"><p data-button=\"iGitStarText\">\"Star\"</p><p data-button=\"iGitWatchText\">\"Watch\"</p></div>\n\n\n<style> #tree-expand-all , #tree-collapse-all, .cTocElements {display:none;} .cGitButtonContainer {padding-left: 40px;display: none;} </style>","id":"operators-keywords-and-types","sub":"source-code-dependencies","third":"style-guide","slug":"source-code-dependencies/style-guide/operators-keywords-and-types"},"__N_SSG":true}