{"pageProps":{"frontmatter":{"layout":"ballerina-grpc-getting-started-left-nav-pages-swanlake","title":"Write a gRPC service with Ballerina","description":"This guide will walk you through writing a simple Ballerina gRPC service and invoking the service through a Ballerina gRPC client application.","keywords":"ballerina, grpc, protocol buffers, protobuf, ballerina packages, language-guide, standard library","permalink":"/learn/write-a-grpc-service-with-ballerina/","active":"write-a-grpc-service-with-ballerina","intro":"This guide walks you through writing a simple Ballerina gRPC service and invoking the service through a Ballerina gRPC client application.","redirect_from":["/learn/getting-started/writing-a-grpc-service-with-ballerina","/learn/getting-started/writing-a-grpc-service-with-ballerina/","/learn/user-guide/getting-started/writing-a-grpc-service-with-ballerina","/learn/user-guide/getting-started/writing-a-grpc-service-with-ballerina/","/learn/writing-a-grpc-service-with-ballerina/","/learn/writing-a-grpc-service-with-ballerina","/learn/write-a-grpc-service-with-ballerina","/learn/getting-started/writing-a-grpc-service-with-ballerina/","/learn/getting-started/writing-a-grpc-service-with-ballerina"]},"content":"\n## Set up the prerequisites\n\nTo complete this tutorial, you need:\n\n1. [Ballerina 2201.0.0 (Swan Lake)](/learn/install-ballerina/set-up-ballerina/) or greater\n2. A text editor\n  >**Tip:** Preferably, <a href=\"https://code.visualstudio.com/\" target=\"_blank\">Visual Studio Code</a> with the <a href=\"https://marketplace.visualstudio.com/items?itemName=WSO2.ballerina\" target=\"_blank\">Ballerina extension</a> installed.\n3. A command terminal\n\n## Understand the implementation\n\nIn an RPC program, you first define the service interface using an Interface Definition Language (IDL) to create the service definition (i.e., `helloworld.proto`). gRPC commonly uses Protocol Buffers as the IDL.\n\nAs illustrated in the diagram below, next, you compile the service definition file (i.e., `helloworld.proto`), and generate the source code for both the service and client applications. In Ballerina, you can generate the source code using the built-in `Protocol Buffers to Ballerina` tool.\n\n![gRPC Getting Started](/learn/images/grpc-getting-started.png)\n\n## Create the service definition\n\nTo create a simple service definition in Protocol Buffers, follow these steps:\n\n1. Create a new directory named `grpc_sample` in a preferred location (this is your main directory).\n\n2. Open the `grpc_sample` directory in your text editor. \n\n    >**Tip:** If you have VS Code installed, in the terminal, navigate to the `grpc_sample` directory, and execute the `code .` command.\n\n3. Inside the `grpc_sample` directory, create a new service definition file (i.e., `helloworld.proto`).\n\n4. Copy the service definition below to the `helloworld.proto` file.\n  > **Info:** This sample service definition is taken from the [Quick start](https://grpc.io/docs/languages/go/quickstart/) guide on the gRPC official site.\n\n\n  ```proto\n  syntax = \"proto3\";\n\n  package helloworld;\n\n  // The greeting service definition.\n  service Greeter {\n    // Sends a greeting.\n    rpc sayHello(HelloRequest) returns (HelloReply);\n  }\n\n  // The request message with the user's name.\n  message HelloRequest {\n    string name = 1;\n  }\n\n  // The response message with the greetings.\n  message HelloReply {\n    string message = 1;\n  }\n  ```\n\nNow, let’s implement the gRPC service and client in the Ballerina language.\n\n## Implement the gRPC service\n\nBallerina uses packages to group code. You need to create a Ballerina package, generate the service code in the package, and write the business logic.\n\n### Create the service package\n\nIn the terminal, navigate to the `grpc_sample` directory, and execute the command below to create the Ballerina package for the gRPC service implementation.\n\n> **Note:** For more information on Ballerina packages, see [Organize Ballerina code](/learn/organize-ballerina-code/).\n\n```\n$ bal new greeter_service\n```\n\nYou view the output below.\n\n```\nCreated new package 'greeter_service' at greeter_service.\n```\n\nThis creates a directory named `greeter_service` with the files below.\n\n```\n.\n├── greeter_service\n│   ├── Ballerina.toml\n│   └── main.bal\n```\n\n>**Tip:** Remove the automatically-created `main.bal` file as you are not going to use it in this guide.\n\n### Generate the source code of the service\n\nIn the terminal, from inside the same `grpc_sample` directory, execute the command below to generate the source code related to the service definition.\n\n```\n$ bal grpc --mode service --input helloworld.proto --output greeter_service/\n```\n\nOnce successfully executed, you will see the output below.\n\n```\nSuccessfully extracted the library files.\nSuccessfully generated the Ballerina file.\n```\n\nThis creates the two files below inside the `greeter_service` directory.\n\n```\n.\n├── greeter_service\n│   ├── greeter_service.bal\n│   └── helloworld_pb.bal\n```\n\n- The `helloworld_pb.bal` file is the stub file, which contains classes that the client/service uses to talk to each other and the Ballerina types corresponding to the request and response messages.\n- The `greeter_service.bal` file is the service template file, which contains service(s) with all the remote methods\n  defined in the `.proto` file.\n\n### Update the service template file\n\nTo add the business logic to the remote method (in this case, you only need to update the `sayHello` method as shown below), follow these steps:\n\n1. Open the `greeter_service` directory in your text editor. \n\n2. Replace the service template file (i.e., `greeter_service.bal`) with the code below.\n\n    ```ballerina\n    import ballerina/grpc;\n\n    listener grpc:Listener grpcListener = new (9090);\n\n    @grpc:Descriptor {value: HELLOWORLD_DESC}\n    service \"Greeter\" on grpcListener {\n\n        remote function sayHello(HelloRequest value) returns HelloReply|error {\n            return {message: \"Hello \" + value.name};\n        }\n    }\n    ```\n\n    In this code:\n      - The listener declaration creates a new gRPC listener with port 9090. The listener is the entity that listens to the\n    input coming to the port and then dispatches it to the correct service(s).\n      - The service declaration creates a service and attaches it to the listener. The service annotation is to create an\n      internal mapping between the service declarations and the `.proto` definition. Do not change it.\n      - The gRPC service can have one or more remote methods depending on the `.proto` definition. Here, this service has only one method called `sayHello` that has the `HelloRequest` type as the request and `HelloReply` type as the response.\n\n## Run the gRPC service \n\nIn the terminal, navigate to the `greeter_service` directory, and execute the command below to run the service package\n\n```\n$ bal run\n```\n\nYou view the output below.\n\n```\nCompiling source\n\texample/greeter_service:0.1.0\n\nRunning executable\n```\n\nNow, you completed the server-side implementation and it is running on port 9090. Let’s move on to the gRPC client-side implementation.\n\n## Implement the gRPC client\n\nSimilar to the service, the client application also starts with creating a new Ballerina package. Once created, you can generate the client code and update the code to call the remote methods exposed by the service.\n\n### Create the client package\n\nIn a new tab of the terminal, navigate to the `grpc_sample` directory, and execute the command below to create the Ballerina package for the gRPC client implementation:\n\n> **Note:** For more information on Ballerina packages, see [Organize Ballerina code](/learn/organize-ballerina-code/).\n\n```\n$ bal new greeter_client\n```\n\nYou view the output below.\n\n```\nCreated new package 'greeter_client' at greeter_service.\n```\n\nThis creates a directory named `greeter_client` with the files below.\n\n```\n.\n├── greeter_client\n│   ├── Ballerina.toml\n│   └── main.bal\n```\n\n>**Tip:** Remove the automatically-created `main.bal` file as you are not going to use it in this guide.\n\n### Generate the source code of the client\n\nIn the terminal, from inside the same `grpc_sample` directory, execute the command below to generate the source code related to the client definition.\n\n```\n$ bal grpc --mode client --input helloworld.proto --output greeter_client/\n```\n\nOnce successfully executed, you will see the output below.\n\n```\nSuccessfully extracted the library files.\nSuccessfully generated the Ballerina file.\n```\n\nThis creates the two files below inside the `greeter_client` directory.\n\n```\n.\n├── greeter_client\n│   ├── greeter_client.bal\n│   └── helloworld_pb.bal\n```\n\n- The `helloworld_pb.bal` file is the stub file, which contains the classes that the client/service uses to talk to each\nother and the Ballerina types corresponding to request and response messages.\n- The `greeter_client.bal` file is the client template file, which contains the `main` function with the client declaration.\n\n### Update the client template file\n\nReplace the client template file (i.e., `greeter_client.bal`) with the code below to add the business logic to the remote method. \n\n```ballerina\nimport ballerina/io;\n\nGreeterClient ep = check new (\"http://localhost:9090\");\npublic function main() returns error? {\n   HelloReply sayHello = check ep->sayHello({name: \"Ballerina\"});\n   io:println(`Response : ${sayHello.message}`);\n}\n```\n\nIn this code:\n\n- The client declaration creates a connection to the remote server which is listening on port 9090. The generated client has remote methods that can use to talk to a remote server.\n- The `main` function contains the statements that call the `sayHello` remote method and prints the response to the console.\n\n## Run the gRPC client\n\nIn the terminal, navigate to the `greeter_client` directory, and execute the command below to run the service package\n\n```\n$ bal run\n```\n\nYou view the output below printed on the console.\n\n>**Info:** Since the server is up and running, once the client application is successfully executed, the client application invokes the `sayHello` function with the  `HelloRequest` message and receives the `HelloReply` as the response.\n\n```\nCompiling source\n\texample/greeter_client:0.1.0\nRunning executable\nResponse : Hello Ballerina\n```\n\n## Learn more\n\nTo learn more about gRPC support in Ballerina, see the following:\n- [`grpc` module documentation](https://lib.ballerina.io/ballerina/grpc/latest)\n- [gRPC CLI tooling guide](/learn/cli-documentation/grpc/)\n- [Simple RPC](/learn/by-example/grpc-simple)","id":"write-a-grpc-service-with-ballerina","sub":"","third":"","slug":"write-a-grpc-service-with-ballerina"},"__N_SSG":true}