{"pageProps":{"frontmatter":{"layout":"ballerina-style-guide-left-nav-pages-swanlake","title":"Expressions","description":"The Ballerina Style Guide aims at maintaining a standard coding style among the Ballerina community. The Ballerina code formatting tools are based on this guide.","keywords":"ballerina, programming language, ballerina style guide, expressions","active":"expressions","permalink":"/learn/style-guide/expressions/","intro":"The sections below include the coding conventions with respect to expressions.","redirect_from":["/learn/style-guide/expressions","/learn/coding-conventions/expressions","/swan-lake/learn/coding-conventions/expressions/","/swan-lake/learn/coding-conventions/expressions","/learn/coding-conventions/expressions/","/learn/coding-conventions/expressions","/learn/user-guide/coding-conventions/expressions","/learn/user-guide/coding-conventions/expressions/","/learn/user-guide/code-organization/coding-conventions/expressions/","/learn/user-guide/code-organization/coding-conventions/expressions","/learn/user-guide/style-guide/coding-conventions/expressions","/learn/user-guide/style-guide/coding-conventions/expressions/"]},"content":"\n## Function invocation\n\n* Do not keep spaces between the function name and opening parentheses `(`.\n  \n* If it is not possible to keep the function invocation in a single line due to it exceeding the maximum line length, split it into a new line based on the best practices given in [Line breaks](/learn/style-guide/coding-conventions/#line-breaks).\n    \n**Example,**\n\n```ballerina\nsetAgeForEmployee(employeeName,\n    employeeID);\n```\n\n## Record literal\n\n* If empty, keep it as an empty block.\n      \n**Example,**\n\n```ballerina\nPerson p = {};\n```\n\n* In a record literal, arrange the fields in a single line.\n  Then, add a space after the comma and leave no spaces between the braces and fields.\n      \n**Example,**\n\n```ballerina  \nPerson p = {name: \"john\", age: 20};\n``` \n\n* Do not keep any spaces between the key and the colon. Also, keep only one space between the colon and the value.\n  \n**Example,**\n\n```ballerina\nPerson person = {\n    name: \"john\" // in this field key is the \"name\" and value is \"john\".\n};\n```\n\n* You can define the fields in new lines. If you do so, make sure each field is in a separate line and is block-indented.\n\n**Do's**\n\n```ballerina\nPerson p = {\n    name: \"john\",\n    age: 20\n};\n``` \n\n**Don'ts**\n\n```ballerina\nPerson p = {name: \"john\",\n    age: 20};\n  \n//Or\n  \nPerson p = {\nname: \"john\",\nage: 20\n};\n  \n//Or\n  \nPerson p = {\n    name: \"john\",\n    age: 20};\n```\n\n## Map literal\n\n* For map literals, follow the same formatting guidelines as [Record literals](/learn/style-guide/expressions/#record-literal).\n  \n**Example,**\n\n```ballerina\n// Inline map literal.\nmap<string> mapOfString1 = {name: \"john\", id: \"0\"};\n  \n// Mulitline map literal.\nmap<string> mapOfString2 = {\n    name: \"john\",\n    id: \"0\"\n}\n```\n\n## Tuple\n\n* Always, place a tuple in a single line.\n\n**Example,**\n\n```ballerina\n[string, int] tuple = [\"john\", 20];\n```\n\n* If a tuple exceeds the maximum line length limit, move the whole tuple to a new line and indent with four spaces from the starting position of the statement or definition.\n  \n**Example,**\n\n```ballerina\n[string, int] tuple = \n    [nameOfEmployee, ageOfTheEmployee];\n```\n\n## Array literal\n\n* Place simple arrays in a single line.\n* Do not keep any spaces between the opening bracket, value, and the closing bracket.\n  \n**Example,**\n\n```ballerina\nstring[] names = [\"john\", \"doe\", \"jane\", \"doe\"];\n```\n\n* If an array cannot be placed on a single line due to it exceeding the maximum line length, split each value in the array to its own block-indented line.\n    \n**Example,**\n\n```ballerina\nstring[] names = [\n    \"john\",\n    \"doe\",\n    \"jane\",\n    \"doe\"\n];\n```\n\n## Type casting\n\n* Do not keep spaces between the type and the angle brackets (i.e., `<string>`).\n* Do not keep spaces between the closing angle bracket and value reference, which will be casted.\n\n**Example,**\n\n```ballerina\nstring name = <string>person.name;\n```\n\n* Avoid line breaks in type casting.\n  \n**Do's**\n\n```ballerina\n<string>\n```\n  \n**Don'ts**\n\n```ballerina\n<\n    string\n>\n```\n\n## Table literal\n\n* Follow the formatting guidelines of [Record literals](/learn/style-guide/expressions/#record-literal) when formatting a table block.\n  \n**Example,**\n  \n```ballerina\ntype Employee record {\n    readonly int id;\n    string name;\n    float salary;\n};\n\ntype EmployeeTable table<Employee> key(id);\n\npublic function main() {\n\n    EmployeeTable employeeTab = table [\n        {id: 1, name: \"John\", salary: 300.50},\n        {id: 2, name: \"Bella\", salary: 500.50},\n        {id: 3, name: \"Peter\", salary: 750.0}\n    ];\n}\n```\n  \n<div class=\"cGitButtonContainer\"><p data-button=\"iGitStarText\">\"Star\"</p><p data-button=\"iGitWatchText\">\"Watch\"</p></div>\n\n\n<style> #tree-expand-all , #tree-collapse-all, .cTocElements {display:none;} .cGitButtonContainer {padding-left: 40px;display: none;} </style>\n","id":"expressions","sub":"source-code-dependencies","third":"style-guide","slug":"source-code-dependencies/style-guide/expressions"},"__N_SSG":true}