{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina Auth Library\n\n_Owners_: @ldclakmal @shafreenAnfar  \n_Reviewers_: @shafreenAnfar  \n_Created_: 2021/10/01  \n_Updated_: 2022/02/17  \n_Edition_: Swan Lake  \n\n## Introduction\nThis is the specification for the Auth standard library of [Ballerina language](https://ballerina.io/), which is used for authorization of listeners and clients (HTTP, gRPC, GraphQL, WebSocket, WebSub, etc.).\n\nThe Auth library specification has evolved and may continue to evolve in the future. The released versions of the specification can be found under the relevant GitHub tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the [Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the specification is stored under `/docs/proposals`. Proposals under discussion can be found with the label `type/proposal` in GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Basic Auth](#2-basic-auth)\n3. [Listener Auth](#3-listener-auth)\n    * 3.1. [Basic Auth Provider](#31-basic-auth-provider)\n        * 3.1.1. [File User Store](#311-file-user-store)\n        * 3.1.2. [LDAP User Store](#312-ldap-user-store)\n    * 3.2. [Basic Auth Handler](#32-basic-auth-handler)\n        * 3.2.1. [File User Store](#321-file-user-store)\n        * 3.2.2. [LDAP User Store](#322-ldap-user-store)\n    * 3.3. [Declarative Approach](#33-declarative-approach)\n    * 3.4. [Imperative Approach](#34-imperative-approach)\n4. [Client Auth](#4-client-auth)\n    * 4.1. [Basic Auth Provider](#41-basic-auth-provider)\n    * 4.2. [Basic Auth Handler](#42-basic-auth-handler)\n    * 4.3. [Declarative Approach](#43-declarative-approach)\n    * 4.4. [Imperative Approach](#44-imperative-approach)\n5. [Samples](#5-samples)\n    * 5.1. [Listener Auth](#51-listener-auth)\n        * 5.1.1. [Declarative Approach (HTTP Listener)](#511-declarative-approach-http-listener)\n            * 5.1.1.1. [File User Store](#5111-file-user-store)\n            * 5.1.1.2. [LDAP User Store](#5112-ldap-user-store)\n        * 5.1.2. [Imperative Approach (HTTP Listener)](#512-imperative-approach-http-listener)\n            * 5.1.2.1. [File User Store](#5121-file-user-store)\n            * 5.1.2.2. [LDAP User Store](#5122-ldap-user-store)\n    * 5.2. [Client Auth](#52-client-auth)\n        * 5.2.1. [Declarative Approach (HTTP Client)](#521-declarative-approach-http-client)\n        * 5.2.2. [Imperative Approach (HTTP Client)](#522-imperative-approach-http-client)\n\n## 1. Overview\nThis specification elaborates on Basic Auth authentication and authorization for all the Ballerina listeners and \nclients. The HTTP, gRPC, GraphQL, WebSocket, WebSub protocol-based listeners and clients are secured according to this \nspecification.\n\nThis has a number of design principles:\n- **Listener auth**: This refers to the authentication and authorization of the listener as defined in \n  [Ballerina 2021R1 Section 5.7.4](https://ballerina.io/spec/lang/2021R1/#section_5.7.4). The inbound requests/messages \n  independent of the transport protocol are authenticated and authorized according to the configured authentication \n  protocol and related configurations.\n- **Client auth**: This refers to the authentication of the client as defined in \n  [Ballerina 2021R1 Section 7.9](https://ballerina.io/spec/lang/2021R1/#section_7.9). The outbound requests/messages \n  independent of the transport protocol are enriched according to the configured authentication protocol and related \n  configurations.\n- **Auth provider**: This is the entity that is responsible for providing all the auth protocol-related implementations.\n- **Auth handler**: This is the entity that is responsible for handling the security of the API based on the transport \n  protocol and with the use of provider APIs. This API gets the credentials and required configurations as user inputs \n  and returns the authentication protocol-related information. Internally, these APIs call the provider APIs of the \n  relevant authentication protocol.\n- **Declarative approach**: This is also known as the configuration-driven approach, which is used for simple use cases, \n  where users have to provide a set of configurations and do not need to be worried more about how authentication and \n  authorization works.\n- **Imperative approach**: This is also known as the code-driven approach, which is used for advanced use cases, where \n  users need to be worried more about how authentication and authorization work and need to have further customizations.\n\n## 2. Basic Auth\nBasic Auth protocol defines the credential as username and password are concatenated with a `:` and encoded using \nBase64 as defined in [RFC4648 Section 4](https://datatracker.ietf.org/doc/html/rfc4648#section-4) into a sequence of \nUS-ASCII characters as defined in [RFC0020](https://datatracker.ietf.org/doc/html/rfc0020).\n\n## 3. Listener Auth\nThis refers to the authentication and authorization of the listener as defined in \n[Ballerina 2021R1 Section 5.7.4](https://ballerina.io/spec/lang/2021R1/#section_5.7.4). The inbound requests/messages \nindependent of the transport protocol are authenticated and authorized according to the configured authentication \nprotocol and related configurations.\n\n### 3.1. Basic Auth Provider\n\n#### 3.1.1. File User Store\nThe user information is stored in a file in the [TOML language](https://toml.io/en/). The structure of the file would \nbe as follows:\n\n```toml\n# 1* of the following block\n[[ballerina.auth.users]]\nusername=<String>\npassword=<String>\nscopes=<String Array>\n```\n\nThe File User Store Basic Auth Provider has an API to authenticate the Basic Auth credential using the File User Store \ndefined in [TOML language](https://toml.io/en/) and return the `UserDetails` which consists of the username and scopes\nas an array if available.\n\n```ballerina\npublic type FileUserStoreConfig record {|\n|};\n\npublic type UserDetails record {|\n    string username;\n    string[]? scopes;\n|};\n\npublic class ListenerFileUserStoreBasicAuthProvider {\n\n    public function init(FileUserStoreConfig config) {\n        // init basic auth provider for file user store\n    }\n    \n    public function authenticate(string credential) returns UserDetails|error {\n        // read the user store file, validate the credential and return user details\n    }\n}\n```\n\n#### 3.1.2. LDAP User Store\nThe user information is stored in a user store that connects with the LDAP protocol as defined in \n[RFC4511](https://datatracker.ietf.org/doc/html/rfc4511).\n\nThe LDAP User Store Basic Auth Provider has an API to authenticate the Basic Auth credential using the LDAP User Store. \nThe `LdapUserStoreConfig` record is used to provide the configuration related to the LDAP protocol. This returns the \n`UserDetails` which consists of the username and scopes as an array if available.\n\n```ballerina\npublic type LdapUserStoreConfig record {|\n    string domainName;\n    string connectionUrl;\n    string connectionName;\n    string connectionPassword;\n    string userSearchBase;\n    string userEntryObjectClass;\n    string userNameAttribute;\n    string userNameSearchFilter;\n    string userNameListFilter;\n    string[] groupSearchBase;\n    string groupEntryObjectClass;\n    string groupNameAttribute;\n    string groupNameSearchFilter;\n    string groupNameListFilter;\n    string membershipAttribute;\n    boolean userRolesCacheEnabled = false;\n    boolean connectionPoolingEnabled = true;\n    decimal connectionTimeout = 5;\n    decimal readTimeout = 60;\n    SecureSocket secureSocket?;\n|};\n\npublic type UserDetails record {|\n    string username;\n    string[]? scopes;\n|};\n\npublic class ListenerLdapUserStoreBasicAuthProvider {\n\n    public function init(LdapUserStoreConfig config) {\n        // init basic auth provider for LDAP\n    }\n    \n    public function authenticate(string credential) returns UserDetails|Error {\n        // connect to LDAP, validate the credential and return user details\n    }\n}\n```\n\n### 3.2. Basic Auth Handler\n\n> **NOTE**: Since the auth handlers are tightly bound with the transport protocol, for the explanation of the concept, \n> all the samples are created for HTTP transport protocol hereinafter.\n\n#### 3.2.1. File User Store\nThe user information is stored in a file in the [TOML language](https://toml.io/en/). The structure of the file would \nbe as follows:\n\n```\n# 1* of the following block\n[[ballerina.auth.users]]\nusername=<String>\npassword=<String>\nscopes=<String Array>\n```\n\nThe File User Store Basic Auth Handler has an API to authenticate the HTTP request, headers of the HTTP request, or the \ncredential as defined in [RFC7617 Section 2](https://datatracker.ietf.org/doc/html/rfc7617#section-2) using the File \nUser Store defined in [TOML language](https://toml.io/en/). This returns the `UserDetails` which consists of the \nusername and scopes as an array if available or `Unauthorized` in case of authentication failure.\n\nThe File User Store Basic Auth Handler has an API to authorize the user against the expected scope or scopes. This \nreturns `Forbidden` in case of authorization failure.\n\n```ballerina\nimport ballerina/auth;\n\npublic type FileUserStoreConfig record {|\n    *auth:FileUserStoreConfig;\n|};\n\npublic class ListenerFileUserStoreBasicAuthHandler {\n\n    private final auth:ListenerFileUserStoreBasicAuthProvider provider;\n    \n    public function init(FileUserStoreConfig config) {\n        self.provider = new (config);\n    }\n    \n    public function authenticate(Request|Headers|string data) returns auth:UserDetails|Unauthorized {\n        // extract the credential from data\n        auth:UserDetails|auth:Error details = self.provider.authenticate(credential);\n        if details is auth:Error {\n            // return `Unauthorized`\n        }\n        return <auth:UserDetails>details;\n    }\n    \n    public function authorize(auth:UserDetails userDetails, string|string[] expectedScopes) returns Forbidden? {\n        // match the scopes with the provided `expectedScopes`\n        // if not matched return `Forbidden`\n    }\n}\n```\n\n#### 3.2.2. LDAP User Store\nThe LDAP User Store Basic Auth Handler has an API to authenticate the HTTP request, headers of the HTTP request, or the \ncredential as defined in [RFC7617 Section 2](https://datatracker.ietf.org/doc/html/rfc7617#section-2) using the LDAP \nUser Store. The `LdapUserStoreConfig` record is used to provide the configuration related to the LDAP protocol. This \nreturns the `UserDetails` which consists of the username and scopes as an array if available or `Unauthorized` in case \nof authentication failure.\n\nThe LDAP User Store Basic Auth Handler has an API to authorize the user against the expected scope or scopes. This \nreturns `Forbidden` in case of authorization failure.\n\n```ballerina\nimport ballerina/auth;\n\npublic type LdapUserStoreConfig record {|\n    *auth:LdapUserStoreConfig;\n|};\n\npublic client class ListenerLdapUserStoreBasicAuthHandler {\n\n    private final auth:ListenerLdapUserStoreBasicAuthProvider provider;\n    \n    public function init(LdapUserStoreConfig config) {\n        self.provider = new (config);\n    }\n    \n    remote function authenticate(Request|Headers|string data) returns auth:UserDetails|Unauthorized {\n        // extract the credential from data\n        auth:UserDetails|auth:Error details = self.provider.authenticate(credential);\n        if details is auth:Error {\n            // return `Unauthorized`\n        }\n        return <auth:UserDetails>details;\n    }\n    \n    remote function authorize(auth:UserDetails details, string|string[] expectedScopes) returns Forbidden? {\n        // match the scopes with the provided `expectedScopes`\n        // if not matched return `Forbidden`\n    }\n}\n```\n\n### 3.3. Declarative Approach\nThis is also known as the configuration-driven approach, which is used for simple use cases, where users have to \nprovide a set of configurations and do not need to be worried more about how authentication and authorization works. \nThe user does not have full control over the configuration-driven approach.\n\nThe service and/or resource configurations are used to define the authentication and authorization configurations. \nUsers can configure the configurations needed for different authentication schemes and configurations needed for \nauthorizations of each authentication scheme. Also, the configurations can be provided at both the service and resource \nlevels. The priority will be given from bottom to top. Then, the auth handler creation and request \nauthentication/authorization is handled internally without user intervention. The requests that succeeded both \nauthentication and/or authorization phases according to the configurations will be passed to the business logic layer.\n\n### 3.4. Imperative Approach\nThis is also known as the code-driven approach, which is used for advanced use cases, where users need to be worried \nmore about how authentication and authorization work and need to have further customizations. The user has full control \nof the code-driven approach. The handler creation and authentication/authorization calls are made by the user at the \nbusiness logic layer.\n\n## 4. Client Auth\nThis refers to the authentication of the client as defined in\n[Ballerina 2021R1 Section 7.9](https://ballerina.io/spec/lang/2021R1/#section_7.9). The outbound requests/messages\nindependent of the transport protocol are enriched according to the configured authentication protocol and related\nconfigurations.\n\n### 4.1. Basic Auth Provider\nThe Basic Auth Provider has an API to generate the Basic Auth credential. The `CredentialsConfig` record is used to \nprovide the configuration related to the token generation. This returns the generated token.\n\n```ballerina\npublic type CredentialsConfig record {|\n    string username;\n    string password;\n|};\n\npublic class ClientBasicAuthProvider {\n\n    public function init(CredentialsConfig config) {\n        // init basic auth provider\n    }\n    \n    public function generateToken() returns string|Error {\n        // generate the base64 encoded `username:password` value\n    }\n}\n```\n\n### 4.2. Basic Auth Handler\n\n> **NOTE**: Since the auth handlers are tightly bound with the transport protocol, for the explanation of the concept, \n> all the samples are created for HTTP transport protocol hereinafter.\n\nThe Basic Auth Handler has an API to enrich the HTTP request as defined in \n[RFC7617 Section 2](https://datatracker.ietf.org/doc/html/rfc7617#section-2) using the File User Store defined in TOML \nlanguage. This returns the enriched `Request` with headers or `Error` in case of failure.\n\n```ballerina\nimport ballerina/auth;\n\npublic type CredentialsConfig record {|\n    *auth:CredentialsConfig;\n|};\n\npublic class ClientBasicAuthHandler {\n\n    private final auth:ClientBasicAuthProvider provider;\n    \n    public function init(CredentialsConfig config) {\n        self.provider = new (config);\n    }\n    \n    public function enrich(Request req) returns Request|Error {\n        string|auth:Error token = self.provider.generateToken();\n        // set the token as the `Authorization: Bearer <token>` header\n    }\n}\n```\n\n### 4.3. Declarative Approach\nThis is also known as a configuration-driven approach, which is used for simple use cases, where users have to provide \na set of configurations and do not need to be worried more about how authentication works. The user does not have full \ncontrol over the configuration-driven approach.\n\nThe client configurations are used to define the authentication configurations. Users can configure the configurations \nneeded for different authentication schemes. Then, the auth handler creation and request enrichment is handled \ninternally without user intervention.\n\n### 4.4. Imperative Approach\nThis is also known as the code-driven approach, which is used for advanced use cases, where users need to be worried \nmore about how authentication works and need to have further customizations. The user has full control of the \ncode-driven approach. The handler creation and request enrichment calls are made by the user at the business logic layer.\n\n## 5. Samples\n\n### 5.1. Listener Auth\n\n#### 5.1.1. Declarative Approach (HTTP Listener)\n\n##### 5.1.1.1. File User Store\n\n```ballerina\nimport ballerina/http;\n\n@http:ServiceConfig {\n    auth: [\n        {\n            fileUserStoreConfig: {},\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice /foo on new http:Listener(9090) {\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n##### 5.1.1.2. LDAP User Store\n\n```ballerina\nimport ballerina/http;\n\n@http:ServiceConfig {\n    auth: [\n        {\n            ldapUserStoreConfig: {\n                domainName: \"avix.lk\",\n                connectionUrl: \"ldap://localhost:389\",\n                connectionName: \"cn=admin,dc=avix,dc=lk\",\n                connectionPassword: \"avix123\",\n                userSearchBase: \"ou=Users,dc=avix,dc=lk\",\n                userEntryObjectClass: \"inetOrgPerson\",\n                userNameAttribute: \"uid\",\n                userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n                userNameListFilter: \"(objectClass=inetOrgPerson)\",\n                groupSearchBase: [\"ou=Groups,dc=avix,dc=lk\"],\n                groupEntryObjectClass: \"groupOfNames\",\n                groupNameAttribute: \"cn\",\n                groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n                groupNameListFilter: \"(objectClass=groupOfNames)\",\n                membershipAttribute: \"member\",\n                userRolesCacheEnabled: true,\n                connectionPoolingEnabled: false,\n                connectionTimeout: 5,\n                readTimeout: 60\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice /foo on new http:Listener(9090) {\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n#### 5.1.2. Imperative Approach (HTTP Listener)\n\n##### 5.1.2.1. File User Store\n\n```ballerina\nimport ballerina/http;\nimport ballerina/auth;\n\nhttp:FileUserStoreConfig config = {};\nhttp:ListenerFileUserStoreBasicAuthHandler handler = new (config);\n\nservice /foo on new http:Listener(9090) {\n    resource function post bar(@http:Header string Authorization) returns string|http:Unauthorized|http:Forbidden {\n        auth:UserDetails|http:Unauthorized authn = handler.authenticate(Authorization);\n        if authn is http:Unauthorized {\n            return authn;\n        }\n        http:Forbidden? authz = handler.authorize(<auth:UserDetails>authn, \"admin\");\n        if authz is http:Forbidden {\n            return authz;\n        }\n        // business logic\n    }\n}\n```\n\n##### 5.1.2.2. LDAP User Store\n\n```ballerina\nimport ballerina/http;\nimport ballerina/auth;\n\nhttp:LdapUserStoreConfig config = {\n    domainName: \"avix.lk\",\n    connectionUrl: \"ldap://localhost:389\",\n    connectionName: \"cn=admin,dc=avix,dc=lk\",\n    connectionPassword: \"avix123\",\n    userSearchBase: \"ou=Users,dc=avix,dc=lk\",\n    userEntryObjectClass: \"inetOrgPerson\",\n    userNameAttribute: \"uid\",\n    userNameSearchFilter: \"(&(objectClass=inetOrgPerson)(uid=?))\",\n    userNameListFilter: \"(objectClass=inetOrgPerson)\",\n    groupSearchBase: [\"ou=Groups,dc=avix,dc=lk\"],\n    groupEntryObjectClass: \"groupOfNames\",\n    groupNameAttribute: \"cn\",\n    groupNameSearchFilter: \"(&(objectClass=groupOfNames)(cn=?))\",\n    groupNameListFilter: \"(objectClass=groupOfNames)\",\n    membershipAttribute: \"member\",\n    userRolesCacheEnabled: true,\n    connectionPoolingEnabled: false,\n    connectionTimeout: 5,\n    readTimeout: 60\n};\nhttp:ListenerLdapUserStoreBasicAuthHandler handler = new (config);\n\nservice /foo on new http:Listener(9090) {\n    resource function post bar(@http:Header string Authorization) returns string|http:Unauthorized|http:Forbidden {\n        auth:UserDetails|http:Unauthorized authn = handler->authenticate(Authorization);\n        if authn is http:Unauthorized {\n            return authn;\n        }\n        http:Forbidden? authz = handler->authorize(<auth:UserDetails>authn, \"admin\");\n        if authz is http:Forbidden {\n            return authz;\n        }\n        // business logic\n    }\n}\n```\n\n### 5.2. Client Auth\n\n#### 5.2.1. Declarative Approach (HTTP Client)\n\n```ballerina\nimport ballerina/http;\n\nhttp:Client c = check new (\"https://localhost:9090\",\n    auth = {\n        username: \"tom\",\n        password: \"123\"\n    }\n);\n\npublic function main() returns error? {\n    http:Request req = new;\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n\n#### 5.2.2. Imperative Approach (HTTP Client)\n\n```ballerina\nimport ballerina/http;\n\nhttp:CredentialsConfig config = {\n    username: \"tom\",\n    password: \"123\"\n};\nhttp:ClientBasicAuthHandler handler = new (config);\n\nhttp:Client c = check new (\"https://localhost:9090\");\n\npublic function main() returns error? {\n    http:Request req = new;\n    req = check handler.enrich(req);\n    json response = check c->post(\"/foo/bar\", req);\n    // evaluate response\n}\n```\n"},"__N_SSG":true}