{"pageProps":{"frontmatter":{"layout":"ballerina-building-a-data-service-left-nav-pages-swanlake","title":"Build a data service in Ballerina","description":"Connecting to a MySQL database and executing queries using an HTTP RESTful API using Ballerina.","keywords":"ballerina, data service, mysql, database, REST, API","permalink":"/learn/build-a-data-service-in-ballerina/","active":"build-a-data-service","intro":"This tutorial covers how you can connect to a MySQL database and perform queries against it using Ballerina.","redirect_from":["/learn/building-a-data-service-in-ballerina","/learn/building-a-data-service-in-ballerina/","/learn/build-a-data-service-in-ballerina","/learn/getting-started/building-a-data-service-in-ballerina/","/learn/getting-started/building-a-data-service-in-ballerina"]},"content":"\nIn addition, this tutorial also elaborates on how you can create an HTTP RESTful API using Ballerina that can be used to perform basic CRUD operations on the database.\n\n![Data Service Architecture](/learn/images/data-service-architecture.png \"Data Service Architecture\")\n\nThe methodology outlined in this tutorial can be used to work with PostgreSQL, SQL Server, OracleDB or any other relational database as well using the [`PostgreSQL`](https://lib.ballerina.io/ballerinax/postgresql/latest),[`MSSQL`](https://lib.ballerina.io/ballerinax/mssql/latest), [`OracleDB`](https://lib.ballerina.io/ballerinax/oracledb/latest),\nand [`JDBC`](https://lib.ballerina.io/ballerinax/java.jdbc/latest) connectors for Ballerina respectively.\n\n## Set up the prerequisites\n\nTo complete this tutorial, you need:\n\n1. A command terminal\n2. A text editor\n    >**Tip:** Preferably, [Visual Studio Code](https://code.visualstudio.com/) with the [Ballerina extension](https://marketplace.visualstudio.com/items?itemName=WSO2.ballerina) installed as it has good support for Ballerina.\n3. A [Ballerina installation](/learn/install-ballerina/set-up-ballerina/)\n\n### Set up a MySQL server instance\n\nThere are several methods you can use to set up a MySQL server.\n1. Install a MySQL server on your machine locally by downloading and installing [MySQL](https://dev.mysql.com/doc/mysql-getting-started/en/#mysql-getting-started-installing) for different platforms.\n2. Use a cross-platform web-server solution such as [XAMPP](https://www.apachefriends.org/index.html) or [WampServer](https://www.wampserver.com/en/).\n3. Use [Docker](https://dev.mysql.com/doc/mysql-installation-excerpt/8.0/en/docker-mysql-getting-started.html) to create a MySQL server deployment.\n4. Use a cloud-based MySQL solution such as Google’s [CloudSQL](https://cloud.google.com/sql), Amazon’s [RDS for MySQL](https://aws.amazon.com/rds/sqlserver/), or Microsoft’s [Azure database for MySQL](https://azure.microsoft.com/en-us/services/mysql/).\n\n>**Tip:** Keep the connection and authentication details for connecting to the MySQL server including the hostname, port, username and password noted down.\n\n### Create a database and table\n\nConnect to the MySQL server using the terminal (or any other preferred method) and execute the following commands to \ncreate a database and table. This tutorial demonstrates the basic use case of creating, maintaining, and\ninteracting with a database of employees in an organization.\n\n```sql\nCREATE DATABASE IF NOT EXISTS Company;\n\nCREATE TABLE Company.Employees (\n\temployee_id INTEGER AUTO_INCREMENT PRIMARY KEY,\n\tfirst_name  VARCHAR(255) NOT NULL,\n\tlast_name   VARCHAR(255) NOT NULL,\n\temail       VARCHAR(255) NOT NULL,\n\tphone       VARCHAR(50) NOT NULL ,\n\thire_date   DATE NOT NULL,\n\tmanager_id  INTEGER REFERENCES Employees(employee_id),\n\tjob_title   VARCHAR(255) NOT NULL\n);\n```\n\n### Create a Ballerina package\n\nA new Ballerina package can be created by executing the following command in the directory in which you want to create the package.\n\n```shell\nbal new data_service\n``` \n\n>**Info:** For more information on creating Ballerina packages, see [Organize Ballerina code](/learn/organize-ballerina-code/).\n\n### Create a record to represent an employee\n\nIn Ballerina, records are a data type that maps keys to values. You can define a closed record to represent a single row\nin the `Employees` table in the `main.bal` file.\n\n```ballerina\nimport ballerina/time;\n\npublic type Employee record {|\n    int employee_id?;\n    string first_name;\n    string last_name;\n    string email;\n    string phone;\n    time:Date hire_date;\n    int? manager_id;\n    string job_title;\n|};\n```\n\nThis record type is the basis for interacting with the database.\n\n## Connect to and interacting with the database\n\n### Add the MySQL driver\n\nThe MySQL driver JAR is necessary to connect to and interact with a MySQL server. There are several methods of doing this.\n\n1. Import the `ballerinax/mysql.driver` package in your `main.bal` file. This Package bundles the latest MySQL driver so that the MySQL connector can be used in ballerina packages easily.\n   ```ballerina\n   import ballerinax/mysql.driver as _;\n   ```\n   \n2. Update the `Ballerina.toml` file with the Maven dependency params for the MySQL driver.\n   ```toml\n   [[platform.java11.dependency]]\n   groupId = \"mysql\"\n   artifactId = \"mysql-connector-java\"\n   version = \"8.0.26\"\n   ```\n   >**Info:** This guide was tested using MySQL driver version 8.0.26. However, any MySQL driver versions after 8.0.26\n   >should also work the same.\n\n3. [Download](https://dev.mysql.com/downloads/connector/j/) the driver JAR manually and update the path in the\n   `Ballerina.toml` file\n   ```toml\n   # In Unix operating systems\n   [[platform.java11.dependency]]\n   path = \"path/to/mysql/driver.jar”\n   \n   # In Windows operating systems\n   [[platform.java11.dependency]]\n   path = \"path\\to\\mysql\\driver.jar”\n   ```\n      \n### Define configurations\n\nIn the `data_service` directory (you created above using the `bal new` command), create a new file named `Config.toml`, and specify the configurations below to connect to the MySQL database.\n\n```toml\nUSER=\"root\"\nPASSWORD=\"rootPassword\"\nHOST=\"localhost\"\nPORT=3306\nDATABASE=\"Company\"\n```\n\nThese variables can be accessed within your Ballerina program by redefining them within your `main.bal` file.\n\n```ballerina\nconfigurable string USER = ?;\nconfigurable string PASSWORD = ?;\nconfigurable string HOST = ?;\nconfigurable int PORT = ?;\nconfigurable string DATABASE = ?;\n```\n\n>**Note:** For more information on defining configurable variables in Ballerina, see [Provide values to configurable variables](/learn/configure-ballerina-programs/provide-values-to-configurable-variables/).\n\n### Connect to the database\n\nFirstly, the [`MySQL`](https://lib.ballerina.io/ballerinax/mysql/latest) \nand [`SQL`](https://lib.ballerina.io/ballerina/sql/latest) packages must be imported into your `main.bal` file.\n\n```ballerina\nimport ballerinax/mysql;\n```\n\nThe `mysql:Client` can be used to connect to the database. Include the following code in your `main.bal` file and\nexecute the program using `bal run`. If the program runs without throwing an error, \nthat indicates that the connection has been established successfully. This client can be defined globally and be\nused across all parts of the program.\n\n```ballerina\nfinal mysql:Client dbClient = check new(\n    host=HOST, user=USER, password=PASSWORD, port=PORT, database=\"Company\"\n);\n```\n\n>**Info:** The MySQL package provides additional connection options and the ability to configure connection pool \n>properties when connecting to the database which, are not covered in this tutorial. To learn more about this, \n>see [`mysql:Client`](https://lib.ballerina.io/ballerinax/mysql/latest/clients/Client).\n\n### Execute the queries\n\nThe `mysql:Client` provides two primary remote methods for performing queries.\n\n1. `query()` - Executes an SQL query and returns the results (rows) from the query. \n   The `queryRow()` method is a variation of this method, which returns at most a single row from the result.\n\n2. `execute()` - Executes an SQL query and returns only the metadata of the execution.\n\nUse `query()`, `queryRow()` and `execute()` methods to define methods that can perform basic CRUD operations against the MySQL database.\n\n```ballerina\nimport ballerina/sql;\nimport ballerinax/mysql;\n\nisolated function addEmployee(Employee emp) returns int|error {\n    sql:ExecutionResult result = check dbClient->execute(`\n        INSERT INTO Employees (employee_id, first_name, last_name, email, phone,\n                               hire_date, manager_id, job_title)\n        VALUES (${emp.employee_id}, ${emp.first_name}, ${emp.last_name},  \n                ${emp.email}, ${emp.phone}, ${emp.hire_date}, ${emp.manager_id},\n                ${emp.job_title})\n    `);\n    int|string? lastInsertId = result.lastInsertId;\n    if lastInsertId is int {\n        return lastInsertId;\n    } else {\n        return error(\"Unable to obtain last insert ID\");\n    }\n}\n\nisolated function getEmployee(int id) returns Employee|error {\n    Employee employee = check dbClient->queryRow(\n        `SELECT * FROM Employees WHERE employee_id = ${id}`\n    );\n    return employee;\n}\n\nisolated function getAllEmployees() returns Employee[]|error {\n    Employee[] employees = [];\n    stream<Employee, error?> resultStream = dbClient->query(\n        `SELECT * FROM Employees`\n    );\n    check from Employee employee in resultStream\n        do {\n            employees.push(employee);\n        };\n    check resultStream.close();\n    return employees;\n}\n\nisolated function updateEmployee(Employee emp) returns int|error {\n    sql:ExecutionResult result = check dbClient->execute(`\n        UPDATE Employees SET\n            first_name = ${emp.first_name}, \n            last_name = ${emp.last_name},\n            email = ${emp.email},\n            phone = ${emp.phone},\n            hire_date = ${emp.hire_date}, \n            manager_id = ${emp.manager_id},\n            job_title = ${emp.job_title}\n        WHERE employee_id = ${emp.employee_id}  \n    `);\n    int|string? lastInsertId = result.lastInsertId;\n    if lastInsertId is int {\n        return lastInsertId;\n    } else {\n        return error(\"Unable to obtain last insert ID\");\n    }\n}\n\nisolated function removeEmployee(int id) returns int|error {\n    sql:ExecutionResult result = check dbClient->execute(`\n        DELETE FROM Employees WHERE employee_id = ${id}\n    `);\n    int? affectedRowCount = result.affectedRowCount;\n    if affectedRowCount is int {\n        return affectedRowCount;\n    } else {\n        return error(\"Unable to obtain the affected row count\");\n    }\n}\n```\n\n## Expose the database via an HTTP RESTful API\n\nAfter you have defined the methods necessary to manipulate the database, expose these selectively via an HTTP\nRESTful API. For this, you first need to import the Ballerina [`HTTP` module](https://lib.ballerina.io/ballerina/http/latest).\n\n```ballerina\nimport ballerina/http;\n```\n\n### Create a service\nNow, you can create a service as shown below. This creates an `/employees` endpoint on port `8080` which can \nbe accessed by visiting `http://localhost:8080/employees` after executing the `bal run` command.\n\n```ballerina\nservice /employees on new http:Listener(8080) {\n}\n```\n\n### Create resource functions\n\nWithin this service, you can define resource functions to provide access to the database. The code snippet below \ndemonstrates a resource function that can be used to create a new employee via a `POST` request.\n\n```ballerina\nservice /employees on new http:Listener(8080) {\n\n    \tisolated resource function post .(@http:Payload Employee emp) returns int|error? {\n            return addEmployee(emp);\n        }\n        \n}\n```\n\nInvoke the defined resource function by sending a `POST` request to `http://localhost:8080/employees` with the \nrequired data as a JSON payload.\n\n\n```shell\n# Using a Unix terminal\ncurl --location --request POST 'http://localhost:8080/employees/' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '{\n        \"employee_id\": 6,\n        \"first_name\": \"test\",\n        \"last_name\": \"test\",\n        \"email\": \"test@test.com\",\n        \"phone\": \"882 771 110\",\n        \"hire_date\": {\n            \"year\": 2021,\n            \"month\": 12,\n            \"day\": 16\n        },\n        \"manager_id\": 1,\n        \"job_title\": \"Sales Manager\"\n    }'\n    \n    \n# Using a Windows Powershell terminal\n$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$body = \"{\n    `\"employee_id`\": 6,\n    `\"first_name`\": `\"test`\",\n    `\"last_name`\": `\"test`\",\n    `\"email`\": `\"test@test.com`\",\n    `\"phone`\": `\"882 771 110`\",\n    `\"hire_date`\": {\n        `\"year`\": 2021,\n        `\"month`\": 12,\n        `\"day`\": 16\n    },\n    `\"manager_id`\": 1,\n    `\"job_title`\": `\"Sales Manager`\"\n}\"\n$response = Invoke-RestMethod 'http://localhost:8080/employees' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json\n```\n\n\nSimilarly, you can define resource functions within the service for each of the use cases as demonstrated below.\n\n```ballerina\nservice /employees on new http:Listener(8080) {\n\n    isolated resource function post .(@http:Payload Employee emp) returns int|error? {\n        return addEmployee(emp);\n    }\n    \n    isolated resource function get [int id]() returns Employee|error? {\n        return getEmployee(id);\n    }\n    \n    isolated resource function get .() returns Employee[]|error? {\n        return getAllEmployees();\n    }\n    \n    isolated resource function put .(@http:Payload Employee emp) returns int|error? {\n        return updateEmployee(emp);\n    }\n    \n    isolated resource function delete [int id]() returns int|error? {\n        return removeEmployee(id);       \n    }\n\n}\n```\n\nTo learn more about MySQL and HTTP support in Ballerina, see the following:\n- [`mysql` module documentation](https://lib.ballerina.io/ballerinax/mysql/latest)\n- [`http` module documentation](https://lib.ballerina.io/ballerina/http/latest)\n- [MySQL examples](/learn/by-example/mysql-query-operation)\n","id":"build-a-data-service-in-ballerina","sub":"","third":"","slug":"build-a-data-service-in-ballerina"},"__N_SSG":true}