{"pageProps":{"frontmatter":{"layout":"ballerina-configurable-left-nav-pages-swanlake","title":"Provide values to configurable variables","description":"You can supply values to configurable variables using the methods below.","keywords":"ballerina, programming language, configurable, variables, values, toml","permalink":"/learn/configure-ballerina-programs/provide-values-to-configurable-variables/","active":"provide-values-to-configurable-variables","redirect_from":["/learn/user-guide/configurability/providing-values-to-configurable-variables","/learn/user-guide/configurability/providing-values-to-configurable-variables/","/learn/making-ballerina-programs-configurable/providing-values-to-configurable-variables","/learn/making-ballerina-programs-configurable/providing-values-to-configurable-variables/","/learn/configuring-ballerina-programs/providing-values-to-configurable-variables","/learn/configuring-ballerina-programs/providing-values-to-configurable-variables/","/learn/configure-ballerina-programs/provide-values-to-configurable-variables","/learn/guides/configuring-ballerina-programs/providing-values-to-configurable-variables/","/learn/guides/configuring-ballerina-programs/providing-values-to-configurable-variables"]},"content":"\nThe values for configurable variables can be provided through configuration files, command line arguments, and\nenvironment variables. The configuration values will be overridden in the following precedence order if the values are\ngiven through multiple ways when retrieving configurable values:\n\n- **Command line arguments:** The values can be configured through the command line arguments when executing the Ballerina program. The configurable\n    value provided through a command line argument is expected to be the `toString()` representation of the intended \n    value.\n\n- **Configuration files:** The values can be configured through the configuration files in the [TOML(v0.4) format](https://toml.io/en/v0.4.0). \n    The file location can be specified through an environment variable with the name `BAL_CONFIG_FILES`. Ballerina supports\n    specifying multiple configuration files using this environment variable with the OS-specific separator. The file\n    precedence order will be as specified in the environment variable. If an environment variable is not specified, the file\n    will be located in the current working directory with the file name `Config.toml` by default.<br/>Configuration \n values for testing can be provided in a file named `Config.toml` located in the `tests` directory. For more details, see [Define test-specific configurations](/learn/test-ballerina-code/configure-tests/#define-test-specific-configurations).\n\n- **Environment variables:** Users can provide the configuration values through an environment variable with the name `BAL_CONFIG_DATA` in which the\ncontent is expected to be in the [TOML(v0.4.0) format](https://toml.io/en/v0.4.0).\n>**Note:** Providing multiple configuration values through separate environment variables is not supported.\n\n### Provide via command line arguments\n\nThe following syntax can be used to provide values for the variables through the command line parameters:\n\n```\n-Ckey=value\n```\n\nCurrently, the command line based configuration is only supported for configurable variables of types `int`, `byte`,\n`float`, `boolean`, `string`, `decimal`, `enum` and `xml`.\n\nThe following examples explain the way of providing command line arguments to configure variables of specific Ballerina\ntypes.\n\n| Ballerina type | Ballerina example                                                                                                                                                                     | Command line argument                                             |\n|----------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|\n| int, byte      | <code>configurable byte age = ?; </code><br> <code>configurable int port = ?;</code>                                                                                                  | `bal run -- -Cage=25 -Cport=9090`                                 |\n| string         | <code>configurable string name = ?; </code>                                                                                                                                           | `bal run -- -Cname=John`                                          |\n| float, decimal | <code>configurable float height = ?; </code><br> <code>configurable decimal salary = ?;</code>                                                                                        | `bal run -- -Cheight=5.6 -Csalary=50500.65`                       |\n| boolean        | <code>configurable boolean isAdmin = ?; </code>                                                                                                                                       | `bal run -- -CisAdmin=true` <br> or <br> `bal run -- -CisAdmin=1` |\n| xml            | <code>configurable xml book = ?; </code>                                                                                                                                              | `bal run -- -CxmlVar=\"<book>The Lost World</book>\"`               |\n| enum           | <code>enum Country { </code><br>    <code>LK = \"Sri Lanka\", </code><br>    <code>US = \"United States\" </code><br> <code>} </code><br> <code>configurable Country country = ?; </code> | `bal run -- -Ccountry=\"Sri Lanka\"`                                |\n| union          | <code>configurable float&#124;int&#124;string measurement = ?; </code>                                                                                                                | `bal run -- -Cmeasurement=5.0`                                    |\n\n### Provide via TOML syntax\n\nBallerina defines a specific TOML syntax to be used when configuring the variables through the configuration files and\nenvironment variables. Depending on the type of the configurable variable, the way of providing values in the TOML\ncontent differs. Currently, TOML-based configuration is supported for configurable variables of `int`, `float`,\n`boolean`, `string`, `xml`,  `decimal`, `enum`, the arrays of the respective types, map, record, table and the union of\nthe respective types.\n\nThe mapping of Ballerina types to TOML types can be explained through the following examples:\n\n| Ballerina type           | Ballerina example                                                                                                                                                                                                                                                                                     | TOML type                        | TOML example                                                                                                                                |\n|--------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|\n| int, byte                | <code>configurable   byte  age = ?;</code><br/>  <code>configurable   int  port = ?;</code>                                                                                                                                                                                                           | Integer                          | `age = 25` <br/>  `port = 9090`                                                                                                             |\n| string                   | <code>configurable   string  name = ?; </code>                                                                                                                                                                                                                                                        | String                           | `name = \"John\"`                                                                                                                             |\n| float, decimal           | <code>configurable   float  height = ?;</code><br/>  <code>configurable   decimal  salary = ?;</code>                                                                                                                                                                                                 | Float                            | `height = 5.6`<br/>  `salary = 50500.65 `                                                                                                   |\n| boolean                  | <code>configurable   boolean  isAdmin = ?;</code>                                                                                                                                                                                                                                                     | Boolean                          | `isAdmin = true`                                                                                                                            |\n| xml                      | <code>configurable xml book = ?;</code>                                                                                                                                                                                                                                                               | String                           | `book = \"<book>The Lost World</book>\"`                                                                                                      |\n| enum                     | <code>enum  Country {</code><br/>   <code>LK =  \"Sri Lanka\" ,</code><br/>  <code>US =  \"United States\"</code><br/> <code>}</code><br/> <code>configurable  Country country = ?;</code>                                                                                                                | String                           | `country = \"Sri Lanka\"`                                                                                                                     |\n| union                    | <code>configurable int&#124;string code = ?;</code>                                                                                                                                                                                                                                                   | Relevant TOML type for the value | `code = \"10001A\"`                                                                                                                           |\n| int[] , byte[]           | <code>configurable   int[]  ports = ?;</code>                                                                                                                                                                                                                                                         | Array of integers                | `ports = [9090, 9091]`                                                                                                                      |\n| string[]                 | <code>configurable   string[]  colors = ?;</code>                                                                                                                                                                                                                                                     | Array of strings                 | `colors = [\"Red\", \"Green\", \"Blue\"]`                                                                                                         |\n| float[], decimal[]       | <code>configurable   float[]  rates = ?;</code>                                                                                                                                                                                                                                                       | Array of floats                  | `rates = [55.4, 76.3, 38.5]`                                                                                                                |\n| boolean[]                | <code>configurable   boolean[]  switches = ?;</code>                                                                                                                                                                                                                                                  | Array of booleans                | `switches = [false, false, true]`                                                                                                           |\n| tuple                    | <code>configurable [string, int, string[], map<anydata>, int... ] student = ?;</code>                                                                                                                                                                                                                 | Array of respective types        | `student = [\"Jane\", 1101, [\"Maths\", \"English\"], {level = 4, class = \"B\"}, 98, 76, 88]`                                                      |\n| map                      | <code>configurable   map &lt;string&gt; person = ?; </code>                                                                                                                                                                                                                                           | TOML table                       | `[person]`<br/> `name = \"Anna\"`<br/> `city = \"London\"`                                                                                      |\n| map[]                    | <code>configurable   map &lt;string&gt;[] people = ?; </code>                                                                                                                                                                                                                                         | Array of TOML tables             | `[[people]]`<br/> `name = \"John\"`<br/> `city = \"Paris\"`<br/> `[[people]]`<br/> `name = \"Jack\"`<br/> `city = \"Colombo\"`                      |\n| record                   | <code>type  Person  record {</code><br/>    <code>string  name;</code><br/>    <code>int  age;</code><br/><code>};</code><br/>  <code>configurable   Person  person = ?;</code>                                                                                                                       | TOML table                       | `[person]`<br/>  `name = \"John\"`<br/> `age = 45`<br/>                                                                                       |\n| record with record field | <code>type  Food  record {</code><br/>    <code>string  name;</code><br/>    <code>int  cal;</code><br/><code>};</code><br/><code>type  Diet  record {</code><br/>    <code>Food  food;</code><br/>    <code>int  age;</code><br/><code>};</code><br/>  <code>configurable   Diet  input = ?;</code>  | TOML table - nested              | `[input]`<br/>  `age = 20`<br/> `food.name = \"carrot\"`<br/> `food.cal = 41`<br/>                                                            |\n| record[]                 | <code>type  Person  record {</code><br/>    <code>string  name;</code><br/>    <code>int  age;</code><br/><code>};</code><br/>  <code>configurable   Person[]  peope = ?;</code>                                                                                                                      | Array of TOML tables             | `[[people]]`<br/>  `name = \"John\"`<br/> `age = 45`<br/> `[[people]]`<br/>  `name = \"Jack\"`<br/> `age = 32`                                  |\n| table                    | <code>configurable   table &lt;map&lt;string&gt;&gt; users = ?; </code>                                                                                                                                                                                                                               | Array of TOML tables             | `[[users]]`<br/> `name = \"Tom\"`<br/> `occupation = \"Software Engineer\"`<br/> `[[users]]`<br/> `name = \"Harry\"`<br/> `occupation = \"Doctor\"` |\n\n<style> #tree-expand-all , #tree-collapse-all, .cTocElements {display:none;} .cGitButtonContainer {padding-left: 40px;} </style>\n","id":"provide-values-to-configurable-variables","sub":"configure-observe","third":"configure-ballerina-programs","slug":"configure-observe/configure-ballerina-programs/provide-values-to-configurable-variables"},"__N_SSG":true}