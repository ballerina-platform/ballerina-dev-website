{"pageProps":{"frontmatter":{"layout":"ballerina-testing-code-left-nav-pages-swanlake","title":"Execute tests","description":"Learn how to use different options for executing Ballerina tests.","keywords":"ballerina, programming language, testing, test execution","permalink":"/learn/test-ballerina-code/execute-tests/","active":"execute-tests","intro":"The sections below include information about executing tests in Ballerina.","redirect_from":["/swan-lake/learn/testing-ballerina-code/executing-tests/","/swan-lake/learn/testing-ballerina-code/executing-tests","/learn/user-guide/testing-ballerina-code/executing-tests","/learn/user-guide/testing-ballerina-code/executing-tests/","/learn/testing-ballerina-code/executing-tests/","/learn/testing-ballerina-code/executing-tests","/learn/testing-ballerina-code/execute-tests/","/learn/testing-ballerina-code/execute-tests","/learn/test-ballerina-code/execute-tests","/learn/guides/testing-ballerina-code/executing-tests/","/learn/guides/testing-ballerina-code/executing-tests"]},"content":"\n## Understand the test execution behavior\n\nThe following is the expected order of execution for setup and teardown functions of a test.\n\n![Test Execution Order](/learn/images/test-execution-order.png)\n\n\n## Understand the behavior during failures\n\n* If a `BeforeSuite` function fails, \n every other following function is skipped.\n\n* If a `BeforeGroups` function fails, the tests belonging to that group, setup, and teardown functions specific to those\n tests will fail. The `AfterGroups` functions for that test group will be skipped. Other setup and teardown functions \n will be executed as expected. Tests belonging to other groups will not be affected.\n\n* If a `BeforeEach` function fails,\n every test will be skipped. Since `BeforeSuite` is already executed, `AfterSuite` will be executed. Even though the \n `BeforeGroups` function is executed prior to BeforeEach, the `AfterGroups` function will not be executed unless marked \n as `alwaysRun`.\n\n* If a test function fails, none of the other functions get skipped.\n\n* If the `before` test function fails, the test function and the `after` function for that test will be skipped.\n\n* If an `AfterEach` function fails, every following `BeforeEach`, `AfterEach` and test function will get skipped.\n\n* If `alwaysRun` property is enabled, `AfterGroups` and `AfterSuite` functions will run irrespective of the status of \nother functions.\n\n\n## Execute tests using CLI commands\n\nTests will be executed when you run the test command.\n\nExecute all the tests in the current package with the following command.\n\n```bash\n$ bal test\n```\n\n### Run tests for a group\n\nList all the test groups in the package.\n\n```bash\n$ bal test --list-groups\n```\n\nRun only the tests belonging to the given group(s) in the current package.\n\n```bash\n$ bal test --groups <group_1>,<group_2>\n```\n\nRun the tests in the current package excluding the given group(s).\n\n```bash\n$ bal test --disable-groups <group_1>\n```\n\n### Run selected tests\n\nRun only the given test function(s) in the current package.\n\n```bash\n$ bal test --tests <test_function>\n```\n\nRun a given set of functions in the default module only.\n\n```bash\n$ bal test --tests PackageName:<test_function>\n```\n\nRun all the functions in the given module.\n\n```bash\n$ bal test --tests PackageName.<module_name>:*\n```\n\n### Re-run failed tests\n\nRun only the previously-failed test cases in the current package.\n\n```bash\n$ bal test --rerun-failed\n```\n\n### Run selected data sets in data-driven tests\n\nData-driven tests can be executed using the `bal test` command as any other test.\n\nRun only the specified cases of a data set provided using the `dataProvider` attribute.\nUse `#` as the separator and append the case identifier to the end of the test function name.\n\n```bash\n$ bal test --tests <test_function>#Case1\n```\n\nRun only the previously-failed cases in a data set.\n\n```bash\n$ bal test --rerun-failed\n```\n\n### Generate test report and code coverage\n\nGenerate an HTML test report without code coverage information.\nAlso, dump the test results in the JSON format.\n\n```bash\n$ bal test --test-report\n```\n\nDump only the test results in the JSON format.\n\n```bash\n$ bal test --code-coverage\n```\n\nGenerate an HTML test report with code coverage information.\nAlso, dump the test results in the JSON format.\n\n```bash\n$ bal test --test-report --code-coverage\n```\n\nGenerate a JaCoCo XML test report with code coverage information.\nAlso, dump the test results in the JSON format.\n\n```bash\n$ bal test --code-coverage --coverage-format=xml\n```\n\nGenerate an HTML test report and a JaCoCo XML test report with code coverage information.\nAlso, dump the test results in the JSON format.\n\n```bash\n$ bal test --test-report --code-coverage --coverage-format=xml\n```\n\n\nFor more options of the test command, run the following.\n\n```bash\n$ bal test --help\n``` \n\n<style> #tree-expand-all , #tree-collapse-all, .cTocElements {display:none;} .cGitButtonContainer {padding-left: 40px;} </style>\n","id":"execute-tests","sub":"test-document-the-code","third":"test-ballerina-code","slug":"test-document-the-code/test-ballerina-code/execute-tests"},"__N_SSG":true}