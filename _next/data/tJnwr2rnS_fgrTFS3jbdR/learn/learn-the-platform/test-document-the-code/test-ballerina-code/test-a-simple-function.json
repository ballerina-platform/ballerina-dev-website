{"pageProps":{"frontmatter":{"layout":"ballerina-testing-code-left-nav-pages-swanlake","title":"Test a simple function","description":"Learn how to use Ballerina's built-in test framework to write testable code. The test framework provides a set of building blocks to help write and run tests.","keywords":"ballerina, programming language, testing","permalink":"/learn/test-ballerina-code/test-a-simple-function/","active":"test-a-simple-function","intro":"The Ballerina language has a built-in robust test framework, which allows you to achieve multiple levels of the test pyramid including, unit testing, integration testing, and end-to-end testing. It provides assertions, data providers, mocking, and code coverage features, which enable the programmers to write comprehensive tests.","redirect_from":["/learn/how-to-test-ballerina-code/","/learn/how-to-test-ballerina-code","/learn/testing-ballerina-code/testing-quick-start","/learn/testing-ballerina-code/testing-quick-start/","/swan-lake/learn/testing-ballerina-code/testing-quick-start/","/swan-lake/learn/testing-ballerina-code/testing-quick-start","/learn/user-guide/testing-ballerina-code/testing-quick-start","/learn/user-guide/testing-ballerina-code/testing-quick-start/","/learn/user-guide/testing-ballerina-code/","/learn/user-guide/testing-ballerina-code","/learn/user-guide/testing-ballerina-code/testing-quick-start/","/learn/testing-ballerina-code/testing-a-simple-function","/learn/testing-ballerina-code/testing-a-simple-function/","/learn/testing-ballerina-code/test-a-simple-function/","/learn/testing-ballerina-code/test-a-simple-function","/learn/test-ballerina-code/test-a-simple-function","/learn/testing-ballerina-code/","/learn/testing-ballerina-code","/learn/test-ballerina-code/","/learn/test-ballerina-code","/learn/guides/testing-ballerina-code/testing-a-simple-function","/learn/guides/testing-ballerina-code/testing-a-simple-function"]},"content":"\nTo get started, let's set up the Ballerina package to run tests.\n\n1. Create a Ballerina package with the `bal new` command as follows.\n\n   ```bash\n   bal new hello_world\n   ```\n\n2. Create a directory in the root directory of the package named `tests` in which the test files will be stored.\n\n    ```bash\n    hello_world/\n        Ballerina.toml\n        main.bal\n        tests/\n            main_test.bal\n    ```\n\n3. Create the following function in the `main.bal` file.\n\n    ```ballerina\n    public function intAdd(int a, int b) returns (int) {\n        return a + b;\n    }\n    ```\n\n4. In the `main_test.bal` file, make use of the test module to test out the functionality of the `intAdd` function in the `main.bal` file.\n\n    ```ballerina\n    import ballerina/test;\n\n    @test:Config {}\n    function intAddTest() {\n        test:assertEquals(intAdd(1, 3), 4);\n    }\n    ```\n\n5. Execute the tests using the following command.\n\n   ```bash\n   $ bal test\n   ```\n   Then you can see the output as follows.\n\n   ```bash\n   Compiling source\n        user/hello_world:0.1.0\n\n   Running Tests\n\n           hello\n\n                   [pass] intAddTest\n\n                   1 passing\n                   0 failing\n                   0 skipped\n   ```\n","id":"test-a-simple-function","sub":"test-document-the-code","third":"test-ballerina-code","slug":"test-document-the-code/test-ballerina-code/test-a-simple-function"},"__N_SSG":true}