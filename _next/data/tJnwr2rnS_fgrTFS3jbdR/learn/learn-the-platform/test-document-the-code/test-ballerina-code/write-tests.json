{"pageProps":{"frontmatter":{"layout":"ballerina-testing-code-left-nav-pages-swanlake","title":"Write tests","description":"Learn how to use Ballerina's built-in test framework to write tests. The test framework provides a set of annotations and assertions to help write and run tests.","keywords":"ballerina, programming language, testing","permalink":"/learn/test-ballerina-code/write-tests/","active":"write-tests","intro":"The sections below include information about writing tests in Ballerina.","redirect_from":["/learn/testing-ballerina-code/writing-tests","/learn/testing-ballerina-code/writing-tests/","/swan-lake/learn/testing-ballerina-code/writing-tests/","/swan-lake/learn/testing-ballerina-code/writing-tests","/learn/user-guide/testing-ballerina-code/writing-tests","/learn/user-guide/testing-ballerina-code/writing-tests/","/learn/testing-ballerina-code/write-tests/","/learn/testing-ballerina-code/write-tests","/learn/test-ballerina-code/write-tests","/learn/guides/testing-ballerina-code/writing-tests/","/learn/guides/testing-ballerina-code/writing-tests"]},"content":"\n## Define a test\n\nThe test module provides the necessary annotations to construct a test suite. Therefore, importing the test module is \nessential in order to write Ballerina tests.\n\n```ballerina\nimport ballerina/test;\n```\n\nOnce the test module is imported, the following annotation can be used to write a test function.\n\n```ballerina\n@test:Config {}\n```\n\nThe function defined after the above annotation will be detected as a test function. \nThis annotation supports the following attributes in order to configure the test execution.\n\n* ***enable: {true&#124;false}*** - Enable/disable the test. The default value is `true`.\n    \n* ***before: &lt;function name&gt;*** - The function to be run just before the test is run. The default value is `nil`.\n\n* ***after: &lt;function name&gt;*** - The function to be run just after the test is run. The default value is `nil`.\n \n* ***dependsOn: [&lt;function names>, …]*** - List of functions on which the test function depends. The order in which \nthe comma-separated list appears has no prominence. In case there needs to be an order, the `dependsOn` parameter can \nbe used to create an ordered sequence of functions with one function depending on the other.\n\n* ***dataProvider: &lt;function name>*** - Specifies the function, which will be used to provide the data sets for the \ntest.\n\n* ***groups: [“&lt;test group name”, …]*** - A comma-separated list of test group names (one or more) to which this test\nbelongs.\n\n***Example:***\n\n\n```ballerina\nimport ballerina/io;\nimport ballerina/test;\n\nfunction beforeFunc() {\n    // This is the function, which will be executed before the Test functions.\n}\n\nfunction afterFunc() {\n    // This is the function, which will be executed after the Test functions.\n}\n\n// This test function will not be executed.\n@test:Config {\nenable: false\n}\nfunction testFunction1() {\n    io:println(\"I'm in test function 1!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n// This test function depends on the `testFunction3` and is executed with an \n// array based data set.\n@test:Config{  \n    before: beforeFunc,\n    after: afterFunc,\n    dependsOn: [testFunction3],\n    dataProvider: dataGen,\n    groups: [\"g1\"]\n}\nfunction testFunction2 (int value) returns error? {\n    test:assertEquals(value, 1, msg = \"value is not correct\");\n}\n\nfunction dataGen() returns (int[][]) {\n    return [[1]];\n}\n\n// This is a random test function. This will randomly execute without depending  on\n// the other functions. However, note that the `testFunction2` function depends on this.\n@test:Config {\n    groups: [\"g1\", \"g2\"]\n}\nfunction testFunction3() {\n    io:println(\"I'm in test function 3!\");\n    test:assertTrue(true, msg = \"Failed!\");\n}\n\n// This test is executed with a map based data set.\n@test:Config {\n    dataProvider: mapDataProvider\n}\nfunction mapDataProviderTest(int value1, int value2, string fruit) returns error? {\n    io:println(\"Input : [\" + value1.toBalString() + \",\" + value2.toBalString() + \",\" + fruit + \"]\");\n    test:assertEquals(value1, value2, msg = \"The provided values are not equal\");\n    test:assertEquals(fruit.length(), 6);\n}\n\n// The data provider function, which returns a  data set as a map of tuples.\nfunction mapDataProvider() returns map<[int, int, string]>|error {\n    map<[int, int, string]> dataSet = {\n        \"banana\": [10, 10, \"banana\"],\n        \"cherry\": [5, 5, \"cherry\"]\n    };\n    return dataSet;\n}\n```\n\n## Use assertions\n\nThe Ballerina test framework supports the following assertions, which help to verify the expected behavior of a piece of\n code. These assertions can be used to decide if the test is passing or failing based on the condition.\n\n<table class=\"table cCodeTable\" >\n    <tr>\n       <th class=\"cDescription\">Assertion function</th>\n       <th class=\"cCodeCol\">Description</th>\n    </tr>\n    <tr>\n       <td><code>assertTrue(boolean expression, string message)</code></td>\n       <td>\n          Asserts that the expression is true with an optional message.\n       </td>\n    </tr>\n    <tr>\n       <td><code>assertFalse(boolean expression, string message)</code></td>\n       <td>\n          Asserts that the expression is false with an optional message.\n       </td>\n    </tr>\n    <tr>\n       <td><code>assertEquals(anydata|error actual, anydata expected, string message)</code></td>\n       <td>\n          Asserts that the actual value is equal to the expected value with an optional message.\n       </td>\n    </tr>\n    <tr>\n       <td><code>assertNotEquals(anydata actual, anydata expected, string message)</code></td>\n       <td>\n          Asserts that the actual value is not equal to the expected value with an optional message.\n       </td>\n    </tr>\n    <tr>\n       <td><code>assertExactEquals(any|error actual, any|error expected, string message)</code></td>\n       <td>\n          Asserts that the actual entity is exactly equal to the expected entity with an optional message.\n       </td>\n    </tr>\n    <tr>\n       <td><code>assertNotExactEquals(any|error actual, any|error expected, string message)</code></td>\n       <td>\n          Asserts that the actual entity is not exactly equal to the expected entity with an optional message.\n       </td>\n    </tr>\n    <tr>\n       <td><code>assertFail(string message)</code></td>\n       <td>\n           Fails the test. This is useful to fail a test based on a check for a condition while it is in execution.\n       </td>\n    </tr>\n</table>\n\n### Troubleshoot assertion failures when using `assertEquals`\n\n\n#### Values with different types\n\nThe assertion failure shows the `expected` and `actual` values preceded by the type within the angle brackets.\n\n***Example:***\n\n```ballerina\nimport ballerina/test;\n\n@test:Config {}\nfunction testAssertStringAndInt() {\n    test:assertEquals(1, \"1\");\n}\n```\n\n***Output:***\n\n```bash\n[fail] testAssertStringAndInt:\n\n    Assertion Failed!\n\n        expected: <string> '1'\n        actual  : <int> '1'\n```\n\n##### Values of the `string` type\n\nThe `Diff` is displayed in the GNU format using `+` and `-` to show the\n line differences.\n\n***Example:***\n\n```ballerina\nimport ballerina/test;\n\n@test:Config {}\nfunction testAssertString() {\n    test:assertEquals(\"hello Ballerina user\\nWelcome to Ballerina\",\n        \"hello user\\nWelcome to Ballerina\");\n}\n```\n\n***Output:***\n\n```bash\n[fail] testAssertString:\n    Assertion Failed!\n\n        expected: 'hello user\n        Welcome to Ballerina'\n        actual  : 'hello Ballerina user\n        Welcome to Ballerina'\n\n         Diff    :\n\n         --- actual\n         +++ expected\n\n         @@ -1,2 +1,2 @@\n\n         -hello Ballerina user\n         +hello user\n         Welcome to Ballerina\n```\n\n#### Values of the `JSON/record/map` type\n\nThe `Diff` lists the JSON key mismatch using the `expected keys` and `actual keys`.\nThe JSON value mismatch is listed per key showing the `expected` and `actual` values.\n\n***Example:***\n\n```ballerina\nimport ballerina/test;\n\n@test:Config {}\nfunction testAssertJson() {\n    json j1 = {\n        name: \"Anne\",\n        age: \"21\",\n        marks: {\n            maths: 99,\n            english: 90,\n            status: {pass: true}\n        }\n    };\n    json j2 = {\n        name2: \"Amie\",\n        age: 21,\n        marks: {\n            maths: 35,\n            english: 90,\n            status: {pass: false}\n        }\n    };\n    test:assertEquals(j1, j2);\n}\n```\n\n***Output:***\n\n```bash\n[fail] testAssertJson:\n\nAssertion Failed!\n\nexpected: '{\"name2\":\"Amie\",\"age\":21,\"marks\":{\"maths\":35,\"english\":90,\"status\":{\"pass\":false...'\nactual  : '{\"name\":\"Anne\",\"age\":\"21\",\"marks\":{\"maths\":99,\"english\":90,\"status\":{\"pass\":true...'\n\nDiff    :\n\n    expected keys   : name2\n    actual keys     : name\n\n    key: age\n    expected value  : <int> 21\n    actual value    : <string> 21\n\n    key: marks.maths\n    expected value  : 35\n    actual value    : 99\n\n    key: marks.status.pass\n    expected value  : false\n    actual value    : true\n\n```\n\n#### Values of other `anydata` type\n\nThe assertion failure is displayed showing the `expected` and `actual` values.\n\n***Example:***\n\n```ballerina\nimport ballerina/test;\n\n@test:Config {}\nfunction testAssertTuples() {\n    [int, string] a = [10, \"John\"];\n    [int, string] b = [12, \"John\"];\n    test:assertEquals(a, b);\n}\n```\n\n***Output:***\n\n```bash\n[fail] testAssertTuples:\n    Assertion Failed!\n\n        expected: '12 John'\n        actual  : '10 John'\n```\n","id":"write-tests","sub":"test-document-the-code","third":"test-ballerina-code","slug":"test-document-the-code/test-ballerina-code/write-tests"},"__N_SSG":true}