{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina JWT Library\n\n_Owners_: @ldclakmal @shafreenAnfar  \n_Reviewers_: @shafreenAnfar  \n_Created_: 2021/10/01  \n_Updated_: 2022/02/17  \n_Edition_: Swan Lake  \n\n## Introduction\nThis is the specification for the JWT standard library of [Ballerina language](https://ballerina.io/), which is used for authorization of listeners and clients (HTTP, gRPC, GraphQL, WebSocket, WebSub, etc.).\n\nThe JWT library specification has evolved and may continue to evolve in the future. The released versions of the specification can be found under the relevant GitHub tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the [Slack channel](https://ballerina.io/community/). Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the specification is stored under `/docs/proposals`. Proposals under discussion can be found with the label `type/proposal` in GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [JWT Auth](#2-jwt-auth)\n3. [Listener Auth](#3-listener-auth)\n    * 3.1. [JWT Auth Provider](#31-jwt-auth-provider)\n    * 3.2. [JWT Auth Handler](#32-jwt-auth-handler)\n    * 3.3. [Declarative Approach](#33-declarative-approach)\n    * 3.4. [Imperative Approach](#34-imperative-approach)\n4. [Client Auth](#4-client-auth)\n    * 4.1. [JWT Auth Provider](#41-jwt-auth-provider)\n    * 4.2. [JWT Auth Handler](#42-jwt-auth-handler)\n        * 4.2.1. [Bearer Token](#421-bearer-token)\n        * 4.2.2. [Self-Signed JWT](#422-self-signed-jwt)\n    * 4.3. [Declarative Approach](#43-declarative-approach)\n    * 4.4. [Imperative Approach](#44-imperative-approach)\n5. [Samples](#5-samples)\n    * 5.1. [Listener Auth](#51-listener-auth)\n        * 5.1.1. [Declarative Approach (HTTP Listener)](#511-declarative-approach-http-listener)\n        * 5.1.2. [Imperative Approach (HTTP Listener)](#512-imperative-approach-http-listener)\n    * 5.2. [Client Auth](#52-client-auth)\n        * 5.2.1. [Declarative Approach (HTTP Client)](#521-declarative-approach-http-client)\n            * 5.2.1.1. [Bearer Token](#5211-bearer-token)\n            * 5.2.1.2. [Self-Signed JWT](#5212-self-signed-jwt)\n        * 5.2.2. [Imperative Approach (HTTP Client)](#522-imperative-approach-http-client)\n            * 5.2.2.1. [Bearer Token](#5221-bearer-token)\n            * 5.2.2.2. [Self-Signed JWT](#5222-self-signed-jwt)\n\n## 1. Overview\nThis specification elaborates on JWT Auth authentication and authorization for all the Ballerina listeners and\nclients. The HTTP, gRPC, GraphQL, WebSocket, WebSub protocol-based listeners and clients are secured according to this\nspecification.\n\nThis has a number of design principles:\n- **Listener auth**: This refers to the authentication and authorization of the listener as defined in\n  [Ballerina 2021R1 Section 5.7.4](https://ballerina.io/spec/lang/2021R1/#section_5.7.4). The inbound requests/messages\n  independent of the transport protocol are authenticated and authorized according to the configured authentication\n  protocol and related configurations.\n- **Client auth**: This refers to the authentication of the client as defined in\n  [Ballerina 2021R1 Section 7.9](https://ballerina.io/spec/lang/2021R1/#section_7.9). The outbound requests/messages\n  independent of the transport protocol are enriched according to the configured authentication protocol and related\n  configurations.\n- **Auth provider**: This is the entity that is responsible for providing all the auth protocol-related implementations.\n- **Auth handler**: This is the entity that is responsible for handling the security of the API based on the transport\n  protocol and with the use of provider APIs. This API gets the credentials and required configurations as user inputs\n  and returns the authentication protocol-related information. Internally, these APIs call the provider APIs of the\n  relevant authentication protocol.\n- **Declarative approach**: This is also known as the configuration-driven approach, which is used for simple use cases,\n  where users have to provide a set of configurations and do not need to be worried more about how authentication and\n  authorization works.\n- **Imperative approach**: This is also known as the code-driven approach, which is used for advanced use cases, where\n  users need to be worried more about how authentication and authorization work and need to have further customizations.\n\n## 2. JWT Auth\nJWT Auth protocol defines the credential as a JWT as defined in [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519).\n\n## 3. Listener Auth\nThis refers to the authentication and authorization of the listener as defined in\n[Ballerina 2021R1 Section 5.7.4](https://ballerina.io/spec/lang/2021R1/#section_5.7.4). The inbound requests/messages\nindependent of the transport protocol are authenticated and authorized according to the configured authentication\nprotocol and related configurations.\n\n### 3.1. JWT Auth Provider\nThe JWT Auth Provider has an API to authenticate the JWT Auth credential. The `ValidatorConfig` record is used to \nprovide the configuration related to the JWT validation. This returns the `Payload` which consists of all the available \nclaims of the JWT.\n\n```ballerina\nimport ballerina/cache;\nimport ballerina/crypto;\n\npublic type ValidatorConfig record {\n    string issuer?;\n    string username?;\n    string|string[] audience?;\n    string jwtId?;\n    string keyId?;\n    map<json> customClaims?;\n    decimal clockSkew = 0;\n    ValidatorSignatureConfig signatureConfig?;\n    cache:CacheConfig cacheConfig?;\n};\n\npublic type ValidatorSignatureConfig record {|\n    record {|\n        string url;\n        cache:CacheConfig cacheConfig?;\n        ClientConfiguration clientConfig = {};\n    |} jwksConfig?;\n    string certFile?;\n    record {|\n        crypto:TrustStore trustStore;\n        string certAlias;\n    |} trustStoreConfig?;\n    string secret?;\n|};\n\npublic class ListenerJwtAuthProvider {\n\n    public function init(ValidatorConfig config) {\n        // init JWT auth provider\n    }\n\n    public function authenticate(string credential) returns Payload|Error {\n        // validate the credential against the configurations\n    }\n}\n\n```\n\n### 3.2. JWT Auth Handler\n\n> **NOTE**: Since the auth handlers are tightly bound with the transport protocol, for the explanation of the concept,\n> all the samples are created for HTTP transport protocol hereinafter.\n\nThe JWT Auth Handler has an API to authenticate the HTTP request, headers of the HTTP request, or the credential as \ndefined in [RFC6750 Section 2.1](https://datatracker.ietf.org/doc/html/rfc6750#section-2.1). The `JwtValidatorConfig` \nrecord is used to provide the configuration related to the JWT validation along with the `scopeKey` which defines the \nclaim used for scopes. This returns the `Payload` which consists of all the available claims of the JWT or \n`Unauthorized` in case of authentication failure.\n\nThe JWT Auth Handler has an API to authorize the user against the expected scope or scopes. This returns `Forbidden` \nin case of authorization failure.\n\n```ballerina\nimport ballerina/jwt;\n\npublic type JwtValidatorConfig record {|\n    *jwt:ValidatorConfig;\n    string scopeKey = \"scope\";\n|};\n\npublic class ListenerJwtAuthHandler {\n\n    private final jwt:ListenerJwtAuthProvider provider;\n\n    public function init(JwtValidatorConfig config) {\n        self.provider = new (config);\n    }\n\n    public function authenticate(Request|Headers|string data) returns jwt:Payload|Unauthorized {\n        // extract the credential from data\n        jwt:Payload|jwt:Error payload = self.provider.authenticate(credential);\n        if (payload is jwt:Error) {\n            // return `Unauthorized`\n        }\n        return <jwt:Payload>payload;\n    }\n\n    public function authorize(jwt:Payload jwtPayload, string|string[] expectedScopes) returns Forbidden? {\n        // match the scopes with the provided `expectedScopes`\n        // if not matched return `Forbidden`\n    }\n}\n```\n\n### 3.3. Declarative Approach\nThis is also known as the configuration-driven approach, which is used for simple use cases, where users have to\nprovide a set of configurations and do not need to be worried more about how authentication and authorization works.\nThe user does not have full control over the configuration-driven approach.\n\nThe service and/or resource configurations are used to define the authentication and authorization configurations.\nUsers can configure the configurations needed for different authentication schemes and configurations needed for\nauthorizations of each authentication scheme. Also, the configurations can be provided at both the service and resource\nlevels. The priority will be given from bottom to top. Then, the auth handler creation and request\nauthentication/authorization is handled internally without user intervention. The requests that succeeded both\nauthentication and/or authorization phases according to the configurations will be passed to the business logic layer.\n\n### 3.4. Imperative Approach\nThis is also known as the code-driven approach, which is used for advanced use cases, where users need to be worried\nmore about how authentication and authorization work and need to have further customizations. The user has full control\nof the code-driven approach. The handler creation and authentication/authorization calls are made by the user at the\nbusiness logic layer.\n\n## 4. Client Auth\nThis refers to the authentication of the client as defined in\n[Ballerina 2021R1 Section 7.9](https://ballerina.io/spec/lang/2021R1/#section_7.9). The outbound requests/messages\nindependent of the transport protocol are enriched according to the configured authentication protocol and related\nconfigurations.\n\n### 4.1. JWT Auth Provider\nThe JWT Auth Provider has an API to generate the JWT Auth credential. The `IssuerConfig` record is used to provide the \nconfiguration related to the self-signed JWT generation. This returns the generated JWT.\n\n```ballerina\nimport ballerina/crypto;\n\npublic type IssuerConfig record {|\n    string issuer?;\n    string username?;\n    string|string[] audience?;\n    string jwtId?;\n    string keyId?;\n    map<json> customClaims?;\n    decimal expTime = 300;\n    IssuerSignatureConfig signatureConfig?;\n|};\n\npublic type IssuerSignatureConfig record {|\n    SigningAlgorithm algorithm = RS256;\n    record {|\n        crypto:KeyStore keyStore;\n        string keyAlias;\n        string keyPassword;\n    |}|record {|\n        string keyFile;\n        string keyPassword?;\n    |}|string config?;\n|};\n\npublic class ClientSelfSignedJwtAuthProvider {\n\n    public function init(IssuerConfig config) {\n        // init JWT auth provider\n    }\n\n    public function generateToken() returns string|Error {\n        // generate a JWT against the configurations\n    }\n}\n```\n\n### 4.2. JWT Auth Handler\n\n> **NOTE**: Since the auth handlers are tightly bound with the transport protocol, for the explanation of the concept,\n> all the samples are created for HTTP transport protocol hereinafter.\n\n#### 4.2.1. Bearer Token\nThe Bearer Token Auth Handler has an API to enrich the HTTP request as defined in \n[RFC6750 Section 2.1](https://datatracker.ietf.org/doc/html/rfc6750#section-2.1). The `BearerTokenConfig` record is \nused to provide the configuration related to the JWT. This returns the enriched `Request` with headers or `Error` in \ncase of failure.\n\n```ballerina\npublic type BearerTokenConfig record {|\n    string token;\n|};\n\npublic class ClientBearerTokenAuthHandler {\n\n    private final BearerTokenConfig & readonly config;\n\n    public function init(BearerTokenConfig config) {\n        self.config = config.cloneReadOnly();\n    }\n\n    public function enrich(Request req) returns Request|Error {\n        // set the token as the `Authorization: Bearer <token>` header\n    }\n}\n```\n\n#### 4.2.2. Self-Signed JWT\nThe Self Signed JWT Auth Handler has an API to enrich the HTTP request as defined in \n[RFC6750 Section 2.1](https://datatracker.ietf.org/doc/html/rfc6750#section-2.1). The `JwtIssuerConfig` record is used \nto provide the configuration related to the self-signed JWT issuing. This returns the enriched `Request` with headers \nor `Error` in case of failure.\n\n```ballerina\nimport ballerina/jwt;\n\npublic type JwtIssuerConfig record {|\n    *jwt:IssuerConfig;\n|};\n\npublic class ClientSelfSignedJwtAuthHandler {\n\n    private final jwt:ClientSelfSignedJwtAuthProvider provider;\n\n    public function init(JwtIssuerConfig config) {\n        self.provider = new (config);\n    }\n\n    public function enrich(Request req) returns Request|Error {\n        string|jwt:Error token = self.provider.generateToken();\n        // set the token as the `Authorization: Bearer <token>` header\n    }\n}\n```\n\n### 4.3. Declarative Approach\nThis is also known as a configuration-driven approach, which is used for simple use cases, where users have to provide\na set of configurations and do not need to be worried more about how authentication works. The user does not have full\ncontrol over the configuration-driven approach.\n\nThe client configurations are used to define the authentication configurations. Users can configure the configurations\nneeded for different authentication schemes. Then, the auth handler creation and request enrichment is handled\ninternally without user intervention.\n\n### 4.4. Imperative Approach\nThis is also known as the code-driven approach, which is used for advanced use cases, where users need to be worried\nmore about how authentication works and need to have further customizations. The user has full control of the\ncode-driven approach. The handler creation and request enrichment calls are made by the user at the business logic layer.\n\n## 5. Samples\n\n### 5.1. Listener Auth\n\n#### 5.1.1. Declarative Approach (HTTP Listener)\n\n```ballerina\nimport ballerina/http;\n\n@http:ServiceConfig {\n    auth: [\n        {\n            jwtValidatorConfig: {\n                issuer: \"wso2\",\n                audience: \"ballerina\",\n                signatureConfig: {\n                    certFile: \"/path/to/public.crt\"\n                },\n                scopeKey: \"scp\"\n            },\n            scopes: [\"admin\"]\n        }\n    ]\n}\nservice /foo on new http:Listener(9090) {\n    resource function get bar() returns string {\n        return \"Hello, World!\";\n    }\n}\n```\n\n#### 5.1.2. Imperative Approach (HTTP Listener)\n\n```ballerina\nimport ballerina/http;\nimport ballerina/jwt;\n\nhttp:JwtValidatorConfig config = {\n    issuer: \"ballerina\",\n    audience: [\"wso2\"],\n    signatureConfig: {\n        jwksConfig: {\n            url: \"https://localhost:8080/jwks\"\n        }\n    }\n};\nhttp:ListenerJwtAuthHandler handler = new (config);\n\nservice /foo on new http:Listener(9090) {\n    resource function post bar(@http:Header string Authorization) returns string|http:Unauthorized|http:Forbidden {\n        jwt:Payload|http:Unauthorized authn = handler.authenticate(Authorization);\n        if (authn is http:Unauthorized) {\n            return authn;\n        }\n        http:Forbidden? authz = handler.authorize(<jwt:Payload>authn, \"admin\");\n        if (authz is http:Forbidden) {\n            return authz;\n        }\n        // business logic\n    }\n}\n```\n\n### 5.2. Client Auth\n\n#### 5.2.1. Declarative Approach (HTTP Client)\n\n##### 5.2.1.1. Bearer Token\n\n```ballerina\nimport ballerina/http;\n\nhttp:Client c = check new (\"https://localhost:9090\",\n    auth = {\n        token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiw\" +\n               \"ibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2Q\" +\n               \"T4fwpMeJf36POk6yJV_adQssw5c\"\n    }\n);\n\npublic function main() returns error? {\n    json response = check c->get(\"/foo/bar\");\n    // evaluate response\n}\n```\n\n##### 5.2.1.2. Self-Signed JWT\n\n```ballerina\nimport ballerina/http;\n\nhttp:Client c = check new (\"https://localhost:9090\",\n    auth = {\n        username: \"ballerina\",\n        issuer: \"wso2\",\n        audience: [\"ballerina\", \"ballerina.org\", \"ballerina.io\"],\n        keyId: \"5a0b754-895f-4279-8843-b745e11a57e9\",\n        jwtId: \"JlbmMiOiJBMTI4Q0JDLUhTMjU2In\",\n        customClaims: {\"scp\": \"admin\"},\n        expTime: 3600,\n        signatureConfig: {\n            config: {\n                keyFile: \"/path/to/private.key\"\n            }\n        }\n    }\n);\n\npublic function main() returns error? {\n    json response = check c->get(\"/foo/bar\");\n    // evaluate response\n}\n```\n\n#### 5.2.2. Imperative Approach (HTTP Client)\n\n##### 5.2.2.1. Bearer Token\n\n```ballerina\nimport ballerina/http;\n\nhttp:BearerTokenConfig config = {\n    token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFt\" +\n           \"ZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf3\" +\n           \"6POk6yJV_adQssw5c\"\n};\nhttp:ClientBearerTokenAuthHandler handler = new (config);\n\nhttp:Client c = check new (\"https://localhost:9090\");\n\npublic function main() returns error? {\n    http:Request req = new;\n    req = check handler.enrich(req);\n    json response = check c->get(\"/foo/bar\");\n    // evaluate response\n}\n```\n\n##### 5.2.2.2. Self-Signed JWT\n\n```ballerina\nimport ballerina/http;\n\nhttp:JwtIssuerConfig config = {\n    username: \"admin\",\n    issuer: \"ballerina\",\n    audience: [\"wso2\"],\n    signatureConfig: {\n        config: {\n            keyFile: \"/path/to/private.key\",\n            keyPassword: \"password\"\n        }\n    }\n};\nhttp:ClientSelfSignedJwtAuthHandler handler = new (config);\n\nhttp:Client c = check new (\"https://localhost:9090\");\n\npublic function main() returns error? {\n    http:Request req = new;\n    req = check handler.enrich(req);\n    json response = check c->get(\"/foo/bar\");\n    // evaluate response\n}\n```\n"},"__N_SSG":true}