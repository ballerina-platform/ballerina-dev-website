{"pageProps":{"frontmatter":{"layout":"ballerina-testing-code-left-nav-pages-swanlake","title":"Define data-driven tests","description":"Learn how to do write data-driven tests using the ballerina test framework.","keywords":"ballerina, programming language, testing, data-driven, data providers","permalink":"/learn/test-ballerina-code/define-data-driven-tests/","active":"define-data-driven-tests","intro":"The Ballerina Test Framework allows you to specify a function that returns a set of data values as a data-provider."},"content":"\n## Use data providers\n\nA data provider is a function, which will be used to provide the data sets for a test function.\nA data provider function supports one of the following return types.\n\n### Map of tuple or error\n\nThe key to represent a specific data set can be specified using the key of an entry and data can be specified using the \nvalue of an entry. The data provider function can return an error to indicate an issue with the data sets.\n \n***Example:***\n\n```ballerina\nimport ballerina/test;\n\n@test:Config {\n    dataProvider: dataGen\n}\nfunction fruitsDataProviderTest(int value1, int value2, string fruit) returns error? {\n    test:assertEquals(value1, value2, msg = \"The sum is not correct\");\n    test:assertEquals(fruit.length(), 6);\n}\n\nfunction dataGen() returns map<[int, int, string]>|error {\n    map<[int, int, string]> dataSet = {\n        \"banana\": [10, 10, \"banana\"],\n        \"cherry\": [5, 5, \"cherry\"]\n    };\n    return dataSet;\n}\n```\n\n***Output:***\n\n```\nCompiling source\n        ballerina_tests/dataproviders:0.1.0\n\nRunning Tests\n\n        dataproviders\n\n\n\t\t2 passing\n\t\t0 failing\n\t\t0 skipped\n```\n\n\n### Array of arrays or error\n\n***Example:***\n\n```ballerina\nimport ballerina/test;\n\n@test:Config {\n    dataProvider: dataGen\n}\nfunction stringDataProviderTest(string fValue, string sValue, string result) returns error? {\n    int value1 = check int:fromString(fValue);\n    int value2 = check int:fromString(sValue);\n    int result1 = check int:fromString(result);\n    test:assertEquals(value1 + value2, result1, msg = \"The sum is not correct\");\n    return;\n}\n\nfunction dataGen() returns (string[][]) {\n    return [[\"1\", \"2\", \"3\"], [\"10\", \"20\", \"30\"], [\"5\", \"6\", \"11\"]];\n}\n```\n\n***Output:***\n\n```\nCompiling source\n        ballerina_tests/dataproviders:0.1.0\n\nRunning Tests\n\n        dataproviders\n\n\n                3 passing\n                0 failing\n                0 skipped\n```\n\n## Execute specific data sets\n\nIf you need to run only a specific case from the given data set, you can use the test name with the key to do that.\nYou can make use of wild cards(`*`) to capture multiple cases as well.\n\n***Example:***\n\nThe following is an example to execute map data sets.\n>**Note:** Include the key within double-quotes.\n\n```\n$ bal test --tests fruitsDataProviderTest#\"'banana'\"\n\nCompiling source\n\tintg_tests/dataproviders:0.0.0\n\nRunning Tests\n\n\tdataproviders\n\n\n\t\t1 passing\n\t\t0 failing\n\t\t0 skipped\n```\n\n***Example:***\n\nThe following is an example to execute array data sets.\n\n```\n$ bal test --tests stringDataProviderTest#1\n\nCompiling source\n        ballerina_tests/dataproviders:0.1.0\n\nRunning Tests\n\n        dataproviders\n\n                \n                1 passing\n                0 failing\n                0 skipped\n```\n","id":"define-data-driven-tests","sub":"test-document-the-code","third":"test-ballerina-code","slug":"test-document-the-code/test-ballerina-code/define-data-driven-tests","codes":"[[-996838815,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">@</span><span style=\\\"color: #005CC5\\\">test</span><span style=\\\"color: #24292E\\\">:</span><span style=\\\"color: #005CC5\\\">Config</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    dataProvider</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> dataGen</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">fruitsDataProviderTest</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">value1</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">value2</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">fruit</span><span style=\\\"color: #24292E\\\">) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    test</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">assertEquals</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">value1</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">value2</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">msg</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;The sum is not correct&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    test</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">assertEquals</span><span style=\\\"color: #24292E\\\">(fruit.</span><span style=\\\"color: #6F42C1\\\">length</span><span style=\\\"color: #24292E\\\">(), </span><span style=\\\"color: #005CC5\\\">6</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">dataGen</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">map&lt;</span><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">]</span><span style=\\\"color: #D73A49\\\">&gt;|error</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">map&lt;</span><span style=\\\"color: #24292E\\\">[</span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">]</span><span style=\\\"color: #D73A49\\\">&gt;</span><span style=\\\"color: #24292E\\\"> dataSet </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #032F62\\\">&quot;banana&quot;</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> [</span><span style=\\\"color: #005CC5\\\">10</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">10</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;banana&quot;</span><span style=\\\"color: #24292E\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">        </span><span style=\\\"color: #032F62\\\">&quot;cherry&quot;</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> [</span><span style=\\\"color: #005CC5\\\">5</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">5</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;cherry&quot;</span><span style=\\\"color: #24292E\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">return</span><span style=\\\"color: #24292E\\\"> dataSet;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"],[-1284164418,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #fff\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">import</span><span style=\\\"color: #24292E\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">@</span><span style=\\\"color: #005CC5\\\">test</span><span style=\\\"color: #24292E\\\">:</span><span style=\\\"color: #005CC5\\\">Config</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    dataProvider</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #24292E\\\"> dataGen</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">stringDataProviderTest</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">fValue</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">sValue</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">result</span><span style=\\\"color: #24292E\\\">) </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">error?</span><span style=\\\"color: #24292E\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> value1 </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fromString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">fValue</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> value2 </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fromString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">sValue</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #24292E\\\"> result1 </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">check</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #005CC5\\\">int</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">fromString</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">result</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    test</span><span style=\\\"color: #D73A49\\\">:</span><span style=\\\"color: #6F42C1\\\">assertEquals</span><span style=\\\"color: #24292E\\\">(</span><span style=\\\"color: #E36209\\\">value1</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">+</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #E36209\\\">value2</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">result1</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #E36209\\\">msg</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #D73A49\\\">=</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #032F62\\\">&quot;The sum is not correct&quot;</span><span style=\\\"color: #24292E\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">return</span><span style=\\\"color: #24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #D73A49\\\">function</span><span style=\\\"color: #24292E\\\"> </span><span style=\\\"color: #6F42C1\\\">dataGen</span><span style=\\\"color: #24292E\\\">() </span><span style=\\\"color: #D73A49\\\">returns</span><span style=\\\"color: #24292E\\\"> (</span><span style=\\\"color: #005CC5\\\">string</span><span style=\\\"color: #24292E\\\">[][]) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">    </span><span style=\\\"color: #D73A49\\\">return</span><span style=\\\"color: #24292E\\\"> [[</span><span style=\\\"color: #032F62\\\">&quot;1&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;2&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;3&quot;</span><span style=\\\"color: #24292E\\\">], [</span><span style=\\\"color: #032F62\\\">&quot;10&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;20&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;30&quot;</span><span style=\\\"color: #24292E\\\">], [</span><span style=\\\"color: #032F62\\\">&quot;5&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;6&quot;</span><span style=\\\"color: #24292E\\\">, </span><span style=\\\"color: #032F62\\\">&quot;11&quot;</span><span style=\\\"color: #24292E\\\">]];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292E\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}