{"pageProps":{"frontmatter":{"layout":"ballerina-testing-code-left-nav-pages-swanlake","title":"Test services and clients","description":"Learn how to use Ballerina's built-in test framework to write tests for Services and Clients.","keywords":"ballerina, programming language, testing","permalink":"/learn/test-ballerina-code/test-services-and-clients/","active":"testing-services-and-clients","intro":"Testing Ballerina services involves sending specific requests to the service using a client and verifying the responses using the assertion functions. The aim is to make sure that the service and client behave as expected when sending and recieving both expected requests and malformed ones.","redirect_from":["/learn/testing-ballerina-code/testing-services-and-clients","/learn/testing-ballerina-code/testing-services-and-clients/","/swan-lake/learn/testing-ballerina-code/testing-services-and-clients/","/swan-lake/learn/testing-ballerina-code/testing-services-and-clients","/learn/user-guide/testing-ballerina-code/testing-services-and-clients","/learn/user-guide/testing-ballerina-code/testing-services-and-clients/","/learn/testing-ballerina-code/test-services-and-clients/","/learn/testing-ballerina-code/test-services-and-clients","/learn/test-ballerina-code/test-services-and-clients","/learn/guides/testing-ballerina-code/testing-services-and-clients/","/learn/guides/testing-ballerina-code/testing-services-and-clients"]},"content":"\n## Test services\n\nAny services defined in the package will start up on the specified ports and will remain running for the duration of the testing phase. After completing tests, the services will shut down automatically.\n It allows you to send requests directly to the service to test its functionality.\n\n>**Note:** The service starts automatically, only if you have tests in the module where it is defined.\n\n***Example:***\n\nTo test a service, you can create a client in the test source, which sends requests directly to\nthe service and use the test assertion functions to assert the responses. This can be used for both\nexternal services and services defined in the package as well.\n\n***main.bal***\n```ballerina\nimport ballerina/http;\n\nservice http:Service /foo on new http:Listener(9090) {\n\n    resource function get bar(int value) returns http:Ok|http:BadRequest {\n\n        if value < 0 {\n            return <http:BadRequest>{body: \"Incorrect ID value\"};\n        }\n        return <http:Ok>{body: \"Retrieved ID \" + value.toString()};\n    }\n}\n```\n\n***main_test.bal***\n```ballerina\nimport ballerina/test;\nimport ballerina/http;\n\nhttp:Client testClient = check new (\"http://localhost:9090/foo\");\n\n@test:Config {}\npublic function testGet() returns error? {\n    http:Response response = check testClient->get(\"/bar/?value=10\");\n    test:assertEquals(response.statusCode, http:STATUS_OK);\n    test:assertEquals(response.getTextPayload(), \"Retrieved ID 10\");\n\n    response = check testClient->get(\"/bar/?value=-5\");\n    test:assertEquals(response.statusCode, http:STATUS_BAD_REQUEST);\n    test:assertEquals(response.getTextPayload(), \"Incorrect ID value\");\n}\n```\n\n## Test clients\n\nIn cases where a fully fledged client is already defined for a particular service, you can make use\nof `object mocking` to mock the calls to the service and return curated responses to the client.\nIt is useful when testing the full extent of the client by mocking responses that are difficult to reproduce in actual scenarios.\n It would cover a variety of cases that the client can handle without having the service to be up and running.\n\n***Example:***\nThe following is a simple example on how mocking can be used to stub responses to services that you \nmay not be able to access during the test execution.\n\n***main.bal***\n```ballerina\nimport ballerina/io;\nimport ballerina/http;\nimport ballerina/regex;\n\nhttp:Client clientEndpoint = check new (\"https://api.chucknorris.io/jokes/\");\n\n// This function performs a `get` request to the Chuck Norris API and returns a random joke\n// with the name replaced by the provided name or an error if the API invocation fails.\nfunction getRandomJoke(string name) returns string|error {\n\n    http:Response response = check clientEndpoint->get(\"/random\");\n\n    if response.statusCode != http:STATUS_OK {\n        string errorMsg = \"error occurred while sending GET request\";\n        io:println(errorMsg, \", status code: \", response.statusCode, \", payload: \", response.getJsonPayload());\n        return error(errorMsg);\n    }\n\n    json payload = check response.getJsonPayload().ensureType();\n    string joke = check payload.value;\n    string replacedText = regex:replaceAll(joke, \"Chuck Norris\", name);\n    return replacedText;\n}\n```\n\n***main_test.bal***\n```ballerina\nimport ballerina/test;\nimport ballerina/http;\n\n@test:Config {}\npublic function testGetRandomJoke() returns error? {\n    clientEndpoint = test:mock(http:Client);\n\n    test:prepare(clientEndpoint).when(\"get\").thenReturn(getMockResponse());\n\n    http:Response result = check clientEndpoint->get(\"/random\");\n    json payload = check result.getJsonPayload();\n\n    test:assertEquals(payload, {\"value\":\"When Chuck Norris wants an egg, he cracks open a chicken.\"});    \n}\n\nfunction getMockResponse() returns http:Response {\n    http:Response mockResponse = new;\n    mockResponse.setPayload({\"value\":\"When Chuck Norris wants an egg, he cracks open a chicken.\"});\n    return mockResponse;\n}\n```\n\n### Mock `final` clients\n\nObject mocking cannot be used as final clients cannot be modified. It is recommended \nto write the client initialization logic in a separate function and assign the returned value to the client to facilitate testing. \nThis initialization function can then be mocked using the compile-time function mocking feature.\n\n***Example:***\nThe following is a simple example on how to mock a `final` client.\n\nInitialize the client:\n```bal\nimport ballerina/http;\n\nfinal http:Client clientEndpoint = check intializeClient();\n\nfunction intializeClient() returns http:Client|error {\n   return new (\"https://api.chucknorris.io/jokes/\");\n}\n```\n\nMock the client for testing:\n```bal\nimport ballerina/http;\nimport ballerina/test;\n\n@test:Mock { functionName: \"intializeClient\" }\nfunction getMockClient() returns http:Client|error {\n    return test:mock(http:Client);\n}\n```\nTo lean more about how to use mocking to test services, see [Mocking](/learn/test-ballerina-code/mocking).\n\n## Configure services and clients\n\nService or client configurations can be defined for testing using Configurable variables.\nMaintaining a test configurable configuration allows us to re-define the host or port as required.\nFor example, when defining a service, the value for the host or port can be specified in the\n`Config.toml` file, which will be used specifically when running the tests.\n\n***main.bal***\n```ballerina\nimport ballerina/http;\n\nconfigurable int port = 1234;\n\nservice http:Service /foo on new http:Listener(port) {\n\n    resource function get bar(int value) returns http:Ok|http:BadRequest {\n\n        if value < 0 {\n            return <http:BadRequest>{body: \"Incorrect ID value\"};\n        }\n        return <http:Ok>{body: \"Retrieved ID \" + value.toString()};\n    }\n}\n```\n\n***main_test.bal***\n```ballerina\nimport ballerina/test;\nimport ballerina/http;\n\nconfigurable string hostName = \"http://originalService.com/foo\";\n\nhttp:Client testClient = check new (hostName);\n\n@test:Config {}\npublic function testGet() returns error? {\n    http:Response response = check testClient->get(\"/bar/?value=10\");\n    test:assertEquals(response.statusCode, http:STATUS_OK);\n    test:assertEquals(response.getTextPayload(), \"Retrieved ID 10\");\n\n    response = check testClient->get(\"/bar/?value=-5\");\n    test:assertEquals(response.statusCode, http:STATUS_BAD_REQUEST);\n    test:assertEquals(response.getTextPayload(), \"Incorrect ID value\");\n}\n```\n\nThe `Config.toml` must be placed in the `tests` folder for the values to be applied during execution.\n\n```toml\nhostName = \"http://localhost:9091/foo\"\nport = 9091\n```\n","id":"test-services-and-clients","sub":"test-document-the-code","third":"test-ballerina-code","slug":"test-document-the-code/test-ballerina-code/test-services-and-clients","codes":"[[1165756576,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> http:Service </span><span style=\\\"color: #0550AE\\\">/foo</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> http:Listener(</span><span style=\\\"color: #0550AE\\\">9090</span><span style=\\\"color: #24292F\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">bar</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">value</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Ok</span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">http:BadRequest {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\"> value </span><span style=\\\"color: #CF222E\\\">&lt;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">0</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&lt;</span><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">BadRequest</span><span style=\\\"color: #CF222E\\\">&gt;</span><span style=\\\"color: #24292F\\\">{body</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Incorrect ID value&quot;</span><span style=\\\"color: #24292F\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&lt;</span><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Ok</span><span style=\\\"color: #CF222E\\\">&gt;</span><span style=\\\"color: #24292F\\\">{body</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Retrieved ID &quot;</span><span style=\\\"color: #24292F\\\"> + value.</span><span style=\\\"color: #8250DF\\\">toString</span><span style=\\\"color: #24292F\\\">()};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-1098424233,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client testClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0A3069\\\">&quot;http://localhost:9090/foo&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testGet</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error?</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response response </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> testClient</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/bar/?value=10&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(response.statusCode, </span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">STATUS_OK);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(response.</span><span style=\\\"color: #8250DF\\\">getTextPayload</span><span style=\\\"color: #24292F\\\">(), </span><span style=\\\"color: #0A3069\\\">&quot;Retrieved ID 10&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    response </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> testClient</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/bar/?value=-5&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(response.statusCode, </span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">STATUS_BAD_REQUEST);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(response.</span><span style=\\\"color: #8250DF\\\">getTextPayload</span><span style=\\\"color: #24292F\\\">(), </span><span style=\\\"color: #0A3069\\\">&quot;Incorrect ID value&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[1265013063,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/regex;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client clientEndpoint </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0A3069\\\">&quot;https://api.chucknorris.io/jokes/&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// This function performs a `get` request to the Chuck Norris API and returns a random joke</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">// with the name replaced by the provided name or an error if the API invocation fails.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getRandomJoke</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">name</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">|error</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response response </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> clientEndpoint</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/random&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\"> response.statusCode </span><span style=\\\"color: #CF222E\\\">!=</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">STATUS_OK {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> errorMsg </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;error occurred while sending GET request&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">errorMsg</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">&quot;, status code: &quot;</span><span style=\\\"color: #24292F\\\">, response.statusCode, </span><span style=\\\"color: #0A3069\\\">&quot;, payload: &quot;</span><span style=\\\"color: #24292F\\\">, response.</span><span style=\\\"color: #8250DF\\\">getJsonPayload</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">errorMsg</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\"> payload </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> response.</span><span style=\\\"color: #8250DF\\\">getJsonPayload</span><span style=\\\"color: #24292F\\\">().</span><span style=\\\"color: #8250DF\\\">ensureType</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> joke </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> payload.value;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> replacedText </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> regex</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">replaceAll</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">joke</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0A3069\\\">&quot;Chuck Norris&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">name</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> replacedText;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[482130372,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testGetRandomJoke</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error?</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    clientEndpoint </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">mock</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">prepare</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">clientEndpoint</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">when</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;get&quot;</span><span style=\\\"color: #24292F\\\">).</span><span style=\\\"color: #8250DF\\\">thenReturn</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">getMockResponse</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response result </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> clientEndpoint</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/random&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">json</span><span style=\\\"color: #24292F\\\"> payload </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> result.</span><span style=\\\"color: #8250DF\\\">getJsonPayload</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">payload</span><span style=\\\"color: #24292F\\\">, {</span><span style=\\\"color: #0A3069\\\">&quot;value&quot;</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #0A3069\\\">&quot;When Chuck Norris wants an egg, he cracks open a chicken.&quot;</span><span style=\\\"color: #24292F\\\">});    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">getMockResponse</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response mockResponse </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    mockResponse.</span><span style=\\\"color: #8250DF\\\">setPayload</span><span style=\\\"color: #24292F\\\">({</span><span style=\\\"color: #0A3069\\\">&quot;value&quot;</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #0A3069\\\">&quot;When Chuck Norris wants an egg, he cracks open a chicken.&quot;</span><span style=\\\"color: #24292F\\\">});</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> mockResponse;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[1948892736,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">import ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\"></span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">final http:Client clientEndpoint = check intializeClient();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\"></span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">function intializeClient() returns http:Client|error {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">   return new (&quot;https://api.chucknorris.io/jokes/&quot;);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">}</span></span></code></pre>\"],[-1960259972,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">import ballerina/http;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">import ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\"></span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">@test:Mock { functionName: &quot;intializeClient&quot; }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">function getMockClient() returns http:Client|error {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">    return test:mock(http:Client);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292f\\\">}</span></span></code></pre>\"],[-1004998870,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> port </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">1234</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> http:Service </span><span style=\\\"color: #0550AE\\\">/foo</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> http:Listener(</span><span style=\\\"color: #953800\\\">port</span><span style=\\\"color: #24292F\\\">) {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">resource</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">bar</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0550AE\\\">int</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">value</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Ok</span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">http:BadRequest {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">if</span><span style=\\\"color: #24292F\\\"> value </span><span style=\\\"color: #CF222E\\\">&lt;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">0</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">            </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&lt;</span><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">BadRequest</span><span style=\\\"color: #CF222E\\\">&gt;</span><span style=\\\"color: #24292F\\\">{body</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Incorrect ID value&quot;</span><span style=\\\"color: #24292F\\\">};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&lt;</span><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Ok</span><span style=\\\"color: #CF222E\\\">&gt;</span><span style=\\\"color: #24292F\\\">{body</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Retrieved ID &quot;</span><span style=\\\"color: #24292F\\\"> + value.</span><span style=\\\"color: #8250DF\\\">toString</span><span style=\\\"color: #24292F\\\">()};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-971007943,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/test;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/http;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">configurable</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> hostName </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;http://originalService.com/foo&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client testClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #953800\\\">hostName</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">@</span><span style=\\\"color: #0550AE\\\">test</span><span style=\\\"color: #24292F\\\">:</span><span style=\\\"color: #0550AE\\\">Config</span><span style=\\\"color: #24292F\\\"> {}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">testGet</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error?</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Response response </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> testClient</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/bar/?value=10&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(response.statusCode, </span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">STATUS_OK);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(response.</span><span style=\\\"color: #8250DF\\\">getTextPayload</span><span style=\\\"color: #24292F\\\">(), </span><span style=\\\"color: #0A3069\\\">&quot;Retrieved ID 10&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    response </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> testClient</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">get</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;/bar/?value=-5&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(response.statusCode, </span><span style=\\\"color: #953800\\\">http</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">STATUS_BAD_REQUEST);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    test</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">assertEquals</span><span style=\\\"color: #24292F\\\">(response.</span><span style=\\\"color: #8250DF\\\">getTextPayload</span><span style=\\\"color: #24292F\\\">(), </span><span style=\\\"color: #0A3069\\\">&quot;Incorrect ID value&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[346149276,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">hostName = </span><span style=\\\"color: #0A3069\\\">&quot;http://localhost:9091/foo&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">port = </span><span style=\\\"color: #0550AE\\\">9091</span></span></code></pre>\"]]"},"__N_SSG":true}