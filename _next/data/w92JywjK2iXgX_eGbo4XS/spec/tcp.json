{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina TCP Library\n\n_Owners_: @shafreenAnfar @bhashinee  \n_Reviewers_: @shafreenAnfar  \n_Created_: 2021/12/20  \n_Updated_: 2022/02/18  \n_Edition_: Swan Lake  \n\n## Introduction\n\nThis is the specification for the TCP standard library of [Ballerina language](https://ballerina.io/), which provides TCP client-server functionalities.\n\nThe TCP library specification has evolved and may continue to evolve in the future. The released versions of the specification can be found under the relevant GitHub tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a [GitHub issue](https://github.com/ballerina-platform/ballerina-standard-library/issues) or in the [Discord server](https://discord.gg/ballerinalang). Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback is always welcome. Any accepted proposal, which affects the specification is stored under `/docs/proposals`. Proposals under discussion can be found with the label `type/proposal` in GitHub.\n\nThe conforming implementation of the specification is released and included in the distribution. Any deviation from the specification is considered a bug.\n\n## Contents\n1. [Overview](#1-overview)\n2. [Listener](#2-listener)\n    * 2.1. [Configurations](#21-configurations)\n    * 2.2. [Initialization](#22-initialization)\n3. [Service Types](#3-service-types)\n    * 3.1. [Service](#31-service)\n    * 3.2. [Connection Service](#32-connection-service)\n        * 3.2.1. [Remote methods associated with the Connection Service](#321-remote-methods-associated-with-the-connection-service)\n            * [onBytes](#onbytes)\n            * [onError](#onerror)\n            * [onClose](#onclose)\n4. [Client](#4-client)\n    * 4.1. [Configurations](#41-configurations)\n    * 4.2. [Initialization](#42-initialization)\n    * 4.3. [Send and receive data](#43-send-and-receive-data)\n        * [writeBytes](#writebytes)\n        * [readBytes](#readbytes)\n        * [close](#close)\n5. [Securing the TCP Connections](#5-securing-the-tcp-connections)\n    * 5.1 [Using the TLS protocol](#51-using-the-tls-protocol)\n6. [Samples](#6-samples)\n\n## 1. [Overview](#1-overview)\n\nTCP is a protocol that enables applications to exchange messages over a network. It is designed to ensure the successful delivery of data over the network. This specification elaborates on how Ballerina language provides a tested TCP client and server implementation that is compliant with the [RFC 793](https://datatracker.ietf.org/doc/html/rfc793).\n\n## 2. [Listener](#2-listener)\n\nThe `tcp:Listener` is used to listen to the incoming socket request. It can be constructed with a port number and optionally providing other configurations. When initiating the listener it opens up the port and attaches the `tcp:Service`. \n\n### 2.1. [Configurations](#21-configurations)\n\nWhen initializing the listener, following configurations can be provided,\n\n```ballerina\n# Provides a set of configurations for tcp listener.\n#\n# + localHost - The hostname\n# + secureSocket - The SSL configurations for the listener\npublic type ListenerConfiguration record {|\n   string localHost?;\n   ListenerSecureSocket secureSocket?; \n|};\n```\n\n`ListenerSecureSocket` record contains configurations related to enabling SSL/TLS on the listener side. More details and examples of how to configure them can be found in a following section on `Securing the TCP Connections`.\n\n```ballerina\n# Secure Socket configuration for TCP Listener.\n#\n# + key - Configurations associated with `crypto:KeyStore` or combination of certificate and (PKCS8) private key of the server\n# + protocol - SSL/TLS protocol related options\n# + ciphers - List of ciphers to be used\n#             eg: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n# + handshakeTimeout - SSL handshake time out\n# + sessionTimeout - SSL session time out\npublic type ListenerSecureSocket record {|\n    crypto:KeyStore|CertKey key;\n    record {|\n        Protocol name;\n        string[] versions = [];\n    |} protocol?;\n    string[] ciphers = [];\n    decimal handshakeTimeout?;\n    decimal sessionTimeout?;\n|};\n```\n\n### 2.2. [Initialization](#22-initialization)\nThe TCP listener can be initialized by providing the `port` and optionally a `ListenerConfiguration`.\n\n```ballerina\n# Initializes the TCP listener based on the provided configurations.\n# ```ballerina\n#  listener Listener|error? server1 = new (8080);\n# ```\n# + localPort - The port number of the remote service\n# + config - Configurations related to the `tcp:Listener`\npublic isolated function init(int localPort, *ListenerConfiguration config) returns Error? {}\n```\n\n## 3. [Service Types](#3-service-types)\n\n### 3.1. [Service](#31-service)\n\nThis service has a single `onConnect` remote method which gets invoked when a new client is connected. The new client is represented using the `tcp:Caller`. The `onConnect(tcp:Caller)` method may return `tcp:ConnectionService|tcp:Error`.\n\n### 3.2. [Connection Service](#32-connection-service)\n\nOnce the TCP connection is established, it returns a `tcp:ConnectionService`. This service has a fixed set of remote methods that do not have any configs. Receiving messages will get dispatched to the relevant remote method. Each remote method is explained below.\n\n```ballerina\nimport ballerina/tcp;\n\nservice on new tcp:Listener(3000) {\n    remote function onConnect(tcp:Caller caller) returns tcp:ConnectionService {\n        return new EchoService();\n    }\n}\n\nservice class EchoService {\n\n    *tcp:ConnectionService;\n    \n    remote function onBytes(readonly & byte[] data) returns byte[]|tcp:Error? {\n        // echo back the data to the client\n        return data;\n    }\n}\n```\n\n#### 3.2.1. [Remote methods associated with the Connection Service](#remote-methods-associated-with-the-connection-service)\n\n##### [onBytes](#onbytes)\n\nThis remote method is invoked once the data is received from the client.\n\n```ballerina\nremote function onBytes(tcp:Caller caller, readonly & byte[] data) returns tcp:Error? {\n    io:println(\"Received: \", string:fromBytes(data));\n}\n```\n\n##### [onError](#onerror)\n\nThis remote method is invoked in an error situation.\n\n```ballerina\nremote function onError(tcp:Error err) {\n    io:println(\"An error occurred\" + err.message());\n}\n```\n\n##### [onClose](#onclose)\n\nThis remote method is invoked when the connection gets closed.\n\n```ballerina\nremote function onClose() {\n    io:println(\"Client left\");\n}\n```\n\n## 4. [Client](#4-client)\n\nThe `tcp:Client` is used to connect to a socket server and interact with it. It can send the data to the server and retrieve the data from the server.\n\n### 4.1. [Configurations](#41-configurations)\n\nWhen initializing the client, following configurations can be provided,\n\n```ballerina\n# Configurations for the connection-oriented TCP client.\n# \n# + localHost - Local binding of the interface\n# + timeout - The socket reading timeout value to be used in seconds. If this is not set, the default value\n#             of 300 seconds(5 minutes) will be used\n# + writeTimeout - The socket write timeout value to be used in seconds. If this is not set, the default value\n#             of 300 seconds(5 minutes) will be used\n# + secureSocket - The `secureSocket` configuration\npublic type ClientConfiguration record {|\n    string localHost?;\n    decimal timeout = 300;\n    decimal writeTimeout = 300;\n    ClientSecureSocket secureSocket?;\n|};\n```\n\n### 4.2. [Initialization](#42-initialization)\n\nA client can be initialized by providing the `remoteHost` and the `remotePort` and optionally the `ClientConfiguration`.\n\n```ballerina\n# Initializes the TCP client based on the provided configurations.\n# ```ballerina\n# tcp:Client|tcp:Error? socketClient = new(\"www.remote.com\", 80,\n#                              localHost = \"localHost\");\n# ```\n# + remoteHost - The hostname or the IP address of the remote host\n# + remotePort - The port number of the remote host\n# + config - Connection-oriented client-related configurations\npublic isolated function init(string remoteHost, int remotePort, *ClientConfiguration config) returns Error? {}\n```\n\n### 4.3. [Send and receive data](#43-send-and-receive-data)\n\n#### [writeBytes](#writebytes)\n\n`writeBytes` API can be used to send data to the remote host.\n\n```ballerina\n# Sends the given data to the connected remote host.\n# ```ballerina\n# tcp:Error? result = socketClient->writeBytes(\"msg\".toBytes());\n# ```\n#\n# + data - The data that need to be sent to the connected remote host\n# + return - `()` or else a `tcp:Error` if the given data cannot be sent\nremote function writeBytes(byte[] data) returns Error? = @java:Method {}\n```\n\n#### [readBytes](#readbytes)\n\n`readBytes` API can be used to read data receiving from the remote host.\n\n```ballerina\n# Reads data only from the connected remote host. \n# ```ballerina\n# (readonly & byte[])|tcp:Error result = socketClient->readBytes();\n# ```\n#\n# + return - The `readonly & byte[]` or else a `tcp:Error` if the data\n#            cannot be read from the remote host\nremote function readBytes() returns (readonly & byte[])|Error = @java:Method {}\n```\n\n#### [close](#close)\n\n`close` API can be used to close the connection established with the remote host.\n\n```ballerina\n# Frees up the occupied socket.\n# ```ballerina\n# tcp:Error? closeResult = socketClient->close();\n# ```\n#\n# + return - A `tcp:Error` if it cannot close the connection or else `()`\nisolated remote function close() returns Error? = @java:Method {}\n```\n\n## 5. [Securing the TCP Connections](#5-securing-the-tcp-connections)\n\nBallerina provides inbuilt support for securing TCP connections with SSL/TLS protocol.\n\n### 5.1 [Using the TLS protocol](#51-using-the-tls-protocol)\n\nThis expects a secure socket to be set in the connection configuration as shown below.\n\n#### 5.1.1 [Configuring TLS in server side](#511-configuring-tls-in-server-side)\n\n```ballerina\ntcp:ListenerSecureSocket listenerSecureSocket = {\n    key: {\n        certFile: \"../resource/path/to/public.crt\",\n        keyFile: \"../resource/path/to/private.key\"\n    }\n};\n\nservice on new tcp:Listener(9002, secureSocket = listenerSecureSocket) {\n    isolated remote function onConnect(tcp:Caller caller) returns tcp:ConnectionService {\n        return new EchoService();\n    }\n}\n```\n\n#### 5.1.2 [Configuring TLS in client side](#512-configuring-tls-in-client-side)\n\n```ballerina\ntcp:Client socketClient = check new (\"localhost\", 9002, secureSocket = {\n    cert: \"../resource/path/to/public.crt\",\n});\n```\n\n## 6. [Samples](#6-samples)\n\nListener\n\n```ballerina\nimport ballerina/io;\nimport ballerina/log;\nimport ballerina/tcp;\n\nservice on new tcp:Listener(3000) {\n    remote function onConnect(tcp:Caller caller) returns tcp:ConnectionService {\n        io:println(\"Client connected to echo server: \", caller.remotePort);\n        return new EchoService();\n    }\n}\n\nservice class EchoService {\n\n    *tcp:ConnectionService;\n    \n    remote function onBytes(tcp:Caller caller, readonly & byte[] data) returns tcp:Error? {\n        io:println(\"Echo: \", string:fromBytes(data));\n        return caller->writeBytes(data);\n    }\n\n    remote function onError(tcp:Error err) {\n        log:printError(\"An error occurred\", 'error = err);\n    }\n\n    remote function onClose() {\n        io:println(\"Client left\");\n    }\n}\n```\n\nClient\n\n```ballerina\nimport ballerina/io;\nimport ballerina/tcp;\n\npublic function main() returns error? {\n    tcp:Client socketClient = check new (\"localhost\", 3000);\n\n    string msg = \"Hello Ballerina Echo from client\";\n    byte[] msgByteArray = msg.toBytes();\n    check socketClient->writeBytes(msgByteArray);\n\n    readonly & byte[] receivedData = check socketClient->readBytes();\n    io:println(\"Received: \", string:fromBytes(receivedData));\n\n    return socketClient->close();\n}\n```\n","codeSnippets":"[[1156136603,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Provides a set of configurations for tcp listener.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">localHost</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">The hostname</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">secureSocket</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">The SSL configurations for the listener</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">type</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">ListenerConfiguration</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">record</span><span style=\\\"color: #24292F\\\"> {</span><span style=\\\"color: #CF222E\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">   </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> localHost?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">   ListenerSecureSocket secureSocket</span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">};</span></span></code></pre>\"],[925625436,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Secure Socket configuration for TCP Listener.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">key</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">Configurations associated with `crypto:KeyStore` or combination of certificate and (PKCS8) private key of the server</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">protocol</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">SSL/TLS protocol related options</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">ciphers</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">List of ciphers to be used</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#             eg: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">handshakeTimeout</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">SSL handshake time out</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">sessionTimeout</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">SSL session time out</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">type</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">ListenerSecureSocket</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">record</span><span style=\\\"color: #24292F\\\"> {</span><span style=\\\"color: #CF222E\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    crypto</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">KeyStore</span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">CertKey key;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">record</span><span style=\\\"color: #24292F\\\"> {</span><span style=\\\"color: #CF222E\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        Protocol name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\">[] versions </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">} protocol</span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\">[] ciphers </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">decimal</span><span style=\\\"color: #24292F\\\"> handshakeTimeout?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">decimal</span><span style=\\\"color: #24292F\\\"> sessionTimeout?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">};</span></span></code></pre>\"],[-2080679956,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Initializes the TCP listener based on the provided configurations.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span></code></pre>\"],[1822433720,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/tcp;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> tcp:Listener(</span><span style=\\\"color: #0550AE\\\">3000</span><span style=\\\"color: #24292F\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onConnect</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Caller caller) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ConnectionService {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">EchoService</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service class</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">EchoService</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">*</span><span style=\\\"color: #24292F\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ConnectionService;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onBytes</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #CF222E\\\">readonly</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&amp;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] </span><span style=\\\"color: #953800\\\">data</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[]</span><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Error? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #6E7781\\\">// echo back the data to the client</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> data;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[1932072828,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onBytes</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Caller caller, </span><span style=\\\"color: #CF222E\\\">readonly</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&amp;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] </span><span style=\\\"color: #953800\\\">data</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Error? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Received: &quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">fromBytes</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">data</span><span style=\\\"color: #24292F\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-1445116029,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onError</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Error err) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;An error occurred&quot;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">+</span><span style=\\\"color: #24292F\\\"> err.</span><span style=\\\"color: #8250DF\\\">message</span><span style=\\\"color: #24292F\\\">());</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[121381347,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onClose</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Client left&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[656050709,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Configurations for the connection-oriented TCP client.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">localHost</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">Local binding of the interface</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">timeout</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">The socket reading timeout value to be used in seconds. If this is not set, the default value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#             of 300 seconds(5 minutes) will be used</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">writeTimeout</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">The socket write timeout value to be used in seconds. If this is not set, the default value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#             of 300 seconds(5 minutes) will be used</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># </span><span style=\\\"color: #CF222E\\\">+ </span><span style=\\\"color: #24292F\\\">secureSocket</span><span style=\\\"color: #CF222E\\\"> - </span><span style=\\\"color: #6E7781\\\">The `secureSocket` configuration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">type</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">ClientConfiguration</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">record</span><span style=\\\"color: #24292F\\\"> {</span><span style=\\\"color: #CF222E\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> localHost?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">decimal</span><span style=\\\"color: #24292F\\\"> timeout </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">300</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">decimal</span><span style=\\\"color: #24292F\\\"> writeTimeout </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">300</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    ClientSecureSocket secureSocket</span><span style=\\\"color: #CF222E\\\">?</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">|</span><span style=\\\"color: #24292F\\\">};</span></span></code></pre>\"],[-110879229,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Initializes the TCP client based on the provided configurations.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span></code></pre>\"],[698545150,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Sends the given data to the connected remote host.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span></code></pre>\"],[-251514397,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Reads data only from the connected remote host. </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span></code></pre>\"],[-1790862736,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\"># Frees up the occupied socket.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #6E7781\\\">#</span></span></code></pre>\"],[1178287796,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ListenerSecureSocket listenerSecureSocket </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">key:</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        certFile</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;../resource/path/to/public.crt&quot;</span><span style=\\\"color: #24292F\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        keyFile</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;../resource/path/to/private.key&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">};</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> tcp:Listener(</span><span style=\\\"color: #0550AE\\\">9002</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">secureSocket</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> listenerSecureSocket) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">isolated</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onConnect</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Caller caller) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ConnectionService {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">EchoService</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-675909722,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client socketClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0A3069\\\">&quot;localhost&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">9002</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #953800\\\">secureSocket</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    cert</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;../resource/path/to/public.crt&quot;</span><span style=\\\"color: #24292F\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">});</span></span></code></pre>\"],[643906564,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/log;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/tcp;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">on</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> tcp:Listener(</span><span style=\\\"color: #0550AE\\\">3000</span><span style=\\\"color: #24292F\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onConnect</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Caller caller) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ConnectionService {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Client connected to echo server: &quot;</span><span style=\\\"color: #24292F\\\">, caller.remotePort);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">EchoService</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">service class</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #953800\\\">EchoService</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">*</span><span style=\\\"color: #24292F\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">ConnectionService;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onBytes</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Caller caller, </span><span style=\\\"color: #CF222E\\\">readonly</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&amp;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] </span><span style=\\\"color: #953800\\\">data</span><span style=\\\"color: #24292F\\\">) </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Error? {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Echo: &quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">fromBytes</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">data</span><span style=\\\"color: #24292F\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> caller</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">writeBytes</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">data</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onError</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Error err) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        log</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">printError</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;An error occurred&quot;</span><span style=\\\"color: #24292F\\\">, &#39;error </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> err);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">remote</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">onClose</span><span style=\\\"color: #24292F\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">        io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Client left&quot;</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"],[-1232023101,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color: #ffffff\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/io;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">import</span><span style=\\\"color: #24292F\\\"> ballerina/tcp;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #CF222E\\\">public</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">function</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #8250DF\\\">main</span><span style=\\\"color: #24292F\\\">() </span><span style=\\\"color: #CF222E\\\">returns</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">error?</span><span style=\\\"color: #24292F\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    tcp</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #24292F\\\">Client socketClient </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">new</span><span style=\\\"color: #24292F\\\"> (</span><span style=\\\"color: #0A3069\\\">&quot;localhost&quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">3000</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #24292F\\\"> msg </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0A3069\\\">&quot;Hello Ballerina Echo from client&quot;</span><span style=\\\"color: #24292F\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] msgByteArray </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> msg.</span><span style=\\\"color: #8250DF\\\">toBytes</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> socketClient</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">writeBytes</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">msgByteArray</span><span style=\\\"color: #24292F\\\">);</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">readonly</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">&amp;</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #0550AE\\\">byte</span><span style=\\\"color: #24292F\\\">[] receivedData </span><span style=\\\"color: #CF222E\\\">=</span><span style=\\\"color: #24292F\\\"> </span><span style=\\\"color: #CF222E\\\">check</span><span style=\\\"color: #24292F\\\"> socketClient</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">readBytes</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    io</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">println</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #0A3069\\\">&quot;Received: &quot;</span><span style=\\\"color: #24292F\\\">, </span><span style=\\\"color: #0550AE\\\">string</span><span style=\\\"color: #CF222E\\\">:</span><span style=\\\"color: #8250DF\\\">fromBytes</span><span style=\\\"color: #24292F\\\">(</span><span style=\\\"color: #953800\\\">receivedData</span><span style=\\\"color: #24292F\\\">));</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">    </span><span style=\\\"color: #CF222E\\\">return</span><span style=\\\"color: #24292F\\\"> socketClient</span><span style=\\\"color: #CF222E\\\">-&gt;</span><span style=\\\"color: #8250DF\\\">close</span><span style=\\\"color: #24292F\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #24292F\\\">}</span></span></code></pre>\"]]"},"__N_SSG":true}