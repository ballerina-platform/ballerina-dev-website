{"pageProps":{"samples":{"12-factor-apps-for-integration-problems":{"frontmatter":{"title":"12 Factor Apps for Integration Problems","description":"Just write integration applications like any other code. Do all 12 factors (and 3 more if you like) with all your usual tools, and don’t fear.","url":"","image":"images/twelve-factor-apps-ballerina-integratio-grey-bg.png"},"code":""},"built-in-observability":{"frontmatter":{"title":"Built-in observability","description":"Every Ballerina program is automatically observable by any Open Telemetry tool, giving you complete control and visibility into the code’s behavior and performance.","url":"","image":"images/screenshots-collage-final-image-transparent-v5.png"},"code":""},"built-in-transactions":{"frontmatter":{"title":"Built-in transactions","description":"Eventual consistency in Data integration is nice and all, but if you really need to make sure your distributed data integrations run transactionally, then Ballerina makes that effortless and mistake-free for developers with compile-time support.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/mysql-client-with-transactions/main.bal#L22","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"type Order record {|\n    string id;\n    string orderDate;\n    string productId;\n    int quantity;\n|};\n\nfinal mysql:Client db = check new (host, user, password, database, port);\n\nfunction createOrder(Order &#x27;order) returns error? {\n    // Start a transaction.\n    transaction {\n        // Insert into &#x60;sales_order&#x60; table.\n        _ = check db->execute(&#x60;INSERT INTO sales_orders VALUES (${&#x27;order.id}, \n                ${&#x27;order.orderDate}, ${&#x27;order.productId}, ${&#x27;order.quantity})&#x60;);\n\n        // Update product quantity as per the order.\n        sql:ExecutionResult inventoryUpdate = check db->execute(&#x60;UPDATE inventory SET \n                quantity = quantity - ${&#x27;order.quantity} WHERE id = ${&#x27;order.productId}&#x60;);\n\n        // If the product is not found, rollback or else commit the transaction.\n        if inventoryUpdate.affectedRowCount == 0 {\n            rollback;\n            return error(string &#x60;Product ${&#x27;order.productId} not found.&#x60;);\n        } else {\n            check commit;\n        }\n    } on fail error e {\n        // In case of error, the transaction block is rolled back automatically.\n        return error(string &#x60;Error occurred while processing the order: ${&#x27;order.id}.&#x60;, e);\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Order</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> orderDate;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> productId;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> quantity;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> mysql</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client db </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">host</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">user</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">password</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">database</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">port</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> createOrder</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">Order</span><span style=\"color:#24292E\"> 'order) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Start a transaction.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    transaction</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Insert into `sales_order` table.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> db</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">execute</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">`INSERT INTO sales_orders VALUES (${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">id</span><span style=\"color:#032F62\">}, </span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                ${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">orderDate</span><span style=\"color:#032F62\">}, ${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">productId</span><span style=\"color:#032F62\">}, ${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">quantity</span><span style=\"color:#032F62\">})`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Update product quantity as per the order.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        sql</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">ExecutionResult inventoryUpdate </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> db</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">execute</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">`UPDATE inventory SET </span></span>\n<span class=\"line\"><span style=\"color:#032F62\">                quantity = quantity - ${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">quantity</span><span style=\"color:#032F62\">} WHERE id = ${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">productId</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // If the product is not found, rollback or else commit the transaction.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> inventoryUpdate.affectedRowCount </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            rollback</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Product ${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">productId</span><span style=\"color:#032F62\">} not found.`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        } </span><span style=\"color:#D73A49\">else</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            check</span><span style=\"color:#D73A49\"> commit</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    } </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> fail</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\"> e {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // In case of error, the transaction block is rolled back automatically.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> error</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `Error occurred while processing the order: ${</span><span style=\"color:#24292E\">'order</span><span style=\"color:#032F62\">.</span><span style=\"color:#24292E\">id</span><span style=\"color:#032F62\">}.`</span><span style=\"color:#24292E\">, </span><span style=\"color:#E36209\">e</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"code-is-the-picture-picture-is-the-code":{"frontmatter":{"title":"Code is the picture / picture is the code","description":"Instead of deciphering lines of code, Ballerina programs can be viewed and edited as sequence diagrams with flow charts. This makes maintaining and understanding integration applications a breeze. Code never goes out of sync with the picture and vice versa.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/github-pull-requests-to-gsheets/main.bal#L18","image":"images/code-is-picture.png"},"code":""},"concurrent-programming-made-simple":{"frontmatter":{"title":"Concurrent programming made simple","description":"Sequence diagrams have been used to model concurrency for decades. Ballerina’s concurrent programming model is sequence diagrams along with various concurrency control capabilities that make concurrent programming visual and accessible to all.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/pattern-scatter-gather/main.bal#L23","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"type Quote record {\n    string customerName;\n    string product;\n    int quantity;\n    decimal price;\n};\n\nfunction findBestQuote(QuoteRequest quoteReq) returns Quote {\n    // The fork statement starts with one or more named workers, \n    //  which run in parallel with each other \n    fork {\n        worker venderA returns Quote|error {\n            http:Client venderAEP = check new (venderAURL);\n            return venderAEP -> /quote.get(p = quoteReq.product, q = quoteReq.quantity);\n        }\n\n        worker venderB returns Quote|error {\n            http:Client venderBEP = check new (venderBURL);\n            return venderBEP -> /quote.get(p = quoteReq.product, q = quoteReq.quantity);\n        }\n\n        worker venderC returns Quote|error {\n            http:Client venderCEP = check new (venderCURL);\n            return venderCEP -> /quote.get(p = quoteReq.product, q = quoteReq.quantity);\n        }\n    }\n\n    // Wait for all the workers to finish and collect the results.\n    map<Quote|error> quotes = wait {venderA, venderB, venderC};\n    return bestQuote(quotes);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Quote</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> customerName;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> product;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    int</span><span style=\"color:#24292E\"> quantity;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">function</span><span style=\"color:#6F42C1\"> findBestQuote</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">QuoteRequest</span><span style=\"color:#E36209\"> quoteReq</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Quote {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // The fork statement starts with one or more named workers, </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    //  which run in parallel with each other </span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    fork</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        worker</span><span style=\"color:#24292E\"> venderA </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Quote</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client venderAEP </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">venderAURL</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> venderAEP </span><span style=\"color:#D73A49\">-></span><span style=\"color:#D73A49\"> /</span><span style=\"color:#24292E\">quote.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">p</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> quoteReq.product, </span><span style=\"color:#E36209\">q</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> quoteReq.quantity);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        worker</span><span style=\"color:#24292E\"> venderB </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Quote</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client venderBEP </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">venderBURL</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> venderBEP </span><span style=\"color:#D73A49\">-></span><span style=\"color:#D73A49\"> /</span><span style=\"color:#24292E\">quote.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">p</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> quoteReq.product, </span><span style=\"color:#E36209\">q</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> quoteReq.quantity);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        worker</span><span style=\"color:#24292E\"> venderC </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Quote</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client venderCEP </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">venderCURL</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> venderCEP </span><span style=\"color:#D73A49\">-></span><span style=\"color:#D73A49\"> /</span><span style=\"color:#24292E\">quote.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">p</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> quoteReq.product, </span><span style=\"color:#E36209\">q</span><span style=\"color:#D73A49\"> =</span><span style=\"color:#24292E\"> quoteReq.quantity);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Wait for all the workers to finish and collect the results.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#24292E\">Quote</span><span style=\"color:#D73A49\">|error></span><span style=\"color:#24292E\"> quotes </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> wait</span><span style=\"color:#24292E\"> {venderA, venderB, venderC};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    return</span><span style=\"color:#6F42C1\"> bestQuote</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">quotes</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"connect-with-anything":{"frontmatter":{"title":"Connect with Anything","description":"Access thousands of connectors for HTTP APIs (OpenAPI), event APIs (AsyncAPI), GraphQL services, legacy systems, and data stores, allowing seamless data transfer to and from any system, anywhere.","url":"","image":"images/powerful-connectivity.png"},"code":""},"edit-debug-run-in-vscode":{"frontmatter":{"title":"Edit, debug, and run in VSCode","description":"Tired of disjointed toolchains disrupting your workflow? Take control of your integration development with Ballerina. Realize your ideas in VSCode, use your favorite tools, and store them in Git.","url":"","image":"images/edit-debug-diagraam-v4.png"},"code":""},"github-copilot":{"frontmatter":{"title":"GitHub Copilot, your artificially intelligent pair programmer","description":"GitHub Copilot knows Ballerina. Why do all the work? Let Copilot do at least half of it.","url":"","image":"images/github-copilot.png"},"code":""},"graphql-ballerina-is-graphql":{"frontmatter":{"title":"GraphQL? Ballerina is GraphQL","description":"When you go beyond just toy GraphQL applications where you simply map GraphQL queries to database queries, Ballerina gives you first-class concepts to write any code that executes as part of the GraphQL query. <br/><br/> No GraphQL service is out of reach with Ballerina. It can create a custom-tailored, typed GraphQL client for your unique queries with ease.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/graphql_bookstore_service/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"final http:Client bookEp = check new (&#x22;https://www.googleapis.com&#x22;);\n\nservice class Book {\n    private final readonly &#x26; BookData bookData;\n\n    function init(BookData bookData) {\n        self.bookData = bookData.cloneReadOnly();\n    }\n\n    resource function get isbn() returns string {\n        return self.bookData.isbn;\n    }\n\n    resource function get title() returns string {\n        return self.bookData.title;\n    }\n\n    resource function get reviews() returns Review|error {\n        string isbn = self.bookData.isbn;\n        GoogleBook googleBook = check bookEp->/books/v1/volumes.get(q=string &#x60;isbn:${isbn}&#x60;);\n        return let var volInfo = googleBook.items[0].volumeInfo in {\n                averageRating: volInfo.averageRating,\n                ratingsCount: volInfo.ratingsCount,\n                maturityRating: volInfo.maturityRating\n            };\n    }\n}\n\nservice /graphql on new graphql:Listener(9090) {\n    resource function get book(string isbn) returns Book? {\n        BookData? data = books[isbn];\n        return data is BookData ? new Book(data) : ();\n    }\n\n    resource function get allBooks() returns Book[] {\n        return from var bookData in books\n            select new Book(bookData);\n    }\n\n    remote function addBook(BookData bookData) returns Book|error {\n        books.add(bookData);\n        return new Book(bookData);\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client bookEp </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#032F62\">\"https://www.googleapis.com\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service class</span><span style=\"color:#6F42C1\"> Book</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    private</span><span style=\"color:#D73A49\"> final</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#D73A49\"> &#x26;</span><span style=\"color:#24292E\"> BookData bookData;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    function</span><span style=\"color:#6F42C1\"> init</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">BookData</span><span style=\"color:#E36209\"> bookData</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        self</span><span style=\"color:#24292E\">.bookData </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> bookData.</span><span style=\"color:#6F42C1\">cloneReadOnly</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> isbn</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#005CC5\"> self</span><span style=\"color:#24292E\">.bookData.isbn;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> title</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#005CC5\"> self</span><span style=\"color:#24292E\">.bookData.title;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> reviews</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Review</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        string</span><span style=\"color:#24292E\"> isbn </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> self</span><span style=\"color:#24292E\">.bookData.isbn;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        GoogleBook googleBook </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> bookEp</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">books</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">v1</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">volumes.</span><span style=\"color:#6F42C1\">get</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">q</span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\">string</span><span style=\"color:#032F62\"> `isbn:${</span><span style=\"color:#24292E\">isbn</span><span style=\"color:#032F62\">}`</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> let</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> volInfo </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> googleBook.items[</span><span style=\"color:#005CC5\">0</span><span style=\"color:#24292E\">].volumeInfo </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                averageRating</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> volInfo.averageRating,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                ratingsCount</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> volInfo.ratingsCount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">                maturityRating</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> volInfo.maturityRating</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">            };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#6F42C1\"> /graphql</span><span style=\"color:#D73A49\"> on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> graphql:Listener(</span><span style=\"color:#005CC5\">9090</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> book</span><span style=\"color:#24292E\">(</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> isbn</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Book</span><span style=\"color:#D73A49\">?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        BookData</span><span style=\"color:#D73A49\">?</span><span style=\"color:#24292E\"> data </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> books[isbn];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> data </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> BookData </span><span style=\"color:#D73A49\">?</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> Book</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">data</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\"> ();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> allBooks</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Book[] {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> from</span><span style=\"color:#005CC5\"> var</span><span style=\"color:#24292E\"> bookData </span><span style=\"color:#D73A49\">in</span><span style=\"color:#24292E\"> books</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            select</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> Book</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">bookData</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    remote</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> addBook</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">BookData</span><span style=\"color:#E36209\"> bookData</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Book</span><span style=\"color:#D73A49\">|error</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        books.</span><span style=\"color:#6F42C1\">add</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">bookData</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#6F42C1\"> Book</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">bookData</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"http-ballerina-is-http":{"frontmatter":{"title":"HTTP? Ballerina is HTTP","description":"“Ballerina is HTTP on steroids.” Network abstractions in Ballerina provide a natural way to describe and consume HTTP services, allowing developers to focus on a business logic instead of boilerplate code.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/restful_api/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"configurable int port = 8080;\n\ntype Album readonly &#x26; record {|\n    string id;\n    string title;\n    string artist;\n    decimal price;\n|};\n\nservice / on new http:Listener(port) {\n    resource function get albums() returns Album[] {\n        return albums.toArray();\n    }\n\n    resource function get albums/[string id]() returns Album|http:NotFound {\n        Album? album = albums[id];\n        if album is () {\n            return http:NOT_FOUND;\n        } else {\n            return album;\n        }\n    }\n\n    resource function post albums(@http:Payload Album album) returns Album {\n        albums.add(album);\n        return album;\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">configurable</span><span style=\"color:#005CC5\"> int</span><span style=\"color:#24292E\"> port </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> 8080</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Album</span><span style=\"color:#D73A49\"> readonly</span><span style=\"color:#D73A49\"> &#x26;</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span><span style=\"color:#D73A49\">|</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> artist;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> / </span><span style=\"color:#D73A49\">on</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> http:Listener(</span><span style=\"color:#E36209\">port</span><span style=\"color:#24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> albums</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Album[] {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> albums.</span><span style=\"color:#6F42C1\">toArray</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> get</span><span style=\"color:#6F42C1\"> albums</span><span style=\"color:#24292E\">/[</span><span style=\"color:#005CC5\">string</span><span style=\"color:#E36209\"> id</span><span style=\"color:#24292E\">]() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Album</span><span style=\"color:#D73A49\">|</span><span style=\"color:#24292E\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">NotFound {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        Album</span><span style=\"color:#D73A49\">?</span><span style=\"color:#24292E\"> album </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> albums[id];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        if</span><span style=\"color:#24292E\"> album </span><span style=\"color:#D73A49\">is</span><span style=\"color:#24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">NOT_FOUND;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        } </span><span style=\"color:#D73A49\">else</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">            return</span><span style=\"color:#24292E\"> album;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    resource</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> post</span><span style=\"color:#6F42C1\"> albums</span><span style=\"color:#24292E\">(@</span><span style=\"color:#005CC5\">http</span><span style=\"color:#24292E\">:</span><span style=\"color:#005CC5\">Payload</span><span style=\"color:#E36209\"> Album</span><span style=\"color:#E36209\"> album</span><span style=\"color:#24292E\">) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#24292E\"> Album {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        albums.</span><span style=\"color:#6F42C1\">add</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">album</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">        return</span><span style=\"color:#24292E\"> album;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"incredible-data-transformations":{"frontmatter":{"title":"Incredible data transformations","description":"Ballerina has cracked the challenge of mapping one kind of data value to another kind of data value, simultaneously as code and picture, so that both are simple, powerful, and boundless.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/clientary_invoices_to_quickbooks_online_invoices/main.bal#L75'","image":"images/data-transformation.png"},"code":""},"json-ballerina-is-json":{"frontmatter":{"title":"JSON? Ballerina is JSON","description":"Javascript is JSON, and so is Ballerina. Plain data in Ballerina bear a natural resemblance to JSON values, simplifying the manipulation of JSON data. You can use the in-built `json` type if that’s your thing! Otherwise, convert to domain types for type-safe handling.","url":"https://github.com/ballerina-guides/integration-samples/tree/main/working_with_json/ballerina/main.bal","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"type InvoiceItem record {\n    string id;\n    decimal price;\n    boolean taxable;\n};\n\ntype Customer record {\n    string id;\n    string name;\n};\n\ntype Invoice record {\n    string id;\n    Customer customer;\n    InvoiceItem[] items;\n};\n\npublic function main() returns error?{\n    json invoiceData = check io:fileReadJson(&#x22;./invoice.json&#x22;);\n\n    // Enjoy lax static typing here!\n    // Fails at runtime if the key is not present or the value is not a string.\n    string id = check invoiceData.id;\n\n    // Fails at runtime if the key is not present.\n    json items = check invoiceData.items;\n\n    // Converts to the domain type.\n    // Fails at runtime if the json value does not match the type.\n    Invoice invoice = check invoiceData.fromJsonWithType();\n\n    // Enjoy type-safe handling of json values.\n    id = invoice.id;\n    InvoiceItem[] invoiceItems = invoice.items;\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> InvoiceItem</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    decimal</span><span style=\"color:#24292E\"> price;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    boolean</span><span style=\"color:#24292E\"> taxable;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Customer</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> Invoice</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Customer customer;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    InvoiceItem[] items;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> invoiceData </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">fileReadJson</span><span style=\"color:#24292E\">(</span><span style=\"color:#032F62\">\"./invoice.json\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Enjoy lax static typing here!</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the key is not present or the value is not a string.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.id;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the key is not present.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    json</span><span style=\"color:#24292E\"> items </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.items;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Converts to the domain type.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Fails at runtime if the json value does not match the type.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    Invoice invoice </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> invoiceData.</span><span style=\"color:#6F42C1\">fromJsonWithType</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Enjoy type-safe handling of json values.</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    id </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> invoice.id;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    InvoiceItem[] invoiceItems </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> invoice.items;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"network-data-program-data":{"frontmatter":{"title":"Network data == program data","description":"Processing data coming or going over the wire is a no-brainer with Ballerina. Seamlessly and selectively map network data into domain types for a range of formats, including JSON, EDI, and XML.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/github-pull-requests-to-stdout/main.bal#L22","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"configurable string githubPAT = ?;\n\ntype PR record {\n    string url;\n    string title;\n    string state;\n    string created_at;\n    string updated_at;\n};\n\npublic function main() returns error? {\n    http:Client github = check new (&#x22;https://api.github.com/repos&#x22;);\n    map<string> headers = {\n        &#x22;Accept&#x22;: &#x22;application/vnd.github.v3+json&#x22;,\n        &#x22;Authorization&#x22;: &#x22;token &#x22; + githubPAT\n    };\n    \n    // Network data == program data\n    PR[] prs = check github->/octocat/Hello\\-World/pulls(headers);\n    io:println(prs);\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#D73A49\">configurable</span><span style=\"color:#005CC5\"> string</span><span style=\"color:#24292E\"> githubPAT </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> ?</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">type</span><span style=\"color:#6F42C1\"> PR</span><span style=\"color:#D73A49\"> record</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> url;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> title;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> state;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> created_at;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">    string</span><span style=\"color:#24292E\"> updated_at;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">public</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client github </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#032F62\">\"https://api.github.com/repos\"</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    map&#x3C;</span><span style=\"color:#005CC5\">string</span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> headers </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"Accept\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"application/vnd.github.v3+json\"</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62\">        \"Authorization\"</span><span style=\"color:#D73A49\">:</span><span style=\"color:#032F62\"> \"token \"</span><span style=\"color:#24292E\"> + githubPAT</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Network data == program data</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    PR[] prs </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> github</span><span style=\"color:#D73A49\">->/</span><span style=\"color:#24292E\">octocat</span><span style=\"color:#D73A49\">/</span><span style=\"color:#24292E\">Hello\\</span><span style=\"color:#D73A49\">-</span><span style=\"color:#24292E\">World</span><span style=\"color:#D73A49\">/</span><span style=\"color:#6F42C1\">pulls</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">headers</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    io</span><span style=\"color:#D73A49\">:</span><span style=\"color:#6F42C1\">println</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">prs</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"open-source-zero-lock-in":{"frontmatter":{"title":"Open Source, Zero Lock-In","description":"Being an open-source programming language, Ballerina offers the flexibility to view, modify, and run code in any environment, thus enabling seamless migration of integration code across platforms without the need for re-implementation.<br/><br/>Why get stuck with lock-in integration platforms?","url":"","image":"images/open-source-zero-lock-in-image-transparent-bg.png"},"code":""},"resilience-engineering-built-in":{"frontmatter":{"title":"Resilience engineering, built-in","description":"The built-in language features and Ballerina library features make programming in the failure-is-normal world of distributed systems as easy for every developer.","url":"https://github.com/ballerina-guides/integration-samples/blob/main/gcalendar-new-event-to-trello-card/main.bal#L18","image":""},"code":"<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><button type=\"button\" title=\"Copy\" aria-label=\"Copy\" data=\"http:RetryConfig retryConfig = {\n    interval: 3,\n    count: 3,\n    backOffFactor: 2.0,\n    maxWaitInterval: 20\n};\nfinal trello:Client trello = check new (apiKeyConfig, {retryConfig});\n\nservice calendar:CalendarService on calendarListener {\n    remote function onNewEvent(calendar:Event payload) returns error? {\n        // Mapping from Google Calendar Event to Trello Card\n        trello:Cards card = transform(payload);\n\n        // Add the card to the Trello list\n        var _ = check trello->addCards(card);\n    }\n\n    remote function onEventDelete(calendar:Event payload) returns error? {\n    }\n\n    remote function onEventUpdate(calendar:Event payload) returns error? {\n    }\n}\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copied&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copied&#x27;);window.setTimeout(() => {this.classList.remove(&#x27;rehype-pretty-copied&#x27;);this.setAttribute(&#x27;title&#x27;, &#x27;Copy&#x27;);this.setAttribute(&#x27;aria-label&#x27;, &#x27;Copy&#x27;);}, 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><span class=\"line\"><span style=\"color:#24292E\">http</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">RetryConfig retryConfig </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    interval</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    count</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 3</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    backOffFactor</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 2.0</span><span style=\"color:#24292E\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    maxWaitInterval</span><span style=\"color:#D73A49\">:</span><span style=\"color:#005CC5\"> 20</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">final</span><span style=\"color:#24292E\"> trello</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Client trello </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#D73A49\"> new</span><span style=\"color:#24292E\"> (</span><span style=\"color:#E36209\">apiKeyConfig</span><span style=\"color:#24292E\">, {retryConfig});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">service</span><span style=\"color:#24292E\"> calendar:CalendarService </span><span style=\"color:#D73A49\">on</span><span style=\"color:#24292E\"> calendarListener {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    remote</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> onNewEvent</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">calendar</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Event payload) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Mapping from Google Calendar Event to Trello Card</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">        trello</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Cards card </span><span style=\"color:#D73A49\">=</span><span style=\"color:#6F42C1\"> transform</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">payload</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">        // Add the card to the Trello list</span></span>\n<span class=\"line\"><span style=\"color:#005CC5\">        var</span><span style=\"color:#24292E\"> _ </span><span style=\"color:#D73A49\">=</span><span style=\"color:#D73A49\"> check</span><span style=\"color:#24292E\"> trello</span><span style=\"color:#D73A49\">-></span><span style=\"color:#6F42C1\">addCards</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">card</span><span style=\"color:#24292E\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    remote</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> onEventDelete</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">calendar</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Event payload) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49\">    remote</span><span style=\"color:#D73A49\"> function</span><span style=\"color:#6F42C1\"> onEventUpdate</span><span style=\"color:#24292E\">(</span><span style=\"color:#E36209\">calendar</span><span style=\"color:#D73A49\">:</span><span style=\"color:#24292E\">Event payload) </span><span style=\"color:#D73A49\">returns</span><span style=\"color:#D73A49\"> error?</span><span style=\"color:#24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">}</span></span><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 448 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg' style='float: right;'%3E%3Ctitle%3ECopy%3C/title%3E%3Cpath d='M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z'%3E%3C/path%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg stroke='currentColor' fill='currentColor' stroke-width='0' viewBox='0 0 512 512' height='1em' width='1em' xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3ECopied%3C/title%3E%3Cpath d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'%3E%3C/path%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {background-color: transparent;border: none;right: 1px;padding: 0;width: 16px;height: 16px;display: flex;margin-top: -20px;margin-right: 8px;position: absolute;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}.Code_codeSnippet__ayQ3y button.rehype-pretty-copy {margin-top: -10px;}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre>"},"trivial-hosting-in-wso2-choreo-ipaas":{"frontmatter":{"title":"(Extra!) Trivial hosting in WSO2 Choreo","description":"Manual integrations? Scheduled integrations (cron jobs)? Triggered integrations? Integrations as APIs? No problem! Write the code, attach the repo to WSO2 Choreo, and let it do the rest.","url":"https://wso2.com/choreo/integration/","image":"images/choreo-ipaas-image-v2.png"},"code":""},"unleash-the-power-of-ai":{"frontmatter":{"title":"Unleash the power of AI","description":"With the built-in language features and Ballerina library features, incorporating AI into your integrations can be done in a matter of seconds, enabling you to quickly build intelligent and efficient workflows.","url":"/usecases/ai/","image":"images/Vectors-05.png"},"code":""}}},"__N_SSG":true}