{"pageProps":{"frontmatter":{},"content":"# Specification: Ballerina `ibm.ibmmq` Library\n\n_Authors_: @ayeshLK \\\n_Reviewers_: @NipunaRanasinghe @dilanSachi \\\n_Created_: 2024/01/28 \\\n_Updated_: 2024/02/14 \\\n_Edition_: Swan Lake \n\n## Introduction  \n\nThis is the specification for the `ibm.ibmmq` library of [Ballerina language](https://ballerina.io/), which provides the \nfunctionality to send and receive messages by connecting to an IBM MQ server.\n\nThe `ibm.ibmmq` library specification has evolved and may continue to evolve in the future. The released versions of the \nspecification can be found under the relevant GitHub tag.\n\nIf you have any feedback or suggestions about the library, start a discussion via a GitHub issue or in the Discord \nserver. Based on the outcome of the discussion, the specification and implementation can be updated. Community feedback \nis always welcome. Any accepted proposal which affects the specification is stored under `/docs/proposals`. Proposals \nunder discussion can be found with the label `type/proposal` in Github.\n\nThe conforming implementation of the specification is released to Ballerina Central. Any deviation from the specification is considered a bug.\n\n## Contents\n\n1. [Overview](#1-overview)\n2. [Queue Manager](#2-queue-manager)\n    * 2.1. [Configurations](#21-configurations)\n    * 2.2. [Initialization](#22-initialization)\n    * 2.3. [Functions](#23-functions)\n3. [Message](#3-message)\n4. [Client Options](#4-client-options)\n5. [Queue](#5-queue)\n    * 5.1. [Functions](#51-functions)\n6. [Topic](#6-topic)\n    * 6.1. [Functions](#61-functions)\n\n## 1. Overview\n\nIBM MQ is a robust messaging middleware that facilitates the secure and reliable exchange of messages between applications. \nThis specification elaborates on the usage of IBM MQ queue manager, queue, and topic. These clients allow the writing of \ndistributed applications and microservices that read, write, and process messages in parallel, at scale, and in a fault-tolerant \nmanner even in the case of network problems or machine failures.\n\nBallerina `ibm.ibmmq` provides several core APIs:\n\n- `ibmmq:QueueManager` - represents an IBM MQ queue manager.\n- `ibmmq:Queue` - represents an IBM MQ Queue client.\n- `ibmmq:Topic` - represents an IBM MQ Topic client.\n\n## 2. Queue Manager\n\nAn IBM MQ Queue Manager represents a vital abstraction for managing communication between an application and an IBM MQ server. \nIt serves as a key interface for establishing, managing, and controlling the connection between a client application \nand the IBM MQ messaging infrastructure.\n\n### 2.1 Configurations\n\n- CertKey record represents the combination of certificate, private key and private key password if it is encrypted.\n\n```ballerina\npublic type CertKey record {|\n    # A file containing the certificate\n    string certFile;\n    # A file containing the private key in PKCS8 format\n    string keyFile;\n    # Password of the private key if it is encrypted\n    string keyPassword?;\n|};\n```\n\n- SecureSocket record represents the configurations needed for secure communication with the IBM MQ server.\n\n```ballerina\npublic type SecureSocket record {|\n    # Configurations associated with `crypto:TrustStore` or single certificate file that the client trusts\n    crypto:TrustStore|string cert;\n    # Configurations associated with `crypto:KeyStore` or combination of certificate and private key of the client\n    crypto:KeyStore|CertKey key?;\n    # Name of the security provider used for SSL connections. The default value is the default security provider of the JVM\n    string provider?;\n|};\n```\n\n- SslCipherSuite type represents the SSL Cipher Suite to be used for secure communication with the IBM MQ server.\n\n```ballerina\npublic type SslCipherSuite SSL_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA|SSL_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n    |SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|SSL_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384|SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n    |SSL_ECDHE_ECDSA_WITH_NULL_SHA|SSL_ECDHE_ECDSA_WITH_RC4_128_SHA|SSL_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA|SSL_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n    |SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256|SSL_ECDHE_RSA_WITH_AES_256_CBC_SHA384|SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n    |SSL_ECDHE_RSA_WITH_NULL_SHA|SSL_ECDHE_RSA_WITH_RC4_128_SHA|SSL_RSA_WITH_3DES_EDE_CBC_SHA|SSL_RSA_WITH_AES_128_CBC_SHA\n    |SSL_RSA_WITH_AES_128_CBC_SHA256|SSL_RSA_WITH_AES_128_GCM_SHA256|SSL_RSA_WITH_AES_256_CBC_SHA|SSL_RSA_WITH_AES_256_CBC_SHA256\n    |SSL_RSA_WITH_AES_256_GCM_SHA384|SSL_RSA_WITH_DES_CBC_SHA|SSL_RSA_WITH_NULL_SHA256|SSL_RSA_WITH_RC4_128_SHA\n    |TLS12|TLS_AES_128_GCM_SHA256|TLS_AES_256_GCM_SHA384|TLS_CHACHA20_POLY1305_SHA256|TLS_AES_128_CCM_SHA256\n    |TLS_AES_128_CCM_8_SHA256|ANY|TLS13|TLS12ORHIGHER|TLS13ORHIGHER;\n```\n\n- QueueManagerConfiguration record represents the IBM MQ queue manager configurations.\n\n```ballerina\npublic type QueueManagerConfiguration record {|\n    # Name of the queue manager\n    string name;\n    # IBM MQ server host\n    string host;\n    # IBM MQ server port\n    int port = 1414;\n    # IBM MQ channel\n    string channel;\n    # IBM MQ userId\n    string userID?;\n    # IBM MQ user password\n    string password?;\n    # Configurations related to SSL/TLS encryption\n    SecureSocket secureSocket?;\n    # Defines the combination of key exchange, encryption, \n    # and integrity algorithms used for establishing a secure SSL/TLS connection\n    SslCipherSuite sslCipherSuite?;\n|};\n```\n\n### 2.2. Initialization\n\n- The `ibmmq:QueueManager` can be initialized by providing the `ibmmq:QueueManagerConfiguration`.\n\n```ballerina\n# Initialize an IBM MQ queue manager.\n# ```\n# ibmmq:QueueManager queueManager = check new(name = \"QM1\", host = \"localhost\", channel = \"DEV.APP.SVRCONN\");\n# ```\n#\n# + configurations - The configurations to be used when initializing the IBM MQ queue manager\n# + return - The `ibmmq:QueueManager` or an `ibmmq:Error` if the initialization failed\npublic isolated function init(*ibmmq:QueueManagerConfiguration configurations) returns ibmmq:Error?;\n```\n\n### 2.3. Functions\n\n- To initialize a new `ibmmq:Queue` client, the `accessQueue` function can be used.\n\n```ballerina\n# Establishes access to an IBM MQ queue on this queue manager.\n# ```\n# ibmmq:Queue queue = check queueManager.accessQueue(\"queue1\", ibmmq:MQOO_OUTPUT);\n# ```\n# \n# + queueName - Name of the queue\n# + options - The options which control the opening of the queue\n# + return - The `ibmmq:Queue` object or an `ibmmq:Error` if the operation failed\npublic isolated function accessQueue(string queueName, int options) returns ibmmq:Queue|ibmmq:Error;\n```\n\n- To initialize a new `ibmmq:Topic` client, the `accessTopic` function can be used.\n\n```ballerina\n# Establishes access to an IBM MQ topic on this queue manager.\n# ```\n# ibmmq:Topic topic = check queueManager.accessTopic(\"topic1\", ibmmq:MQOO_OUTPUT);\n# ```\n# \n# + topicName - Name of the queue\n# + options - The options which control the opening of the topic\n# + return - The `ibmmq:Queue` object or an `ibmmq:Error` if the operation failed\npublic isolated function accessTopic(string topicName, int options) returns ibmmq:Topic|ibmmq:Error;\n```\n\n- To end the connection to the IBM MQ queue manager, `disconnect` function can be used.\n\n```ballerina\n# Ends the connection to the IBM MQ queue manager.\n# ```\n# check queueManager.disconnect();\n# ```\n#\n# + return - An `ibmmq:Error` if the operation failed\npublic isolated function disconnect() returns ibmmq:Error?;\n```\n\n## 3. Message\n\nAn IBM MQ message is a fundamental unit of data that facilitates communication between applications within the IBM MQ messaging infrastructure. It encompasses not only the actual data payload but also includes metadata in the form of headers and customizable properties. This comprehensive structure enables reliable, secure, and flexible data transfer in distributed and enterprise environments.\n\n- Property record represents an IBM MQ message property.\n\n```ballerina\npublic type Property record {|\n    # Property descriptor\n    map<int> descriptor?;\n    # Property value\n    boolean|byte|byte[]|float|int|string value;\n|};\n```\n\n- MQRFH record represents the MQRFH header structure.\n\n```ballerina\npublic type MQRFH record {|\n    # Flag of the header\n    int flags = 0;\n    # Numeric encoding of data that follows NameValueString\n    int encoding = 0;\n    # Structure identifier\n    string strucId = \"RFH \";\n    # Length of the structure\n    int strucLength = 32;\n    # Structure version number\n    int version = 1;\n    # Character set identifier of data that follows NameValueString\n    int codedCharSetId = 0;\n    # Format name of data that follows NameValueString\n    string format = DEFAULT_BLANK_VALUE;\n    # Related name-value pairs\n    map<string> nameValuePairs = {};\n|};\n```\n\n- MQRFH2Field record represents a field in the MQRFH2 structure.\n\n```ballerina\npublic type MQRFH2Field record {|\n    # The name of the folder containing the field\n    readonly string folder;\n    # The field name\n    readonly string 'field;\n    # The field value\n    boolean|byte|byte[]|float|int|string value;\n|};\n```\n\n- MQRFH2 record represents the MQRFH2 header structure.\n\n```ballerina\npublic type MQRFH2 record {|\n    # Flag of the header\n    int flags = 0;\n    # Numeric encoding of data that follows NameValueData\n    int encoding = 273;\n    # Character set identifier of data that follows NameValueData\n    int codedCharSetId = -2;\n    # Contents of the variable part of the structure \n    string[] folderStrings = [];\n    # Coded character set for the NameValue data\n    int nameValueCCSID = 1208;\n    # NameValueData variable-length field\n    byte[] nameValueData = [];\n    # Length of NameValueData\n    int nameValueLength = 0;\n    # Format name of data that follows NameValueData.The name should be padded with \n    # blanks to the length of the field.\n    string format = DEFAULT_BLANK_VALUE;\n    # Structure identifier\n    string strucId = \"RFH \";\n    # Length of the structure\n    int strucLength = 36;\n    # Structure version number\n    int version = 2;\n    # Table containing all occurrences of field values matching\n    table<MQRFH2Field> key(folder, 'field) fieldValues = table [];\n|};\n```\n\n- MQCIH record represents the MQCIH header structure.\n\n```ballerina\npublic type MQCIH record {|\n    # Flag of the header\n    int flags = 0;\n    # Numeric encoding of data that follows NameValueData\n    int encoding = 0;\n    # Character set identifier of data that follows NameValueString\n    int codedCharSetId = 0;\n    # MQ format name of data that follows MQCIH\n    string format = DEFAULT_BLANK_VALUE;\n    # Structure identifier \n    string strucId = \"CIH \";\n    # Length of the structure\n    int strucLength = 180;\n    # Structure version number\n    int version = 2;\n    # Return code from bridge \n    int returnCode = 0;\n    # MQ completion code or CICS EIBRESP\n    int compCode = 0;\n    # MQ reason or feedback code, or CICS EIBRESP2\n    int reason = 0;\n    # Unit-of-work control\n    int UOWControl = 273;\n    # Wait interval for MQGET call issued by bridge task\n    int waitInterval = -2;\n    # Link type\n    int linkType = 1;\n    # Bridge facility release time \n    int facilityKeepTime = 0;\n    # Send/receive ADS descriptor\n    int ADSDescriptor = 0;\n    # Whether task can be conversational\n    int conversationalTask = 0;\n    # Status at end of task\n    int taskEndStatus = 0;\n    # Bridge facility token\n    byte[] facility = [];\n    # MQ call name or CICS EIBFN function\n    string 'function = \"\";\n    # Abend code\n    string abendCode = \"\";\n    # Password or passticket\n    string authenticator = \"\";\n    # MQ format name of reply message\n    string replyToFormat = \"\";\n    # Remote CICS system Id to use \n    string remoteSysId = \"\";\n    # CICS RTRANSID to use\n    string remoteTransId = \"\";\n    # Transaction to attach\n    string transactionId = \"\";\n    # Terminal emulated attributes\n    string facilityLike = \"\";\n    # AID key\n    string attentionId = \"\";\n    # Transaction start code\n    string startCode = \"\";\n    # Abend transaction code\n    string cancelCode = \"\";\n    # Next transaction to attach\n    string nextTransactionId = \"\";\n    # Reserved\n    int inputItem = 0;\n|};\n```\n\n- MQIIH record represents the MQIIH header structure.\n\n```ballerina\npublic type MQIIH record {|\n    # Flag of the header\n    int flags = 0;\n    # Numeric encoding of data that follows NameValueString\n    int encoding = 0;\n    # Structure identifier\n    string strucId = \"IIH \";\n    # Length of the structure\n    int strucLength = 84;\n    # Structure version number\n    int version = 1;\n    # Character set identifier of data that follows NameValueString\n    int codedCharSetId = 0;\n    # Format name of data that follows NameValueString\n    string format = DEFAULT_BLANK_VALUE;\n    # The logical terminal override, placed in the IO PCB field\n    string lTermOverride = DEFAULT_BLANK_VALUE;\n    # The message format services map name, placed in the IO PCB field\n    string mfsMapName = DEFAULT_BLANK_VALUE;\n    # This is the MQ format name of the reply message that is sent \n    # in response to the current message\n    string replyToFormat = DEFAULT_BLANK_VALUE;\n    # The RACF password or PassTicket\n    string authenticator = DEFAULT_BLANK_VALUE;\n    # This is the transaction instance identifier\n    byte[] tranInstanceId = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    # This indicates the IMS conversation state\n    string:Char tranState = \" \";\n    # IMS commit mode\n    string:Char commitMode = \"0\";\n    # This indicates the IMS security processing required\n    string:Char securityScope = \"C\";\n|};\n```\n\n- Header type represents a union of header structures supported by the IBM MQ connector.\n\n```ballerina\npublic type Header MQRFH2|MQRFH|MQCIH|MQIIH;\n```\n\n- Message record represents an IBM MQ message.\n\n```ballerina\npublic type Message record {|\n    # Message properties\n    map<Property> properties?;\n    # Format associated with the header\n    string format?;\n    # Message identifier\n    byte[] messageId?;\n    # Correlation identifier\n    byte[] correlationId?;\n    # Message lifetime\n    int expiry?;\n    # Message priority\n    int priority?;\n    # Message persistence\n    int persistence?;\n    # Message type\n    int messageType?;\n    # Type of application that put the message\n    int putApplicationType?;\n    # Name of reply queue\n    string replyToQueueName?;\n    # Name of reply queue manager\n    string replyToQueueManagerName?;\n    # Headers to be sent in the message\n    Header[] headers?;\n    # Message payload\n    byte[] payload;\n|};\n```\n\n## 4. Client Options\n\n- `GetMessageOptions` record represents client options which can be used when retrieving messages from an IBM MQ destination.\n\n```ballerina\npublic type GetMessageOptions record {|\n    # Get message option\n    int options = MQGMO_NO_WAIT;\n    # The maximum time (in seconds) that a `get` call waits for a suitable message to arrive. It is used in conjunction with `ibmmq.MQGMO_WAIT`.\n    int waitInterval = 10;\n    # Message selection criteria\n    MatchOptions matchOptions?;\n|};\n```\n\n- `MatchOptions` record represents the selection criteria that determine which message is retrieved.\n\n```ballerina\npublic type MatchOptions record {|\n    # The message identifier of the message which needs to be retrieved\n    byte[] messageId?;\n    # The Correlation identifier of the message which needs to be retrieved\n    byte[] correlationId?;\n|};\n```\n\n## 5. Queue\n\nAn IBM MQ Queue enables applications to interact with an IBM MQ queue to exchange messages.\n\n### 5.1. Functions\n\n- To send a message `put` function can be used.\n\n```ballerina\n# Puts a message to an IBM MQ queue.\n# ```\n# check queue->put({payload: \"Hello World\".toBytes()});\n# ```\n# \n# + message - IBM MQ message\n# + options - Options controlling the action of the put operation. Can be a combination of \n              one or more `ibmmq:MQPMO_*` options and values can combined using either '+' or '|'\n# + return - An `ibmmq:Error` if the operation fails or else `()`\nisolated remote function put(ibmmq:Message message, int options = ibmmq:MQPMO_NO_SYNCPOINT) returns ibmmq:Error?;\n```\n\n- To receive a message `get` function can be used.\n\n```ballerina\n# Retrieves a message from an IBM MQ queue.\n# ```\n# ibmmq:Message? message = check queue->get();\n# ```\n# \n# + getMessageOptions - Options to control message retrieval\n# + return - An `ibmmq:Message` if there is a message in the queue, `()` if there \n#           is no message or else `ibmmq:Error` if the operation fails\nisolated remote function get(*ibmmq:GetMessageOptions getMessageOptions) returns ibmmq:Message|ibmmq:Error?;\n```\n\n- To close the Queue client, the `close` function can be used.\n\n```ballerina\n# Closes the IBM MQ queue object. No further operations on this object are permitted after it is closed.\n# ```\n# check check queue->close();\n# ```\n# \n# + return - An `ibmmq:Error` if the operation fails or else `()`\nisolated remote function close() returns ibmmq:Error?\n```\n\n## 6. Topic\n\nAn IBM MQ Topic enables applications to interact with an IBM MQ Topic to exchange messages.\n\n### 6.1. Functions\n\n- To send a message `put` function can be used.\n\n```ballerina\n# Puts a message to an IBM MQ topic.\n#```\n# check topic->put({payload: \"Hello World\".toBytes()});\n#```\n# \n# + message - IBM MQ message\n# + options - Options controlling the action of the put operation. Can be a combination of \n              one or more `ibmmq:MQPMO_*` options and values can combined using either '+' or '|'\n# + return - An `ibmmq:Error` if the operation fails or else `()`\nisolated remote function put(ibmmq:Message message, int options = ibmmq:MQPMO_NO_SYNCPOINT) returns ibmmq:Error?;\n```\n\n- To receive a message `get` function can be used.\n\n```ballerina\n# Retrieves a message from an IBM MQ topic.\n# ```\n# ibmmq:Message? message = check topic->get();\n# ```\n# \n# + getMessageOptions - Options to control message retrieval\n# + return - An `ibmmq:Message` if there is a message in the queue, `()` if there \n#           is no message or else `ibmmq:Error` if the operation fails\nisolated remote function get(*ibmmq:GetMessageOptions getMessageOptions) returns ibmmq:Message|ibmmq:Error?;\n```\n\n- To close the Topic client, the `close` function can be used.\n\n```ballerina\n# Closes the IBM MQ topic object. No further operations on this object are permitted after it is closed.\n# ```\n# check check topic->close();\n# ```\n# \n# + return - An `ibmmq:Error` if the operation fails or else `()`\nisolated remote function close() returns ibmmq:Error?\n```\n","codeSnippets":"[[-926202664,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> CertKey</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # A file containing the certificate</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> certFile;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # A file containing the private key in PKCS8 format</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> keyFile;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Password of the private key if it is encrypted</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> keyPassword?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1430554672,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> SecureSocket</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Configurations associated with `crypto:TrustStore` or single certificate file that the client trusts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">TrustStore</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">string cert;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Configurations associated with `crypto:KeyStore` or combination of certificate and private key of the client</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    crypto</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">KeyStore</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">CertKey key?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Name of the security provider used for SSL connections. The default value is the default security provider of the JVM</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> provider?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1997210917,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> SslCipherSuite</span><span style=\\\"color:#D73A49\\\"> SSL_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA|SSL_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |SSL_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|SSL_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384|SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |SSL_ECDHE_ECDSA_WITH_NULL_SHA|SSL_ECDHE_ECDSA_WITH_RC4_128_SHA|SSL_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA|SSL_ECDHE_RSA_WITH_AES_128_CBC_SHA256</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |SSL_ECDHE_RSA_WITH_AES_128_GCM_SHA256|SSL_ECDHE_RSA_WITH_AES_256_CBC_SHA384|SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |SSL_ECDHE_RSA_WITH_NULL_SHA|SSL_ECDHE_RSA_WITH_RC4_128_SHA|SSL_RSA_WITH_3DES_EDE_CBC_SHA|SSL_RSA_WITH_AES_128_CBC_SHA</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |SSL_RSA_WITH_AES_128_CBC_SHA256|SSL_RSA_WITH_AES_128_GCM_SHA256|SSL_RSA_WITH_AES_256_CBC_SHA|SSL_RSA_WITH_AES_256_CBC_SHA256</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |SSL_RSA_WITH_AES_256_GCM_SHA384|SSL_RSA_WITH_DES_CBC_SHA|SSL_RSA_WITH_NULL_SHA256|SSL_RSA_WITH_RC4_128_SHA</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |TLS12|TLS_AES_128_GCM_SHA256|TLS_AES_256_GCM_SHA384|TLS_CHACHA20_POLY1305_SHA256|TLS_AES_128_CCM_SHA256</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    |TLS_AES_128_CCM_8_SHA256|ANY|TLS13|TLS12ORHIGHER|TLS13ORHIGHER</span><span style=\\\"color:#24292E\\\">;</span></span></code></pre>\"],[-1720539015,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> QueueManagerConfiguration</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Name of the queue manager</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> name;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # IBM MQ server host</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> host;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # IBM MQ server port</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> port </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1414</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # IBM MQ channel</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> channel;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # IBM MQ userId</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> userID?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # IBM MQ user password</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> password?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Configurations related to SSL/TLS encryption</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    SecureSocket secureSocket</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Defines the combination of key exchange, encryption, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # and integrity algorithms used for establishing a secure SSL/TLS connection</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    SslCipherSuite sslCipherSuite</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-686915456,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Initialize an IBM MQ queue manager.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ibmmq:QueueManager queueManager = check new(name = \\\"QM1\\\", host = \\\"localhost\\\", channel = \\\"DEV.APP.SVRCONN\\\");</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">configurations</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The configurations to be used when initializing the IBM MQ queue manager</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The `ibmmq:QueueManager` or an `ibmmq:Error` if the initialization failed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> init</span><span style=\\\"color:#24292E\\\">(*</span><span style=\\\"color:#E36209\\\">ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">QueueManagerConfiguration configurations) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[1554402550,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Establishes access to an IBM MQ queue on this queue manager.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ibmmq:Queue queue = check queueManager.accessQueue(\\\"queue1\\\", ibmmq:MQOO_OUTPUT);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">queueName</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Name of the queue</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">options</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The options which control the opening of the queue</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The `ibmmq:Queue` object or an `ibmmq:Error` if the operation failed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> accessQueue</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> queueName</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> options</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Queue</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ibmmq:Error;</span></span></code></pre>\"],[134395706,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Establishes access to an IBM MQ topic on this queue manager.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ibmmq:Topic topic = check queueManager.accessTopic(\\\"topic1\\\", ibmmq:MQOO_OUTPUT);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">topicName</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Name of the queue</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">options</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The options which control the opening of the topic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">The `ibmmq:Queue` object or an `ibmmq:Error` if the operation failed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> accessTopic</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#E36209\\\"> topicName</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> options</span><span style=\\\"color:#24292E\\\">) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Topic</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ibmmq:Error;</span></span></code></pre>\"],[-1771333130,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Ends the connection to the IBM MQ queue manager.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check queueManager.disconnect();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">An `ibmmq:Error` if the operation failed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> isolated</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> disconnect</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[269704660,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Property</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Property descriptor</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> descriptor</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Property value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">float</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> value;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-9067222,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> MQRFH</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Flag of the header</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> flags </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Numeric encoding of data that follows NameValueString</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> encoding </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Structure identifier</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> strucId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"RFH \\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Length of the structure</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> strucLength </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 32</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Structure version number</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> version </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Character set identifier of data that follows NameValueString</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> codedCharSetId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Format name of data that follows NameValueString</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> format </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_BLANK_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Related name-value pairs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> nameValuePairs </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> {};</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1563500204,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> MQRFH2Field</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The name of the folder containing the field</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    readonly</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> folder;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The field name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    readonly</span><span style=\\\"color:#005CC5\\\"> string</span><span style=\\\"color:#24292E\\\"> 'field;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The field value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    boolean</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">byte</span><span style=\\\"color:#24292E\\\">[]</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">float</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#005CC5\\\">string</span><span style=\\\"color:#24292E\\\"> value;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[1966759130,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> MQRFH2</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Flag of the header</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> flags </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Numeric encoding of data that follows NameValueData</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> encoding </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 273</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Character set identifier of data that follows NameValueData</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> codedCharSetId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> -</span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Contents of the variable part of the structure </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\">[] folderStrings </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Coded character set for the NameValue data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> nameValueCCSID </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1208</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # NameValueData variable-length field</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] nameValueData </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Length of NameValueData</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> nameValueLength </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Format name of data that follows NameValueData.The name should be padded with </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # blanks to the length of the field.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> format </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_BLANK_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Structure identifier</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> strucId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"RFH \\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Length of the structure</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> strucLength </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 36</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Structure version number</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> version </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 2</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Table containing all occurrences of field values matching</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    table&#x3C;</span><span style=\\\"color:#24292E\\\">MQRFH2Field</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#D73A49\\\"> key</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">folder</span><span style=\\\"color:#24292E\\\">, 'field) fieldValues </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> table</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-2144728898,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> MQCIH</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Flag of the header</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> flags </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Numeric encoding of data that follows NameValueData</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> encoding </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Character set identifier of data that follows NameValueString</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> codedCharSetId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # MQ format name of data that follows MQCIH</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> format </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_BLANK_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Structure identifier </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> strucId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"CIH \\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Length of the structure</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> strucLength </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 180</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Structure version number</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> version </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 2</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Return code from bridge </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> returnCode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # MQ completion code or CICS EIBRESP</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> compCode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # MQ reason or feedback code, or CICS EIBRESP2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> reason </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Unit-of-work control</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> UOWControl </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 273</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Wait interval for MQGET call issued by bridge task</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> waitInterval </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#D73A49\\\"> -</span><span style=\\\"color:#005CC5\\\">2</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Link type</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> linkType </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Bridge facility release time </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> facilityKeepTime </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Send/receive ADS descriptor</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> ADSDescriptor </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Whether task can be conversational</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> conversationalTask </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Status at end of task</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> taskEndStatus </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Bridge facility token</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] facility </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # MQ call name or CICS EIBFN function</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> 'function </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Abend code</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> abendCode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Password or passticket</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> authenticator </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # MQ format name of reply message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> replyToFormat </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Remote CICS system Id to use </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> remoteSysId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # CICS RTRANSID to use</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> remoteTransId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Transaction to attach</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> transactionId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Terminal emulated attributes</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> facilityLike </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # AID key</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> attentionId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Transaction start code</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> startCode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Abend transaction code</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> cancelCode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Next transaction to attach</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> nextTransactionId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Reserved</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> inputItem </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1934056716,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> MQIIH</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Flag of the header</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> flags </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Numeric encoding of data that follows NameValueString</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> encoding </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Structure identifier</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> strucId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"IIH \\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Length of the structure</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> strucLength </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 84</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Structure version number</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> version </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 1</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Character set identifier of data that follows NameValueString</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> codedCharSetId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 0</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Format name of data that follows NameValueString</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> format </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_BLANK_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The logical terminal override, placed in the IO PCB field</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> lTermOverride </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_BLANK_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The message format services map name, placed in the IO PCB field</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> mfsMapName </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_BLANK_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # This is the MQ format name of the reply message that is sent </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # in response to the current message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> replyToFormat </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_BLANK_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The RACF password or PassTicket</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> authenticator </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> DEFAULT_BLANK_VALUE;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # This is the transaction instance identifier</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] tranInstanceId </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> [</span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">, </span><span style=\\\"color:#005CC5\\\">0</span><span style=\\\"color:#24292E\\\">];</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # This indicates the IMS conversation state</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Char tranState </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\" \\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # IMS commit mode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Char commitMode </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"0\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # This indicates the IMS security processing required</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Char securityScope </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#032F62\\\"> \\\"C\\\"</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[970535799,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Header</span><span style=\\\"color:#D73A49\\\"> MQRFH2|MQRFH|MQCIH|MQIIH</span><span style=\\\"color:#24292E\\\">;</span></span></code></pre>\"],[1010124852,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> Message</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Message properties</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">    map&#x3C;</span><span style=\\\"color:#24292E\\\">Property</span><span style=\\\"color:#D73A49\\\">></span><span style=\\\"color:#24292E\\\"> properties</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Format associated with the header</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> format?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Message identifier</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] messageId?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Correlation identifier</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] correlationId?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Message lifetime</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> expiry?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Message priority</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> priority?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Message persistence</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> persistence?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Message type</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> messageType?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Type of application that put the message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> putApplicationType?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Name of reply queue</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> replyToQueueName?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Name of reply queue manager</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    string</span><span style=\\\"color:#24292E\\\"> replyToQueueManagerName?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Headers to be sent in the message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    Header[] headers</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Message payload</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] payload;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[102149152,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> GetMessageOptions</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Get message option</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> options </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#24292E\\\"> MQGMO_NO_WAIT;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The maximum time (in seconds) that a `get` call waits for a suitable message to arrive. It is used in conjunction with `ibmmq.MQGMO_WAIT`.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    int</span><span style=\\\"color:#24292E\\\"> waitInterval </span><span style=\\\"color:#D73A49\\\">=</span><span style=\\\"color:#005CC5\\\"> 10</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # Message selection criteria</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">    MatchOptions matchOptions</span><span style=\\\"color:#D73A49\\\">?</span><span style=\\\"color:#24292E\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1594605496,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">public</span><span style=\\\"color:#D73A49\\\"> type</span><span style=\\\"color:#6F42C1\\\"> MatchOptions</span><span style=\\\"color:#D73A49\\\"> record</span><span style=\\\"color:#24292E\\\"> {</span><span style=\\\"color:#D73A49\\\">|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The message identifier of the message which needs to be retrieved</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] messageId?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">    # The Correlation identifier of the message which needs to be retrieved</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5\\\">    byte</span><span style=\\\"color:#24292E\\\">[] correlationId?;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">};</span></span></code></pre>\"],[-1983107795,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Puts a message to an IBM MQ queue.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check queue->put({payload: \\\"Hello World\\\".toBytes()});</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">message</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">IBM MQ message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">options</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Options controlling the action of the put operation. Can be a combination of </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">              one or more </span><span style=\\\"color:#032F62\\\">`ibmmq:MQPMO_*`</span><span style=\\\"color:#24292E\\\"> options and values can combined using either '</span><span style=\\\"color:#D73A49\\\">+</span><span style=\\\"color:#24292E\\\">' or '</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">An `ibmmq:Error` if the operation fails or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> put</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message message, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> options</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#E36209\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">MQPMO_NO_SYNCPOINT) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[1524794061,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Retrieves a message from an IBM MQ queue.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ibmmq:Message? message = check queue->get();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">getMessageOptions</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Options to control message retrieval</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">An `ibmmq:Message` if there is a message in the queue, `()` if there </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#           is no message or else `ibmmq:Error` if the operation fails</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\">(*</span><span style=\\\"color:#E36209\\\">ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">GetMessageOptions getMessageOptions) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ibmmq:Error?;</span></span></code></pre>\"],[411595592,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Closes the IBM MQ queue object. No further operations on this object are permitted after it is closed.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check check queue->close();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">An `ibmmq:Error` if the operation fails or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> close</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?</span></span></code></pre>\"],[-207766979,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Puts a message to an IBM MQ topic.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check topic->put({payload: \\\"Hello World\\\".toBytes()});</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">message</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">IBM MQ message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">options</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Options controlling the action of the put operation. Can be a combination of </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E\\\">              one or more </span><span style=\\\"color:#032F62\\\">`ibmmq:MQPMO_*`</span><span style=\\\"color:#24292E\\\"> options and values can combined using either '</span><span style=\\\"color:#D73A49\\\">+</span><span style=\\\"color:#24292E\\\">' or '</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">'</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">An `ibmmq:Error` if the operation fails or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> put</span><span style=\\\"color:#24292E\\\">(</span><span style=\\\"color:#E36209\\\">ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message message, </span><span style=\\\"color:#005CC5\\\">int</span><span style=\\\"color:#E36209\\\"> options</span><span style=\\\"color:#D73A49\\\"> =</span><span style=\\\"color:#E36209\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">MQPMO_NO_SYNCPOINT) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?;</span></span></code></pre>\"],[-596275823,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Retrieves a message from an IBM MQ topic.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ibmmq:Message? message = check topic->get();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">getMessageOptions</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">Options to control message retrieval</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">An `ibmmq:Message` if there is a message in the queue, `()` if there </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\">#           is no message or else `ibmmq:Error` if the operation fails</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> get</span><span style=\\\"color:#24292E\\\">(*</span><span style=\\\"color:#E36209\\\">ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">GetMessageOptions getMessageOptions) </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Message</span><span style=\\\"color:#D73A49\\\">|</span><span style=\\\"color:#24292E\\\">ibmmq:Error?;</span></span></code></pre>\"],[1447816456,\"<pre class=\\\"shiki github-light\\\" style=\\\"background-color:#fff;color:#24292e\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># Closes the IBM MQ topic object. No further operations on this object are permitted after it is closed.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># check check topic->close();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># ```</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D\\\"># </span><span style=\\\"color:#D73A49\\\">+ </span><span style=\\\"color:#24292E\\\">return</span><span style=\\\"color:#D73A49\\\"> - </span><span style=\\\"color:#6A737D\\\">An `ibmmq:Error` if the operation fails or else `()`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49\\\">isolated</span><span style=\\\"color:#D73A49\\\"> remote</span><span style=\\\"color:#D73A49\\\"> function</span><span style=\\\"color:#6F42C1\\\"> close</span><span style=\\\"color:#24292E\\\">() </span><span style=\\\"color:#D73A49\\\">returns</span><span style=\\\"color:#24292E\\\"> ibmmq</span><span style=\\\"color:#D73A49\\\">:</span><span style=\\\"color:#24292E\\\">Error?</span></span></code></pre>\"]]"},"__N_SSG":true}